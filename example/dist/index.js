var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);

// ../node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports, module) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactVersion = "18.3.1";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. " + "This is a no-op, but it might indicate a bug in your application. " + "Instead, assign to `this.state` directly or define a `state = {};` " + "class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a " + "function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in " + "componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see " + "https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". ' + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self2 = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element === null || element === undefined) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape2("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
              return c2;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i = 0;i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. " + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === undefined) {
              error("lazy: Expected the result of a dynamic imp" + "ort() call. " + `Instead received: %s

Your code should look like: 
  ` + "const MyComponent = lazy(() => imp" + `ort('./MyComponent'))

` + "Did you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error("lazy: Expected the result of a dynamic imp" + "ort() call. " + `Instead received: %s

Your code should look like: 
  ` + "const MyComponent = lazy(() => imp" + "ort('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to " + "a lazy component import. Either specify them where the component " + "is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to " + "a lazy component import. Either specify them where the component " + "is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` " + "component. Instead of forwardRef(memo(...)), use " + "memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. " + "Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead " + "received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + ` one of the following reasons:
` + `1. You might have mismatching versions of React and the renderer (such as React DOM)
` + `2. You might be breaking the Rules of Hooks
` + `3. You might have more than one copy of React in the same app
` + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context2) {
        var dispatcher = resolveDispatcher();
        {
          if (Context2._context !== undefined) {
            var realContext = Context2._context;
            if (realContext.Consumer === Context2) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be " + "removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context2) {
              error("Calling useContext(Context.Provider) is not supported. " + "Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context2);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn3, construct) {
        if (!fn3 || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn3);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn3, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn3.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn3();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
              c2--;
            }
            for (;s >= 1 && c2 >= 0; s--, c2--) {
              if (sampleLines[s] !== controlLines[c2]) {
                if (s !== 1 || c2 !== 1) {
                  do {
                    s--;
                    c2--;
                    if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      if (fn3.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn3.displayName);
                      }
                      {
                        if (typeof fn3 === "function") {
                          componentFrameCache.set(fn3, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn3 ? fn3.displayName || fn3.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn3 === "function") {
            componentFrameCache.set(fn3, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn3, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn3, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return `

Check the render method of \`` + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = `

Check the top-level render call using <` + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.' + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (isArray(node)) {
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2;i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in " + "a future major release. Consider using JSX " + "or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly " + "before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2;i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set;
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. " + "If this is due to a subscription please re-write it to use React provided hooks. " + "Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, " + "so enqueuing tasks via await act(async () => ...) will fail. " + "Please file an issue at https://github.com/facebook/react/issues " + "if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel;
              channel.port1.onmessage = callback;
              channel.port2.postMessage(undefined);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActScopeDepth);
                  reject(error2);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. " + "This could lead to unexpected testing behaviour, " + "interleaving multiple act calls and mixing their " + "scopes. " + "You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. " + "Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error2) {
              reject(error2);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (;i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error2) {
              queue = queue.slice(i + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.act = act;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// ../node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  var react_development = __toESM(require_react_development(), 1);
  if (false) {
  } else {
    module.exports = react_development;
  }
});

// ../node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (index > 0) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index < halfLength) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, " + "forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1000 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel;
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// ../node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  var scheduler_development = __toESM(require_scheduler_development(), 1);
  if (false) {
  } else {
    module.exports = scheduler_development;
  }
});

// ../node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  var Scheduler = __toESM(require_scheduler(), 1);
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = true;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var allNativeEvents = new Set;
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i = 0;i < dependencies.length; i++) {
          allNativeEvents.add(dependencies[i]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s." + " This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s." + " This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s." + " This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props)" + " must be strings, not %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix2 = name.toLowerCase().slice(0, 5);
              return prefix2 !== "data-" && prefix2 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. " + "Use event handlers instead if you can. If you need to generate unsafe HTML try " + "using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var { attributeName, attributeNamespace } = propertyInfo;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn3, construct) {
        if (!fn3 || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn3);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn3, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn3.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn3();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
              c2--;
            }
            for (;s >= 1 && c2 >= 0; s--, c2--) {
              if (sampleLines[s] !== controlLines[c2]) {
                if (s !== 1 || c2 !== 1) {
                  do {
                    s--;
                    c2--;
                    if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      if (fn3.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn3.displayName);
                      }
                      {
                        if (typeof fn3 === "function") {
                          componentFrameCache.set(fn3, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn3 ? fn3.displayName || fn3.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn3 === "function") {
            componentFrameCache.set(fn3, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn3, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn3, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var { tag, type } = fiber;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultValue`. Otherwise, " + "set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultChecked`. Otherwise, " + "set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node[valueField]);
        }
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var { get: get2, set: set2 } = descriptor;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get2.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set2.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. " + "Input elements must be either controlled or uncontrolled " + "(specify either the checked prop, or the defaultChecked prop, but not " + "both). Decide between using a controlled or uncontrolled input " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. " + "Input elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled input " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. " + "This is likely caused by the value changing from undefined to " + "a defined value, which should not happen. " + "Decide between using a controlled or uncontrolled input " + "element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. " + "This is likely caused by the value changing from a defined to " + "undefined, which should not happen. " + "Decide between using a controlled or uncontrolled input " + "element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString(value);
            }
          } else if (node.value !== toString(value)) {
            node.value = toString(value);
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === undefined || props.value === null)) {
            return;
          }
          var initialValue = toString(node._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== "") {
          node.name = "";
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== "") {
          node.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i = 0;i < group.length; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the " + "same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (value == null) {
            node.defaultValue = toString(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. " + "Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows " + "which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of " + "setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return `

Check the render method of \`` + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i = 0;i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if " + "`multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar " + "value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i = 0;i < selectedValues.length; i++) {
            selectedValue["$" + selectedValues[i]] = true;
          }
          for (var _i = 0;_i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0;_i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: undefined
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled select " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. " + "Textarea elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled textarea " + "and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var { children, defaultValue } = props;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting " + "children on <textarea>.");
            }
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i = 0;i < longhands.length; i++) {
            expanded[longhands[i]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a " + "conflicting property is set (%s) can lead to styling bugs. To " + "avoid this, don't mix shorthand and non-shorthand properties " + "for the same value; instead, replace the shorthand with " + "separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. " + "Please visit https://reactjs.org/link/dangerously-set-inner-html " + "for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by " + "React. It is now your responsibility to guarantee that none of " + "those nodes are unexpectedly modified or duplicated. This is " + "probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, " + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + "using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. " + "For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. " + "For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. " + "Consider using an empty array when `multiple` is set to `true` " + "to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. " + "Consider using an empty string to clear the component or `undefined` " + "for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. " + "All React events are normalized to bubble, so onFocusIn and onFocusOut " + "are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var { registrationNameDependencies: registrationNameDependencies2, possibleRegistrationNames: possibleRegistrationNames2 } = eventRegistry;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. " + "React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. " + "For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. " + "Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast " + "the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast " + "the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you " + "intentionally want it to appear in the DOM as a custom " + "attribute, spell it as lowercase `%s` instead. " + "If you accidentally passed it from a parent component, remove " + "it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error("Received `%s` for a non-boolean attribute `%s`.\n\n" + "If you want to write it to the DOM, pass a string instead: " + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error("Received `%s` for a non-boolean attribute `%s`.\n\n" + "If you want to write it to the DOM, pass a string instead: " + `%s="%s" or %s={value.toString()}.

` + "If you used to conditionally omit it with %s={condition && value}, " + "pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. " + "%s " + "Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, " + "or pass a string or number value to keep it in the DOM. " + "For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, " + "or pass a string or number value to keep them in the DOM. " + "For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i = 0;i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn3, bookkeeping) {
        return fn3(bookkeeping);
      };
      var flushSyncImpl = function() {
      };
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn3, a, b) {
        if (isInsideEventHandler) {
          return fn3(a, b);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn3, a, b);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a, b, c2, d, e, f2) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c2, d, e, f2) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c2, d, e, f2) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c2, d, e, f2) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== undefined;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update4 = 4;
      var ChildDeletion = 16;
      var ContentReset = 32;
      var Callback = 64;
      var DidCapture = 128;
      var ForceClientRender = 256;
      var Ref = 512;
      var Snapshot = 1024;
      var Passive = 2048;
      var Hydrating = 4096;
      var Visibility = 8192;
      var StoreConsistency = 16384;
      var LifecycleEffectMask = Passive | Update4 | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = 32767;
      var Incomplete = 32768;
      var ShouldCapture = 65536;
      var ForceUpdateForLegacySuspense = 131072;
      var Forked = 1048576;
      var RefStatic = 2097152;
      var LayoutStatic = 4194304;
      var PassiveStatic = 8388608;
      var MountLayoutDev = 16777216;
      var MountPassiveDev = 33554432;
      var BeforeMutationMask = Update4 | Snapshot | 0;
      var MutationMask = Placement | Update4 | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update4 | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a.alternate !== b) {
            throw new Error("Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null) {
            return match;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null) {
              return match;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback;
      var cancelCallback = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var unstable_yieldValue2 = Scheduler.unstable_yieldValue;
      var unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root2, undefined, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue2 === "function") {
            unstable_setDisableYieldValue2(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map = new Map;
          var lane = 1;
          for (var index2 = 0;index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = 0;
      var ConcurrentMode = 1;
      var ProfileMode = 2;
      var StrictLegacyMode = 8;
      var StrictEffectsMode = 16;
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var InputContinuousHydrationLane = 2;
      var InputContinuousLane = 4;
      var DefaultHydrationLane = 8;
      var DefaultLane = 16;
      var TransitionHydrationLane = 32;
      var TransitionLanes = 4194240;
      var TransitionLane1 = 64;
      var TransitionLane2 = 128;
      var TransitionLane3 = 256;
      var TransitionLane4 = 512;
      var TransitionLane5 = 1024;
      var TransitionLane6 = 2048;
      var TransitionLane7 = 4096;
      var TransitionLane8 = 8192;
      var TransitionLane9 = 16384;
      var TransitionLane10 = 32768;
      var TransitionLane11 = 65536;
      var TransitionLane12 = 131072;
      var TransitionLane13 = 262144;
      var TransitionLane14 = 524288;
      var TransitionLane15 = 1048576;
      var TransitionLane16 = 2097152;
      var RetryLanes = 130023424;
      var RetryLane1 = 4194304;
      var RetryLane2 = 8388608;
      var RetryLane3 = 16777216;
      var RetryLane4 = 33554432;
      var RetryLane5 = 67108864;
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = 134217728;
      var NonIdleLanes = 268435455;
      var IdleHydrationLane = 268435456;
      var IdleLane = 536870912;
      var OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            nextLanes |= entanglements[index2];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var eventTime = eventTimes[index2];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5000;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var expirationTime = expirationTimes[index2];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index2] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a, b) {
        return a & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i = 0;i < TotalLanes; i++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
        var eventTimes = root2.eventTimes;
        var index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] = NoLanes;
          eventTimes[index2] = NoTimestamp;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
            entanglements[index2] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn3) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn3();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
      }
      function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
      }
      function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn3) {
        _attemptSynchronousHydration = fn3;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn3) {
        attemptContinuousHydration = fn3;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn3) {
        attemptHydrationAtCurrentPriority = fn3;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn3) {
        getCurrentUpdatePriority$1 = fn3;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn3) {
        attemptHydrationAtPriority = fn3;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map;
      var queuedPointerCaptures = new Map;
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i = 0;
        for (;i < queuedExplicitHydrationTargets.length; i++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1;i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0;_i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0;start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1;end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === undefined)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") {
          return;
        }
        {
          setDefaultValue(node, "number", node.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function is(x, y4) {
        return x === y4 && (x !== 0 || 1 / x === 1 / y4) || x !== x && y4 !== y4;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0;i < keysA.length; i++) {
          var currentKey = keysA[i];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i = 0;i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map;
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i = 0;i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i = dispatchListeners.length - 1;i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0;_i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i = 0;i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + "This is a bug in React. Please file an issue.", domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + "This is a bug in React. Please file an issue.", domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA;tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB;tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\n" + "If you used to conditionally omit it with %s={condition && value}, " + "pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0;i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i];
          var propValue = updatePayload[i + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. " + "Use PascalCase for React components, " + "or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script><" + "/script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. " + "If you meant to render a React component, start its name with " + "an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : undefined;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set;
          var attributes = domElement.attributes;
          for (var _i = 0;_i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
            var serverValue = undefined;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + "each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by " + "the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of " + "<%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : undefined;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        }
        retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          if (container.documentElement) {
            container.removeChild(container.documentElement);
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (;node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) {
          elementListenerSet = node[internalEventHandlersKey] = new Set;
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (;i < queue.length; i++) {
              var callback = queue[i];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index2 + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file " + "an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was " + "rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. " + "This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. " + "This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictLegacyMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set;
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set;
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set;
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set;
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move code with side effects to componentDidMount, and set initial state in the constructor.
` + `
Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + `static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
` + `
Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + `
Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move code with side effects to componentDidMount, and set initial state in the constructor.
` + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + `
Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + `static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
` + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + `
Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + `
Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map;
        var didWarnAboutLegacyContext = new Set;
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set;
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree." + `

The old API will be supported in all 16.x releases, but applications ` + "using it should migrate to the new version." + `

Please update the following components: %s` + `

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map;
        };
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error("Each child in a list should have a unique " + '"key" prop. See https://reactjs.org/link/warning-keys for ' + "more information.");
        };
      }
      function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self) && !(element._owner && element._owner.tag !== ClassComponent) && !(typeof element.type === "function" && !isReactClass(element.type)) && element._owner) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('Component "%s" contains the string ref "%s". Support for string refs ' + "will be removed in a future major release. We recommend using " + "useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", componentName, mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. " + "We recommend using useRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + "bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ` the following reasons:
` + `1. You may be adding a ref to a function component
` + `2. You may be adding a ref to a component that was not created inside a component's render method
` + `3. You have multiple copies of React loaded
` + "See https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map;
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set;
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i = 0;i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (;!_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;!step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;!step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node === propagationRoot) {
            break;
          }
          node = node.return;
        }
        {
          if (node !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = undefined;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) {
          concurrentQueues = [queue];
        } else {
          concurrentQueues.push(queue);
        }
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i = 0;i < concurrentQueues.length; i++) {
            var queue = concurrentQueues[i];
            var lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              return prevState;
            }
            return assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i = 0;i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c2) {
        if (c2 === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
        return c2;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Insertion = 2;
      var Layout = 4;
      var Passive$1 = 8;
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i = 0;i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$2 } = ReactSharedInternals;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = new Set;
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i = 0;i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + `
`;
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + `For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

` + `   Previous render            Next render
` + `   ------------------------------------------------------
` + "%s" + `   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + ` one of the following reasons:
` + `1. You might have mismatching versions of React and the renderer (such as React DOM)
` + `2. You might be breaking the Rules of Hooks
` + `3. You might have more than one copy of React in the same app
` + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The " + `order and size of this array must remain constant.

` + `Previous: %s
` + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent " + "an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please " + "notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental " + "early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update4);
        } else {
          workInProgress2.flags &= ~(Passive | Update4);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. " + "This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === undefined) {
            throw new Error("Missing getServerSnapshot, which is required for " + "server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
        }
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update4, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update4, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update4;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update4, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        var fiberFlags = Update4;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update4, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = new Set;
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. " + "If this is due to a subscription please re-write it to use React provided hooks. " + "Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps);
          var defaultProps = Component.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var fakeInternalInstance = {};
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      var didWarnAboutLegacyContext$1;
      {
        didWarnAboutStateAssignmentForComponent = new Set;
        didWarnAboutUninitializedState = new Set;
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
        didWarnAboutDirectlyAssigningPropsToState = new Set;
        didWarnAboutUndefinedDerivedState = new Set;
        didWarnAboutContextTypeAndContextTypes = new Set;
        didWarnAboutInvalidateContextType = new Set;
        didWarnAboutLegacyContext$1 = new Set;
        var didWarnOnInvalidCallback = new Set;
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
          }
          {
            if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && (workInProgress2.mode & StrictLegacyMode) === NoMode) {
              didWarnAboutLegacyContext$1.add(ctor);
              error("%s uses the legacy childContextTypes API which is no longer " + "supported and will be removed in the next major release. Use " + `React.createContext() instead

.` + "Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
            }
            if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && (workInProgress2.mode & StrictLegacyMode) === NoMode) {
              didWarnAboutLegacyContext$1.add(ctor);
              error("%s uses the legacy contextTypes API which is no longer supported " + "and will be removed in the next major release. Use " + `React.createContext() with static contextType instead.

` + "Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
            }
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === undefined) {
                addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

` + `%s uses %s but also contains the following legacy lifecycles:%s%s%s

` + `The above lifecycles should be removed. Learn more about this warning here:
` + "https://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = {};
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update4;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update4;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update4;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update4;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update4;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update4;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update4;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
` + "Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
          }
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1;
          threadIDs = new Set;
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === undefined) {
            threadIDs = new Set;
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = new Set;
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
            return node;
          }
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This " + "will cause the UI to be replaced with a loading indicator. To " + "fix, updates that suspend should be wrapped " + "with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      var didWarnAboutDefaultPropsOnFunctionComponent;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
        didWarnAboutDefaultPropsOnFunctionComponent = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var render2 = Component.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            }
            if (Component.defaultProps !== undefined) {
              var componentName = getComponentNameFromType(type) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from memo components " + "in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update4;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var root2 = workInProgress2.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside " + "of a Suspense boundary, the entire root will switch to " + "client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able " + "hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component);
              workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += `

Check the render method of \`` + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (Component.defaultProps !== undefined) {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
              error("%s: Support for defaultProps will be removed from function components " + "in a future major release. Use JavaScript default parameters instead.", componentName);
              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
            }
          }
          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from " + "ReactDOM.hydrate(element, container) to " + "ReactDOMClient.hydrateRoot(container, <App />)" + ".render(element) or remove the Suspense components from " + "the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely " + "due to an error during server rendering. Switched to " + "client rendering.");
            }
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished " + "hydrating. This caused the boundary to switch to client rendering. " + "The usual way to fix this is to wrap the original update " + "in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. " + "Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else if (workInProgress2.memoizedState !== null) {
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i = 0;i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (;!step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, undefined);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update4;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update4;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. " + "This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update4;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ShouldCapture) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update4;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update4;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update4;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.renderingStartTime = now();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update4)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in " + "React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. " + "A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var destroy = effect.destroy;
              effect.destroy = undefined;
              if (destroy !== undefined) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create = effect.create;
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect.destroy = create();
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect.destroy;
                if (destroy !== undefined && typeof destroy !== "function") {
                  var hookName = undefined;
                  if ((effect.tag & Layout) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = undefined;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = `

It looks like you wrote ` + hookName + "(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + `and call it immediately:

` + hookName + `(() => {
` + `  async function fetchData() {
` + `    // You can await here
` + `    const response = await MyAPI.getData(someId);
` + `    // ...
` + `  }
` + `  fetchData();
` + `}, [someId]); // Or [] if effect doesn't need props or state

` + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, " + "which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update4) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update4) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update4) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            }
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            if (typeof instance.componentDidMount === "function") {
              safelyCallComponentDidMount(node, node.return, instance);
            }
            safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node;
                try {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node = node.return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. " + "A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== undefined) {
                      if ((tag & Insertion) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet;
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i = 0;i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update4) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update4) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update4) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update4) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode;
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              offscreenInstance.isHidden = isHidden;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update4) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags & Visibility) {
              var _offscreenInstance = finishedWork.stateNode;
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              _offscreenInstance.isHidden = _isHidden;
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update4) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root2, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(child, root2, committedLanes);
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i = 0;i < deletions.length; i++) {
                var fiberToDelete = deletions[i];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support " + "act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$2, ReactCurrentOwner: ReactCurrentOwner$2, ReactCurrentBatchConfig: ReactCurrentBatchConfig$3, ReactCurrentActQueue: ReactCurrentActQueue$1 } = ReactSharedInternals;
      var NoContext = 0;
      var BatchedContext = 1;
      var RenderContext = 2;
      var CommitContext = 4;
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = new Set;
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root2, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root2.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node = finishedWork;
        while (true) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i = 0;i < checks.length; i++) {
                  var check = checks[i];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node;
            node = child;
            continue;
          }
          if (node === finishedWork) {
            return true;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return true;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root2, now());
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2, now());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn3, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn3(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn3, a, b, c2, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn3(a, b, c2, d);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn3) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn3) {
            return fn3();
          } else {
            return;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            if (enableSchedulingProfiler) {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a " + "bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = undefined;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a " + "bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by " + "a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveTransitions = transitions;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit(root2.containerInfo);
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i = 0;i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i];
            var componentStack = recoverableError.stack;
            var digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i = 0;i < profilerEffects.length; i++) {
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              var eventTime = requestEventTime();
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error " + "inside a detached tree. This indicates a bug in React. Likely " + "causes include deleting the same fiber more than once, committing an " + `already-finished tree, or an inconsistent return pointer.

` + `Error message:

%s`, error$1);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. " + "This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component " + "repeatedly calls setState inside componentWillUpdate or " + "componentDidUpdate. React limits the number of nested updates to " + "prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. " + "This indicates that you have a side-effect in your render function that " + "asynchronously later calls tries to update the component. Move this work to " + "useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set;
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a " + "different component (`%s`). To locate the bad setState() call inside `%s`, " + "follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error(`An update to %s inside a test was not wrapped in act(...).

` + "When testing, code that causes React state updates should be " + `wrapped into act(...):

` + `act(() => {
` + `  /* fire events that update state */
` + `});
` + `/* assert on the output */

` + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error("A suspended resource finished loading inside a test, but the event " + `was not wrapped in act(...).

` + "When testing, code that resolves suspended data should be wrapped " + `into act(...):

` + `act(() => {
` + `  /* finish loading suspended data */
` + `});
` + `/* assert on the output */

` + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet;
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var { staleFamilies, updatedFamilies } = update;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var { alternate, child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) {
              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = new Set;
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var { child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += `

Check the render method of \`` + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in " + "components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = new Set;
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0;_i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(new Set);
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.3.1";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === undefined) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane, eventTime);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + `If necessary, trigger nested updates in componentDidUpdate.

` + "Check the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0;i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length) {
            return value;
          }
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. " + "To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). " + "You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts " + "one argument.");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the " + "root container was removed without using React. This is not " + "supported and will cause errors. Instead, call " + "root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. " + "To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already " + "rendering. React cannot finish unmounting the root until the " + "current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options2 !== null && options2 !== undefined) {
          {
            if (options2.hydrate) {
              warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error("You passed a JSX element to createRoot. You probably meant to " + "call root.render instead. " + `Example usage:

` + `  let root = createRoot(domContainer);
` + "  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
          if (options2.transitionCallbacks !== undefined) {
            transitionCallbacks = options2.transitionCallbacks;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === undefined) {
            error("Must provide initial children as second argument to hydrateRoot. " + "Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== undefined) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i = 0;i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is " + "discouraged, since its children are often manipulated by third-party " + "scripts and browser extensions. This may lead to subtle " + "reconciliation issues. Try using a container element created " + "for your app.");
          }
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously " + "passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that " + "has already been passed to createRoot() before. Instead, call " + "root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this " + "container was removed without using React. This is not " + "supported and will cause errors. Instead, call " + "ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root " + "component. If you intended to update the children of this node, " + "you should instead have the existing children update their state " + "and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is " + "discouraged, since its children are often manipulated by third-party " + "scripts and browser extensions. This may lead to subtle " + "reconciliation issues. Try rendering into a container element created " + "for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root2;
        } else {
          var rootSibling;
          while (rootSibling = container.lastChild) {
            container.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      var didWarnAboutFindDOMNode = false;
      function findDOMNode(componentOrElement) {
        {
          if (!didWarnAboutFindDOMNode) {
            didWarnAboutFindDOMNode = true;
            error("findDOMNode is deprecated and will be removed in the next major " + "release. Instead, add a ref directly to the element you want " + "to reference. Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node");
          }
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot " + "instead. Until you switch to the new API, your app will behave as " + "if it's running React 17. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. " + "Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot " + "instead. Until you switch to the new API, your app will behave as " + "if it's running React 17. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. " + "Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported " + "in React 18. Consider using a portal instead. Until you switch to " + "the createRoot API, your app will behave as if it's running React " + "17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      var didWarnAboutUnmountComponentAtNode = false;
      function unmountComponentAtNode(container) {
        {
          if (!didWarnAboutUnmountComponentAtNode) {
            didWarnAboutUnmountComponentAtNode = true;
            error("unmountComponentAtNode is deprecated and will be removed in the " + "next major release. Switch to the createRoot API. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
          }
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount " + "was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount " + "was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead " + "of its container." : "Instead, have the parent component update its state and " + "rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a " + "polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
          }
        }
        return createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn3) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot " + "flush when React is already rendering. Consider moving this call to " + "a scheduler task or micro task.");
          }
        }
        return flushSync(fn3);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools " + "for a better development experience: " + "https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): ` + "https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.createRoot = createRoot$1;
      exports.findDOMNode = findDOMNode;
      exports.flushSync = flushSync$1;
      exports.hydrate = hydrate;
      exports.hydrateRoot = hydrateRoot$1;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// ../node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  var react_dom_development = __toESM(require_react_dom_development(), 1);
  if (false) {
  } else {
    module.exports = react_dom_development;
  }
});

// ../node_modules/react-dom/client.js
var require_client = __commonJS((exports) => {
  var m10 = __toESM(require_react_dom(), 1);
  if (false) {
  } else {
    i = m10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.createRoot = function(c3, o) {
      i.usingClientEntryPoint = true;
      try {
        return m10.createRoot(c3, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
    exports.hydrateRoot = function(c3, h, o) {
      i.usingClientEntryPoint = true;
      try {
        return m10.hydrateRoot(c3, h, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
  }
  var i;
});

// ../node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  if (true) {
    (function() {
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn4, construct) {
        if (!fn4 || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn4);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn4, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn4.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn4();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s = sampleLines.length - 1;
            var c3 = controlLines.length - 1;
            while (s >= 1 && c3 >= 0 && sampleLines[s] !== controlLines[c3]) {
              c3--;
            }
            for (;s >= 1 && c3 >= 0; s--, c3--) {
              if (sampleLines[s] !== controlLines[c3]) {
                if (s !== 1 || c3 !== 1) {
                  do {
                    s--;
                    c3--;
                    if (c3 < 0 || sampleLines[s] !== controlLines[c3]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      if (fn4.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn4.displayName);
                      }
                      {
                        if (typeof fn4 === "function") {
                          componentFrameCache.set(fn4, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c3 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn4 ? fn4.displayName || fn4.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn4 === "function") {
            componentFrameCache.set(fn4, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn4, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn4, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex2) {
                error$1 = ex2;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". ' + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== undefined) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement2(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return `

Check the render method of \`` + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = `

Check the top-level render call using <` + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.' + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0;i < node.length; i++) {
              var child = node[i];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      var didWarnAboutKeySpread = {};
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== undefined) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i = 0;i < children.length; i++) {
                    validateChildKeys(children[i], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. " + "You are likely explicitly calling React.jsxs or React.jsxDEV. " + "Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          {
            if (hasOwnProperty.call(props, "key")) {
              var componentName = getComponentNameFromType(type);
              var keys = Object.keys(props).filter(function(k) {
                return k !== "key";
              });
              var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
              if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                error(`A props object containing a "key" prop is being spread into JSX:
` + `  let props = %s;
` + `  <%s {...props} />
` + `React keys must be passed directly to JSX without using spread:
` + `  let props = %s;
` + "  <%s key={someKey} {...props} />", beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.jsxDEV = jsxDEV$1;
    })();
  }
});

// ../node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS((exports, module) => {
  var react_jsx_dev_runtime_development = __toESM(require_react_jsx_dev_runtime_development(), 1);
  if (false) {
  } else {
    module.exports = react_jsx_dev_runtime_development;
  }
});

// node_modules/json-stringify-pretty-compact/index.js
var stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;
function stringify(passedObj, options = {}) {
  const indent = JSON.stringify([1], undefined, options.indent === undefined ? 2 : options.indent).slice(2, -3);
  const maxLength = indent === "" ? Infinity : options.maxLength === undefined ? 80 : options.maxLength;
  let { replacer } = options;
  return function _stringify(obj, currentIndent, reserved) {
    if (obj && typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }
    const string = JSON.stringify(obj, replacer);
    if (string === undefined) {
      return string;
    }
    const length = maxLength - currentIndent.length - reserved;
    if (string.length <= length) {
      const prettified = string.replace(stringOrChar, (match, stringLiteral) => {
        return stringLiteral || `${match} `;
      });
      if (prettified.length <= length) {
        return prettified;
      }
    }
    if (replacer != null) {
      obj = JSON.parse(string);
      replacer = undefined;
    }
    if (typeof obj === "object" && obj !== null) {
      const nextIndent = currentIndent + indent;
      const items = [];
      let index = 0;
      let start;
      let end;
      if (Array.isArray(obj)) {
        start = "[";
        end = "]";
        const { length: length2 } = obj;
        for (;index < length2; index++) {
          items.push(_stringify(obj[index], nextIndent, index === length2 - 1 ? 0 : 1) || "null");
        }
      } else {
        start = "{";
        end = "}";
        const keys = Object.keys(obj);
        const { length: length2 } = keys;
        for (;index < length2; index++) {
          const key = keys[index];
          const keyPart = `${JSON.stringify(key)}: `;
          const value = _stringify(obj[key], nextIndent, keyPart.length + (index === length2 - 1 ? 0 : 1));
          if (value !== undefined) {
            items.push(keyPart + value);
          }
        }
      }
      if (items.length > 0) {
        return [start, indent + items.join(`,
${nextIndent}`), end].join(`
${currentIndent}`);
      }
    }
    return string;
  }(passedObj, "", 0);
}

// ../../NAPL/src/cycles/data-update/data-update.ts
var KEYS = "~{keys}";
var VALUES = "~{values}";
var REGEX = /~\{([^}]+)\}/;
function commitUpdates(root, properties, updatedPaths = {}) {
  if (!root || !root.updates?.length) {
    return updatedPaths;
  }
  sortUpdates(root.updates);
  root.updates?.forEach((update) => {
    if (!update.confirmed) {
      return;
    }
    const parts = update.path.split("/");
    const leaf = getLeafObject(root, parts, 1, true);
    const prop = parts[parts.length - 1];
    const value = translateValue(update.value, properties);
    if (update.append) {
      if (!Array.isArray(leaf[prop])) {
        leaf[prop] = [];
      }
      leaf[prop] = [...leaf[prop], value];
    } else if ((update.insert ?? -1) >= 0) {
      if (!Array.isArray(leaf[prop])) {
        leaf[prop] = [];
      }
      leaf[prop] = [...leaf[prop].slice(0, update.insert ?? -1), value, ...leaf[prop].slice(update.insert)];
    } else if ((update.delete ?? -1) >= 0) {
      if (Array.isArray(leaf[prop])) {
        leaf[prop] = [...leaf[prop].slice(0, update.delete), ...leaf[prop].slice((update.delete ?? -1) + 1)];
      }
    } else if (value === undefined) {
      delete leaf[prop];
      cleanupRoot(root, parts, 0);
    } else {
      leaf[prop] = value;
    }
    updatedPaths[update.path] = leaf[prop];
  });
  clearUpdates(root, updatedPaths);
  return updatedPaths;
}
function cleanupRoot(root, parts, index) {
  if (!root || typeof root !== "object" || Array.isArray(root)) {
    return false;
  }
  if (cleanupRoot(root[parts[index]], parts, index + 1)) {
    delete root[parts[index]];
  }
  return Object.keys(root).length === 0;
}
function clearUpdates(root, updatedPaths) {
  root.updates = root.updates?.filter((update) => !(update.path in updatedPaths));
  if (!root.updates?.length) {
    delete root.updates;
  }
}
function sortUpdates(updates) {
  updates?.sort((a, b) => {
    const confirmedA = a.confirmed ?? 0;
    const confirmedB = b.confirmed ?? 0;
    if (confirmedA !== confirmedB) {
      return confirmedA - confirmedB;
    }
    return a.path.localeCompare(b.path);
  });
}
function getLeafObject(obj, parts, offset, autoCreate, properties = {}) {
  let current = obj;
  for (let i = 0;i < parts.length - offset; i++) {
    const prop = parts[i];
    const value = translateProp(current, prop, properties, autoCreate);
    if (value === undefined) {
      return value;
    }
    current = value;
  }
  return current;
}
function translateValue(value, properties) {
  if (typeof value !== "string") {
    return value;
  }
  if (value.startsWith("~{") && value.endsWith("}")) {
    switch (value) {
      default:
        const group = value.match(REGEX);
        if (group) {
          return properties[group[1]];
        }
    }
  }
  return value;
}
function translateProp(obj, prop, properties, autoCreate) {
  let value;
  if (typeof prop !== "string") {
    value = obj[prop];
  } else if (prop.startsWith("~{") && prop.endsWith("}")) {
    switch (prop) {
      case KEYS:
        return Object.keys(obj ?? {});
      case VALUES:
        return Object.values(obj ?? {});
      default:
        return obj[translateValue(prop, properties)];
    }
  } else {
    value = obj[prop];
  }
  if (value === undefined && autoCreate) {
    value = obj[prop] = {};
  }
  return value;
}
function markUpdateConfirmed(update, now) {
  if (!update.confirmed) {
    update.confirmed = now;
  }
}
// ../../NAPL/node_modules/@dobuki/data-blob/dist/index.js
var gt = Object.create;
var { defineProperty: Rn, getPrototypeOf: Yt, getOwnPropertyNames: wt } = Object;
var Et = Object.prototype.hasOwnProperty;
var Nt = (t, n, h) => {
  h = t != null ? gt(Yt(t)) : {};
  let c = n || !t || !t.__esModule ? Rn(h, "default", { value: t, enumerable: true }) : h;
  for (let i of wt(t))
    if (!Et.call(c, i))
      Rn(c, i, { get: () => t[i], enumerable: true });
  return c;
};
var R = (t, n) => () => (n || t((n = { exports: {} }).exports, n), n.exports);
var jt = R((t, n) => {
  var h = function(S) {
    throw { name: "SyntaxError", message: S, at: Y, text: P };
  }, c = function(S) {
    if (S && S !== m)
      h("Expected '" + S + "' instead of '" + m + "'");
    return m = P.charAt(Y), Y += 1, m;
  }, i = function() {
    var S, T = "";
    if (m === "-")
      T = "-", c("-");
    while (m >= "0" && m <= "9")
      T += m, c();
    if (m === ".") {
      T += ".";
      while (c() && m >= "0" && m <= "9")
        T += m;
    }
    if (m === "e" || m === "E") {
      if (T += m, c(), m === "-" || m === "+")
        T += m, c();
      while (m >= "0" && m <= "9")
        T += m, c();
    }
    if (S = Number(T), !isFinite(S))
      h("Bad number");
    return S;
  }, g = function() {
    var S, T, v = "", x;
    if (m === '"')
      while (c())
        if (m === '"')
          return c(), v;
        else if (m === "\\")
          if (c(), m === "u") {
            x = 0;
            for (T = 0;T < 4; T += 1) {
              if (S = parseInt(c(), 16), !isFinite(S))
                break;
              x = x * 16 + S;
            }
            v += String.fromCharCode(x);
          } else if (typeof s[m] === "string")
            v += s[m];
          else
            break;
        else
          v += m;
    h("Bad string");
  }, w = function() {
    while (m && m <= " ")
      c();
  }, I = function() {
    switch (m) {
      case "t":
        return c("t"), c("r"), c("u"), c("e"), true;
      case "f":
        return c("f"), c("a"), c("l"), c("s"), c("e"), false;
      case "n":
        return c("n"), c("u"), c("l"), c("l"), null;
      default:
        h("Unexpected '" + m + "'");
    }
  }, E = function() {
    var S = [];
    if (m === "[") {
      if (c("["), w(), m === "]")
        return c("]"), S;
      while (m) {
        if (S.push($()), w(), m === "]")
          return c("]"), S;
        c(","), w();
      }
    }
    h("Bad array");
  }, j = function() {
    var S, T = {};
    if (m === "{") {
      if (c("{"), w(), m === "}")
        return c("}"), T;
      while (m) {
        if (S = g(), w(), c(":"), Object.prototype.hasOwnProperty.call(T, S))
          h('Duplicate key "' + S + '"');
        if (T[S] = $(), w(), m === "}")
          return c("}"), T;
        c(","), w();
      }
    }
    h("Bad object");
  }, $ = function() {
    switch (w(), m) {
      case "{":
        return j();
      case "[":
        return E();
      case '"':
        return g();
      case "-":
        return i();
      default:
        return m >= "0" && m <= "9" ? i() : I();
    }
  }, Y, m, s = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f", n: `
`, r: "\r", t: "\t" }, P;
  n.exports = function(S, T) {
    var v;
    if (P = S, Y = 0, m = " ", v = $(), w(), m)
      h("Syntax error");
    return typeof T === "function" ? function x(O, C) {
      var D, b, k = O[C];
      if (k && typeof k === "object") {
        for (D in $)
          if (Object.prototype.hasOwnProperty.call(k, D))
            if (b = x(k, D), typeof b === "undefined")
              delete k[D];
            else
              k[D] = b;
      }
      return T.call(O, C, k);
    }({ "": v }, "") : v;
  };
});
var $t = R((t, n) => {
  var h = function(j) {
    return i.lastIndex = 0, i.test(j) ? '"' + j.replace(i, function($) {
      var Y = I[$];
      return typeof Y === "string" ? Y : "\\u" + ("0000" + $.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + j + '"';
  }, c = function(j, $) {
    var Y, m, s, P, S = g, T, v = $[j];
    if (v && typeof v === "object" && typeof v.toJSON === "function")
      v = v.toJSON(j);
    if (typeof E === "function")
      v = E.call($, j, v);
    switch (typeof v) {
      case "string":
        return h(v);
      case "number":
        return isFinite(v) ? String(v) : "null";
      case "boolean":
      case "null":
        return String(v);
      case "object":
        if (!v)
          return "null";
        if (g += w, T = [], Object.prototype.toString.apply(v) === "[object Array]") {
          P = v.length;
          for (Y = 0;Y < P; Y += 1)
            T[Y] = c(Y, v) || "null";
          return s = T.length === 0 ? "[]" : g ? `[
` + g + T.join(`,
` + g) + `
` + S + "]" : "[" + T.join(",") + "]", g = S, s;
        }
        if (E && typeof E === "object") {
          P = E.length;
          for (Y = 0;Y < P; Y += 1)
            if (m = E[Y], typeof m === "string") {
              if (s = c(m, v), s)
                T.push(h(m) + (g ? ": " : ":") + s);
            }
        } else
          for (m in v)
            if (Object.prototype.hasOwnProperty.call(v, m)) {
              if (s = c(m, v), s)
                T.push(h(m) + (g ? ": " : ":") + s);
            }
        return s = T.length === 0 ? "{}" : g ? `{
` + g + T.join(`,
` + g) + `
` + S + "}" : "{" + T.join(",") + "}", g = S, s;
      default:
    }
  }, i = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, g, w, I = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': "\\\"", "\\": "\\\\" }, E;
  n.exports = function(j, $, Y) {
    var m;
    if (g = "", w = "", typeof Y === "number")
      for (m = 0;m < Y; m += 1)
        w += " ";
    else if (typeof Y === "string")
      w = Y;
    if (E = $, $ && typeof $ !== "function" && (typeof $ !== "object" || typeof $.length !== "number"))
      throw new Error("JSON.stringify");
    return c("", { "": j });
  };
});
var st = R((t) => {
  t.parse = jt(), t.stringify = $t();
});
var It = R((t, n) => {
  var h = {}.toString;
  n.exports = Array.isArray || function(c) {
    return h.call(c) == "[object Array]";
  };
});
var fn = R((t, n) => {
  var h = Object.prototype.toString;
  n.exports = function c(i) {
    var g = h.call(i), w = g === "[object Arguments]";
    if (!w)
      w = g !== "[object Array]" && i !== null && typeof i === "object" && typeof i.length === "number" && i.length >= 0 && h.call(i.callee) === "[object Function]";
    return w;
  };
});
var Pt = R((t, n) => {
  var h;
  if (!Object.keys)
    c = Object.prototype.hasOwnProperty, i = Object.prototype.toString, g = fn(), w = Object.prototype.propertyIsEnumerable, I = !w.call({ toString: null }, "toString"), E = w.call(function() {
    }, "prototype"), j = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], $ = function(P) {
      var S = P.constructor;
      return S && S.prototype === P;
    }, Y = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, m = function() {
      if (typeof window === "undefined")
        return false;
      for (var P in window)
        try {
          if (!Y["$" + P] && c.call(window, P) && window[P] !== null && typeof window[P] === "object")
            try {
              $(window[P]);
            } catch (S) {
              return true;
            }
        } catch (S) {
          return true;
        }
      return false;
    }(), s = function(P) {
      if (typeof window === "undefined" || !m)
        return $(P);
      try {
        return $(P);
      } catch (S) {
        return false;
      }
    }, h = function P(S) {
      var T = S !== null && typeof S === "object", v = i.call(S) === "[object Function]", x = g(S), O = T && i.call(S) === "[object String]", C = [];
      if (!T && !v && !x)
        throw new TypeError("Object.keys called on a non-object");
      var D = E && v;
      if (O && S.length > 0 && !c.call(S, 0))
        for (var b = 0;b < S.length; ++b)
          C.push(String(b));
      if (x && S.length > 0)
        for (var k = 0;k < S.length; ++k)
          C.push(String(k));
      else
        for (var f in S)
          if (!(D && f === "prototype") && c.call(S, f))
            C.push(String(f));
      if (I) {
        var G = s(S);
        for (var U = 0;U < j.length; ++U)
          if (!(G && j[U] === "constructor") && c.call(S, j[U]))
            C.push(j[U]);
      }
      return C;
    };
  var c, i, g, w, I, E, j, $, Y, m, s;
  n.exports = h;
});
var St = R((t, n) => {
  var h = Array.prototype.slice, c = fn(), i = Object.keys, g = i ? function I(E) {
    return i(E);
  } : Pt(), w = Object.keys;
  g.shim = function I() {
    if (Object.keys) {
      var E = function() {
        var j = Object.keys(arguments);
        return j && j.length === arguments.length;
      }(1, 2);
      if (!E)
        Object.keys = function j($) {
          if (c($))
            return w(h.call($));
          return w($);
        };
    } else
      Object.keys = g;
    return Object.keys || g;
  }, n.exports = g;
});
var vt = R((t, n) => {
  var h = "Function.prototype.bind called on incompatible ", c = Object.prototype.toString, i = Math.max, g = "[object Function]", w = function j($, Y) {
    var m = [];
    for (var s = 0;s < $.length; s += 1)
      m[s] = $[s];
    for (var P = 0;P < Y.length; P += 1)
      m[P + $.length] = Y[P];
    return m;
  }, I = function j($, Y) {
    var m = [];
    for (var s = Y || 0, P = 0;s < $.length; s += 1, P += 1)
      m[P] = $[s];
    return m;
  }, E = function(j, $) {
    var Y = "";
    for (var m = 0;m < j.length; m += 1)
      if (Y += j[m], m + 1 < j.length)
        Y += $;
    return Y;
  };
  n.exports = function j($) {
    var Y = this;
    if (typeof Y !== "function" || c.apply(Y) !== g)
      throw new TypeError(h + Y);
    var m = I(arguments, 1), s, P = function() {
      if (this instanceof s) {
        var O = Y.apply(this, w(m, arguments));
        if (Object(O) === O)
          return O;
        return this;
      }
      return Y.apply($, w(m, arguments));
    }, S = i(0, Y.length - m.length), T = [];
    for (var v = 0;v < S; v++)
      T[v] = "$" + v;
    if (s = Function("binder", "return function (" + E(T, ",") + "){ return binder.apply(this,arguments); }")(P), Y.prototype) {
      var x = function O() {
      };
      x.prototype = Y.prototype, s.prototype = new x, x.prototype = null;
    }
    return s;
  };
});
var Tn = R((t, n) => {
  var h = vt();
  n.exports = Function.prototype.bind || h;
});
var Tt = R((t, n) => {
  n.exports = Error;
});
var At = R((t, n) => {
  n.exports = EvalError;
});
var kt = R((t, n) => {
  n.exports = RangeError;
});
var xt = R((t, n) => {
  n.exports = ReferenceError;
});
var Vn = R((t, n) => {
  n.exports = SyntaxError;
});
var An = R((t, n) => {
  n.exports = TypeError;
});
var Ct = R((t, n) => {
  n.exports = URIError;
});
var Ot = R((t, n) => {
  n.exports = function h() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function")
      return false;
    if (typeof Symbol.iterator === "symbol")
      return true;
    var c = {}, i = Symbol("test"), g = Object(i);
    if (typeof i === "string")
      return false;
    if (Object.prototype.toString.call(i) !== "[object Symbol]")
      return false;
    if (Object.prototype.toString.call(g) !== "[object Symbol]")
      return false;
    var w = 42;
    c[i] = w;
    for (i in c)
      return false;
    if (typeof Object.keys === "function" && Object.keys(c).length !== 0)
      return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(c).length !== 0)
      return false;
    var I = Object.getOwnPropertySymbols(c);
    if (I.length !== 1 || I[0] !== i)
      return false;
    if (!Object.prototype.propertyIsEnumerable.call(c, i))
      return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var E = Object.getOwnPropertyDescriptor(c, i);
      if (E.value !== w || E.enumerable !== true)
        return false;
    }
    return true;
  };
});
var yn = R((t, n) => {
  var h = typeof Symbol !== "undefined" && Symbol, c = Ot();
  n.exports = function i() {
    if (typeof h !== "function")
      return false;
    if (typeof Symbol !== "function")
      return false;
    if (typeof h("foo") !== "symbol")
      return false;
    if (typeof Symbol("bar") !== "symbol")
      return false;
    return c();
  };
});
var on = R((t, n) => {
  var h = { foo: {} }, c = Object;
  n.exports = function i() {
    return { __proto__: h }.foo === h.foo && !({ __proto__: null } instanceof c);
  };
});
var Gn = R((t, n) => {
  var h = Function.prototype.call, c = Object.prototype.hasOwnProperty, i = Tn();
  n.exports = i.call(h, c);
});
var kn = R((t, n) => {
  var h, c = Tt(), i = At(), g = kt(), w = xt(), I = Vn(), E = An(), j = Ct(), $ = Function, Y = function(M) {
    try {
      return $('"use strict"; return (' + M + ").constructor;")();
    } catch (r) {
    }
  }, m = Object.getOwnPropertyDescriptor;
  if (m)
    try {
      m({}, "");
    } catch (M) {
      m = null;
    }
  var s = function() {
    throw new E;
  }, P = m ? function() {
    try {
      return arguments.callee, s;
    } catch (M) {
      try {
        return m(arguments, "callee").get;
      } catch (r) {
        return s;
      }
    }
  }() : s, S = yn()(), T = on()(), v = Object.getPrototypeOf || (T ? function(M) {
    return M.__proto__;
  } : null), x = {}, O = typeof Uint8Array === "undefined" || !v ? h : v(Uint8Array), C = { __proto__: null, "%AggregateError%": typeof AggregateError === "undefined" ? h : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? h : ArrayBuffer, "%ArrayIteratorPrototype%": S && v ? v([][Symbol.iterator]()) : h, "%AsyncFromSyncIteratorPrototype%": h, "%AsyncFunction%": x, "%AsyncGenerator%": x, "%AsyncGeneratorFunction%": x, "%AsyncIteratorPrototype%": x, "%Atomics%": typeof Atomics === "undefined" ? h : Atomics, "%BigInt%": typeof BigInt === "undefined" ? h : BigInt, "%BigInt64Array%": typeof BigInt64Array === "undefined" ? h : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array === "undefined" ? h : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView === "undefined" ? h : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": c, "%eval%": eval, "%EvalError%": i, "%Float32Array%": typeof Float32Array === "undefined" ? h : Float32Array, "%Float64Array%": typeof Float64Array === "undefined" ? h : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? h : FinalizationRegistry, "%Function%": $, "%GeneratorFunction%": x, "%Int8Array%": typeof Int8Array === "undefined" ? h : Int8Array, "%Int16Array%": typeof Int16Array === "undefined" ? h : Int16Array, "%Int32Array%": typeof Int32Array === "undefined" ? h : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": S && v ? v(v([][Symbol.iterator]())) : h, "%JSON%": typeof JSON === "object" ? JSON : h, "%Map%": typeof Map === "undefined" ? h : Map, "%MapIteratorPrototype%": typeof Map === "undefined" || !S || !v ? h : v(new Map()[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise === "undefined" ? h : Promise, "%Proxy%": typeof Proxy === "undefined" ? h : Proxy, "%RangeError%": g, "%ReferenceError%": w, "%Reflect%": typeof Reflect === "undefined" ? h : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set === "undefined" ? h : Set, "%SetIteratorPrototype%": typeof Set === "undefined" || !S || !v ? h : v(new Set()[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? h : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": S && v ? v(""[Symbol.iterator]()) : h, "%Symbol%": S ? Symbol : h, "%SyntaxError%": I, "%ThrowTypeError%": P, "%TypedArray%": O, "%TypeError%": E, "%Uint8Array%": typeof Uint8Array === "undefined" ? h : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? h : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array === "undefined" ? h : Uint16Array, "%Uint32Array%": typeof Uint32Array === "undefined" ? h : Uint32Array, "%URIError%": j, "%WeakMap%": typeof WeakMap === "undefined" ? h : WeakMap, "%WeakRef%": typeof WeakRef === "undefined" ? h : WeakRef, "%WeakSet%": typeof WeakSet === "undefined" ? h : WeakSet };
  if (v)
    try {
      null.error;
    } catch (M) {
      D = v(v(M)), C["%Error.prototype%"] = D;
    }
  var D, b = function M(r) {
    var u;
    if (r === "%AsyncFunction%")
      u = Y("async function () {}");
    else if (r === "%GeneratorFunction%")
      u = Y("function* () {}");
    else if (r === "%AsyncGeneratorFunction%")
      u = Y("async function* () {}");
    else if (r === "%AsyncGenerator%") {
      var L = M("%AsyncGeneratorFunction%");
      if (L)
        u = L.prototype;
    } else if (r === "%AsyncIteratorPrototype%") {
      var e = M("%AsyncGenerator%");
      if (e && v)
        u = v(e.prototype);
    }
    return C[r] = u, u;
  }, k = { __proto__: null, "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, f = Tn(), G = Gn(), U = f.call(Function.call, Array.prototype.concat), l = f.call(Function.apply, Array.prototype.splice), hn = f.call(Function.call, String.prototype.replace), a = f.call(Function.call, String.prototype.slice), K = f.call(Function.call, RegExp.prototype.exec), W = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, d = /\\(\\)?/g, p = function M(r) {
    var u = a(r, 0, 1), L = a(r, -1);
    if (u === "%" && L !== "%")
      throw new I("invalid intrinsic syntax, expected closing `%`");
    else if (L === "%" && u !== "%")
      throw new I("invalid intrinsic syntax, expected opening `%`");
    var e = [];
    return hn(r, W, function(o, Z, H, X) {
      e[e.length] = H ? hn(X, d, "$1") : Z || o;
    }), e;
  }, V = function M(r, u) {
    var L = r, e;
    if (G(k, L))
      e = k[L], L = "%" + e[0] + "%";
    if (G(C, L)) {
      var o = C[L];
      if (o === x)
        o = b(L);
      if (typeof o === "undefined" && !u)
        throw new E("intrinsic " + r + " exists, but is not available. Please file an issue!");
      return { alias: e, name: L, value: o };
    }
    throw new I("intrinsic " + r + " does not exist!");
  };
  n.exports = function M(r, u) {
    if (typeof r !== "string" || r.length === 0)
      throw new E("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof u !== "boolean")
      throw new E('"allowMissing" argument must be a boolean');
    if (K(/^%?[^%]*%?$/, r) === null)
      throw new I("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var L = p(r), e = L.length > 0 ? L[0] : "", o = V("%" + e + "%", u), Z = o.name, H = o.value, X = false, nn = o.alias;
    if (nn)
      e = nn[0], l(L, U([0, 1], nn));
    for (var z = 1, gn = true;z < L.length; z += 1) {
      var _ = L[z], $n = a(_, 0, 1), sn = a(_, -1);
      if (($n === '"' || $n === "'" || $n === "`" || (sn === '"' || sn === "'" || sn === "`")) && $n !== sn)
        throw new I("property names with quotes must have matching quotes");
      if (_ === "constructor" || !gn)
        X = true;
      if (e += "." + _, Z = "%" + e + "%", G(C, Z))
        H = C[Z];
      else if (H != null) {
        if (!(_ in H)) {
          if (!u)
            throw new E("base intrinsic for " + r + " exists, but the property is not available.");
          return;
        }
        if (m && z + 1 >= L.length) {
          var In = m(H, _);
          if (gn = !!In, gn && "get" in In && !("originalValue" in In.get))
            H = In.get;
          else
            H = H[_];
        } else
          gn = G(H, _), H = H[_];
        if (gn && !X)
          C[Z] = H;
      }
    }
    return H;
  };
});
var On = R((t, n) => {
  var h = kn(), c = h("%Object.defineProperty%", true) || false;
  if (c)
    try {
      c({}, "a", { value: 1 });
    } catch (i) {
      c = false;
    }
  n.exports = c;
});
var ut = R((t, n) => {
  var h, c = SyntaxError, i = Function, g = TypeError, w = function(K) {
    try {
      return i('"use strict"; return (' + K + ").constructor;")();
    } catch (W) {
    }
  }, I = Object.getOwnPropertyDescriptor;
  if (I)
    try {
      I({}, "");
    } catch (K) {
      I = null;
    }
  var E = function() {
    throw new g;
  }, j = I ? function() {
    try {
      return arguments.callee, E;
    } catch (K) {
      try {
        return I(arguments, "callee").get;
      } catch (W) {
        return E;
      }
    }
  }() : E, $ = yn()(), Y = on()(), m = Object.getPrototypeOf || (Y ? function(K) {
    return K.__proto__;
  } : null), s = {}, P = typeof Uint8Array === "undefined" || !m ? h : m(Uint8Array), S = { "%AggregateError%": typeof AggregateError === "undefined" ? h : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? h : ArrayBuffer, "%ArrayIteratorPrototype%": $ && m ? m([][Symbol.iterator]()) : h, "%AsyncFromSyncIteratorPrototype%": h, "%AsyncFunction%": s, "%AsyncGenerator%": s, "%AsyncGeneratorFunction%": s, "%AsyncIteratorPrototype%": s, "%Atomics%": typeof Atomics === "undefined" ? h : Atomics, "%BigInt%": typeof BigInt === "undefined" ? h : BigInt, "%BigInt64Array%": typeof BigInt64Array === "undefined" ? h : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array === "undefined" ? h : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView === "undefined" ? h : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": Error, "%eval%": eval, "%EvalError%": EvalError, "%Float32Array%": typeof Float32Array === "undefined" ? h : Float32Array, "%Float64Array%": typeof Float64Array === "undefined" ? h : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? h : FinalizationRegistry, "%Function%": i, "%GeneratorFunction%": s, "%Int8Array%": typeof Int8Array === "undefined" ? h : Int8Array, "%Int16Array%": typeof Int16Array === "undefined" ? h : Int16Array, "%Int32Array%": typeof Int32Array === "undefined" ? h : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": $ && m ? m(m([][Symbol.iterator]())) : h, "%JSON%": typeof JSON === "object" ? JSON : h, "%Map%": typeof Map === "undefined" ? h : Map, "%MapIteratorPrototype%": typeof Map === "undefined" || !$ || !m ? h : m(new Map()[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise === "undefined" ? h : Promise, "%Proxy%": typeof Proxy === "undefined" ? h : Proxy, "%RangeError%": RangeError, "%ReferenceError%": ReferenceError, "%Reflect%": typeof Reflect === "undefined" ? h : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set === "undefined" ? h : Set, "%SetIteratorPrototype%": typeof Set === "undefined" || !$ || !m ? h : m(new Set()[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? h : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": $ && m ? m(""[Symbol.iterator]()) : h, "%Symbol%": $ ? Symbol : h, "%SyntaxError%": c, "%ThrowTypeError%": j, "%TypedArray%": P, "%TypeError%": g, "%Uint8Array%": typeof Uint8Array === "undefined" ? h : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? h : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array === "undefined" ? h : Uint16Array, "%Uint32Array%": typeof Uint32Array === "undefined" ? h : Uint32Array, "%URIError%": URIError, "%WeakMap%": typeof WeakMap === "undefined" ? h : WeakMap, "%WeakRef%": typeof WeakRef === "undefined" ? h : WeakRef, "%WeakSet%": typeof WeakSet === "undefined" ? h : WeakSet };
  if (m)
    try {
      null.error;
    } catch (K) {
      T = m(m(K)), S["%Error.prototype%"] = T;
    }
  var T, v = function K(W) {
    var d;
    if (W === "%AsyncFunction%")
      d = w("async function () {}");
    else if (W === "%GeneratorFunction%")
      d = w("function* () {}");
    else if (W === "%AsyncGeneratorFunction%")
      d = w("async function* () {}");
    else if (W === "%AsyncGenerator%") {
      var p = K("%AsyncGeneratorFunction%");
      if (p)
        d = p.prototype;
    } else if (W === "%AsyncIteratorPrototype%") {
      var V = K("%AsyncGenerator%");
      if (V && m)
        d = m(V.prototype);
    }
    return S[W] = d, d;
  }, x = { "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, O = Tn(), C = Gn(), D = O.call(Function.call, Array.prototype.concat), b = O.call(Function.apply, Array.prototype.splice), k = O.call(Function.call, String.prototype.replace), f = O.call(Function.call, String.prototype.slice), G = O.call(Function.call, RegExp.prototype.exec), U = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, l = /\\(\\)?/g, hn = function K(W) {
    var d = f(W, 0, 1), p = f(W, -1);
    if (d === "%" && p !== "%")
      throw new c("invalid intrinsic syntax, expected closing `%`");
    else if (p === "%" && d !== "%")
      throw new c("invalid intrinsic syntax, expected opening `%`");
    var V = [];
    return k(W, U, function(M, r, u, L) {
      V[V.length] = u ? k(L, l, "$1") : r || M;
    }), V;
  }, a = function K(W, d) {
    var p = W, V;
    if (C(x, p))
      V = x[p], p = "%" + V[0] + "%";
    if (C(S, p)) {
      var M = S[p];
      if (M === s)
        M = v(p);
      if (typeof M === "undefined" && !d)
        throw new g("intrinsic " + W + " exists, but is not available. Please file an issue!");
      return { alias: V, name: p, value: M };
    }
    throw new c("intrinsic " + W + " does not exist!");
  };
  n.exports = function K(W, d) {
    if (typeof W !== "string" || W.length === 0)
      throw new g("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof d !== "boolean")
      throw new g('"allowMissing" argument must be a boolean');
    if (G(/^%?[^%]*%?$/, W) === null)
      throw new c("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var p = hn(W), V = p.length > 0 ? p[0] : "", M = a("%" + V + "%", d), r = M.name, u = M.value, L = false, e = M.alias;
    if (e)
      V = e[0], b(p, D([0, 1], e));
    for (var o = 1, Z = true;o < p.length; o += 1) {
      var H = p[o], X = f(H, 0, 1), nn = f(H, -1);
      if ((X === '"' || X === "'" || X === "`" || (nn === '"' || nn === "'" || nn === "`")) && X !== nn)
        throw new c("property names with quotes must have matching quotes");
      if (H === "constructor" || !Z)
        L = true;
      if (V += "." + H, r = "%" + V + "%", C(S, r))
        u = S[r];
      else if (u != null) {
        if (!(H in u)) {
          if (!d)
            throw new g("base intrinsic for " + W + " exists, but the property is not available.");
          return;
        }
        if (I && o + 1 >= p.length) {
          var z = I(u, H);
          if (Z = !!z, Z && "get" in z && !("originalValue" in z.get))
            u = z.get;
          else
            u = u[H];
        } else
          Z = C(u, H), u = u[H];
        if (Z && !L)
          S[r] = u;
      }
    }
    return u;
  };
});
var ln = R((t, n) => {
  var h = ut(), c = h("%Object.getOwnPropertyDescriptor%", true);
  if (c)
    try {
      c([], "length");
    } catch (i) {
      c = null;
    }
  n.exports = c;
});
var Rt = R((t, n) => {
  var h = On(), c = Vn(), i = An(), g = ln();
  n.exports = function w(I, E, j) {
    if (!I || typeof I !== "object" && typeof I !== "function")
      throw new i("`obj` must be an object or a function`");
    if (typeof E !== "string" && typeof E !== "symbol")
      throw new i("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null)
      throw new i("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null)
      throw new i("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null)
      throw new i("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] !== "boolean")
      throw new i("`loose`, if provided, must be a boolean");
    var $ = arguments.length > 3 ? arguments[3] : null, Y = arguments.length > 4 ? arguments[4] : null, m = arguments.length > 5 ? arguments[5] : null, s = arguments.length > 6 ? arguments[6] : false, P = !!g && g(I, E);
    if (h)
      h(I, E, { configurable: m === null && P ? P.configurable : !m, enumerable: $ === null && P ? P.enumerable : !$, value: j, writable: Y === null && P ? P.writable : !Y });
    else if (s || !$ && !Y && !m)
      I[E] = j;
    else
      throw new c("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  };
});
var Dt = R((t, n) => {
  var h = On(), c = function i() {
    return !!h;
  };
  c.hasArrayLengthDefineBug = function i() {
    if (!h)
      return null;
    try {
      return h([], "length", { value: 1 }).length !== 1;
    } catch (g) {
      return true;
    }
  }, n.exports = c;
});
var rt = R((t, n) => {
  var h = kn(), c = Rt(), i = Dt()(), g = ln(), w = An(), I = h("%Math.floor%");
  n.exports = function E(j, $) {
    if (typeof j !== "function")
      throw new w("`fn` is not a function");
    if (typeof $ !== "number" || $ < 0 || $ > 4294967295 || I($) !== $)
      throw new w("`length` must be a positive 32-bit integer");
    var Y = arguments.length > 2 && !!arguments[2], m = true, s = true;
    if ("length" in j && g) {
      var P = g(j, "length");
      if (P && !P.configurable)
        m = false;
      if (P && !P.writable)
        s = false;
    }
    if (m || s || !Y)
      if (i)
        c(j, "length", $, true, true);
      else
        c(j, "length", $);
    return j;
  };
});
var Zn = R((t, n) => {
  var h = Tn(), c = kn(), i = rt(), g = An(), w = c("%Function.prototype.apply%"), I = c("%Function.prototype.call%"), E = c("%Reflect.apply%", true) || h.call(I, w), j = On(), $ = c("%Math.max%");
  n.exports = function m(s) {
    if (typeof s !== "function")
      throw new g("a function is required");
    var P = E(h, I, arguments);
    return i(P, 1 + $(0, s.length - (arguments.length - 1)), true);
  };
  var Y = function m() {
    return E(h, w, arguments);
  };
  if (j)
    j(n.exports, "apply", { value: Y });
  else
    n.exports.apply = Y;
});
var Wt = R((t, n) => {
  var h = kn(), c = Zn(), i = c(h("String.prototype.indexOf"));
  n.exports = function g(w, I) {
    var E = h(w, !!I);
    if (typeof E === "function" && i(w, ".prototype.") > -1)
      return c(E);
    return E;
  };
});
var bt = R((t, n) => {
  var h = (typeof JSON !== "undefined" ? JSON : st()).stringify, c = It(), i = St(), g = Zn(), w = Wt(), I = w("Array.prototype.join"), E = w("Array.prototype.push"), j = function Y(m, s) {
    var P = "";
    for (var S = 0;S < m; S += 1)
      P += s;
    return P;
  }, $ = function(Y, m, s) {
    return s;
  };
  n.exports = function Y(m) {
    var s = arguments.length > 1 ? arguments[1] : undefined, P = s && s.space || "";
    if (typeof P === "number")
      P = j(P, " ");
    var S = !!s && typeof s.cycles === "boolean" && s.cycles, T = s && s.replacer ? g(s.replacer) : $, v = typeof s === "function" ? s : s && s.cmp, x = v && function(C) {
      var D = v.length > 2 && function b(k) {
        return C[k];
      };
      return function(b, k) {
        return v({ key: b, value: C[b] }, { key: k, value: C[k] }, D ? { __proto__: null, get: D } : undefined);
      };
    }, O = [];
    return function C(D, b, k, f) {
      var G = P ? `
` + j(f, P) : "", U = P ? ": " : ":";
      if (k && k.toJSON && typeof k.toJSON === "function")
        k = k.toJSON();
      if (k = T(D, b, k), k === undefined)
        return;
      if (typeof k !== "object" || k === null)
        return h(k);
      if (c(k)) {
        var K = [];
        for (var l = 0;l < k.length; l++) {
          var hn = C(k, l, k[l], f + 1) || h(null);
          E(K, G + P + hn);
        }
        return "[" + I(K, ",") + G + "]";
      }
      if (O.indexOf(k) !== -1) {
        if (S)
          return h("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      } else
        E(O, k);
      var a = i(k).sort(x && x(k)), K = [];
      for (var l = 0;l < a.length; l++) {
        var b = a[l], W = C(k, b, k[b], f + 1);
        if (!W)
          continue;
        var d = h(b) + U + W;
        E(K, G + P + d);
      }
      return O.splice(O.indexOf(k), 1), "{" + I(K, ",") + G + "}";
    }({ "": m }, "", m, 0);
  };
});
var Dn = Nt(bt(), 1);
var rn = function(t, n, h, c) {
  let i, g, w, I = n || [0], E = (h = h || 0) >>> 3, j = c === -1 ? 3 : 0;
  for (i = 0;i < t.length; i += 1)
    w = i + E, g = w >>> 2, I.length <= g && I.push(0), I[g] |= t[i] << 8 * (j + c * (w % 4));
  return { value: I, binLen: 8 * t.length + h };
};
var mn = function(t, n, h) {
  switch (n) {
    case "UTF8":
    case "UTF16BE":
    case "UTF16LE":
      break;
    default:
      throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE");
  }
  switch (t) {
    case "HEX":
      return function(c, i, g) {
        return function(w, I, E, j) {
          let $, Y, m, s;
          if (w.length % 2 != 0)
            throw new Error("String of HEX type must be in byte increments");
          let P = I || [0], S = (E = E || 0) >>> 3, T = j === -1 ? 3 : 0;
          for ($ = 0;$ < w.length; $ += 2) {
            if (Y = parseInt(w.substr($, 2), 16), isNaN(Y))
              throw new Error("String of HEX type contains invalid characters");
            for (s = ($ >>> 1) + S, m = s >>> 2;P.length <= m; )
              P.push(0);
            P[m] |= Y << 8 * (T + j * (s % 4));
          }
          return { value: P, binLen: 4 * w.length + E };
        }(c, i, g, h);
      };
    case "TEXT":
      return function(c, i, g) {
        return function(w, I, E, j, $) {
          let Y, m, s, P, S, T, v, x, O = 0, C = E || [0], D = (j = j || 0) >>> 3;
          if (I === "UTF8")
            for (v = $ === -1 ? 3 : 0, s = 0;s < w.length; s += 1)
              for (Y = w.charCodeAt(s), m = [], 128 > Y ? m.push(Y) : 2048 > Y ? (m.push(192 | Y >>> 6), m.push(128 | 63 & Y)) : 55296 > Y || 57344 <= Y ? m.push(224 | Y >>> 12, 128 | Y >>> 6 & 63, 128 | 63 & Y) : (s += 1, Y = 65536 + ((1023 & Y) << 10 | 1023 & w.charCodeAt(s)), m.push(240 | Y >>> 18, 128 | Y >>> 12 & 63, 128 | Y >>> 6 & 63, 128 | 63 & Y)), P = 0;P < m.length; P += 1) {
                for (T = O + D, S = T >>> 2;C.length <= S; )
                  C.push(0);
                C[S] |= m[P] << 8 * (v + $ * (T % 4)), O += 1;
              }
          else
            for (v = $ === -1 ? 2 : 0, x = I === "UTF16LE" && $ !== 1 || I !== "UTF16LE" && $ === 1, s = 0;s < w.length; s += 1) {
              for (Y = w.charCodeAt(s), x === true && (P = 255 & Y, Y = P << 8 | Y >>> 8), T = O + D, S = T >>> 2;C.length <= S; )
                C.push(0);
              C[S] |= Y << 8 * (v + $ * (T % 4)), O += 2;
            }
          return { value: C, binLen: 8 * O + j };
        }(c, n, i, g, h);
      };
    case "B64":
      return function(c, i, g) {
        return function(w, I, E, j) {
          let $, Y, m, s, P, S, T, v = 0, x = I || [0], O = (E = E || 0) >>> 3, C = j === -1 ? 3 : 0, D = w.indexOf("=");
          if (w.search(/^[a-zA-Z0-9=+/]+$/) === -1)
            throw new Error("Invalid character in base-64 string");
          if (w = w.replace(/=/g, ""), D !== -1 && D < w.length)
            throw new Error("Invalid '=' found in base-64 string");
          for (Y = 0;Y < w.length; Y += 4) {
            for (P = w.substr(Y, 4), s = 0, m = 0;m < P.length; m += 1)
              $ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(P.charAt(m)), s |= $ << 18 - 6 * m;
            for (m = 0;m < P.length - 1; m += 1) {
              for (T = v + O, S = T >>> 2;x.length <= S; )
                x.push(0);
              x[S] |= (s >>> 16 - 8 * m & 255) << 8 * (C + j * (T % 4)), v += 1;
            }
          }
          return { value: x, binLen: 8 * v + E };
        }(c, i, g, h);
      };
    case "BYTES":
      return function(c, i, g) {
        return function(w, I, E, j) {
          let $, Y, m, s, P = I || [0], S = (E = E || 0) >>> 3, T = j === -1 ? 3 : 0;
          for (Y = 0;Y < w.length; Y += 1)
            $ = w.charCodeAt(Y), s = Y + S, m = s >>> 2, P.length <= m && P.push(0), P[m] |= $ << 8 * (T + j * (s % 4));
          return { value: P, binLen: 8 * w.length + E };
        }(c, i, g, h);
      };
    case "ARRAYBUFFER":
      try {
        new ArrayBuffer(0);
      } catch (c) {
        throw new Error("ARRAYBUFFER not supported by this environment");
      }
      return function(c, i, g) {
        return function(w, I, E, j) {
          return rn(new Uint8Array(w), I, E, j);
        }(c, i, g, h);
      };
    case "UINT8ARRAY":
      try {
        new Uint8Array(0);
      } catch (c) {
        throw new Error("UINT8ARRAY not supported by this environment");
      }
      return function(c, i, g) {
        return rn(c, i, g, h);
      };
    default:
      throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
  }
};
var Wn = function(t, n, h, c) {
  switch (t) {
    case "HEX":
      return function(i) {
        return function(g, w, I, E) {
          let j, $, Y = "", m = w / 8, s = I === -1 ? 3 : 0;
          for (j = 0;j < m; j += 1)
            $ = g[j >>> 2] >>> 8 * (s + I * (j % 4)), Y += "0123456789abcdef".charAt($ >>> 4 & 15) + "0123456789abcdef".charAt(15 & $);
          return E.outputUpper ? Y.toUpperCase() : Y;
        }(i, n, h, c);
      };
    case "B64":
      return function(i) {
        return function(g, w, I, E) {
          let j, $, Y, m, s, P = "", S = w / 8, T = I === -1 ? 3 : 0;
          for (j = 0;j < S; j += 3)
            for (m = j + 1 < S ? g[j + 1 >>> 2] : 0, s = j + 2 < S ? g[j + 2 >>> 2] : 0, Y = (g[j >>> 2] >>> 8 * (T + I * (j % 4)) & 255) << 16 | (m >>> 8 * (T + I * ((j + 1) % 4)) & 255) << 8 | s >>> 8 * (T + I * ((j + 2) % 4)) & 255, $ = 0;$ < 4; $ += 1)
              P += 8 * j + 6 * $ <= w ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(Y >>> 6 * (3 - $) & 63) : E.b64Pad;
          return P;
        }(i, n, h, c);
      };
    case "BYTES":
      return function(i) {
        return function(g, w, I) {
          let E, j, $ = "", Y = w / 8, m = I === -1 ? 3 : 0;
          for (E = 0;E < Y; E += 1)
            j = g[E >>> 2] >>> 8 * (m + I * (E % 4)) & 255, $ += String.fromCharCode(j);
          return $;
        }(i, n, h);
      };
    case "ARRAYBUFFER":
      try {
        new ArrayBuffer(0);
      } catch (i) {
        throw new Error("ARRAYBUFFER not supported by this environment");
      }
      return function(i) {
        return function(g, w, I) {
          let E, j = w / 8, $ = new ArrayBuffer(j), Y = new Uint8Array($), m = I === -1 ? 3 : 0;
          for (E = 0;E < j; E += 1)
            Y[E] = g[E >>> 2] >>> 8 * (m + I * (E % 4)) & 255;
          return $;
        }(i, n, h);
      };
    case "UINT8ARRAY":
      try {
        new Uint8Array(0);
      } catch (i) {
        throw new Error("UINT8ARRAY not supported by this environment");
      }
      return function(i) {
        return function(g, w, I) {
          let E, j = w / 8, $ = I === -1 ? 3 : 0, Y = new Uint8Array(j);
          for (E = 0;E < j; E += 1)
            Y[E] = g[E >>> 2] >>> 8 * ($ + I * (E % 4)) & 255;
          return Y;
        }(i, n, h);
      };
    default:
      throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
  }
};
var vn = function(t, n) {
  let h, c, i = t.binLen >>> 3, g = n.binLen >>> 3, w = i << 3, I = 4 - i << 3;
  if (i % 4 != 0) {
    for (h = 0;h < g; h += 4)
      c = i + h >>> 2, t.value[c] |= n.value[h >>> 2] << w, t.value.push(0), t.value[c + 1] |= n.value[h >>> 2] >>> I;
    return (t.value.length << 2) - 4 >= g + i && t.value.pop(), { value: t.value, binLen: t.binLen + n.binLen };
  }
  return { value: t.value.concat(n.value), binLen: t.binLen + n.binLen };
};
var bn = function(t) {
  let n = { outputUpper: false, b64Pad: "=", outputLen: -1 }, h = t || {};
  if (n.outputUpper = h.outputUpper || false, h.b64Pad && (n.b64Pad = h.b64Pad), h.outputLen) {
    if (h.outputLen % 8 != 0)
      throw new Error("Output length must be a multiple of 8");
    n.outputLen = h.outputLen;
  } else if (h.shakeLen) {
    if (h.shakeLen % 8 != 0)
      throw new Error("Output length must be a multiple of 8");
    n.outputLen = h.shakeLen;
  }
  if (typeof n.outputUpper != "boolean")
    throw new Error("Invalid outputUpper formatting option");
  if (typeof n.b64Pad != "string")
    throw new Error("Invalid b64Pad formatting option");
  return n;
};
var tn = function(t, n, h, c) {
  let i = t + " must include a value and format";
  if (!n) {
    if (!c)
      throw new Error(i);
    return c;
  }
  if (n.value === undefined || !n.format)
    throw new Error(i);
  return mn(n.format, n.encoding || "UTF8", h)(n.value);
};
var cn = function(t, n) {
  return t << n | t >>> 32 - n;
};
var B = function(t, n) {
  return t >>> n | t << 32 - n;
};
var Un = function(t, n) {
  return t >>> n;
};
var Ln = function(t, n, h) {
  return t ^ n ^ h;
};
var Fn = function(t, n, h) {
  return t & n ^ ~t & h;
};
var Bn = function(t, n, h) {
  return t & n ^ t & h ^ n & h;
};
var Lt = function(t) {
  return B(t, 2) ^ B(t, 13) ^ B(t, 22);
};
var y = function(t, n) {
  let h = (65535 & t) + (65535 & n);
  return (65535 & (t >>> 16) + (n >>> 16) + (h >>> 16)) << 16 | 65535 & h;
};
var Mt = function(t, n, h, c) {
  let i = (65535 & t) + (65535 & n) + (65535 & h) + (65535 & c);
  return (65535 & (t >>> 16) + (n >>> 16) + (h >>> 16) + (c >>> 16) + (i >>> 16)) << 16 | 65535 & i;
};
var wn = function(t, n, h, c, i) {
  let g = (65535 & t) + (65535 & n) + (65535 & h) + (65535 & c) + (65535 & i);
  return (65535 & (t >>> 16) + (n >>> 16) + (h >>> 16) + (c >>> 16) + (i >>> 16) + (g >>> 16)) << 16 | 65535 & g;
};
var Ht = function(t) {
  return B(t, 7) ^ B(t, 18) ^ Un(t, 3);
};
var pt = function(t) {
  return B(t, 6) ^ B(t, 11) ^ B(t, 25);
};
var Kt = function(t) {
  return [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
};
var Qn = function(t, n) {
  let h, c, i, g, w, I, E, j = [];
  for (h = n[0], c = n[1], i = n[2], g = n[3], w = n[4], E = 0;E < 80; E += 1)
    j[E] = E < 16 ? t[E] : cn(j[E - 3] ^ j[E - 8] ^ j[E - 14] ^ j[E - 16], 1), I = E < 20 ? wn(cn(h, 5), Fn(c, i, g), w, 1518500249, j[E]) : E < 40 ? wn(cn(h, 5), Ln(c, i, g), w, 1859775393, j[E]) : E < 60 ? wn(cn(h, 5), Bn(c, i, g), w, 2400959708, j[E]) : wn(cn(h, 5), Ln(c, i, g), w, 3395469782, j[E]), w = g, g = i, i = cn(c, 30), c = h, h = I;
  return n[0] = y(h, n[0]), n[1] = y(c, n[1]), n[2] = y(i, n[2]), n[3] = y(g, n[3]), n[4] = y(w, n[4]), n;
};
var dt = function(t, n, h, c) {
  let i, g = 15 + (n + 65 >>> 9 << 4), w = n + h;
  for (;t.length <= g; )
    t.push(0);
  for (t[n >>> 5] |= 128 << 24 - n % 32, t[g] = 4294967295 & w, t[g - 1] = w / En | 0, i = 0;i < t.length; i += 16)
    c = Qn(t.slice(i, i + 16), c);
  return c;
};
var Mn = function(t) {
  let n;
  return n = t == "SHA-224" ? J.slice() : q.slice(), n;
};
var Hn = function(t, n) {
  let h, c, i, g, w, I, E, j, $, Y, m, s = [];
  for (h = n[0], c = n[1], i = n[2], g = n[3], w = n[4], I = n[5], E = n[6], j = n[7], m = 0;m < 64; m += 1)
    s[m] = m < 16 ? t[m] : Mt(B(P = s[m - 2], 17) ^ B(P, 19) ^ Un(P, 10), s[m - 7], Ht(s[m - 15]), s[m - 16]), $ = wn(j, pt(w), Fn(w, I, E), A[m], s[m]), Y = y(Lt(h), Bn(h, c, i)), j = E, E = I, I = w, w = y(g, $), g = i, i = c, c = h, h = y($, Y);
  var P;
  return n[0] = y(h, n[0]), n[1] = y(c, n[1]), n[2] = y(i, n[2]), n[3] = y(g, n[3]), n[4] = y(w, n[4]), n[5] = y(I, n[5]), n[6] = y(E, n[6]), n[7] = y(j, n[7]), n;
};
var pn = function(t, n) {
  let h;
  return n > 32 ? (h = 64 - n, new N(t.I << n | t.N >>> h, t.N << n | t.I >>> h)) : n !== 0 ? (h = 32 - n, new N(t.N << n | t.I >>> h, t.I << n | t.N >>> h)) : t;
};
var Q = function(t, n) {
  let h;
  return n < 32 ? (h = 32 - n, new N(t.N >>> n | t.I << h, t.I >>> n | t.N << h)) : (h = 64 - n, new N(t.I >>> n | t.N << h, t.N >>> n | t.I << h));
};
var an = function(t, n) {
  return new N(t.N >>> n, t.I >>> n | t.N << 32 - n);
};
var et = function(t, n, h) {
  return new N(t.N & n.N ^ t.N & h.N ^ n.N & h.N, t.I & n.I ^ t.I & h.I ^ n.I & h.I);
};
var ft = function(t) {
  let n = Q(t, 28), h = Q(t, 34), c = Q(t, 39);
  return new N(n.N ^ h.N ^ c.N, n.I ^ h.I ^ c.I);
};
var F = function(t, n) {
  let h, c;
  h = (65535 & t.I) + (65535 & n.I), c = (t.I >>> 16) + (n.I >>> 16) + (h >>> 16);
  let i = (65535 & c) << 16 | 65535 & h;
  return h = (65535 & t.N) + (65535 & n.N) + (c >>> 16), c = (t.N >>> 16) + (n.N >>> 16) + (h >>> 16), new N((65535 & c) << 16 | 65535 & h, i);
};
var Vt = function(t, n, h, c) {
  let i, g;
  i = (65535 & t.I) + (65535 & n.I) + (65535 & h.I) + (65535 & c.I), g = (t.I >>> 16) + (n.I >>> 16) + (h.I >>> 16) + (c.I >>> 16) + (i >>> 16);
  let w = (65535 & g) << 16 | 65535 & i;
  return i = (65535 & t.N) + (65535 & n.N) + (65535 & h.N) + (65535 & c.N) + (g >>> 16), g = (t.N >>> 16) + (n.N >>> 16) + (h.N >>> 16) + (c.N >>> 16) + (i >>> 16), new N((65535 & g) << 16 | 65535 & i, w);
};
var yt = function(t, n, h, c, i) {
  let g, w;
  g = (65535 & t.I) + (65535 & n.I) + (65535 & h.I) + (65535 & c.I) + (65535 & i.I), w = (t.I >>> 16) + (n.I >>> 16) + (h.I >>> 16) + (c.I >>> 16) + (i.I >>> 16) + (g >>> 16);
  let I = (65535 & w) << 16 | 65535 & g;
  return g = (65535 & t.N) + (65535 & n.N) + (65535 & h.N) + (65535 & c.N) + (65535 & i.N) + (w >>> 16), w = (t.N >>> 16) + (n.N >>> 16) + (h.N >>> 16) + (c.N >>> 16) + (i.N >>> 16) + (g >>> 16), new N((65535 & w) << 16 | 65535 & g, I);
};
var Yn = function(t, n) {
  return new N(t.N ^ n.N, t.I ^ n.I);
};
var ot = function(t) {
  let n = Q(t, 19), h = Q(t, 61), c = an(t, 6);
  return new N(n.N ^ h.N ^ c.N, n.I ^ h.I ^ c.I);
};
var Gt = function(t) {
  let n = Q(t, 1), h = Q(t, 8), c = an(t, 7);
  return new N(n.N ^ h.N ^ c.N, n.I ^ h.I ^ c.I);
};
var lt = function(t) {
  let n = Q(t, 14), h = Q(t, 18), c = Q(t, 41);
  return new N(n.N ^ h.N ^ c.N, n.I ^ h.I ^ c.I);
};
var Kn = function(t) {
  return t === "SHA-384" ? [new N(3418070365, J[0]), new N(1654270250, J[1]), new N(2438529370, J[2]), new N(355462360, J[3]), new N(1731405415, J[4]), new N(41048885895, J[5]), new N(3675008525, J[6]), new N(1203062813, J[7])] : [new N(q[0], 4089235720), new N(q[1], 2227873595), new N(q[2], 4271175723), new N(q[3], 1595750129), new N(q[4], 2917565137), new N(q[5], 725511199), new N(q[6], 4215389547), new N(q[7], 327033209)];
};
var dn = function(t, n) {
  let h, c, i, g, w, I, E, j, $, Y, m, s, P = [];
  for (h = n[0], c = n[1], i = n[2], g = n[3], w = n[4], I = n[5], E = n[6], j = n[7], m = 0;m < 80; m += 1)
    m < 16 ? (s = 2 * m, P[m] = new N(t[s], t[s + 1])) : P[m] = Vt(ot(P[m - 2]), P[m - 7], Gt(P[m - 15]), P[m - 16]), $ = yt(j, lt(w), (T = I, v = E, new N((S = w).N & T.N ^ ~S.N & v.N, S.I & T.I ^ ~S.I & v.I)), Bt[m], P[m]), Y = F(ft(h), et(h, c, i)), j = E, E = I, I = w, w = F(g, $), g = i, i = c, c = h, h = F($, Y);
  var S, T, v;
  return n[0] = F(h, n[0]), n[1] = F(c, n[1]), n[2] = F(i, n[2]), n[3] = F(g, n[3]), n[4] = F(w, n[4]), n[5] = F(I, n[5]), n[6] = F(E, n[6]), n[7] = F(j, n[7]), n;
};
var Cn = function(t) {
  let n, h = [];
  for (n = 0;n < 5; n += 1)
    h[n] = [new N(0, 0), new N(0, 0), new N(0, 0), new N(0, 0), new N(0, 0)];
  return h;
};
var Zt = function(t) {
  let n, h = [];
  for (n = 0;n < 5; n += 1)
    h[n] = t[n].slice();
  return h;
};
var Pn = function(t, n) {
  let h, c, i, g, w = [], I = [];
  if (t !== null)
    for (c = 0;c < t.length; c += 2)
      n[(c >>> 1) % 5][(c >>> 1) / 5 | 0] = Yn(n[(c >>> 1) % 5][(c >>> 1) / 5 | 0], new N(t[c + 1], t[c]));
  for (h = 0;h < 24; h += 1) {
    for (g = Cn(), c = 0;c < 5; c += 1)
      w[c] = (E = n[c][0], j = n[c][1], $ = n[c][2], Y = n[c][3], m = n[c][4], new N(E.N ^ j.N ^ $.N ^ Y.N ^ m.N, E.I ^ j.I ^ $.I ^ Y.I ^ m.I));
    for (c = 0;c < 5; c += 1)
      I[c] = Yn(w[(c + 4) % 5], pn(w[(c + 1) % 5], 1));
    for (c = 0;c < 5; c += 1)
      for (i = 0;i < 5; i += 1)
        n[c][i] = Yn(n[c][i], I[c]);
    for (c = 0;c < 5; c += 1)
      for (i = 0;i < 5; i += 1)
        g[i][(2 * c + 3 * i) % 5] = pn(n[c][i], Xt[c][i]);
    for (c = 0;c < 5; c += 1)
      for (i = 0;i < 5; i += 1)
        n[c][i] = Yn(g[c][i], new N(~g[(c + 1) % 5][i].N & g[(c + 2) % 5][i].N, ~g[(c + 1) % 5][i].I & g[(c + 2) % 5][i].I));
    n[0][0] = Yn(n[0][0], at[h]);
  }
  var E, j, $, Y, m;
  return n;
};
var Xn = function(t) {
  let n, h, c = 0, i = [0, 0], g = [4294967295 & t, t / En & 2097151];
  for (n = 6;n >= 0; n--)
    h = g[n >> 2] >>> 8 * n & 255, h === 0 && c === 0 || (i[c + 1 >> 2] |= h << 8 * (c + 1), c += 1);
  return c = c !== 0 ? c : 1, i[0] |= c, { value: c + 1 > 4 ? i : [i[0]], binLen: 8 + 8 * c };
};
var xn = function(t) {
  return vn(Xn(t.binLen), t);
};
var en = function(t, n) {
  let h, c = Xn(n);
  c = vn(c, t);
  let i = n >>> 2, g = (i - c.value.length % i) % i;
  for (h = 0;h < g; h++)
    c.value.push(0);
  return c.value;
};
var En = 4294967296;
var A = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
var J = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
var q = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
var Nn = "Chosen SHA variant is not supported";
var zn = "Cannot set numRounds with MAC";

class jn {
  constructor(t, n, h) {
    let c = h || {};
    if (this.t = n, this.i = c.encoding || "UTF8", this.numRounds = c.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds)
      throw new Error("numRounds must a integer >= 1");
    this.o = t, this.h = [], this.u = 0, this.l = false, this.A = 0, this.H = false, this.S = [], this.p = [];
  }
  update(t) {
    let n, h = 0, c = this.m >>> 5, i = this.C(t, this.h, this.u), g = i.binLen, w = i.value, I = g >>> 5;
    for (n = 0;n < I; n += c)
      h + this.m <= g && (this.U = this.v(w.slice(n, n + c), this.U), h += this.m);
    return this.A += h, this.h = w.slice(h >>> 5), this.u = g % this.m, this.l = true, this;
  }
  getHash(t, n) {
    let h, c, i = this.R, g = bn(n);
    if (this.K) {
      if (g.outputLen === -1)
        throw new Error("Output length must be specified in options");
      i = g.outputLen;
    }
    let w = Wn(t, i, this.T, g);
    if (this.H && this.g)
      return w(this.g(g));
    for (c = this.F(this.h.slice(), this.u, this.A, this.L(this.U), i), h = 1;h < this.numRounds; h += 1)
      this.K && i % 32 != 0 && (c[c.length - 1] &= 16777215 >>> 24 - i % 32), c = this.F(c, i, 0, this.B(this.o), i);
    return w(c);
  }
  setHMACKey(t, n, h) {
    if (!this.M)
      throw new Error("Variant does not support HMAC");
    if (this.l)
      throw new Error("Cannot set MAC key after calling update");
    let c = mn(n, (h || {}).encoding || "UTF8", this.T);
    this.k(c(t));
  }
  k(t) {
    let n = this.m >>> 3, h = n / 4 - 1, c;
    if (this.numRounds !== 1)
      throw new Error(zn);
    if (this.H)
      throw new Error("MAC key already set");
    for (n < t.binLen / 8 && (t.value = this.F(t.value, t.binLen, 0, this.B(this.o), this.R));t.value.length <= h; )
      t.value.push(0);
    for (c = 0;c <= h; c += 1)
      this.S[c] = 909522486 ^ t.value[c], this.p[c] = 1549556828 ^ t.value[c];
    this.U = this.v(this.S, this.U), this.A = this.m, this.H = true;
  }
  getHMAC(t, n) {
    let h = bn(n);
    return Wn(t, this.R, this.T, h)(this.Y());
  }
  Y() {
    let t;
    if (!this.H)
      throw new Error("Cannot call getHMAC without first setting MAC key");
    let n = this.F(this.h.slice(), this.u, this.A, this.L(this.U), this.R);
    return t = this.v(this.p, this.B(this.o)), t = this.F(n, this.R, this.m, t, this.R), t;
  }
}
var Ut = class extends jn {
  constructor(t, n, h) {
    if (t !== "SHA-1")
      throw new Error(Nn);
    super(t, n, h);
    let c = h || {};
    this.M = true, this.g = this.Y, this.T = -1, this.C = mn(this.t, this.i, this.T), this.v = Qn, this.L = function(i) {
      return i.slice();
    }, this.B = Kt, this.F = dt, this.U = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.m = 512, this.R = 160, this.K = false, c.hmacKey && this.k(tn("hmacKey", c.hmacKey, this.T));
  }
};
var Ft = class extends jn {
  constructor(t, n, h) {
    if (t !== "SHA-224" && t !== "SHA-256")
      throw new Error(Nn);
    super(t, n, h);
    let c = h || {};
    this.g = this.Y, this.M = true, this.T = -1, this.C = mn(this.t, this.i, this.T), this.v = Hn, this.L = function(i) {
      return i.slice();
    }, this.B = Mn, this.F = function(i, g, w, I) {
      return function(E, j, $, Y, m) {
        let s, P, S = 15 + (j + 65 >>> 9 << 4), T = j + $;
        for (;E.length <= S; )
          E.push(0);
        for (E[j >>> 5] |= 128 << 24 - j % 32, E[S] = 4294967295 & T, E[S - 1] = T / En | 0, s = 0;s < E.length; s += 16)
          Y = Hn(E.slice(s, s + 16), Y);
        return P = m === "SHA-224" ? [Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6]] : Y, P;
      }(i, g, w, I, t);
    }, this.U = Mn(t), this.m = 512, this.R = t === "SHA-224" ? 224 : 256, this.K = false, c.hmacKey && this.k(tn("hmacKey", c.hmacKey, this.T));
  }
};

class N {
  constructor(t, n) {
    this.N = t, this.I = n;
  }
}
var Bt = [new N(A[0], 3609767458), new N(A[1], 602891725), new N(A[2], 3964484399), new N(A[3], 2173295548), new N(A[4], 4081628472), new N(A[5], 3053834265), new N(A[6], 2937671579), new N(A[7], 3664609560), new N(A[8], 2734883394), new N(A[9], 1164996542), new N(A[10], 1323610764), new N(A[11], 3590304994), new N(A[12], 4068182383), new N(A[13], 991336113), new N(A[14], 633803317), new N(A[15], 3479774868), new N(A[16], 2666613458), new N(A[17], 944711139), new N(A[18], 2341262773), new N(A[19], 2007800933), new N(A[20], 1495990901), new N(A[21], 1856431235), new N(A[22], 3175218132), new N(A[23], 2198950837), new N(A[24], 3999719339), new N(A[25], 766784016), new N(A[26], 2566594879), new N(A[27], 3203337956), new N(A[28], 1034457026), new N(A[29], 2466948901), new N(A[30], 3758326383), new N(A[31], 168717936), new N(A[32], 1188179964), new N(A[33], 1546045734), new N(A[34], 1522805485), new N(A[35], 2643833823), new N(A[36], 2343527390), new N(A[37], 1014477480), new N(A[38], 1206759142), new N(A[39], 344077627), new N(A[40], 1290863460), new N(A[41], 3158454273), new N(A[42], 3505952657), new N(A[43], 106217008), new N(A[44], 3606008344), new N(A[45], 1432725776), new N(A[46], 1467031594), new N(A[47], 851169720), new N(A[48], 3100823752), new N(A[49], 1363258195), new N(A[50], 3750685593), new N(A[51], 3785050280), new N(A[52], 3318307427), new N(A[53], 3812723403), new N(A[54], 2003034995), new N(A[55], 3602036899), new N(A[56], 1575990012), new N(A[57], 1125592928), new N(A[58], 2716904306), new N(A[59], 442776044), new N(A[60], 593698344), new N(A[61], 3733110249), new N(A[62], 2999351573), new N(A[63], 3815920427), new N(3391569614, 3928383900), new N(3515267271, 566280711), new N(3940187606, 3454069534), new N(4118630271, 4000239992), new N(116418474, 1914138554), new N(174292421, 2731055270), new N(289380356, 3203993006), new N(460393269, 320620315), new N(685471733, 587496836), new N(852142971, 1086792851), new N(1017036298, 365543100), new N(1126000580, 2618297676), new N(1288033470, 3409855158), new N(1501505948, 4234509866), new N(1607167915, 987167468), new N(1816402316, 1246189591)];
var Qt = class extends jn {
  constructor(t, n, h) {
    if (t !== "SHA-384" && t !== "SHA-512")
      throw new Error(Nn);
    super(t, n, h);
    let c = h || {};
    this.g = this.Y, this.M = true, this.T = -1, this.C = mn(this.t, this.i, this.T), this.v = dn, this.L = function(i) {
      return i.slice();
    }, this.B = Kn, this.F = function(i, g, w, I) {
      return function(E, j, $, Y, m) {
        let s, P, S = 31 + (j + 129 >>> 10 << 5), T = j + $;
        for (;E.length <= S; )
          E.push(0);
        for (E[j >>> 5] |= 128 << 24 - j % 32, E[S] = 4294967295 & T, E[S - 1] = T / En | 0, s = 0;s < E.length; s += 32)
          Y = dn(E.slice(s, s + 32), Y);
        return P = m === "SHA-384" ? [Y[0].N, Y[0].I, Y[1].N, Y[1].I, Y[2].N, Y[2].I, Y[3].N, Y[3].I, Y[4].N, Y[4].I, Y[5].N, Y[5].I] : [Y[0].N, Y[0].I, Y[1].N, Y[1].I, Y[2].N, Y[2].I, Y[3].N, Y[3].I, Y[4].N, Y[4].I, Y[5].N, Y[5].I, Y[6].N, Y[6].I, Y[7].N, Y[7].I], P;
      }(i, g, w, I, t);
    }, this.U = Kn(t), this.m = 1024, this.R = t === "SHA-384" ? 384 : 512, this.K = false, c.hmacKey && this.k(tn("hmacKey", c.hmacKey, this.T));
  }
};
var at = [new N(0, 1), new N(0, 32898), new N(2147483648, 32906), new N(2147483648, 2147516416), new N(0, 32907), new N(0, 2147483649), new N(2147483648, 2147516545), new N(2147483648, 32777), new N(0, 138), new N(0, 136), new N(0, 2147516425), new N(0, 2147483658), new N(0, 2147516555), new N(2147483648, 139), new N(2147483648, 32905), new N(2147483648, 32771), new N(2147483648, 32770), new N(2147483648, 128), new N(0, 32778), new N(2147483648, 2147483658), new N(2147483648, 2147516545), new N(2147483648, 32896), new N(0, 2147483649), new N(2147483648, 2147516424)];
var Xt = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];
var zt = class extends jn {
  constructor(t, n, h) {
    let c = 6, i = 0;
    super(t, n, h);
    let g = h || {};
    if (this.numRounds !== 1) {
      if (g.kmacKey || g.hmacKey)
        throw new Error(zn);
      if (this.o === "CSHAKE128" || this.o === "CSHAKE256")
        throw new Error("Cannot set numRounds for CSHAKE variants");
    }
    switch (this.T = 1, this.C = mn(this.t, this.i, this.T), this.v = Pn, this.L = Zt, this.B = Cn, this.U = Cn(), this.K = false, t) {
      case "SHA3-224":
        this.m = i = 1152, this.R = 224, this.M = true, this.g = this.Y;
        break;
      case "SHA3-256":
        this.m = i = 1088, this.R = 256, this.M = true, this.g = this.Y;
        break;
      case "SHA3-384":
        this.m = i = 832, this.R = 384, this.M = true, this.g = this.Y;
        break;
      case "SHA3-512":
        this.m = i = 576, this.R = 512, this.M = true, this.g = this.Y;
        break;
      case "SHAKE128":
        c = 31, this.m = i = 1344, this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "SHAKE256":
        c = 31, this.m = i = 1088, this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "KMAC128":
        c = 4, this.m = i = 1344, this.X(h), this.R = -1, this.K = true, this.M = false, this.g = this._;
        break;
      case "KMAC256":
        c = 4, this.m = i = 1088, this.X(h), this.R = -1, this.K = true, this.M = false, this.g = this._;
        break;
      case "CSHAKE128":
        this.m = i = 1344, c = this.O(h), this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "CSHAKE256":
        this.m = i = 1088, c = this.O(h), this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      default:
        throw new Error(Nn);
    }
    this.F = function(w, I, E, j, $) {
      return function(Y, m, s, P, S, T, v) {
        let x, O, C = 0, D = [], b = S >>> 5, k = m >>> 5;
        for (x = 0;x < k && m >= S; x += b)
          P = Pn(Y.slice(x, x + b), P), m -= S;
        for (Y = Y.slice(x), m %= S;Y.length < b; )
          Y.push(0);
        for (x = m >>> 3, Y[x >> 2] ^= T << x % 4 * 8, Y[b - 1] ^= 2147483648, P = Pn(Y, P);32 * D.length < v && (O = P[C % 5][C / 5 | 0], D.push(O.I), !(32 * D.length >= v)); )
          D.push(O.N), C += 1, 64 * C % S == 0 && (Pn(null, P), C = 0);
        return D;
      }(w, I, 0, j, i, c, $);
    }, g.hmacKey && this.k(tn("hmacKey", g.hmacKey, this.T));
  }
  O(t, n) {
    let h = function(i) {
      let g = i || {};
      return { funcName: tn("funcName", g.funcName, 1, { value: [], binLen: 0 }), customization: tn("Customization", g.customization, 1, { value: [], binLen: 0 }) };
    }(t || {});
    n && (h.funcName = n);
    let c = vn(xn(h.funcName), xn(h.customization));
    if (h.customization.binLen !== 0 || h.funcName.binLen !== 0) {
      let i = en(c, this.m >>> 3);
      for (let g = 0;g < i.length; g += this.m >>> 5)
        this.U = this.v(i.slice(g, g + (this.m >>> 5)), this.U), this.A += this.m;
      return 4;
    }
    return 31;
  }
  X(t) {
    let n = function(c) {
      let i = c || {};
      return { kmacKey: tn("kmacKey", i.kmacKey, 1), funcName: { value: [1128353099], binLen: 32 }, customization: tn("Customization", i.customization, 1, { value: [], binLen: 0 }) };
    }(t || {});
    this.O(t, n.funcName);
    let h = en(xn(n.kmacKey), this.m >>> 3);
    for (let c = 0;c < h.length; c += this.m >>> 5)
      this.U = this.v(h.slice(c, c + (this.m >>> 5)), this.U), this.A += this.m;
    this.H = true;
  }
  _(t) {
    let n = vn({ value: this.h.slice(), binLen: this.u }, function(h) {
      let c, i, g = 0, w = [0, 0], I = [4294967295 & h, h / En & 2097151];
      for (c = 6;c >= 0; c--)
        i = I[c >> 2] >>> 8 * c & 255, i === 0 && g === 0 || (w[g >> 2] |= i << 8 * g, g += 1);
      return g = g !== 0 ? g : 1, w[g >> 2] |= g << 8 * g, { value: g + 1 > 4 ? w : [w[0]], binLen: 8 + 8 * g };
    }(t.outputLen));
    return this.F(n.value, n.binLen, this.A, this.L(this.U), t.outputLen);
  }
};

class _n {
  constructor(t, n, h) {
    if (t == "SHA-1")
      this.P = new Ut(t, n, h);
    else if (t == "SHA-224" || t == "SHA-256")
      this.P = new Ft(t, n, h);
    else if (t == "SHA-384" || t == "SHA-512")
      this.P = new Qt(t, n, h);
    else {
      if (t != "SHA3-224" && t != "SHA3-256" && t != "SHA3-384" && t != "SHA3-512" && t != "SHAKE128" && t != "SHAKE256" && t != "CSHAKE128" && t != "CSHAKE256" && t != "KMAC128" && t != "KMAC256")
        throw new Error(Nn);
      this.P = new zt(t, n, h);
    }
  }
  update(t) {
    return this.P.update(t), this;
  }
  getHash(t, n) {
    return this.P.getHash(t, n);
  }
  setHMACKey(t, n, h) {
    this.P.setHMACKey(t, n, h);
  }
  getHMAC(t, n) {
    return this.P.getHMAC(t, n);
  }
}
var Sn = function(t, n, h = 0) {
  let c = Dn.default({ ...t, signature: undefined }), i = n.noTimeWindow ? 0 : Math.floor(Date.now() / (n.timeWindow ?? nt)) + h;
  return new _n("SHA-256", "TEXT", { encoding: "UTF8" }).update(c).update(Dn.default(n)).update(`${i}`).getHash("B64");
};
function Jn(t, n = {}) {
  return { ...t, signature: Sn(t, n) };
}
var nt = 5000;

class un {
  data = [];
  #n = new TextEncoder;
  static payload(t, n, h) {
    return new un().payload(t, n, h);
  }
  static blob(t, n) {
    return new un().blob(t, n);
  }
  #t(t) {
    let n = this.#n.encode(t), h = new Uint8Array([n.byteLength]);
    this.data.push(h.buffer), this.data.push(n.buffer);
  }
  payload(t, n, h) {
    this.#t(t);
    let c = new Uint8Array([1]);
    this.data.push(c.buffer);
    let i = JSON.stringify(h ? Jn(n, { secret: h }) : n), g = this.#n.encode(i), w = new Uint32Array([g.byteLength]);
    return this.data.push(w.buffer), this.data.push(g.buffer), this;
  }
  blob(t, n) {
    this.#t(t);
    let h = new Uint8Array([2]);
    this.data.push(h.buffer);
    let c = new Uint32Array([n.size]);
    return this.data.push(c.buffer), this.data.push(n), this;
  }
  build() {
    return new Blob(this.data);
  }
}
var ct = new TextDecoder;
function Jt(t, n) {
  let [h, c] = mt(t, n);
  return [ct.decode(new Uint8Array(t, c, h)), c + h];
}
function qt(t, n) {
  let [h, c] = it(t, n);
  return [ct.decode(new Uint8Array(t, c, h)), c + h];
}
function n8(t, n) {
  let [h, c] = it(t, n);
  return [new Blob([new Uint8Array(t, c, h)], { type: "application/octet-stream" }), c + h];
}
function it(t, n) {
  return [new Uint32Array(t.slice(n, n + Uint32Array.BYTES_PER_ELEMENT), 0, 1)[0], n + Uint32Array.BYTES_PER_ELEMENT];
}
function mt(t, n) {
  return [new Uint8Array(t, n, 1)[0], n + Uint8Array.BYTES_PER_ELEMENT];
}
async function I8(t) {
  let n = {}, h = {}, c = 0, i;
  while (c < t.size) {
    i = i ?? await t.arrayBuffer();
    let [g, w] = Jt(i, c);
    c = w;
    let [I, E] = mt(i, c);
    switch (c = E, I) {
      case 1:
        let [j, $] = qt(i, c);
        c = $;
        try {
          n[g] = JSON.parse(j);
        } catch (s) {
          console.error(`Error parsing JSON for key "${g}":`, s);
        }
        break;
      case 2:
        let [Y, m] = n8(i, c);
        c = m, h[g] = Y;
        break;
    }
  }
  return { ...n, ...h };
}
async function t8(t) {
  let h = Math.ceil(t.size / 65536), c = await crypto.subtle.digest("SHA-256", new Uint8Array(0));
  for (let w = 0;w < h; w++) {
    let E = await t.slice(w * 65536, (w + 1) * 65536).arrayBuffer(), j = await crypto.subtle.digest("SHA-256", E), $ = new Uint8Array(c.byteLength + j.byteLength);
    $.set(new Uint8Array(c), 0), $.set(new Uint8Array(j), c.byteLength), c = await crypto.subtle.digest("SHA-256", $.buffer);
  }
  return Array.from(new Uint8Array(c)).map((w) => w.toString(16).padStart(2, "0")).join("");
}
async function tt(t, n, h = t8) {
  if (typeof t === "string" && t.startsWith("blob:")) {
    let i = await fetch(t).then((w) => w.blob());
    URL.revokeObjectURL(t);
    let g = `{blobUrl:${await h(i)}}`;
    return n[g] = i, g;
  }
  if (typeof t === "object" && t instanceof Blob) {
    let i = `{blob:${await h(t)}}`;
    return n[i] = t, i;
  }
  let c = t;
  if (Array.isArray(t))
    await Promise.all(t.map(async (i, g) => {
      let w = await tt(i, n, h);
      if (w !== t[g]) {
        if (t === c)
          t = [...t];
        t[g] = w;
      }
    }));
  else if (typeof t === "object" && t)
    await Promise.all(Object.entries(t).map(async ([i, g]) => {
      let w = await tt(g, n, h);
      if (w !== t[i]) {
        if (t === c)
          t = { ...t };
        t[i] = w;
      }
    }));
  return t;
}
function ht(t, n) {
  if (typeof t === "string" && t.startsWith("{blobUrl:"))
    return URL.createObjectURL(n[t]);
  if (typeof t === "string" && t.startsWith("{blob:"))
    return n[t];
  let h = t;
  if (Array.isArray(t))
    t.forEach((c, i) => {
      let g = ht(c, n);
      if (g !== c) {
        if (t === h)
          t = [...t];
        t[i] = g;
      }
    });
  else if (typeof t === "object" && t)
    Object.entries(t).forEach(([c, i]) => {
      let g = ht(i, n);
      if (g !== i) {
        if (t === h)
          t = { ...t };
        t[c] = g;
      }
    });
  return t;
}

// ../../NAPL/src/cycles/data-update/blob-utils.ts
function packageUpdates(updates, blobs, secret) {
  const blobBuilder = un.payload("payload", { updates }, secret);
  const addedBlob = new Set;
  for (let key in blobs) {
    if (!addedBlob.has(key)) {
      blobBuilder.blob(key, blobs[key]);
      addedBlob.add(key);
    }
  }
  return blobBuilder.build();
}
async function receiveBlob(blob) {
  const { payload, ...blobs } = await I8(blob);
  return { payload, blobs };
}

// ../../NAPL/node_modules/@dobuki/payload-validator/dist/index.js
var zJ = Object.create;
var { defineProperty: Q0, getPrototypeOf: QJ, getOwnPropertyNames: ZJ } = Object;
var UJ = Object.prototype.hasOwnProperty;
var XJ = (J2, q2, _) => {
  _ = J2 != null ? zJ(QJ(J2)) : {};
  const z = q2 || !J2 || !J2.__esModule ? Q0(_, "default", { value: J2, enumerable: true }) : _;
  for (let Q2 of ZJ(J2))
    if (!UJ.call(z, Q2))
      Q0(z, Q2, { get: () => J2[Q2], enumerable: true });
  return z;
};
var T = (J2, q2) => () => (q2 || J2((q2 = { exports: {} }).exports, q2), q2.exports);
var F0 = T((p3, G0) => {
  var p = function(J2) {
    throw { name: "SyntaxError", message: J2, at: M1, text: w1 };
  }, x = function(J2) {
    if (J2 && J2 !== R2)
      p("Expected '" + J2 + "' instead of '" + R2 + "'");
    return R2 = w1.charAt(M1), M1 += 1, R2;
  }, U0 = function() {
    var J2, q2 = "";
    if (R2 === "-")
      q2 = "-", x("-");
    while (R2 >= "0" && R2 <= "9")
      q2 += R2, x();
    if (R2 === ".") {
      q2 += ".";
      while (x() && R2 >= "0" && R2 <= "9")
        q2 += R2;
    }
    if (R2 === "e" || R2 === "E") {
      if (q2 += R2, x(), R2 === "-" || R2 === "+")
        q2 += R2, x();
      while (R2 >= "0" && R2 <= "9")
        q2 += R2, x();
    }
    if (J2 = Number(q2), !isFinite(J2))
      p("Bad number");
    return J2;
  }, X0 = function() {
    var J2, q2, _ = "", z;
    if (R2 === '"')
      while (x())
        if (R2 === '"')
          return x(), _;
        else if (R2 === "\\")
          if (x(), R2 === "u") {
            z = 0;
            for (q2 = 0;q2 < 4; q2 += 1) {
              if (J2 = parseInt(x(), 16), !isFinite(J2))
                break;
              z = z * 16 + J2;
            }
            _ += String.fromCharCode(z);
          } else if (typeof Z0[R2] === "string")
            _ += Z0[R2];
          else
            break;
        else
          _ += R2;
    p("Bad string");
  }, y2 = function() {
    while (R2 && R2 <= " ")
      x();
  }, GJ = function() {
    switch (R2) {
      case "t":
        return x("t"), x("r"), x("u"), x("e"), true;
      case "f":
        return x("f"), x("a"), x("l"), x("s"), x("e"), false;
      case "n":
        return x("n"), x("u"), x("l"), x("l"), null;
      default:
        p("Unexpected '" + R2 + "'");
    }
  }, FJ = function() {
    var J2 = [];
    if (R2 === "[") {
      if (x("["), y2(), R2 === "]")
        return x("]"), J2;
      while (R2) {
        if (J2.push(D1()), y2(), R2 === "]")
          return x("]"), J2;
        x(","), y2();
      }
    }
    p("Bad array");
  }, BJ = function() {
    var J2, q2 = {};
    if (R2 === "{") {
      if (x("{"), y2(), R2 === "}")
        return x("}"), q2;
      while (R2) {
        if (J2 = X0(), y2(), x(":"), Object.prototype.hasOwnProperty.call(q2, J2))
          p('Duplicate key "' + J2 + '"');
        if (q2[J2] = D1(), y2(), R2 === "}")
          return x("}"), q2;
        x(","), y2();
      }
    }
    p("Bad object");
  }, D1 = function() {
    switch (y2(), R2) {
      case "{":
        return BJ();
      case "[":
        return FJ();
      case '"':
        return X0();
      case "-":
        return U0();
      default:
        return R2 >= "0" && R2 <= "9" ? U0() : GJ();
    }
  }, M1, R2, Z0 = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f", n: `
`, r: "\r", t: "\t" }, w1;
  G0.exports = function(J2, q2) {
    var _;
    if (w1 = J2, M1 = 0, R2 = " ", _ = D1(), y2(), R2)
      p("Syntax error");
    return typeof q2 === "function" ? function z(Q2, Z) {
      var G, V, U = Q2[Z];
      if (U && typeof U === "object") {
        for (G in D1)
          if (Object.prototype.hasOwnProperty.call(U, G))
            if (V = z(U, G), typeof V === "undefined")
              delete U[G];
            else
              U[G] = V;
      }
      return q2.call(Q2, Z, U);
    }({ "": _ }, "") : _;
  };
});
var V0 = T((c3, B0) => {
  var m1 = function(J2) {
    return y1.lastIndex = 0, y1.test(J2) ? '"' + J2.replace(y1, function(q2) {
      var _ = VJ[q2];
      return typeof _ === "string" ? _ : "\\u" + ("0000" + q2.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + J2 + '"';
  }, O1 = function(J2, q2) {
    var _, z, Q2, Z, G = b, V, U = q2[J2];
    if (U && typeof U === "object" && typeof U.toJSON === "function")
      U = U.toJSON(J2);
    if (typeof u === "function")
      U = u.call(q2, J2, U);
    switch (typeof U) {
      case "string":
        return m1(U);
      case "number":
        return isFinite(U) ? String(U) : "null";
      case "boolean":
      case "null":
        return String(U);
      case "object":
        if (!U)
          return "null";
        if (b += R1, V = [], Object.prototype.toString.apply(U) === "[object Array]") {
          Z = U.length;
          for (_ = 0;_ < Z; _ += 1)
            V[_] = O1(_, U) || "null";
          return Q2 = V.length === 0 ? "[]" : b ? `[
` + b + V.join(`,
` + b) + `
` + G + "]" : "[" + V.join(",") + "]", b = G, Q2;
        }
        if (u && typeof u === "object") {
          Z = u.length;
          for (_ = 0;_ < Z; _ += 1)
            if (z = u[_], typeof z === "string") {
              if (Q2 = O1(z, U), Q2)
                V.push(m1(z) + (b ? ": " : ":") + Q2);
            }
        } else
          for (z in U)
            if (Object.prototype.hasOwnProperty.call(U, z)) {
              if (Q2 = O1(z, U), Q2)
                V.push(m1(z) + (b ? ": " : ":") + Q2);
            }
        return Q2 = V.length === 0 ? "{}" : b ? `{
` + b + V.join(`,
` + b) + `
` + G + "}" : "{" + V.join(",") + "}", b = G, Q2;
      default:
    }
  }, y1 = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, b, R1, VJ = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': "\\\"", "\\": "\\\\" }, u;
  B0.exports = function(J2, q2, _) {
    var z;
    if (b = "", R1 = "", typeof _ === "number")
      for (z = 0;z < _; z += 1)
        R1 += " ";
    else if (typeof _ === "string")
      R1 = _;
    if (u = q2, q2 && typeof q2 !== "function" && (typeof q2 !== "object" || typeof q2.length !== "number"))
      throw new Error("JSON.stringify");
    return O1("", { "": J2 });
  };
});
var K0 = T((KJ) => {
  KJ.parse = F0();
  KJ.stringify = V0();
});
var L0 = T((h3, H0) => {
  var WJ = {}.toString;
  H0.exports = Array.isArray || function(J2) {
    return WJ.call(J2) == "[object Array]";
  };
});
var g1 = T((Y3, M0) => {
  var W0 = Object.prototype.toString;
  M0.exports = function J(q2) {
    var _ = W0.call(q2), z = _ === "[object Arguments]";
    if (!z)
      z = _ !== "[object Array]" && q2 !== null && typeof q2 === "object" && typeof q2.length === "number" && q2.length >= 0 && W0.call(q2.callee) === "[object Function]";
    return z;
  };
});
var j0 = T((d3, N0) => {
  var T0;
  if (!Object.keys)
    z1 = Object.prototype.hasOwnProperty, p1 = Object.prototype.toString, D0 = g1(), c1 = Object.prototype.propertyIsEnumerable, R0 = !c1.call({ toString: null }, "toString"), O0 = c1.call(function() {
    }, "prototype"), Q1 = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], A1 = function(J2) {
      var q2 = J2.constructor;
      return q2 && q2.prototype === J2;
    }, A0 = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, C0 = function() {
      if (typeof window === "undefined")
        return false;
      for (var J2 in window)
        try {
          if (!A0["$" + J2] && z1.call(window, J2) && window[J2] !== null && typeof window[J2] === "object")
            try {
              A1(window[J2]);
            } catch (q2) {
              return true;
            }
        } catch (q2) {
          return true;
        }
      return false;
    }(), x0 = function(J2) {
      if (typeof window === "undefined" || !C0)
        return A1(J2);
      try {
        return A1(J2);
      } catch (q2) {
        return false;
      }
    }, T0 = function J(q2) {
      var _ = q2 !== null && typeof q2 === "object", z = p1.call(q2) === "[object Function]", Q2 = D0(q2), Z = _ && p1.call(q2) === "[object String]", G = [];
      if (!_ && !z && !Q2)
        throw new TypeError("Object.keys called on a non-object");
      var V = O0 && z;
      if (Z && q2.length > 0 && !z1.call(q2, 0))
        for (var U = 0;U < q2.length; ++U)
          G.push(String(U));
      if (Q2 && q2.length > 0)
        for (var K = 0;K < q2.length; ++K)
          G.push(String(K));
      else
        for (var H in q2)
          if (!(V && H === "prototype") && z1.call(q2, H))
            G.push(String(H));
      if (R0) {
        var F2 = x0(q2);
        for (var B2 = 0;B2 < Q1.length; ++B2)
          if (!(F2 && Q1[B2] === "constructor") && z1.call(q2, Q1[B2]))
            G.push(Q1[B2]);
      }
      return G;
    };
  var z1, p1, D0, c1, R0, O0, Q1, A1, A0, C0, x0;
  N0.exports = T0;
});
var S0 = T((l3, v0) => {
  var MJ = Array.prototype.slice, DJ = g1(), k0 = Object.keys, C1 = k0 ? function J(q2) {
    return k0(q2);
  } : j0(), I0 = Object.keys;
  C1.shim = function J() {
    if (Object.keys) {
      var q2 = function() {
        var _ = Object.keys(arguments);
        return _ && _.length === arguments.length;
      }(1, 2);
      if (!q2)
        Object.keys = function _(z) {
          if (DJ(z))
            return I0(MJ.call(z));
          return I0(z);
        };
    } else
      Object.keys = C1;
    return Object.keys || C1;
  };
  v0.exports = C1;
});
var b0 = T((o3, P0) => {
  var RJ = "Function.prototype.bind called on incompatible ", OJ = Object.prototype.toString, AJ = Math.max, CJ = "[object Function]", $0 = function J(q2, _) {
    var z = [];
    for (var Q2 = 0;Q2 < q2.length; Q2 += 1)
      z[Q2] = q2[Q2];
    for (var Z = 0;Z < _.length; Z += 1)
      z[Z + q2.length] = _[Z];
    return z;
  }, xJ = function J(q2, _) {
    var z = [];
    for (var Q2 = _ || 0, Z = 0;Q2 < q2.length; Q2 += 1, Z += 1)
      z[Z] = q2[Q2];
    return z;
  }, TJ = function(J2, q2) {
    var _ = "";
    for (var z = 0;z < J2.length; z += 1)
      if (_ += J2[z], z + 1 < J2.length)
        _ += q2;
    return _;
  };
  P0.exports = function J(q2) {
    var _ = this;
    if (typeof _ !== "function" || OJ.apply(_) !== CJ)
      throw new TypeError(RJ + _);
    var z = xJ(arguments, 1), Q2, Z = function() {
      if (this instanceof Q2) {
        var H = _.apply(this, $0(z, arguments));
        if (Object(H) === H)
          return H;
        return this;
      }
      return _.apply(q2, $0(z, arguments));
    }, G = AJ(0, _.length - z.length), V = [];
    for (var U = 0;U < G; U++)
      V[U] = "$" + U;
    if (Q2 = Function("binder", "return function (" + TJ(V, ",") + "){ return binder.apply(this,arguments); }")(Z), _.prototype) {
      var K = function H() {
      };
      K.prototype = _.prototype, Q2.prototype = new K, K.prototype = null;
    }
    return Q2;
  };
});
var Z1 = T((a3, E0) => {
  var NJ = b0();
  E0.exports = Function.prototype.bind || NJ;
});
var w0 = T((s3, f0) => {
  f0.exports = Error;
});
var m0 = T((i3, y0) => {
  y0.exports = EvalError;
});
var p0 = T((r3, g0) => {
  g0.exports = RangeError;
});
var u0 = T((t3, c0) => {
  c0.exports = ReferenceError;
});
var u1 = T((n3, h0) => {
  h0.exports = SyntaxError;
});
var U1 = T((e3, Y0) => {
  Y0.exports = TypeError;
});
var l0 = T((q5, d0) => {
  d0.exports = URIError;
});
var a0 = T((J5, o0) => {
  o0.exports = function J() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function")
      return false;
    if (typeof Symbol.iterator === "symbol")
      return true;
    var q2 = {}, _ = Symbol("test"), z = Object(_);
    if (typeof _ === "string")
      return false;
    if (Object.prototype.toString.call(_) !== "[object Symbol]")
      return false;
    if (Object.prototype.toString.call(z) !== "[object Symbol]")
      return false;
    var Q2 = 42;
    q2[_] = Q2;
    for (_ in q2)
      return false;
    if (typeof Object.keys === "function" && Object.keys(q2).length !== 0)
      return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(q2).length !== 0)
      return false;
    var Z = Object.getOwnPropertySymbols(q2);
    if (Z.length !== 1 || Z[0] !== _)
      return false;
    if (!Object.prototype.propertyIsEnumerable.call(q2, _))
      return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var G = Object.getOwnPropertyDescriptor(q2, _);
      if (G.value !== Q2 || G.enumerable !== true)
        return false;
    }
    return true;
  };
});
var h1 = T((_5, i0) => {
  var s0 = typeof Symbol !== "undefined" && Symbol, jJ = a0();
  i0.exports = function J() {
    if (typeof s0 !== "function")
      return false;
    if (typeof Symbol !== "function")
      return false;
    if (typeof s0("foo") !== "symbol")
      return false;
    if (typeof Symbol("bar") !== "symbol")
      return false;
    return jJ();
  };
});
var Y1 = T((z5, t0) => {
  var r0 = { foo: {} }, kJ = Object;
  t0.exports = function J() {
    return { __proto__: r0 }.foo === r0.foo && !({ __proto__: null } instanceof kJ);
  };
});
var d1 = T((Q5, n0) => {
  var IJ = Function.prototype.call, vJ = Object.prototype.hasOwnProperty, SJ = Z1();
  n0.exports = SJ.call(IJ, vJ);
});
var G1 = T((Z5, zq) => {
  var A2, $J = w0(), PJ = m0(), bJ = p0(), EJ = u0(), i = u1(), s = U1(), fJ = l0(), _q = Function, l1 = function(J2) {
    try {
      return _q('"use strict"; return (' + J2 + ").constructor;")();
    } catch (q2) {
    }
  }, h = Object.getOwnPropertyDescriptor;
  if (h)
    try {
      h({}, "");
    } catch (J2) {
      h = null;
    }
  var o1 = function() {
    throw new s;
  }, wJ = h ? function() {
    try {
      return arguments.callee, o1;
    } catch (J2) {
      try {
        return h(arguments, "callee").get;
      } catch (q2) {
        return o1;
      }
    }
  }() : o1, o = h1()(), yJ = Y1()(), k = Object.getPrototypeOf || (yJ ? function(J2) {
    return J2.__proto__;
  } : null), a = {}, mJ = typeof Uint8Array === "undefined" || !k ? A2 : k(Uint8Array), Y = { __proto__: null, "%AggregateError%": typeof AggregateError === "undefined" ? A2 : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? A2 : ArrayBuffer, "%ArrayIteratorPrototype%": o && k ? k([][Symbol.iterator]()) : A2, "%AsyncFromSyncIteratorPrototype%": A2, "%AsyncFunction%": a, "%AsyncGenerator%": a, "%AsyncGeneratorFunction%": a, "%AsyncIteratorPrototype%": a, "%Atomics%": typeof Atomics === "undefined" ? A2 : Atomics, "%BigInt%": typeof BigInt === "undefined" ? A2 : BigInt, "%BigInt64Array%": typeof BigInt64Array === "undefined" ? A2 : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array === "undefined" ? A2 : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView === "undefined" ? A2 : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": $J, "%eval%": eval, "%EvalError%": PJ, "%Float32Array%": typeof Float32Array === "undefined" ? A2 : Float32Array, "%Float64Array%": typeof Float64Array === "undefined" ? A2 : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? A2 : FinalizationRegistry, "%Function%": _q, "%GeneratorFunction%": a, "%Int8Array%": typeof Int8Array === "undefined" ? A2 : Int8Array, "%Int16Array%": typeof Int16Array === "undefined" ? A2 : Int16Array, "%Int32Array%": typeof Int32Array === "undefined" ? A2 : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": o && k ? k(k([][Symbol.iterator]())) : A2, "%JSON%": typeof JSON === "object" ? JSON : A2, "%Map%": typeof Map === "undefined" ? A2 : Map, "%MapIteratorPrototype%": typeof Map === "undefined" || !o || !k ? A2 : k(new Map()[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise === "undefined" ? A2 : Promise, "%Proxy%": typeof Proxy === "undefined" ? A2 : Proxy, "%RangeError%": bJ, "%ReferenceError%": EJ, "%Reflect%": typeof Reflect === "undefined" ? A2 : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set === "undefined" ? A2 : Set, "%SetIteratorPrototype%": typeof Set === "undefined" || !o || !k ? A2 : k(new Set()[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? A2 : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": o && k ? k(""[Symbol.iterator]()) : A2, "%Symbol%": o ? Symbol : A2, "%SyntaxError%": i, "%ThrowTypeError%": wJ, "%TypedArray%": mJ, "%TypeError%": s, "%Uint8Array%": typeof Uint8Array === "undefined" ? A2 : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? A2 : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array === "undefined" ? A2 : Uint16Array, "%Uint32Array%": typeof Uint32Array === "undefined" ? A2 : Uint32Array, "%URIError%": fJ, "%WeakMap%": typeof WeakMap === "undefined" ? A2 : WeakMap, "%WeakRef%": typeof WeakRef === "undefined" ? A2 : WeakRef, "%WeakSet%": typeof WeakSet === "undefined" ? A2 : WeakSet };
  if (k)
    try {
      null.error;
    } catch (J2) {
      e0 = k(k(J2)), Y["%Error.prototype%"] = e0;
    }
  var e0, gJ = function J(q2) {
    var _;
    if (q2 === "%AsyncFunction%")
      _ = l1("async function () {}");
    else if (q2 === "%GeneratorFunction%")
      _ = l1("function* () {}");
    else if (q2 === "%AsyncGeneratorFunction%")
      _ = l1("async function* () {}");
    else if (q2 === "%AsyncGenerator%") {
      var z = J("%AsyncGeneratorFunction%");
      if (z)
        _ = z.prototype;
    } else if (q2 === "%AsyncIteratorPrototype%") {
      var Q2 = J("%AsyncGenerator%");
      if (Q2 && k)
        _ = k(Q2.prototype);
    }
    return Y[q2] = _, _;
  }, qq = { __proto__: null, "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, X1 = Z1(), x1 = d1(), pJ = X1.call(Function.call, Array.prototype.concat), cJ = X1.call(Function.apply, Array.prototype.splice), Jq = X1.call(Function.call, String.prototype.replace), T1 = X1.call(Function.call, String.prototype.slice), uJ = X1.call(Function.call, RegExp.prototype.exec), hJ = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, YJ = /\\(\\)?/g, dJ = function J(q2) {
    var _ = T1(q2, 0, 1), z = T1(q2, -1);
    if (_ === "%" && z !== "%")
      throw new i("invalid intrinsic syntax, expected closing `%`");
    else if (z === "%" && _ !== "%")
      throw new i("invalid intrinsic syntax, expected opening `%`");
    var Q2 = [];
    return Jq(q2, hJ, function(Z, G, V, U) {
      Q2[Q2.length] = V ? Jq(U, YJ, "$1") : G || Z;
    }), Q2;
  }, lJ = function J(q2, _) {
    var z = q2, Q2;
    if (x1(qq, z))
      Q2 = qq[z], z = "%" + Q2[0] + "%";
    if (x1(Y, z)) {
      var Z = Y[z];
      if (Z === a)
        Z = gJ(z);
      if (typeof Z === "undefined" && !_)
        throw new s("intrinsic " + q2 + " exists, but is not available. Please file an issue!");
      return { alias: Q2, name: z, value: Z };
    }
    throw new i("intrinsic " + q2 + " does not exist!");
  };
  zq.exports = function J(q2, _) {
    if (typeof q2 !== "string" || q2.length === 0)
      throw new s("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof _ !== "boolean")
      throw new s('"allowMissing" argument must be a boolean');
    if (uJ(/^%?[^%]*%?$/, q2) === null)
      throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var z = dJ(q2), Q2 = z.length > 0 ? z[0] : "", Z = lJ("%" + Q2 + "%", _), G = Z.name, V = Z.value, U = false, K = Z.alias;
    if (K)
      Q2 = K[0], cJ(z, pJ([0, 1], K));
    for (var H = 1, F2 = true;H < z.length; H += 1) {
      var B2 = z[H], W = T1(B2, 0, 1), L = T1(B2, -1);
      if ((W === '"' || W === "'" || W === "`" || (L === '"' || L === "'" || L === "`")) && W !== L)
        throw new i("property names with quotes must have matching quotes");
      if (B2 === "constructor" || !F2)
        U = true;
      if (Q2 += "." + B2, G = "%" + Q2 + "%", x1(Y, G))
        V = Y[G];
      else if (V != null) {
        if (!(B2 in V)) {
          if (!_)
            throw new s("base intrinsic for " + q2 + " exists, but the property is not available.");
          return;
        }
        if (h && H + 1 >= z.length) {
          var D = h(V, B2);
          if (F2 = !!D, F2 && "get" in D && !("originalValue" in D.get))
            V = D.get;
          else
            V = V[B2];
        } else
          F2 = x1(V, B2), V = V[B2];
        if (F2 && !U)
          Y[G] = V;
      }
    }
    return V;
  };
});
var j1 = T((U5, Qq) => {
  var oJ = G1(), N1 = oJ("%Object.defineProperty%", true) || false;
  if (N1)
    try {
      N1({}, "a", { value: 1 });
    } catch (J2) {
      N1 = false;
    }
  Qq.exports = N1;
});
var Bq = T((X5, Fq) => {
  var C, e = SyntaxError, Gq = Function, n = TypeError, a1 = function(J2) {
    try {
      return Gq('"use strict"; return (' + J2 + ").constructor;")();
    } catch (q2) {
    }
  }, d = Object.getOwnPropertyDescriptor;
  if (d)
    try {
      d({}, "");
    } catch (J2) {
      d = null;
    }
  var s1 = function() {
    throw new n;
  }, aJ = d ? function() {
    try {
      return arguments.callee, s1;
    } catch (J2) {
      try {
        return d(arguments, "callee").get;
      } catch (q2) {
        return s1;
      }
    }
  }() : s1, r = h1()(), sJ = Y1()(), I = Object.getPrototypeOf || (sJ ? function(J2) {
    return J2.__proto__;
  } : null), t = {}, iJ = typeof Uint8Array === "undefined" || !I ? C : I(Uint8Array), l = { "%AggregateError%": typeof AggregateError === "undefined" ? C : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? C : ArrayBuffer, "%ArrayIteratorPrototype%": r && I ? I([][Symbol.iterator]()) : C, "%AsyncFromSyncIteratorPrototype%": C, "%AsyncFunction%": t, "%AsyncGenerator%": t, "%AsyncGeneratorFunction%": t, "%AsyncIteratorPrototype%": t, "%Atomics%": typeof Atomics === "undefined" ? C : Atomics, "%BigInt%": typeof BigInt === "undefined" ? C : BigInt, "%BigInt64Array%": typeof BigInt64Array === "undefined" ? C : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array === "undefined" ? C : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView === "undefined" ? C : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": Error, "%eval%": eval, "%EvalError%": EvalError, "%Float32Array%": typeof Float32Array === "undefined" ? C : Float32Array, "%Float64Array%": typeof Float64Array === "undefined" ? C : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? C : FinalizationRegistry, "%Function%": Gq, "%GeneratorFunction%": t, "%Int8Array%": typeof Int8Array === "undefined" ? C : Int8Array, "%Int16Array%": typeof Int16Array === "undefined" ? C : Int16Array, "%Int32Array%": typeof Int32Array === "undefined" ? C : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": r && I ? I(I([][Symbol.iterator]())) : C, "%JSON%": typeof JSON === "object" ? JSON : C, "%Map%": typeof Map === "undefined" ? C : Map, "%MapIteratorPrototype%": typeof Map === "undefined" || !r || !I ? C : I(new Map()[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise === "undefined" ? C : Promise, "%Proxy%": typeof Proxy === "undefined" ? C : Proxy, "%RangeError%": RangeError, "%ReferenceError%": ReferenceError, "%Reflect%": typeof Reflect === "undefined" ? C : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set === "undefined" ? C : Set, "%SetIteratorPrototype%": typeof Set === "undefined" || !r || !I ? C : I(new Set()[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? C : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": r && I ? I(""[Symbol.iterator]()) : C, "%Symbol%": r ? Symbol : C, "%SyntaxError%": e, "%ThrowTypeError%": aJ, "%TypedArray%": iJ, "%TypeError%": n, "%Uint8Array%": typeof Uint8Array === "undefined" ? C : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? C : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array === "undefined" ? C : Uint16Array, "%Uint32Array%": typeof Uint32Array === "undefined" ? C : Uint32Array, "%URIError%": URIError, "%WeakMap%": typeof WeakMap === "undefined" ? C : WeakMap, "%WeakRef%": typeof WeakRef === "undefined" ? C : WeakRef, "%WeakSet%": typeof WeakSet === "undefined" ? C : WeakSet };
  if (I)
    try {
      null.error;
    } catch (J2) {
      Zq = I(I(J2)), l["%Error.prototype%"] = Zq;
    }
  var Zq, rJ = function J(q2) {
    var _;
    if (q2 === "%AsyncFunction%")
      _ = a1("async function () {}");
    else if (q2 === "%GeneratorFunction%")
      _ = a1("function* () {}");
    else if (q2 === "%AsyncGeneratorFunction%")
      _ = a1("async function* () {}");
    else if (q2 === "%AsyncGenerator%") {
      var z = J("%AsyncGeneratorFunction%");
      if (z)
        _ = z.prototype;
    } else if (q2 === "%AsyncIteratorPrototype%") {
      var Q2 = J("%AsyncGenerator%");
      if (Q2 && I)
        _ = I(Q2.prototype);
    }
    return l[q2] = _, _;
  }, Uq = { "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, F1 = Z1(), k1 = d1(), tJ = F1.call(Function.call, Array.prototype.concat), nJ = F1.call(Function.apply, Array.prototype.splice), Xq = F1.call(Function.call, String.prototype.replace), I1 = F1.call(Function.call, String.prototype.slice), eJ = F1.call(Function.call, RegExp.prototype.exec), q3 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, J3 = /\\(\\)?/g, _3 = function J(q2) {
    var _ = I1(q2, 0, 1), z = I1(q2, -1);
    if (_ === "%" && z !== "%")
      throw new e("invalid intrinsic syntax, expected closing `%`");
    else if (z === "%" && _ !== "%")
      throw new e("invalid intrinsic syntax, expected opening `%`");
    var Q2 = [];
    return Xq(q2, q3, function(Z, G, V, U) {
      Q2[Q2.length] = V ? Xq(U, J3, "$1") : G || Z;
    }), Q2;
  }, z3 = function J(q2, _) {
    var z = q2, Q2;
    if (k1(Uq, z))
      Q2 = Uq[z], z = "%" + Q2[0] + "%";
    if (k1(l, z)) {
      var Z = l[z];
      if (Z === t)
        Z = rJ(z);
      if (typeof Z === "undefined" && !_)
        throw new n("intrinsic " + q2 + " exists, but is not available. Please file an issue!");
      return { alias: Q2, name: z, value: Z };
    }
    throw new e("intrinsic " + q2 + " does not exist!");
  };
  Fq.exports = function J(q2, _) {
    if (typeof q2 !== "string" || q2.length === 0)
      throw new n("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof _ !== "boolean")
      throw new n('"allowMissing" argument must be a boolean');
    if (eJ(/^%?[^%]*%?$/, q2) === null)
      throw new e("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var z = _3(q2), Q2 = z.length > 0 ? z[0] : "", Z = z3("%" + Q2 + "%", _), G = Z.name, V = Z.value, U = false, K = Z.alias;
    if (K)
      Q2 = K[0], nJ(z, tJ([0, 1], K));
    for (var H = 1, F2 = true;H < z.length; H += 1) {
      var B2 = z[H], W = I1(B2, 0, 1), L = I1(B2, -1);
      if ((W === '"' || W === "'" || W === "`" || (L === '"' || L === "'" || L === "`")) && W !== L)
        throw new e("property names with quotes must have matching quotes");
      if (B2 === "constructor" || !F2)
        U = true;
      if (Q2 += "." + B2, G = "%" + Q2 + "%", k1(l, G))
        V = l[G];
      else if (V != null) {
        if (!(B2 in V)) {
          if (!_)
            throw new n("base intrinsic for " + q2 + " exists, but the property is not available.");
          return;
        }
        if (d && H + 1 >= z.length) {
          var D = d(V, B2);
          if (F2 = !!D, F2 && "get" in D && !("originalValue" in D.get))
            V = D.get;
          else
            V = V[B2];
        } else
          F2 = k1(V, B2), V = V[B2];
        if (F2 && !U)
          l[G] = V;
      }
    }
    return V;
  };
});
var i1 = T((G5, Vq) => {
  var Q3 = Bq(), v1 = Q3("%Object.getOwnPropertyDescriptor%", true);
  if (v1)
    try {
      v1([], "length");
    } catch (J2) {
      v1 = null;
    }
  Vq.exports = v1;
});
var Wq = T((F5, Lq) => {
  var Kq = j1(), Z3 = u1(), q1 = U1(), Hq = i1();
  Lq.exports = function J(q2, _, z) {
    if (!q2 || typeof q2 !== "object" && typeof q2 !== "function")
      throw new q1("`obj` must be an object or a function`");
    if (typeof _ !== "string" && typeof _ !== "symbol")
      throw new q1("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null)
      throw new q1("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null)
      throw new q1("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null)
      throw new q1("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] !== "boolean")
      throw new q1("`loose`, if provided, must be a boolean");
    var Q2 = arguments.length > 3 ? arguments[3] : null, Z = arguments.length > 4 ? arguments[4] : null, G = arguments.length > 5 ? arguments[5] : null, V = arguments.length > 6 ? arguments[6] : false, U = !!Hq && Hq(q2, _);
    if (Kq)
      Kq(q2, _, { configurable: G === null && U ? U.configurable : !G, enumerable: Q2 === null && U ? U.enumerable : !Q2, value: z, writable: Z === null && U ? U.writable : !Z });
    else if (V || !Q2 && !Z && !G)
      q2[_] = z;
    else
      throw new Z3("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  };
});
var Rq = T((B5, Dq) => {
  var r1 = j1(), Mq = function J() {
    return !!r1;
  };
  Mq.hasArrayLengthDefineBug = function J() {
    if (!r1)
      return null;
    try {
      return r1([], "length", { value: 1 }).length !== 1;
    } catch (q2) {
      return true;
    }
  };
  Dq.exports = Mq;
});
var Tq = T((V5, xq) => {
  var U3 = G1(), Oq = Wq(), X3 = Rq()(), Aq = i1(), Cq = U1(), G3 = U3("%Math.floor%");
  xq.exports = function J(q2, _) {
    if (typeof q2 !== "function")
      throw new Cq("`fn` is not a function");
    if (typeof _ !== "number" || _ < 0 || _ > 4294967295 || G3(_) !== _)
      throw new Cq("`length` must be a positive 32-bit integer");
    var z = arguments.length > 2 && !!arguments[2], Q2 = true, Z = true;
    if ("length" in q2 && Aq) {
      var G = Aq(q2, "length");
      if (G && !G.configurable)
        Q2 = false;
      if (G && !G.writable)
        Z = false;
    }
    if (Q2 || Z || !z)
      if (X3)
        Oq(q2, "length", _, true, true);
      else
        Oq(q2, "length", _);
    return q2;
  };
});
var n1 = T((K5, S1) => {
  var t1 = Z1(), $1 = G1(), F3 = Tq(), B3 = U1(), kq = $1("%Function.prototype.apply%"), Iq = $1("%Function.prototype.call%"), vq = $1("%Reflect.apply%", true) || t1.call(Iq, kq), Nq = j1(), V3 = $1("%Math.max%");
  S1.exports = function J(q2) {
    if (typeof q2 !== "function")
      throw new B3("a function is required");
    var _ = vq(t1, Iq, arguments);
    return F3(_, 1 + V3(0, q2.length - (arguments.length - 1)), true);
  };
  var jq = function J() {
    return vq(t1, kq, arguments);
  };
  if (Nq)
    Nq(S1.exports, "apply", { value: jq });
  else
    S1.exports.apply = jq;
});
var bq = T((H5, Pq) => {
  var Sq = G1(), $q = n1(), K3 = $q(Sq("String.prototype.indexOf"));
  Pq.exports = function J(q2, _) {
    var z = Sq(q2, !!_);
    if (typeof z === "function" && K3(q2, ".prototype.") > -1)
      return $q(z);
    return z;
  };
});
var mq = T((L5, yq) => {
  var P1 = (typeof JSON !== "undefined" ? JSON : K0()).stringify, H3 = L0(), L3 = S0(), W3 = n1(), wq = bq(), Eq = wq("Array.prototype.join"), e1 = wq("Array.prototype.push"), fq = function J(q2, _) {
    var z = "";
    for (var Q2 = 0;Q2 < q2; Q2 += 1)
      z += _;
    return z;
  }, M3 = function(J2, q2, _) {
    return _;
  };
  yq.exports = function J(q2) {
    var _ = arguments.length > 1 ? arguments[1] : undefined, z = _ && _.space || "";
    if (typeof z === "number")
      z = fq(z, " ");
    var Q2 = !!_ && typeof _.cycles === "boolean" && _.cycles, Z = _ && _.replacer ? W3(_.replacer) : M3, G = typeof _ === "function" ? _ : _ && _.cmp, V = G && function(K) {
      var H = G.length > 2 && function F(B2) {
        return K[B2];
      };
      return function(F2, B2) {
        return G({ key: F2, value: K[F2] }, { key: B2, value: K[B2] }, H ? { __proto__: null, get: H } : undefined);
      };
    }, U = [];
    return function K(H, F2, B2, W) {
      var L = z ? `
` + fq(W, z) : "", D = z ? ": " : ":";
      if (B2 && B2.toJSON && typeof B2.toJSON === "function")
        B2 = B2.toJSON();
      if (B2 = Z(H, F2, B2), B2 === undefined)
        return;
      if (typeof B2 !== "object" || B2 === null)
        return P1(B2);
      if (H3(B2)) {
        var S = [];
        for (var O = 0;O < B2.length; O++) {
          var v = K(B2, O, B2[O], W + 1) || P1(null);
          e1(S, L + z + v);
        }
        return "[" + Eq(S, ",") + L + "]";
      }
      if (U.indexOf(B2) !== -1) {
        if (Q2)
          return P1("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      } else
        e1(U, B2);
      var N2 = L3(B2).sort(V && V(B2)), S = [];
      for (var O = 0;O < N2.length; O++) {
        var F2 = N2[O], j = K(B2, F2, B2[F2], W + 1);
        if (!j)
          continue;
        var P = P1(F2) + D + j;
        e1(S, L + z + P);
      }
      return U.splice(U.indexOf(B2), 1), "{" + Eq(S, ",") + L + "}";
    }({ "": q2 }, "", q2, 0);
  };
});
var z0 = XJ(mq(), 1);
var gq = function(J2, q2, _, z) {
  let Q2, Z, G;
  const V = q2 || [0], U = (_ = _ || 0) >>> 3, K = z === -1 ? 3 : 0;
  for (Q2 = 0;Q2 < J2.length; Q2 += 1)
    G = Q2 + U, Z = G >>> 2, V.length <= Z && V.push(0), V[Z] |= J2[Q2] << 8 * (K + z * (G % 4));
  return { value: V, binLen: 8 * J2.length + _ };
};
var _1 = function(J2, q2, _) {
  switch (q2) {
    case "UTF8":
    case "UTF16BE":
    case "UTF16LE":
      break;
    default:
      throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE");
  }
  switch (J2) {
    case "HEX":
      return function(z, Q2, Z) {
        return function(G, V, U, K) {
          let H, F2, B2, W;
          if (G.length % 2 != 0)
            throw new Error("String of HEX type must be in byte increments");
          const L = V || [0], D = (U = U || 0) >>> 3, O = K === -1 ? 3 : 0;
          for (H = 0;H < G.length; H += 2) {
            if (F2 = parseInt(G.substr(H, 2), 16), isNaN(F2))
              throw new Error("String of HEX type contains invalid characters");
            for (W = (H >>> 1) + D, B2 = W >>> 2;L.length <= B2; )
              L.push(0);
            L[B2] |= F2 << 8 * (O + K * (W % 4));
          }
          return { value: L, binLen: 4 * G.length + U };
        }(z, Q2, Z, _);
      };
    case "TEXT":
      return function(z, Q2, Z) {
        return function(G, V, U, K, H) {
          let F2, B2, W, L, D, O, v, N2, S = 0;
          const j = U || [0], P = (K = K || 0) >>> 3;
          if (V === "UTF8")
            for (v = H === -1 ? 3 : 0, W = 0;W < G.length; W += 1)
              for (F2 = G.charCodeAt(W), B2 = [], 128 > F2 ? B2.push(F2) : 2048 > F2 ? (B2.push(192 | F2 >>> 6), B2.push(128 | 63 & F2)) : 55296 > F2 || 57344 <= F2 ? B2.push(224 | F2 >>> 12, 128 | F2 >>> 6 & 63, 128 | 63 & F2) : (W += 1, F2 = 65536 + ((1023 & F2) << 10 | 1023 & G.charCodeAt(W)), B2.push(240 | F2 >>> 18, 128 | F2 >>> 12 & 63, 128 | F2 >>> 6 & 63, 128 | 63 & F2)), L = 0;L < B2.length; L += 1) {
                for (O = S + P, D = O >>> 2;j.length <= D; )
                  j.push(0);
                j[D] |= B2[L] << 8 * (v + H * (O % 4)), S += 1;
              }
          else
            for (v = H === -1 ? 2 : 0, N2 = V === "UTF16LE" && H !== 1 || V !== "UTF16LE" && H === 1, W = 0;W < G.length; W += 1) {
              for (F2 = G.charCodeAt(W), N2 === true && (L = 255 & F2, F2 = L << 8 | F2 >>> 8), O = S + P, D = O >>> 2;j.length <= D; )
                j.push(0);
              j[D] |= F2 << 8 * (v + H * (O % 4)), S += 2;
            }
          return { value: j, binLen: 8 * S + K };
        }(z, q2, Q2, Z, _);
      };
    case "B64":
      return function(z, Q2, Z) {
        return function(G, V, U, K) {
          let H, F2, B2, W, L, D, O, v = 0;
          const N2 = V || [0], S = (U = U || 0) >>> 3, j = K === -1 ? 3 : 0, P = G.indexOf("=");
          if (G.search(/^[a-zA-Z0-9=+/]+$/) === -1)
            throw new Error("Invalid character in base-64 string");
          if (G = G.replace(/=/g, ""), P !== -1 && P < G.length)
            throw new Error("Invalid '=' found in base-64 string");
          for (F2 = 0;F2 < G.length; F2 += 4) {
            for (L = G.substr(F2, 4), W = 0, B2 = 0;B2 < L.length; B2 += 1)
              H = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(L.charAt(B2)), W |= H << 18 - 6 * B2;
            for (B2 = 0;B2 < L.length - 1; B2 += 1) {
              for (O = v + S, D = O >>> 2;N2.length <= D; )
                N2.push(0);
              N2[D] |= (W >>> 16 - 8 * B2 & 255) << 8 * (j + K * (O % 4)), v += 1;
            }
          }
          return { value: N2, binLen: 8 * v + U };
        }(z, Q2, Z, _);
      };
    case "BYTES":
      return function(z, Q2, Z) {
        return function(G, V, U, K) {
          let H, F2, B2, W;
          const L = V || [0], D = (U = U || 0) >>> 3, O = K === -1 ? 3 : 0;
          for (F2 = 0;F2 < G.length; F2 += 1)
            H = G.charCodeAt(F2), W = F2 + D, B2 = W >>> 2, L.length <= B2 && L.push(0), L[B2] |= H << 8 * (O + K * (W % 4));
          return { value: L, binLen: 8 * G.length + U };
        }(z, Q2, Z, _);
      };
    case "ARRAYBUFFER":
      try {
        new ArrayBuffer(0);
      } catch (z) {
        throw new Error("ARRAYBUFFER not supported by this environment");
      }
      return function(z, Q2, Z) {
        return function(G, V, U, K) {
          return gq(new Uint8Array(G), V, U, K);
        }(z, Q2, Z, _);
      };
    case "UINT8ARRAY":
      try {
        new Uint8Array(0);
      } catch (z) {
        throw new Error("UINT8ARRAY not supported by this environment");
      }
      return function(z, Q2, Z) {
        return gq(z, Q2, Z, _);
      };
    default:
      throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
  }
};
var pq = function(J2, q2, _, z) {
  switch (J2) {
    case "HEX":
      return function(Q2) {
        return function(Z, G, V, U) {
          let H, F2, B2 = "";
          const W = G / 8, L = V === -1 ? 3 : 0;
          for (H = 0;H < W; H += 1)
            F2 = Z[H >>> 2] >>> 8 * (L + V * (H % 4)), B2 += "0123456789abcdef".charAt(F2 >>> 4 & 15) + "0123456789abcdef".charAt(15 & F2);
          return U.outputUpper ? B2.toUpperCase() : B2;
        }(Q2, q2, _, z);
      };
    case "B64":
      return function(Q2) {
        return function(Z, G, V, U) {
          let K, H, F2, B2, W, L = "";
          const D = G / 8, O = V === -1 ? 3 : 0;
          for (K = 0;K < D; K += 3)
            for (B2 = K + 1 < D ? Z[K + 1 >>> 2] : 0, W = K + 2 < D ? Z[K + 2 >>> 2] : 0, F2 = (Z[K >>> 2] >>> 8 * (O + V * (K % 4)) & 255) << 16 | (B2 >>> 8 * (O + V * ((K + 1) % 4)) & 255) << 8 | W >>> 8 * (O + V * ((K + 2) % 4)) & 255, H = 0;H < 4; H += 1)
              L += 8 * K + 6 * H <= G ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(F2 >>> 6 * (3 - H) & 63) : U.b64Pad;
          return L;
        }(Q2, q2, _, z);
      };
    case "BYTES":
      return function(Q2) {
        return function(Z, G, V) {
          let U, K, H = "";
          const F2 = G / 8, B2 = V === -1 ? 3 : 0;
          for (U = 0;U < F2; U += 1)
            K = Z[U >>> 2] >>> 8 * (B2 + V * (U % 4)) & 255, H += String.fromCharCode(K);
          return H;
        }(Q2, q2, _);
      };
    case "ARRAYBUFFER":
      try {
        new ArrayBuffer(0);
      } catch (Q2) {
        throw new Error("ARRAYBUFFER not supported by this environment");
      }
      return function(Q2) {
        return function(Z, G, V) {
          let U;
          const K = G / 8, H = new ArrayBuffer(K), F2 = new Uint8Array(H), B2 = V === -1 ? 3 : 0;
          for (U = 0;U < K; U += 1)
            F2[U] = Z[U >>> 2] >>> 8 * (B2 + V * (U % 4)) & 255;
          return H;
        }(Q2, q2, _);
      };
    case "UINT8ARRAY":
      try {
        new Uint8Array(0);
      } catch (Q2) {
        throw new Error("UINT8ARRAY not supported by this environment");
      }
      return function(Q2) {
        return function(Z, G, V) {
          let U;
          const K = G / 8, H = V === -1 ? 3 : 0, F2 = new Uint8Array(K);
          for (U = 0;U < K; U += 1)
            F2[U] = Z[U >>> 2] >>> 8 * (H + V * (U % 4)) & 255;
          return F2;
        }(Q2, q2, _);
      };
    default:
      throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
  }
};
var E1 = function(J2, q2) {
  let _, z;
  const Q2 = J2.binLen >>> 3, Z = q2.binLen >>> 3, G = Q2 << 3, V = 4 - Q2 << 3;
  if (Q2 % 4 != 0) {
    for (_ = 0;_ < Z; _ += 4)
      z = Q2 + _ >>> 2, J2.value[z] |= q2.value[_ >>> 2] << G, J2.value.push(0), J2.value[z + 1] |= q2.value[_ >>> 2] >>> V;
    return (J2.value.length << 2) - 4 >= Z + Q2 && J2.value.pop(), { value: J2.value, binLen: J2.binLen + q2.binLen };
  }
  return { value: J2.value.concat(q2.value), binLen: J2.binLen + q2.binLen };
};
var cq = function(J2) {
  const q2 = { outputUpper: false, b64Pad: "=", outputLen: -1 }, _ = J2 || {};
  if (q2.outputUpper = _.outputUpper || false, _.b64Pad && (q2.b64Pad = _.b64Pad), _.outputLen) {
    if (_.outputLen % 8 != 0)
      throw new Error("Output length must be a multiple of 8");
    q2.outputLen = _.outputLen;
  } else if (_.shakeLen) {
    if (_.shakeLen % 8 != 0)
      throw new Error("Output length must be a multiple of 8");
    q2.outputLen = _.shakeLen;
  }
  if (typeof q2.outputUpper != "boolean")
    throw new Error("Invalid outputUpper formatting option");
  if (typeof q2.b64Pad != "string")
    throw new Error("Invalid b64Pad formatting option");
  return q2;
};
var c = function(J2, q2, _, z) {
  const Q2 = J2 + " must include a value and format";
  if (!q2) {
    if (!z)
      throw new Error(Q2);
    return z;
  }
  if (q2.value === undefined || !q2.format)
    throw new Error(Q2);
  return _1(q2.format, q2.encoding || "UTF8", _)(q2.value);
};
var J1 = function(J2, q2) {
  return J2 << q2 | J2 >>> 32 - q2;
};
var f = function(J2, q2) {
  return J2 >>> q2 | J2 << 32 - q2;
};
var iq = function(J2, q2) {
  return J2 >>> q2;
};
var uq = function(J2, q2, _) {
  return J2 ^ q2 ^ _;
};
var rq = function(J2, q2, _) {
  return J2 & q2 ^ ~J2 & _;
};
var tq = function(J2, q2, _) {
  return J2 & q2 ^ J2 & _ ^ q2 & _;
};
var D3 = function(J2) {
  return f(J2, 2) ^ f(J2, 13) ^ f(J2, 22);
};
var $ = function(J2, q2) {
  const _ = (65535 & J2) + (65535 & q2);
  return (65535 & (J2 >>> 16) + (q2 >>> 16) + (_ >>> 16)) << 16 | 65535 & _;
};
var R3 = function(J2, q2, _, z) {
  const Q2 = (65535 & J2) + (65535 & q2) + (65535 & _) + (65535 & z);
  return (65535 & (J2 >>> 16) + (q2 >>> 16) + (_ >>> 16) + (z >>> 16) + (Q2 >>> 16)) << 16 | 65535 & Q2;
};
var V1 = function(J2, q2, _, z, Q2) {
  const Z = (65535 & J2) + (65535 & q2) + (65535 & _) + (65535 & z) + (65535 & Q2);
  return (65535 & (J2 >>> 16) + (q2 >>> 16) + (_ >>> 16) + (z >>> 16) + (Q2 >>> 16) + (Z >>> 16)) << 16 | 65535 & Z;
};
var O3 = function(J2) {
  return f(J2, 7) ^ f(J2, 18) ^ iq(J2, 3);
};
var A3 = function(J2) {
  return f(J2, 6) ^ f(J2, 11) ^ f(J2, 25);
};
var C3 = function(J2) {
  return [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
};
var nq = function(J2, q2) {
  let _, z, Q2, Z, G, V, U;
  const K = [];
  for (_ = q2[0], z = q2[1], Q2 = q2[2], Z = q2[3], G = q2[4], U = 0;U < 80; U += 1)
    K[U] = U < 16 ? J2[U] : J1(K[U - 3] ^ K[U - 8] ^ K[U - 14] ^ K[U - 16], 1), V = U < 20 ? V1(J1(_, 5), rq(z, Q2, Z), G, 1518500249, K[U]) : U < 40 ? V1(J1(_, 5), uq(z, Q2, Z), G, 1859775393, K[U]) : U < 60 ? V1(J1(_, 5), tq(z, Q2, Z), G, 2400959708, K[U]) : V1(J1(_, 5), uq(z, Q2, Z), G, 3395469782, K[U]), G = Z, Z = Q2, Q2 = J1(z, 30), z = _, _ = V;
  return q2[0] = $(_, q2[0]), q2[1] = $(z, q2[1]), q2[2] = $(Q2, q2[2]), q2[3] = $(Z, q2[3]), q2[4] = $(G, q2[4]), q2;
};
var x3 = function(J2, q2, _, z) {
  let Q2;
  const Z = 15 + (q2 + 65 >>> 9 << 4), G = q2 + _;
  for (;J2.length <= Z; )
    J2.push(0);
  for (J2[q2 >>> 5] |= 128 << 24 - q2 % 32, J2[Z] = 4294967295 & G, J2[Z - 1] = G / K1 | 0, Q2 = 0;Q2 < J2.length; Q2 += 16)
    z = nq(J2.slice(Q2, Q2 + 16), z);
  return z;
};
var hq = function(J2) {
  let q2;
  return q2 = J2 == "SHA-224" ? m.slice() : g.slice(), q2;
};
var Yq = function(J2, q2) {
  let _, z, Q2, Z, G, V, U, K, H, F2, B2;
  const W = [];
  for (_ = q2[0], z = q2[1], Q2 = q2[2], Z = q2[3], G = q2[4], V = q2[5], U = q2[6], K = q2[7], B2 = 0;B2 < 64; B2 += 1)
    W[B2] = B2 < 16 ? J2[B2] : R3(f(L = W[B2 - 2], 17) ^ f(L, 19) ^ iq(L, 10), W[B2 - 7], O3(W[B2 - 15]), W[B2 - 16]), H = V1(K, A3(G), rq(G, V, U), M[B2], W[B2]), F2 = $(D3(_), tq(_, z, Q2)), K = U, U = V, V = G, G = $(Z, H), Z = Q2, Q2 = z, z = _, _ = $(H, F2);
  var L;
  return q2[0] = $(_, q2[0]), q2[1] = $(z, q2[1]), q2[2] = $(Q2, q2[2]), q2[3] = $(Z, q2[3]), q2[4] = $(G, q2[4]), q2[5] = $(V, q2[5]), q2[6] = $(U, q2[6]), q2[7] = $(K, q2[7]), q2;
};
var dq = function(J2, q2) {
  let _;
  return q2 > 32 ? (_ = 64 - q2, new X(J2.I << q2 | J2.N >>> _, J2.N << q2 | J2.I >>> _)) : q2 !== 0 ? (_ = 32 - q2, new X(J2.N << q2 | J2.I >>> _, J2.I << q2 | J2.N >>> _)) : J2;
};
var w = function(J2, q2) {
  let _;
  return q2 < 32 ? (_ = 32 - q2, new X(J2.N >>> q2 | J2.I << _, J2.I >>> q2 | J2.N << _)) : (_ = 64 - q2, new X(J2.I >>> q2 | J2.N << _, J2.N >>> q2 | J2.I << _));
};
var eq = function(J2, q2) {
  return new X(J2.N >>> q2, J2.I >>> q2 | J2.N << 32 - q2);
};
var j3 = function(J2, q2, _) {
  return new X(J2.N & q2.N ^ J2.N & _.N ^ q2.N & _.N, J2.I & q2.I ^ J2.I & _.I ^ q2.I & _.I);
};
var k3 = function(J2) {
  const q2 = w(J2, 28), _ = w(J2, 34), z = w(J2, 39);
  return new X(q2.N ^ _.N ^ z.N, q2.I ^ _.I ^ z.I);
};
var E = function(J2, q2) {
  let _, z;
  _ = (65535 & J2.I) + (65535 & q2.I), z = (J2.I >>> 16) + (q2.I >>> 16) + (_ >>> 16);
  const Q2 = (65535 & z) << 16 | 65535 & _;
  return _ = (65535 & J2.N) + (65535 & q2.N) + (z >>> 16), z = (J2.N >>> 16) + (q2.N >>> 16) + (_ >>> 16), new X((65535 & z) << 16 | 65535 & _, Q2);
};
var I3 = function(J2, q2, _, z) {
  let Q2, Z;
  Q2 = (65535 & J2.I) + (65535 & q2.I) + (65535 & _.I) + (65535 & z.I), Z = (J2.I >>> 16) + (q2.I >>> 16) + (_.I >>> 16) + (z.I >>> 16) + (Q2 >>> 16);
  const G = (65535 & Z) << 16 | 65535 & Q2;
  return Q2 = (65535 & J2.N) + (65535 & q2.N) + (65535 & _.N) + (65535 & z.N) + (Z >>> 16), Z = (J2.N >>> 16) + (q2.N >>> 16) + (_.N >>> 16) + (z.N >>> 16) + (Q2 >>> 16), new X((65535 & Z) << 16 | 65535 & Q2, G);
};
var v3 = function(J2, q2, _, z, Q2) {
  let Z, G;
  Z = (65535 & J2.I) + (65535 & q2.I) + (65535 & _.I) + (65535 & z.I) + (65535 & Q2.I), G = (J2.I >>> 16) + (q2.I >>> 16) + (_.I >>> 16) + (z.I >>> 16) + (Q2.I >>> 16) + (Z >>> 16);
  const V = (65535 & G) << 16 | 65535 & Z;
  return Z = (65535 & J2.N) + (65535 & q2.N) + (65535 & _.N) + (65535 & z.N) + (65535 & Q2.N) + (G >>> 16), G = (J2.N >>> 16) + (q2.N >>> 16) + (_.N >>> 16) + (z.N >>> 16) + (Q2.N >>> 16) + (Z >>> 16), new X((65535 & G) << 16 | 65535 & Z, V);
};
var B1 = function(J2, q2) {
  return new X(J2.N ^ q2.N, J2.I ^ q2.I);
};
var S3 = function(J2) {
  const q2 = w(J2, 19), _ = w(J2, 61), z = eq(J2, 6);
  return new X(q2.N ^ _.N ^ z.N, q2.I ^ _.I ^ z.I);
};
var $3 = function(J2) {
  const q2 = w(J2, 1), _ = w(J2, 8), z = eq(J2, 7);
  return new X(q2.N ^ _.N ^ z.N, q2.I ^ _.I ^ z.I);
};
var P3 = function(J2) {
  const q2 = w(J2, 14), _ = w(J2, 18), z = w(J2, 41);
  return new X(q2.N ^ _.N ^ z.N, q2.I ^ _.I ^ z.I);
};
var lq = function(J2) {
  return J2 === "SHA-384" ? [new X(3418070365, m[0]), new X(1654270250, m[1]), new X(2438529370, m[2]), new X(355462360, m[3]), new X(1731405415, m[4]), new X(41048885895, m[5]), new X(3675008525, m[6]), new X(1203062813, m[7])] : [new X(g[0], 4089235720), new X(g[1], 2227873595), new X(g[2], 4271175723), new X(g[3], 1595750129), new X(g[4], 2917565137), new X(g[5], 725511199), new X(g[6], 4215389547), new X(g[7], 327033209)];
};
var oq = function(J2, q2) {
  let _, z, Q2, Z, G, V, U, K, H, F2, B2, W;
  const L = [];
  for (_ = q2[0], z = q2[1], Q2 = q2[2], Z = q2[3], G = q2[4], V = q2[5], U = q2[6], K = q2[7], B2 = 0;B2 < 80; B2 += 1)
    B2 < 16 ? (W = 2 * B2, L[B2] = new X(J2[W], J2[W + 1])) : L[B2] = I3(S3(L[B2 - 2]), L[B2 - 7], $3(L[B2 - 15]), L[B2 - 16]), H = v3(K, P3(G), (O = V, v = U, new X((D = G).N & O.N ^ ~D.N & v.N, D.I & O.I ^ ~D.I & v.I)), b3[B2], L[B2]), F2 = E(k3(_), j3(_, z, Q2)), K = U, U = V, V = G, G = E(Z, H), Z = Q2, Q2 = z, z = _, _ = E(H, F2);
  var D, O, v;
  return q2[0] = E(_, q2[0]), q2[1] = E(z, q2[1]), q2[2] = E(Q2, q2[2]), q2[3] = E(Z, q2[3]), q2[4] = E(G, q2[4]), q2[5] = E(V, q2[5]), q2[6] = E(U, q2[6]), q2[7] = E(K, q2[7]), q2;
};
var J0 = function(J2) {
  let q2;
  const _ = [];
  for (q2 = 0;q2 < 5; q2 += 1)
    _[q2] = [new X(0, 0), new X(0, 0), new X(0, 0), new X(0, 0), new X(0, 0)];
  return _;
};
var y3 = function(J2) {
  let q2;
  const _ = [];
  for (q2 = 0;q2 < 5; q2 += 1)
    _[q2] = J2[q2].slice();
  return _;
};
var b1 = function(J2, q2) {
  let _, z, Q2, Z;
  const G = [], V = [];
  if (J2 !== null)
    for (z = 0;z < J2.length; z += 2)
      q2[(z >>> 1) % 5][(z >>> 1) / 5 | 0] = B1(q2[(z >>> 1) % 5][(z >>> 1) / 5 | 0], new X(J2[z + 1], J2[z]));
  for (_ = 0;_ < 24; _ += 1) {
    for (Z = J0(), z = 0;z < 5; z += 1)
      G[z] = (U = q2[z][0], K = q2[z][1], H = q2[z][2], F2 = q2[z][3], B2 = q2[z][4], new X(U.N ^ K.N ^ H.N ^ F2.N ^ B2.N, U.I ^ K.I ^ H.I ^ F2.I ^ B2.I));
    for (z = 0;z < 5; z += 1)
      V[z] = B1(G[(z + 4) % 5], dq(G[(z + 1) % 5], 1));
    for (z = 0;z < 5; z += 1)
      for (Q2 = 0;Q2 < 5; Q2 += 1)
        q2[z][Q2] = B1(q2[z][Q2], V[z]);
    for (z = 0;z < 5; z += 1)
      for (Q2 = 0;Q2 < 5; Q2 += 1)
        Z[Q2][(2 * z + 3 * Q2) % 5] = dq(q2[z][Q2], w3[z][Q2]);
    for (z = 0;z < 5; z += 1)
      for (Q2 = 0;Q2 < 5; Q2 += 1)
        q2[z][Q2] = B1(Z[z][Q2], new X(~Z[(z + 1) % 5][Q2].N & Z[(z + 2) % 5][Q2].N, ~Z[(z + 1) % 5][Q2].I & Z[(z + 2) % 5][Q2].I));
    q2[0][0] = B1(q2[0][0], f3[_]);
  }
  var U, K, H, F2, B2;
  return q2;
};
var qJ = function(J2) {
  let q2, _, z = 0;
  const Q2 = [0, 0], Z = [4294967295 & J2, J2 / K1 & 2097151];
  for (q2 = 6;q2 >= 0; q2--)
    _ = Z[q2 >> 2] >>> 8 * q2 & 255, _ === 0 && z === 0 || (Q2[z + 1 >> 2] |= _ << 8 * (z + 1), z += 1);
  return z = z !== 0 ? z : 1, Q2[0] |= z, { value: z + 1 > 4 ? Q2 : [Q2[0]], binLen: 8 + 8 * z };
};
var q0 = function(J2) {
  return E1(qJ(J2.binLen), J2);
};
var aq = function(J2, q2) {
  let _, z = qJ(q2);
  z = E1(z, J2);
  const Q2 = q2 >>> 2, Z = (Q2 - z.value.length % Q2) % Q2;
  for (_ = 0;_ < Z; _++)
    z.value.push(0);
  return z.value;
};
var K1 = 4294967296;
var M = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
var m = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
var g = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
var H1 = "Chosen SHA variant is not supported";
var sq = "Cannot set numRounds with MAC";

class L1 {
  constructor(J2, q2, _) {
    const z = _ || {};
    if (this.t = q2, this.i = z.encoding || "UTF8", this.numRounds = z.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds)
      throw new Error("numRounds must a integer >= 1");
    this.o = J2, this.h = [], this.u = 0, this.l = false, this.A = 0, this.H = false, this.S = [], this.p = [];
  }
  update(J2) {
    let q2, _ = 0;
    const z = this.m >>> 5, Q2 = this.C(J2, this.h, this.u), Z = Q2.binLen, G = Q2.value, V = Z >>> 5;
    for (q2 = 0;q2 < V; q2 += z)
      _ + this.m <= Z && (this.U = this.v(G.slice(q2, q2 + z), this.U), _ += this.m);
    return this.A += _, this.h = G.slice(_ >>> 5), this.u = Z % this.m, this.l = true, this;
  }
  getHash(J2, q2) {
    let _, z, Q2 = this.R;
    const Z = cq(q2);
    if (this.K) {
      if (Z.outputLen === -1)
        throw new Error("Output length must be specified in options");
      Q2 = Z.outputLen;
    }
    const G = pq(J2, Q2, this.T, Z);
    if (this.H && this.g)
      return G(this.g(Z));
    for (z = this.F(this.h.slice(), this.u, this.A, this.L(this.U), Q2), _ = 1;_ < this.numRounds; _ += 1)
      this.K && Q2 % 32 != 0 && (z[z.length - 1] &= 16777215 >>> 24 - Q2 % 32), z = this.F(z, Q2, 0, this.B(this.o), Q2);
    return G(z);
  }
  setHMACKey(J2, q2, _) {
    if (!this.M)
      throw new Error("Variant does not support HMAC");
    if (this.l)
      throw new Error("Cannot set MAC key after calling update");
    const z = _1(q2, (_ || {}).encoding || "UTF8", this.T);
    this.k(z(J2));
  }
  k(J2) {
    const q2 = this.m >>> 3, _ = q2 / 4 - 1;
    let z;
    if (this.numRounds !== 1)
      throw new Error(sq);
    if (this.H)
      throw new Error("MAC key already set");
    for (q2 < J2.binLen / 8 && (J2.value = this.F(J2.value, J2.binLen, 0, this.B(this.o), this.R));J2.value.length <= _; )
      J2.value.push(0);
    for (z = 0;z <= _; z += 1)
      this.S[z] = 909522486 ^ J2.value[z], this.p[z] = 1549556828 ^ J2.value[z];
    this.U = this.v(this.S, this.U), this.A = this.m, this.H = true;
  }
  getHMAC(J2, q2) {
    const _ = cq(q2);
    return pq(J2, this.R, this.T, _)(this.Y());
  }
  Y() {
    let J2;
    if (!this.H)
      throw new Error("Cannot call getHMAC without first setting MAC key");
    const q2 = this.F(this.h.slice(), this.u, this.A, this.L(this.U), this.R);
    return J2 = this.v(this.p, this.B(this.o)), J2 = this.F(q2, this.R, this.m, J2, this.R), J2;
  }
}
var T3 = class extends L1 {
  constructor(J2, q2, _) {
    if (J2 !== "SHA-1")
      throw new Error(H1);
    super(J2, q2, _);
    const z = _ || {};
    this.M = true, this.g = this.Y, this.T = -1, this.C = _1(this.t, this.i, this.T), this.v = nq, this.L = function(Q2) {
      return Q2.slice();
    }, this.B = C3, this.F = x3, this.U = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.m = 512, this.R = 160, this.K = false, z.hmacKey && this.k(c("hmacKey", z.hmacKey, this.T));
  }
};
var N3 = class extends L1 {
  constructor(J2, q2, _) {
    if (J2 !== "SHA-224" && J2 !== "SHA-256")
      throw new Error(H1);
    super(J2, q2, _);
    const z = _ || {};
    this.g = this.Y, this.M = true, this.T = -1, this.C = _1(this.t, this.i, this.T), this.v = Yq, this.L = function(Q2) {
      return Q2.slice();
    }, this.B = hq, this.F = function(Q2, Z, G, V) {
      return function(U, K, H, F2, B2) {
        let W, L;
        const D = 15 + (K + 65 >>> 9 << 4), O = K + H;
        for (;U.length <= D; )
          U.push(0);
        for (U[K >>> 5] |= 128 << 24 - K % 32, U[D] = 4294967295 & O, U[D - 1] = O / K1 | 0, W = 0;W < U.length; W += 16)
          F2 = Yq(U.slice(W, W + 16), F2);
        return L = B2 === "SHA-224" ? [F2[0], F2[1], F2[2], F2[3], F2[4], F2[5], F2[6]] : F2, L;
      }(Q2, Z, G, V, J2);
    }, this.U = hq(J2), this.m = 512, this.R = J2 === "SHA-224" ? 224 : 256, this.K = false, z.hmacKey && this.k(c("hmacKey", z.hmacKey, this.T));
  }
};

class X {
  constructor(J2, q2) {
    this.N = J2, this.I = q2;
  }
}
var b3 = [new X(M[0], 3609767458), new X(M[1], 602891725), new X(M[2], 3964484399), new X(M[3], 2173295548), new X(M[4], 4081628472), new X(M[5], 3053834265), new X(M[6], 2937671579), new X(M[7], 3664609560), new X(M[8], 2734883394), new X(M[9], 1164996542), new X(M[10], 1323610764), new X(M[11], 3590304994), new X(M[12], 4068182383), new X(M[13], 991336113), new X(M[14], 633803317), new X(M[15], 3479774868), new X(M[16], 2666613458), new X(M[17], 944711139), new X(M[18], 2341262773), new X(M[19], 2007800933), new X(M[20], 1495990901), new X(M[21], 1856431235), new X(M[22], 3175218132), new X(M[23], 2198950837), new X(M[24], 3999719339), new X(M[25], 766784016), new X(M[26], 2566594879), new X(M[27], 3203337956), new X(M[28], 1034457026), new X(M[29], 2466948901), new X(M[30], 3758326383), new X(M[31], 168717936), new X(M[32], 1188179964), new X(M[33], 1546045734), new X(M[34], 1522805485), new X(M[35], 2643833823), new X(M[36], 2343527390), new X(M[37], 1014477480), new X(M[38], 1206759142), new X(M[39], 344077627), new X(M[40], 1290863460), new X(M[41], 3158454273), new X(M[42], 3505952657), new X(M[43], 106217008), new X(M[44], 3606008344), new X(M[45], 1432725776), new X(M[46], 1467031594), new X(M[47], 851169720), new X(M[48], 3100823752), new X(M[49], 1363258195), new X(M[50], 3750685593), new X(M[51], 3785050280), new X(M[52], 3318307427), new X(M[53], 3812723403), new X(M[54], 2003034995), new X(M[55], 3602036899), new X(M[56], 1575990012), new X(M[57], 1125592928), new X(M[58], 2716904306), new X(M[59], 442776044), new X(M[60], 593698344), new X(M[61], 3733110249), new X(M[62], 2999351573), new X(M[63], 3815920427), new X(3391569614, 3928383900), new X(3515267271, 566280711), new X(3940187606, 3454069534), new X(4118630271, 4000239992), new X(116418474, 1914138554), new X(174292421, 2731055270), new X(289380356, 3203993006), new X(460393269, 320620315), new X(685471733, 587496836), new X(852142971, 1086792851), new X(1017036298, 365543100), new X(1126000580, 2618297676), new X(1288033470, 3409855158), new X(1501505948, 4234509866), new X(1607167915, 987167468), new X(1816402316, 1246189591)];
var E3 = class extends L1 {
  constructor(J2, q2, _) {
    if (J2 !== "SHA-384" && J2 !== "SHA-512")
      throw new Error(H1);
    super(J2, q2, _);
    const z = _ || {};
    this.g = this.Y, this.M = true, this.T = -1, this.C = _1(this.t, this.i, this.T), this.v = oq, this.L = function(Q2) {
      return Q2.slice();
    }, this.B = lq, this.F = function(Q2, Z, G, V) {
      return function(U, K, H, F2, B2) {
        let W, L;
        const D = 31 + (K + 129 >>> 10 << 5), O = K + H;
        for (;U.length <= D; )
          U.push(0);
        for (U[K >>> 5] |= 128 << 24 - K % 32, U[D] = 4294967295 & O, U[D - 1] = O / K1 | 0, W = 0;W < U.length; W += 32)
          F2 = oq(U.slice(W, W + 32), F2);
        return L = B2 === "SHA-384" ? [F2[0].N, F2[0].I, F2[1].N, F2[1].I, F2[2].N, F2[2].I, F2[3].N, F2[3].I, F2[4].N, F2[4].I, F2[5].N, F2[5].I] : [F2[0].N, F2[0].I, F2[1].N, F2[1].I, F2[2].N, F2[2].I, F2[3].N, F2[3].I, F2[4].N, F2[4].I, F2[5].N, F2[5].I, F2[6].N, F2[6].I, F2[7].N, F2[7].I], L;
      }(Q2, Z, G, V, J2);
    }, this.U = lq(J2), this.m = 1024, this.R = J2 === "SHA-384" ? 384 : 512, this.K = false, z.hmacKey && this.k(c("hmacKey", z.hmacKey, this.T));
  }
};
var f3 = [new X(0, 1), new X(0, 32898), new X(2147483648, 32906), new X(2147483648, 2147516416), new X(0, 32907), new X(0, 2147483649), new X(2147483648, 2147516545), new X(2147483648, 32777), new X(0, 138), new X(0, 136), new X(0, 2147516425), new X(0, 2147483658), new X(0, 2147516555), new X(2147483648, 139), new X(2147483648, 32905), new X(2147483648, 32771), new X(2147483648, 32770), new X(2147483648, 128), new X(0, 32778), new X(2147483648, 2147483658), new X(2147483648, 2147516545), new X(2147483648, 32896), new X(0, 2147483649), new X(2147483648, 2147516424)];
var w3 = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];
var m3 = class extends L1 {
  constructor(J2, q2, _) {
    let z = 6, Q2 = 0;
    super(J2, q2, _);
    const Z = _ || {};
    if (this.numRounds !== 1) {
      if (Z.kmacKey || Z.hmacKey)
        throw new Error(sq);
      if (this.o === "CSHAKE128" || this.o === "CSHAKE256")
        throw new Error("Cannot set numRounds for CSHAKE variants");
    }
    switch (this.T = 1, this.C = _1(this.t, this.i, this.T), this.v = b1, this.L = y3, this.B = J0, this.U = J0(), this.K = false, J2) {
      case "SHA3-224":
        this.m = Q2 = 1152, this.R = 224, this.M = true, this.g = this.Y;
        break;
      case "SHA3-256":
        this.m = Q2 = 1088, this.R = 256, this.M = true, this.g = this.Y;
        break;
      case "SHA3-384":
        this.m = Q2 = 832, this.R = 384, this.M = true, this.g = this.Y;
        break;
      case "SHA3-512":
        this.m = Q2 = 576, this.R = 512, this.M = true, this.g = this.Y;
        break;
      case "SHAKE128":
        z = 31, this.m = Q2 = 1344, this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "SHAKE256":
        z = 31, this.m = Q2 = 1088, this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "KMAC128":
        z = 4, this.m = Q2 = 1344, this.X(_), this.R = -1, this.K = true, this.M = false, this.g = this._;
        break;
      case "KMAC256":
        z = 4, this.m = Q2 = 1088, this.X(_), this.R = -1, this.K = true, this.M = false, this.g = this._;
        break;
      case "CSHAKE128":
        this.m = Q2 = 1344, z = this.O(_), this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "CSHAKE256":
        this.m = Q2 = 1088, z = this.O(_), this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      default:
        throw new Error(H1);
    }
    this.F = function(G, V, U, K, H) {
      return function(F2, B2, W, L, D, O, v) {
        let N2, S, j = 0;
        const P = [], W1 = D >>> 5, _J = B2 >>> 5;
        for (N2 = 0;N2 < _J && B2 >= D; N2 += W1)
          L = b1(F2.slice(N2, N2 + W1), L), B2 -= D;
        for (F2 = F2.slice(N2), B2 %= D;F2.length < W1; )
          F2.push(0);
        for (N2 = B2 >>> 3, F2[N2 >> 2] ^= O << N2 % 4 * 8, F2[W1 - 1] ^= 2147483648, L = b1(F2, L);32 * P.length < v && (S = L[j % 5][j / 5 | 0], P.push(S.I), !(32 * P.length >= v)); )
          P.push(S.N), j += 1, 64 * j % D == 0 && (b1(null, L), j = 0);
        return P;
      }(G, V, 0, K, Q2, z, H);
    }, Z.hmacKey && this.k(c("hmacKey", Z.hmacKey, this.T));
  }
  O(J2, q2) {
    const _ = function(Q2) {
      const Z = Q2 || {};
      return { funcName: c("funcName", Z.funcName, 1, { value: [], binLen: 0 }), customization: c("Customization", Z.customization, 1, { value: [], binLen: 0 }) };
    }(J2 || {});
    q2 && (_.funcName = q2);
    const z = E1(q0(_.funcName), q0(_.customization));
    if (_.customization.binLen !== 0 || _.funcName.binLen !== 0) {
      const Q2 = aq(z, this.m >>> 3);
      for (let Z = 0;Z < Q2.length; Z += this.m >>> 5)
        this.U = this.v(Q2.slice(Z, Z + (this.m >>> 5)), this.U), this.A += this.m;
      return 4;
    }
    return 31;
  }
  X(J2) {
    const q2 = function(z) {
      const Q2 = z || {};
      return { kmacKey: c("kmacKey", Q2.kmacKey, 1), funcName: { value: [1128353099], binLen: 32 }, customization: c("Customization", Q2.customization, 1, { value: [], binLen: 0 }) };
    }(J2 || {});
    this.O(J2, q2.funcName);
    const _ = aq(q0(q2.kmacKey), this.m >>> 3);
    for (let z = 0;z < _.length; z += this.m >>> 5)
      this.U = this.v(_.slice(z, z + (this.m >>> 5)), this.U), this.A += this.m;
    this.H = true;
  }
  _(J2) {
    const q2 = E1({ value: this.h.slice(), binLen: this.u }, function(_) {
      let z, Q2, Z = 0;
      const G = [0, 0], V = [4294967295 & _, _ / K1 & 2097151];
      for (z = 6;z >= 0; z--)
        Q2 = V[z >> 2] >>> 8 * z & 255, Q2 === 0 && Z === 0 || (G[Z >> 2] |= Q2 << 8 * Z, Z += 1);
      return Z = Z !== 0 ? Z : 1, G[Z >> 2] |= Z << 8 * Z, { value: Z + 1 > 4 ? G : [G[0]], binLen: 8 + 8 * Z };
    }(J2.outputLen));
    return this.F(q2.value, q2.binLen, this.A, this.L(this.U), J2.outputLen);
  }
};

class _0 {
  constructor(J2, q2, _) {
    if (J2 == "SHA-1")
      this.P = new T3(J2, q2, _);
    else if (J2 == "SHA-224" || J2 == "SHA-256")
      this.P = new N3(J2, q2, _);
    else if (J2 == "SHA-384" || J2 == "SHA-512")
      this.P = new E3(J2, q2, _);
    else {
      if (J2 != "SHA3-224" && J2 != "SHA3-256" && J2 != "SHA3-384" && J2 != "SHA3-512" && J2 != "SHAKE128" && J2 != "SHAKE256" && J2 != "CSHAKE128" && J2 != "CSHAKE256" && J2 != "KMAC128" && J2 != "KMAC256")
        throw new Error(H1);
      this.P = new m3(J2, q2, _);
    }
  }
  update(J2) {
    return this.P.update(J2), this;
  }
  getHash(J2, q2) {
    return this.P.getHash(J2, q2);
  }
  setHMACKey(J2, q2, _) {
    this.P.setHMACKey(J2, q2, _);
  }
  getHMAC(J2, q2) {
    return this.P.getHMAC(J2, q2);
  }
}
var f1 = function(J2, q2, _ = 0) {
  const z = z0.default({ ...J2, signature: undefined }), Q2 = q2.noTimeWindow ? 0 : Math.floor(Date.now() / (q2.timeWindow ?? JJ)) + _;
  return new _0("SHA-256", "TEXT", { encoding: "UTF8" }).update(z).update(z0.default(q2)).update(`${Q2}`).getHash("B64");
};
function x5(J2, q2) {
  return (q2.noTimeWindow ? 0 : q2.timeWindow ?? JJ) ? J2.signature === f1(J2, q2) || J2.signature === f1(J2, q2, -1) : J2.signature === f1(J2, q2);
}
var JJ = 5000;

// ../../NAPL/src/core/Processor.ts
class Processor {
  sendUpdate;
  constructor(sendUpdate) {
    this.sendUpdate = sendUpdate;
  }
  performCycle(context) {
    this.sendUpdateBlob(context);
    return commitUpdates(context.root, context.properties);
  }
  async sendUpdateBlob(context) {
    const blobs = {};
    const outgoingUpdates = context.root.outgoingUpdates;
    delete context.root.outgoingUpdates;
    if (outgoingUpdates) {
      for (let update of outgoingUpdates) {
        update.path = this.#fixPath(update.path, context);
        const previous = getLeafObject(context.root, update.path.split("/"), 0, false);
        const value = typeof update.value === "function" ? update.value(previous) : update.value;
        update.value = value;
      }
      const confirmedUpdates = outgoingUpdates.filter((update) => update.value !== undefined).map((update) => ({ ...update }));
      this.#addIncomingUpdates(confirmedUpdates, context);
      for (let update of outgoingUpdates) {
        update.value = await tt(update.value, blobs);
      }
      const blob = packageUpdates(outgoingUpdates, blobs, context.secret);
      this.sendUpdate(blob, context);
    }
  }
  async processBlob(data, context) {
    const { payload, blobs } = data instanceof Blob ? await receiveBlob(data) : { payload: typeof data === "string" ? JSON.parse(data) : data, blobs: {} };
    const secret = context.secret ?? payload.secret;
    if (secret) {
      if (!context.skipValidation && !x5(payload, { secret })) {
        console.error("Invalid signature");
        return;
      }
      context.secret = secret;
    }
    const hasBlobs = blobs && Object.keys(blobs).length > 0;
    if (payload?.globalTime) {
      context.localTimeOffset = payload.globalTime - Date.now();
    }
    if (payload?.myClientId) {
      context.clientId = payload.myClientId;
    }
    if (payload?.state) {
      delete payload.state.signature;
      for (const key in payload.state) {
        context.root[key] = hasBlobs ? ht(payload.state[key], blobs) : payload.state[key];
      }
    }
    if (payload?.updates) {
      if (hasBlobs) {
        payload.updates.forEach((update) => {
          update.value = ht(update.value, blobs);
        });
      }
      this.#addIncomingUpdates(payload.updates, context);
    }
  }
  #addIncomingUpdates(updates, context) {
    context.root.updates = context.root.updates ?? [];
    context.root.updates.push(...updates);
  }
  #fixPath(path, context) {
    const split = path.split("/");
    return split.map((part) => translateValue(part, {
      self: context.clientId
    })).join("/");
  }
}
// ../node_modules/@dobuki/data-blob/dist/index.js
var gt2 = Object.create;
var { defineProperty: Rn2, getPrototypeOf: Yt2, getOwnPropertyNames: wt2 } = Object;
var Et2 = Object.prototype.hasOwnProperty;
var Nt2 = (t, n, h) => {
  h = t != null ? gt2(Yt2(t)) : {};
  let c2 = n || !t || !t.__esModule ? Rn2(h, "default", { value: t, enumerable: true }) : h;
  for (let i of wt2(t))
    if (!Et2.call(c2, i))
      Rn2(c2, i, { get: () => t[i], enumerable: true });
  return c2;
};
var R2 = (t, n) => () => (n || t((n = { exports: {} }).exports, n), n.exports);
var jt2 = R2((t, n) => {
  var h = function(S) {
    throw { name: "SyntaxError", message: S, at: Y, text: P };
  }, c2 = function(S) {
    if (S && S !== m2)
      h("Expected '" + S + "' instead of '" + m2 + "'");
    return m2 = P.charAt(Y), Y += 1, m2;
  }, i = function() {
    var S, T2 = "";
    if (m2 === "-")
      T2 = "-", c2("-");
    while (m2 >= "0" && m2 <= "9")
      T2 += m2, c2();
    if (m2 === ".") {
      T2 += ".";
      while (c2() && m2 >= "0" && m2 <= "9")
        T2 += m2;
    }
    if (m2 === "e" || m2 === "E") {
      if (T2 += m2, c2(), m2 === "-" || m2 === "+")
        T2 += m2, c2();
      while (m2 >= "0" && m2 <= "9")
        T2 += m2, c2();
    }
    if (S = Number(T2), !isFinite(S))
      h("Bad number");
    return S;
  }, g2 = function() {
    var S, T2, v = "", x;
    if (m2 === '"')
      while (c2())
        if (m2 === '"')
          return c2(), v;
        else if (m2 === "\\")
          if (c2(), m2 === "u") {
            x = 0;
            for (T2 = 0;T2 < 4; T2 += 1) {
              if (S = parseInt(c2(), 16), !isFinite(S))
                break;
              x = x * 16 + S;
            }
            v += String.fromCharCode(x);
          } else if (typeof s[m2] === "string")
            v += s[m2];
          else
            break;
        else
          v += m2;
    h("Bad string");
  }, w2 = function() {
    while (m2 && m2 <= " ")
      c2();
  }, I = function() {
    switch (m2) {
      case "t":
        return c2("t"), c2("r"), c2("u"), c2("e"), true;
      case "f":
        return c2("f"), c2("a"), c2("l"), c2("s"), c2("e"), false;
      case "n":
        return c2("n"), c2("u"), c2("l"), c2("l"), null;
      default:
        h("Unexpected '" + m2 + "'");
    }
  }, E2 = function() {
    var S = [];
    if (m2 === "[") {
      if (c2("["), w2(), m2 === "]")
        return c2("]"), S;
      while (m2) {
        if (S.push($2()), w2(), m2 === "]")
          return c2("]"), S;
        c2(","), w2();
      }
    }
    h("Bad array");
  }, j = function() {
    var S, T2 = {};
    if (m2 === "{") {
      if (c2("{"), w2(), m2 === "}")
        return c2("}"), T2;
      while (m2) {
        if (S = g2(), w2(), c2(":"), Object.prototype.hasOwnProperty.call(T2, S))
          h('Duplicate key "' + S + '"');
        if (T2[S] = $2(), w2(), m2 === "}")
          return c2("}"), T2;
        c2(","), w2();
      }
    }
    h("Bad object");
  }, $2 = function() {
    switch (w2(), m2) {
      case "{":
        return j();
      case "[":
        return E2();
      case '"':
        return g2();
      case "-":
        return i();
      default:
        return m2 >= "0" && m2 <= "9" ? i() : I();
    }
  }, Y, m2, s = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f", n: `
`, r: "\r", t: "\t" }, P;
  n.exports = function(S, T2) {
    var v;
    if (P = S, Y = 0, m2 = " ", v = $2(), w2(), m2)
      h("Syntax error");
    return typeof T2 === "function" ? function x(O, C) {
      var D, b, k = O[C];
      if (k && typeof k === "object") {
        for (D in $2)
          if (Object.prototype.hasOwnProperty.call(k, D))
            if (b = x(k, D), typeof b === "undefined")
              delete k[D];
            else
              k[D] = b;
      }
      return T2.call(O, C, k);
    }({ "": v }, "") : v;
  };
});
var $t2 = R2((t, n) => {
  var h = function(j) {
    return i.lastIndex = 0, i.test(j) ? '"' + j.replace(i, function($2) {
      var Y = I[$2];
      return typeof Y === "string" ? Y : "\\u" + ("0000" + $2.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + j + '"';
  }, c2 = function(j, $2) {
    var Y, m2, s, P, S = g2, T2, v = $2[j];
    if (v && typeof v === "object" && typeof v.toJSON === "function")
      v = v.toJSON(j);
    if (typeof E2 === "function")
      v = E2.call($2, j, v);
    switch (typeof v) {
      case "string":
        return h(v);
      case "number":
        return isFinite(v) ? String(v) : "null";
      case "boolean":
      case "null":
        return String(v);
      case "object":
        if (!v)
          return "null";
        if (g2 += w2, T2 = [], Object.prototype.toString.apply(v) === "[object Array]") {
          P = v.length;
          for (Y = 0;Y < P; Y += 1)
            T2[Y] = c2(Y, v) || "null";
          return s = T2.length === 0 ? "[]" : g2 ? `[
` + g2 + T2.join(`,
` + g2) + `
` + S + "]" : "[" + T2.join(",") + "]", g2 = S, s;
        }
        if (E2 && typeof E2 === "object") {
          P = E2.length;
          for (Y = 0;Y < P; Y += 1)
            if (m2 = E2[Y], typeof m2 === "string") {
              if (s = c2(m2, v), s)
                T2.push(h(m2) + (g2 ? ": " : ":") + s);
            }
        } else
          for (m2 in v)
            if (Object.prototype.hasOwnProperty.call(v, m2)) {
              if (s = c2(m2, v), s)
                T2.push(h(m2) + (g2 ? ": " : ":") + s);
            }
        return s = T2.length === 0 ? "{}" : g2 ? `{
` + g2 + T2.join(`,
` + g2) + `
` + S + "}" : "{" + T2.join(",") + "}", g2 = S, s;
      default:
    }
  }, i = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, g2, w2, I = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': "\\\"", "\\": "\\\\" }, E2;
  n.exports = function(j, $2, Y) {
    var m2;
    if (g2 = "", w2 = "", typeof Y === "number")
      for (m2 = 0;m2 < Y; m2 += 1)
        w2 += " ";
    else if (typeof Y === "string")
      w2 = Y;
    if (E2 = $2, $2 && typeof $2 !== "function" && (typeof $2 !== "object" || typeof $2.length !== "number"))
      throw new Error("JSON.stringify");
    return c2("", { "": j });
  };
});
var st2 = R2((t) => {
  t.parse = jt2(), t.stringify = $t2();
});
var It2 = R2((t, n) => {
  var h = {}.toString;
  n.exports = Array.isArray || function(c2) {
    return h.call(c2) == "[object Array]";
  };
});
var fn2 = R2((t, n) => {
  var h = Object.prototype.toString;
  n.exports = function c(i) {
    var g2 = h.call(i), w2 = g2 === "[object Arguments]";
    if (!w2)
      w2 = g2 !== "[object Array]" && i !== null && typeof i === "object" && typeof i.length === "number" && i.length >= 0 && h.call(i.callee) === "[object Function]";
    return w2;
  };
});
var Pt2 = R2((t, n) => {
  var h;
  if (!Object.keys)
    c2 = Object.prototype.hasOwnProperty, i = Object.prototype.toString, g2 = fn2(), w2 = Object.prototype.propertyIsEnumerable, I = !w2.call({ toString: null }, "toString"), E2 = w2.call(function() {
    }, "prototype"), j = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], $2 = function(P) {
      var S = P.constructor;
      return S && S.prototype === P;
    }, Y = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, m2 = function() {
      if (typeof window === "undefined")
        return false;
      for (var P in window)
        try {
          if (!Y["$" + P] && c2.call(window, P) && window[P] !== null && typeof window[P] === "object")
            try {
              $2(window[P]);
            } catch (S) {
              return true;
            }
        } catch (S) {
          return true;
        }
      return false;
    }(), s = function(P) {
      if (typeof window === "undefined" || !m2)
        return $2(P);
      try {
        return $2(P);
      } catch (S) {
        return false;
      }
    }, h = function P(S) {
      var T2 = S !== null && typeof S === "object", v = i.call(S) === "[object Function]", x = g2(S), O = T2 && i.call(S) === "[object String]", C = [];
      if (!T2 && !v && !x)
        throw new TypeError("Object.keys called on a non-object");
      var D = E2 && v;
      if (O && S.length > 0 && !c2.call(S, 0))
        for (var b = 0;b < S.length; ++b)
          C.push(String(b));
      if (x && S.length > 0)
        for (var k = 0;k < S.length; ++k)
          C.push(String(k));
      else
        for (var f2 in S)
          if (!(D && f2 === "prototype") && c2.call(S, f2))
            C.push(String(f2));
      if (I) {
        var G = s(S);
        for (var U = 0;U < j.length; ++U)
          if (!(G && j[U] === "constructor") && c2.call(S, j[U]))
            C.push(j[U]);
      }
      return C;
    };
  var c2, i, g2, w2, I, E2, j, $2, Y, m2, s;
  n.exports = h;
});
var St2 = R2((t, n) => {
  var h = Array.prototype.slice, c2 = fn2(), i = Object.keys, g2 = i ? function I(E2) {
    return i(E2);
  } : Pt2(), w2 = Object.keys;
  g2.shim = function I() {
    if (Object.keys) {
      var E2 = function() {
        var j = Object.keys(arguments);
        return j && j.length === arguments.length;
      }(1, 2);
      if (!E2)
        Object.keys = function j($2) {
          if (c2($2))
            return w2(h.call($2));
          return w2($2);
        };
    } else
      Object.keys = g2;
    return Object.keys || g2;
  }, n.exports = g2;
});
var vt2 = R2((t, n) => {
  var h = "Function.prototype.bind called on incompatible ", c2 = Object.prototype.toString, i = Math.max, g2 = "[object Function]", w2 = function j($2, Y) {
    var m2 = [];
    for (var s = 0;s < $2.length; s += 1)
      m2[s] = $2[s];
    for (var P = 0;P < Y.length; P += 1)
      m2[P + $2.length] = Y[P];
    return m2;
  }, I = function j($2, Y) {
    var m2 = [];
    for (var s = Y || 0, P = 0;s < $2.length; s += 1, P += 1)
      m2[P] = $2[s];
    return m2;
  }, E2 = function(j, $2) {
    var Y = "";
    for (var m2 = 0;m2 < j.length; m2 += 1)
      if (Y += j[m2], m2 + 1 < j.length)
        Y += $2;
    return Y;
  };
  n.exports = function j($2) {
    var Y = this;
    if (typeof Y !== "function" || c2.apply(Y) !== g2)
      throw new TypeError(h + Y);
    var m2 = I(arguments, 1), s, P = function() {
      if (this instanceof s) {
        var O = Y.apply(this, w2(m2, arguments));
        if (Object(O) === O)
          return O;
        return this;
      }
      return Y.apply($2, w2(m2, arguments));
    }, S = i(0, Y.length - m2.length), T2 = [];
    for (var v = 0;v < S; v++)
      T2[v] = "$" + v;
    if (s = Function("binder", "return function (" + E2(T2, ",") + "){ return binder.apply(this,arguments); }")(P), Y.prototype) {
      var x = function O() {
      };
      x.prototype = Y.prototype, s.prototype = new x, x.prototype = null;
    }
    return s;
  };
});
var Tn2 = R2((t, n) => {
  var h = vt2();
  n.exports = Function.prototype.bind || h;
});
var Tt2 = R2((t, n) => {
  n.exports = Error;
});
var At2 = R2((t, n) => {
  n.exports = EvalError;
});
var kt2 = R2((t, n) => {
  n.exports = RangeError;
});
var xt2 = R2((t, n) => {
  n.exports = ReferenceError;
});
var Vn2 = R2((t, n) => {
  n.exports = SyntaxError;
});
var An2 = R2((t, n) => {
  n.exports = TypeError;
});
var Ct2 = R2((t, n) => {
  n.exports = URIError;
});
var Ot2 = R2((t, n) => {
  n.exports = function h() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function")
      return false;
    if (typeof Symbol.iterator === "symbol")
      return true;
    var c2 = {}, i = Symbol("test"), g2 = Object(i);
    if (typeof i === "string")
      return false;
    if (Object.prototype.toString.call(i) !== "[object Symbol]")
      return false;
    if (Object.prototype.toString.call(g2) !== "[object Symbol]")
      return false;
    var w2 = 42;
    c2[i] = w2;
    for (i in c2)
      return false;
    if (typeof Object.keys === "function" && Object.keys(c2).length !== 0)
      return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(c2).length !== 0)
      return false;
    var I = Object.getOwnPropertySymbols(c2);
    if (I.length !== 1 || I[0] !== i)
      return false;
    if (!Object.prototype.propertyIsEnumerable.call(c2, i))
      return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var E2 = Object.getOwnPropertyDescriptor(c2, i);
      if (E2.value !== w2 || E2.enumerable !== true)
        return false;
    }
    return true;
  };
});
var yn2 = R2((t, n) => {
  var h = typeof Symbol !== "undefined" && Symbol, c2 = Ot2();
  n.exports = function i() {
    if (typeof h !== "function")
      return false;
    if (typeof Symbol !== "function")
      return false;
    if (typeof h("foo") !== "symbol")
      return false;
    if (typeof Symbol("bar") !== "symbol")
      return false;
    return c2();
  };
});
var on2 = R2((t, n) => {
  var h = { foo: {} }, c2 = Object;
  n.exports = function i() {
    return { __proto__: h }.foo === h.foo && !({ __proto__: null } instanceof c2);
  };
});
var Gn2 = R2((t, n) => {
  var h = Function.prototype.call, c2 = Object.prototype.hasOwnProperty, i = Tn2();
  n.exports = i.call(h, c2);
});
var kn2 = R2((t, n) => {
  var h, c2 = Tt2(), i = At2(), g2 = kt2(), w2 = xt2(), I = Vn2(), E2 = An2(), j = Ct2(), $2 = Function, Y = function(M2) {
    try {
      return $2('"use strict"; return (' + M2 + ").constructor;")();
    } catch (r) {
    }
  }, m2 = Object.getOwnPropertyDescriptor;
  if (m2)
    try {
      m2({}, "");
    } catch (M2) {
      m2 = null;
    }
  var s = function() {
    throw new E2;
  }, P = m2 ? function() {
    try {
      return arguments.callee, s;
    } catch (M2) {
      try {
        return m2(arguments, "callee").get;
      } catch (r) {
        return s;
      }
    }
  }() : s, S = yn2()(), T2 = on2()(), v = Object.getPrototypeOf || (T2 ? function(M2) {
    return M2.__proto__;
  } : null), x = {}, O = typeof Uint8Array === "undefined" || !v ? h : v(Uint8Array), C = { __proto__: null, "%AggregateError%": typeof AggregateError === "undefined" ? h : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? h : ArrayBuffer, "%ArrayIteratorPrototype%": S && v ? v([][Symbol.iterator]()) : h, "%AsyncFromSyncIteratorPrototype%": h, "%AsyncFunction%": x, "%AsyncGenerator%": x, "%AsyncGeneratorFunction%": x, "%AsyncIteratorPrototype%": x, "%Atomics%": typeof Atomics === "undefined" ? h : Atomics, "%BigInt%": typeof BigInt === "undefined" ? h : BigInt, "%BigInt64Array%": typeof BigInt64Array === "undefined" ? h : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array === "undefined" ? h : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView === "undefined" ? h : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": c2, "%eval%": eval, "%EvalError%": i, "%Float32Array%": typeof Float32Array === "undefined" ? h : Float32Array, "%Float64Array%": typeof Float64Array === "undefined" ? h : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? h : FinalizationRegistry, "%Function%": $2, "%GeneratorFunction%": x, "%Int8Array%": typeof Int8Array === "undefined" ? h : Int8Array, "%Int16Array%": typeof Int16Array === "undefined" ? h : Int16Array, "%Int32Array%": typeof Int32Array === "undefined" ? h : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": S && v ? v(v([][Symbol.iterator]())) : h, "%JSON%": typeof JSON === "object" ? JSON : h, "%Map%": typeof Map === "undefined" ? h : Map, "%MapIteratorPrototype%": typeof Map === "undefined" || !S || !v ? h : v(new Map()[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise === "undefined" ? h : Promise, "%Proxy%": typeof Proxy === "undefined" ? h : Proxy, "%RangeError%": g2, "%ReferenceError%": w2, "%Reflect%": typeof Reflect === "undefined" ? h : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set === "undefined" ? h : Set, "%SetIteratorPrototype%": typeof Set === "undefined" || !S || !v ? h : v(new Set()[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? h : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": S && v ? v(""[Symbol.iterator]()) : h, "%Symbol%": S ? Symbol : h, "%SyntaxError%": I, "%ThrowTypeError%": P, "%TypedArray%": O, "%TypeError%": E2, "%Uint8Array%": typeof Uint8Array === "undefined" ? h : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? h : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array === "undefined" ? h : Uint16Array, "%Uint32Array%": typeof Uint32Array === "undefined" ? h : Uint32Array, "%URIError%": j, "%WeakMap%": typeof WeakMap === "undefined" ? h : WeakMap, "%WeakRef%": typeof WeakRef === "undefined" ? h : WeakRef, "%WeakSet%": typeof WeakSet === "undefined" ? h : WeakSet };
  if (v)
    try {
      null.error;
    } catch (M2) {
      D = v(v(M2)), C["%Error.prototype%"] = D;
    }
  var D, b = function M(r) {
    var u;
    if (r === "%AsyncFunction%")
      u = Y("async function () {}");
    else if (r === "%GeneratorFunction%")
      u = Y("function* () {}");
    else if (r === "%AsyncGeneratorFunction%")
      u = Y("async function* () {}");
    else if (r === "%AsyncGenerator%") {
      var L = M("%AsyncGeneratorFunction%");
      if (L)
        u = L.prototype;
    } else if (r === "%AsyncIteratorPrototype%") {
      var e = M("%AsyncGenerator%");
      if (e && v)
        u = v(e.prototype);
    }
    return C[r] = u, u;
  }, k = { __proto__: null, "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, f2 = Tn2(), G = Gn2(), U = f2.call(Function.call, Array.prototype.concat), l = f2.call(Function.apply, Array.prototype.splice), hn = f2.call(Function.call, String.prototype.replace), a = f2.call(Function.call, String.prototype.slice), K = f2.call(Function.call, RegExp.prototype.exec), W = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, d = /\\(\\)?/g, p = function M(r) {
    var u = a(r, 0, 1), L = a(r, -1);
    if (u === "%" && L !== "%")
      throw new I("invalid intrinsic syntax, expected closing `%`");
    else if (L === "%" && u !== "%")
      throw new I("invalid intrinsic syntax, expected opening `%`");
    var e = [];
    return hn(r, W, function(o, Z, H, X2) {
      e[e.length] = H ? hn(X2, d, "$1") : Z || o;
    }), e;
  }, V = function M(r, u) {
    var L = r, e;
    if (G(k, L))
      e = k[L], L = "%" + e[0] + "%";
    if (G(C, L)) {
      var o = C[L];
      if (o === x)
        o = b(L);
      if (typeof o === "undefined" && !u)
        throw new E2("intrinsic " + r + " exists, but is not available. Please file an issue!");
      return { alias: e, name: L, value: o };
    }
    throw new I("intrinsic " + r + " does not exist!");
  };
  n.exports = function M(r, u) {
    if (typeof r !== "string" || r.length === 0)
      throw new E2("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof u !== "boolean")
      throw new E2('"allowMissing" argument must be a boolean');
    if (K(/^%?[^%]*%?$/, r) === null)
      throw new I("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var L = p(r), e = L.length > 0 ? L[0] : "", o = V("%" + e + "%", u), Z = o.name, H = o.value, X2 = false, nn = o.alias;
    if (nn)
      e = nn[0], l(L, U([0, 1], nn));
    for (var z = 1, gn = true;z < L.length; z += 1) {
      var _ = L[z], $n = a(_, 0, 1), sn = a(_, -1);
      if (($n === '"' || $n === "'" || $n === "`" || (sn === '"' || sn === "'" || sn === "`")) && $n !== sn)
        throw new I("property names with quotes must have matching quotes");
      if (_ === "constructor" || !gn)
        X2 = true;
      if (e += "." + _, Z = "%" + e + "%", G(C, Z))
        H = C[Z];
      else if (H != null) {
        if (!(_ in H)) {
          if (!u)
            throw new E2("base intrinsic for " + r + " exists, but the property is not available.");
          return;
        }
        if (m2 && z + 1 >= L.length) {
          var In = m2(H, _);
          if (gn = !!In, gn && "get" in In && !("originalValue" in In.get))
            H = In.get;
          else
            H = H[_];
        } else
          gn = G(H, _), H = H[_];
        if (gn && !X2)
          C[Z] = H;
      }
    }
    return H;
  };
});
var On2 = R2((t, n) => {
  var h = kn2(), c2 = h("%Object.defineProperty%", true) || false;
  if (c2)
    try {
      c2({}, "a", { value: 1 });
    } catch (i) {
      c2 = false;
    }
  n.exports = c2;
});
var ut2 = R2((t, n) => {
  var h, c2 = SyntaxError, i = Function, g2 = TypeError, w2 = function(K) {
    try {
      return i('"use strict"; return (' + K + ").constructor;")();
    } catch (W) {
    }
  }, I = Object.getOwnPropertyDescriptor;
  if (I)
    try {
      I({}, "");
    } catch (K) {
      I = null;
    }
  var E2 = function() {
    throw new g2;
  }, j = I ? function() {
    try {
      return arguments.callee, E2;
    } catch (K) {
      try {
        return I(arguments, "callee").get;
      } catch (W) {
        return E2;
      }
    }
  }() : E2, $2 = yn2()(), Y = on2()(), m2 = Object.getPrototypeOf || (Y ? function(K) {
    return K.__proto__;
  } : null), s = {}, P = typeof Uint8Array === "undefined" || !m2 ? h : m2(Uint8Array), S = { "%AggregateError%": typeof AggregateError === "undefined" ? h : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? h : ArrayBuffer, "%ArrayIteratorPrototype%": $2 && m2 ? m2([][Symbol.iterator]()) : h, "%AsyncFromSyncIteratorPrototype%": h, "%AsyncFunction%": s, "%AsyncGenerator%": s, "%AsyncGeneratorFunction%": s, "%AsyncIteratorPrototype%": s, "%Atomics%": typeof Atomics === "undefined" ? h : Atomics, "%BigInt%": typeof BigInt === "undefined" ? h : BigInt, "%BigInt64Array%": typeof BigInt64Array === "undefined" ? h : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array === "undefined" ? h : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView === "undefined" ? h : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": Error, "%eval%": eval, "%EvalError%": EvalError, "%Float32Array%": typeof Float32Array === "undefined" ? h : Float32Array, "%Float64Array%": typeof Float64Array === "undefined" ? h : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? h : FinalizationRegistry, "%Function%": i, "%GeneratorFunction%": s, "%Int8Array%": typeof Int8Array === "undefined" ? h : Int8Array, "%Int16Array%": typeof Int16Array === "undefined" ? h : Int16Array, "%Int32Array%": typeof Int32Array === "undefined" ? h : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": $2 && m2 ? m2(m2([][Symbol.iterator]())) : h, "%JSON%": typeof JSON === "object" ? JSON : h, "%Map%": typeof Map === "undefined" ? h : Map, "%MapIteratorPrototype%": typeof Map === "undefined" || !$2 || !m2 ? h : m2(new Map()[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise === "undefined" ? h : Promise, "%Proxy%": typeof Proxy === "undefined" ? h : Proxy, "%RangeError%": RangeError, "%ReferenceError%": ReferenceError, "%Reflect%": typeof Reflect === "undefined" ? h : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set === "undefined" ? h : Set, "%SetIteratorPrototype%": typeof Set === "undefined" || !$2 || !m2 ? h : m2(new Set()[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? h : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": $2 && m2 ? m2(""[Symbol.iterator]()) : h, "%Symbol%": $2 ? Symbol : h, "%SyntaxError%": c2, "%ThrowTypeError%": j, "%TypedArray%": P, "%TypeError%": g2, "%Uint8Array%": typeof Uint8Array === "undefined" ? h : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? h : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array === "undefined" ? h : Uint16Array, "%Uint32Array%": typeof Uint32Array === "undefined" ? h : Uint32Array, "%URIError%": URIError, "%WeakMap%": typeof WeakMap === "undefined" ? h : WeakMap, "%WeakRef%": typeof WeakRef === "undefined" ? h : WeakRef, "%WeakSet%": typeof WeakSet === "undefined" ? h : WeakSet };
  if (m2)
    try {
      null.error;
    } catch (K) {
      T2 = m2(m2(K)), S["%Error.prototype%"] = T2;
    }
  var T2, v = function K(W) {
    var d;
    if (W === "%AsyncFunction%")
      d = w2("async function () {}");
    else if (W === "%GeneratorFunction%")
      d = w2("function* () {}");
    else if (W === "%AsyncGeneratorFunction%")
      d = w2("async function* () {}");
    else if (W === "%AsyncGenerator%") {
      var p = K("%AsyncGeneratorFunction%");
      if (p)
        d = p.prototype;
    } else if (W === "%AsyncIteratorPrototype%") {
      var V = K("%AsyncGenerator%");
      if (V && m2)
        d = m2(V.prototype);
    }
    return S[W] = d, d;
  }, x = { "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, O = Tn2(), C = Gn2(), D = O.call(Function.call, Array.prototype.concat), b = O.call(Function.apply, Array.prototype.splice), k = O.call(Function.call, String.prototype.replace), f2 = O.call(Function.call, String.prototype.slice), G = O.call(Function.call, RegExp.prototype.exec), U = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, l = /\\(\\)?/g, hn = function K(W) {
    var d = f2(W, 0, 1), p = f2(W, -1);
    if (d === "%" && p !== "%")
      throw new c2("invalid intrinsic syntax, expected closing `%`");
    else if (p === "%" && d !== "%")
      throw new c2("invalid intrinsic syntax, expected opening `%`");
    var V = [];
    return k(W, U, function(M2, r, u, L) {
      V[V.length] = u ? k(L, l, "$1") : r || M2;
    }), V;
  }, a = function K(W, d) {
    var p = W, V;
    if (C(x, p))
      V = x[p], p = "%" + V[0] + "%";
    if (C(S, p)) {
      var M2 = S[p];
      if (M2 === s)
        M2 = v(p);
      if (typeof M2 === "undefined" && !d)
        throw new g2("intrinsic " + W + " exists, but is not available. Please file an issue!");
      return { alias: V, name: p, value: M2 };
    }
    throw new c2("intrinsic " + W + " does not exist!");
  };
  n.exports = function K(W, d) {
    if (typeof W !== "string" || W.length === 0)
      throw new g2("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof d !== "boolean")
      throw new g2('"allowMissing" argument must be a boolean');
    if (G(/^%?[^%]*%?$/, W) === null)
      throw new c2("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var p = hn(W), V = p.length > 0 ? p[0] : "", M2 = a("%" + V + "%", d), r = M2.name, u = M2.value, L = false, e = M2.alias;
    if (e)
      V = e[0], b(p, D([0, 1], e));
    for (var o = 1, Z = true;o < p.length; o += 1) {
      var H = p[o], X2 = f2(H, 0, 1), nn = f2(H, -1);
      if ((X2 === '"' || X2 === "'" || X2 === "`" || (nn === '"' || nn === "'" || nn === "`")) && X2 !== nn)
        throw new c2("property names with quotes must have matching quotes");
      if (H === "constructor" || !Z)
        L = true;
      if (V += "." + H, r = "%" + V + "%", C(S, r))
        u = S[r];
      else if (u != null) {
        if (!(H in u)) {
          if (!d)
            throw new g2("base intrinsic for " + W + " exists, but the property is not available.");
          return;
        }
        if (I && o + 1 >= p.length) {
          var z = I(u, H);
          if (Z = !!z, Z && "get" in z && !("originalValue" in z.get))
            u = z.get;
          else
            u = u[H];
        } else
          Z = C(u, H), u = u[H];
        if (Z && !L)
          S[r] = u;
      }
    }
    return u;
  };
});
var ln2 = R2((t, n) => {
  var h = ut2(), c2 = h("%Object.getOwnPropertyDescriptor%", true);
  if (c2)
    try {
      c2([], "length");
    } catch (i) {
      c2 = null;
    }
  n.exports = c2;
});
var Rt2 = R2((t, n) => {
  var h = On2(), c2 = Vn2(), i = An2(), g2 = ln2();
  n.exports = function w(I, E2, j) {
    if (!I || typeof I !== "object" && typeof I !== "function")
      throw new i("`obj` must be an object or a function`");
    if (typeof E2 !== "string" && typeof E2 !== "symbol")
      throw new i("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null)
      throw new i("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null)
      throw new i("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null)
      throw new i("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] !== "boolean")
      throw new i("`loose`, if provided, must be a boolean");
    var $2 = arguments.length > 3 ? arguments[3] : null, Y = arguments.length > 4 ? arguments[4] : null, m2 = arguments.length > 5 ? arguments[5] : null, s = arguments.length > 6 ? arguments[6] : false, P = !!g2 && g2(I, E2);
    if (h)
      h(I, E2, { configurable: m2 === null && P ? P.configurable : !m2, enumerable: $2 === null && P ? P.enumerable : !$2, value: j, writable: Y === null && P ? P.writable : !Y });
    else if (s || !$2 && !Y && !m2)
      I[E2] = j;
    else
      throw new c2("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  };
});
var Dt2 = R2((t, n) => {
  var h = On2(), c2 = function i() {
    return !!h;
  };
  c2.hasArrayLengthDefineBug = function i() {
    if (!h)
      return null;
    try {
      return h([], "length", { value: 1 }).length !== 1;
    } catch (g2) {
      return true;
    }
  }, n.exports = c2;
});
var rt2 = R2((t, n) => {
  var h = kn2(), c2 = Rt2(), i = Dt2()(), g2 = ln2(), w2 = An2(), I = h("%Math.floor%");
  n.exports = function E(j, $2) {
    if (typeof j !== "function")
      throw new w2("`fn` is not a function");
    if (typeof $2 !== "number" || $2 < 0 || $2 > 4294967295 || I($2) !== $2)
      throw new w2("`length` must be a positive 32-bit integer");
    var Y = arguments.length > 2 && !!arguments[2], m2 = true, s = true;
    if ("length" in j && g2) {
      var P = g2(j, "length");
      if (P && !P.configurable)
        m2 = false;
      if (P && !P.writable)
        s = false;
    }
    if (m2 || s || !Y)
      if (i)
        c2(j, "length", $2, true, true);
      else
        c2(j, "length", $2);
    return j;
  };
});
var Zn2 = R2((t, n) => {
  var h = Tn2(), c2 = kn2(), i = rt2(), g2 = An2(), w2 = c2("%Function.prototype.apply%"), I = c2("%Function.prototype.call%"), E2 = c2("%Reflect.apply%", true) || h.call(I, w2), j = On2(), $2 = c2("%Math.max%");
  n.exports = function m(s) {
    if (typeof s !== "function")
      throw new g2("a function is required");
    var P = E2(h, I, arguments);
    return i(P, 1 + $2(0, s.length - (arguments.length - 1)), true);
  };
  var Y = function m() {
    return E2(h, w2, arguments);
  };
  if (j)
    j(n.exports, "apply", { value: Y });
  else
    n.exports.apply = Y;
});
var Wt2 = R2((t, n) => {
  var h = kn2(), c2 = Zn2(), i = c2(h("String.prototype.indexOf"));
  n.exports = function g(w2, I) {
    var E2 = h(w2, !!I);
    if (typeof E2 === "function" && i(w2, ".prototype.") > -1)
      return c2(E2);
    return E2;
  };
});
var bt2 = R2((t, n) => {
  var h = (typeof JSON !== "undefined" ? JSON : st2()).stringify, c2 = It2(), i = St2(), g2 = Zn2(), w2 = Wt2(), I = w2("Array.prototype.join"), E2 = w2("Array.prototype.push"), j = function Y(m2, s) {
    var P = "";
    for (var S = 0;S < m2; S += 1)
      P += s;
    return P;
  }, $2 = function(Y, m2, s) {
    return s;
  };
  n.exports = function Y(m2) {
    var s = arguments.length > 1 ? arguments[1] : undefined, P = s && s.space || "";
    if (typeof P === "number")
      P = j(P, " ");
    var S = !!s && typeof s.cycles === "boolean" && s.cycles, T2 = s && s.replacer ? g2(s.replacer) : $2, v = typeof s === "function" ? s : s && s.cmp, x = v && function(C) {
      var D = v.length > 2 && function b(k) {
        return C[k];
      };
      return function(b, k) {
        return v({ key: b, value: C[b] }, { key: k, value: C[k] }, D ? { __proto__: null, get: D } : undefined);
      };
    }, O = [];
    return function C(D, b, k, f2) {
      var G = P ? `
` + j(f2, P) : "", U = P ? ": " : ":";
      if (k && k.toJSON && typeof k.toJSON === "function")
        k = k.toJSON();
      if (k = T2(D, b, k), k === undefined)
        return;
      if (typeof k !== "object" || k === null)
        return h(k);
      if (c2(k)) {
        var K = [];
        for (var l = 0;l < k.length; l++) {
          var hn = C(k, l, k[l], f2 + 1) || h(null);
          E2(K, G + P + hn);
        }
        return "[" + I(K, ",") + G + "]";
      }
      if (O.indexOf(k) !== -1) {
        if (S)
          return h("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      } else
        E2(O, k);
      var a = i(k).sort(x && x(k)), K = [];
      for (var l = 0;l < a.length; l++) {
        var b = a[l], W = C(k, b, k[b], f2 + 1);
        if (!W)
          continue;
        var d = h(b) + U + W;
        E2(K, G + P + d);
      }
      return O.splice(O.indexOf(k), 1), "{" + I(K, ",") + G + "}";
    }({ "": m2 }, "", m2, 0);
  };
});
var Dn2 = Nt2(bt2(), 1);
var rn2 = function(t, n, h, c2) {
  let i, g2, w2, I = n || [0], E2 = (h = h || 0) >>> 3, j = c2 === -1 ? 3 : 0;
  for (i = 0;i < t.length; i += 1)
    w2 = i + E2, g2 = w2 >>> 2, I.length <= g2 && I.push(0), I[g2] |= t[i] << 8 * (j + c2 * (w2 % 4));
  return { value: I, binLen: 8 * t.length + h };
};
var mn2 = function(t, n, h) {
  switch (n) {
    case "UTF8":
    case "UTF16BE":
    case "UTF16LE":
      break;
    default:
      throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE");
  }
  switch (t) {
    case "HEX":
      return function(c2, i, g2) {
        return function(w2, I, E2, j) {
          let $2, Y, m2, s;
          if (w2.length % 2 != 0)
            throw new Error("String of HEX type must be in byte increments");
          let P = I || [0], S = (E2 = E2 || 0) >>> 3, T2 = j === -1 ? 3 : 0;
          for ($2 = 0;$2 < w2.length; $2 += 2) {
            if (Y = parseInt(w2.substr($2, 2), 16), isNaN(Y))
              throw new Error("String of HEX type contains invalid characters");
            for (s = ($2 >>> 1) + S, m2 = s >>> 2;P.length <= m2; )
              P.push(0);
            P[m2] |= Y << 8 * (T2 + j * (s % 4));
          }
          return { value: P, binLen: 4 * w2.length + E2 };
        }(c2, i, g2, h);
      };
    case "TEXT":
      return function(c2, i, g2) {
        return function(w2, I, E2, j, $2) {
          let Y, m2, s, P, S, T2, v, x, O = 0, C = E2 || [0], D = (j = j || 0) >>> 3;
          if (I === "UTF8")
            for (v = $2 === -1 ? 3 : 0, s = 0;s < w2.length; s += 1)
              for (Y = w2.charCodeAt(s), m2 = [], 128 > Y ? m2.push(Y) : 2048 > Y ? (m2.push(192 | Y >>> 6), m2.push(128 | 63 & Y)) : 55296 > Y || 57344 <= Y ? m2.push(224 | Y >>> 12, 128 | Y >>> 6 & 63, 128 | 63 & Y) : (s += 1, Y = 65536 + ((1023 & Y) << 10 | 1023 & w2.charCodeAt(s)), m2.push(240 | Y >>> 18, 128 | Y >>> 12 & 63, 128 | Y >>> 6 & 63, 128 | 63 & Y)), P = 0;P < m2.length; P += 1) {
                for (T2 = O + D, S = T2 >>> 2;C.length <= S; )
                  C.push(0);
                C[S] |= m2[P] << 8 * (v + $2 * (T2 % 4)), O += 1;
              }
          else
            for (v = $2 === -1 ? 2 : 0, x = I === "UTF16LE" && $2 !== 1 || I !== "UTF16LE" && $2 === 1, s = 0;s < w2.length; s += 1) {
              for (Y = w2.charCodeAt(s), x === true && (P = 255 & Y, Y = P << 8 | Y >>> 8), T2 = O + D, S = T2 >>> 2;C.length <= S; )
                C.push(0);
              C[S] |= Y << 8 * (v + $2 * (T2 % 4)), O += 2;
            }
          return { value: C, binLen: 8 * O + j };
        }(c2, n, i, g2, h);
      };
    case "B64":
      return function(c2, i, g2) {
        return function(w2, I, E2, j) {
          let $2, Y, m2, s, P, S, T2, v = 0, x = I || [0], O = (E2 = E2 || 0) >>> 3, C = j === -1 ? 3 : 0, D = w2.indexOf("=");
          if (w2.search(/^[a-zA-Z0-9=+/]+$/) === -1)
            throw new Error("Invalid character in base-64 string");
          if (w2 = w2.replace(/=/g, ""), D !== -1 && D < w2.length)
            throw new Error("Invalid '=' found in base-64 string");
          for (Y = 0;Y < w2.length; Y += 4) {
            for (P = w2.substr(Y, 4), s = 0, m2 = 0;m2 < P.length; m2 += 1)
              $2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(P.charAt(m2)), s |= $2 << 18 - 6 * m2;
            for (m2 = 0;m2 < P.length - 1; m2 += 1) {
              for (T2 = v + O, S = T2 >>> 2;x.length <= S; )
                x.push(0);
              x[S] |= (s >>> 16 - 8 * m2 & 255) << 8 * (C + j * (T2 % 4)), v += 1;
            }
          }
          return { value: x, binLen: 8 * v + E2 };
        }(c2, i, g2, h);
      };
    case "BYTES":
      return function(c2, i, g2) {
        return function(w2, I, E2, j) {
          let $2, Y, m2, s, P = I || [0], S = (E2 = E2 || 0) >>> 3, T2 = j === -1 ? 3 : 0;
          for (Y = 0;Y < w2.length; Y += 1)
            $2 = w2.charCodeAt(Y), s = Y + S, m2 = s >>> 2, P.length <= m2 && P.push(0), P[m2] |= $2 << 8 * (T2 + j * (s % 4));
          return { value: P, binLen: 8 * w2.length + E2 };
        }(c2, i, g2, h);
      };
    case "ARRAYBUFFER":
      try {
        new ArrayBuffer(0);
      } catch (c2) {
        throw new Error("ARRAYBUFFER not supported by this environment");
      }
      return function(c2, i, g2) {
        return function(w2, I, E2, j) {
          return rn2(new Uint8Array(w2), I, E2, j);
        }(c2, i, g2, h);
      };
    case "UINT8ARRAY":
      try {
        new Uint8Array(0);
      } catch (c2) {
        throw new Error("UINT8ARRAY not supported by this environment");
      }
      return function(c2, i, g2) {
        return rn2(c2, i, g2, h);
      };
    default:
      throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
  }
};
var Wn2 = function(t, n, h, c2) {
  switch (t) {
    case "HEX":
      return function(i) {
        return function(g2, w2, I, E2) {
          let j, $2, Y = "", m2 = w2 / 8, s = I === -1 ? 3 : 0;
          for (j = 0;j < m2; j += 1)
            $2 = g2[j >>> 2] >>> 8 * (s + I * (j % 4)), Y += "0123456789abcdef".charAt($2 >>> 4 & 15) + "0123456789abcdef".charAt(15 & $2);
          return E2.outputUpper ? Y.toUpperCase() : Y;
        }(i, n, h, c2);
      };
    case "B64":
      return function(i) {
        return function(g2, w2, I, E2) {
          let j, $2, Y, m2, s, P = "", S = w2 / 8, T2 = I === -1 ? 3 : 0;
          for (j = 0;j < S; j += 3)
            for (m2 = j + 1 < S ? g2[j + 1 >>> 2] : 0, s = j + 2 < S ? g2[j + 2 >>> 2] : 0, Y = (g2[j >>> 2] >>> 8 * (T2 + I * (j % 4)) & 255) << 16 | (m2 >>> 8 * (T2 + I * ((j + 1) % 4)) & 255) << 8 | s >>> 8 * (T2 + I * ((j + 2) % 4)) & 255, $2 = 0;$2 < 4; $2 += 1)
              P += 8 * j + 6 * $2 <= w2 ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(Y >>> 6 * (3 - $2) & 63) : E2.b64Pad;
          return P;
        }(i, n, h, c2);
      };
    case "BYTES":
      return function(i) {
        return function(g2, w2, I) {
          let E2, j, $2 = "", Y = w2 / 8, m2 = I === -1 ? 3 : 0;
          for (E2 = 0;E2 < Y; E2 += 1)
            j = g2[E2 >>> 2] >>> 8 * (m2 + I * (E2 % 4)) & 255, $2 += String.fromCharCode(j);
          return $2;
        }(i, n, h);
      };
    case "ARRAYBUFFER":
      try {
        new ArrayBuffer(0);
      } catch (i) {
        throw new Error("ARRAYBUFFER not supported by this environment");
      }
      return function(i) {
        return function(g2, w2, I) {
          let E2, j = w2 / 8, $2 = new ArrayBuffer(j), Y = new Uint8Array($2), m2 = I === -1 ? 3 : 0;
          for (E2 = 0;E2 < j; E2 += 1)
            Y[E2] = g2[E2 >>> 2] >>> 8 * (m2 + I * (E2 % 4)) & 255;
          return $2;
        }(i, n, h);
      };
    case "UINT8ARRAY":
      try {
        new Uint8Array(0);
      } catch (i) {
        throw new Error("UINT8ARRAY not supported by this environment");
      }
      return function(i) {
        return function(g2, w2, I) {
          let E2, j = w2 / 8, $2 = I === -1 ? 3 : 0, Y = new Uint8Array(j);
          for (E2 = 0;E2 < j; E2 += 1)
            Y[E2] = g2[E2 >>> 2] >>> 8 * ($2 + I * (E2 % 4)) & 255;
          return Y;
        }(i, n, h);
      };
    default:
      throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
  }
};
var vn2 = function(t, n) {
  let h, c2, i = t.binLen >>> 3, g2 = n.binLen >>> 3, w2 = i << 3, I = 4 - i << 3;
  if (i % 4 != 0) {
    for (h = 0;h < g2; h += 4)
      c2 = i + h >>> 2, t.value[c2] |= n.value[h >>> 2] << w2, t.value.push(0), t.value[c2 + 1] |= n.value[h >>> 2] >>> I;
    return (t.value.length << 2) - 4 >= g2 + i && t.value.pop(), { value: t.value, binLen: t.binLen + n.binLen };
  }
  return { value: t.value.concat(n.value), binLen: t.binLen + n.binLen };
};
var bn2 = function(t) {
  let n = { outputUpper: false, b64Pad: "=", outputLen: -1 }, h = t || {};
  if (n.outputUpper = h.outputUpper || false, h.b64Pad && (n.b64Pad = h.b64Pad), h.outputLen) {
    if (h.outputLen % 8 != 0)
      throw new Error("Output length must be a multiple of 8");
    n.outputLen = h.outputLen;
  } else if (h.shakeLen) {
    if (h.shakeLen % 8 != 0)
      throw new Error("Output length must be a multiple of 8");
    n.outputLen = h.shakeLen;
  }
  if (typeof n.outputUpper != "boolean")
    throw new Error("Invalid outputUpper formatting option");
  if (typeof n.b64Pad != "string")
    throw new Error("Invalid b64Pad formatting option");
  return n;
};
var tn2 = function(t, n, h, c2) {
  let i = t + " must include a value and format";
  if (!n) {
    if (!c2)
      throw new Error(i);
    return c2;
  }
  if (n.value === undefined || !n.format)
    throw new Error(i);
  return mn2(n.format, n.encoding || "UTF8", h)(n.value);
};
var cn2 = function(t, n) {
  return t << n | t >>> 32 - n;
};
var B2 = function(t, n) {
  return t >>> n | t << 32 - n;
};
var Un2 = function(t, n) {
  return t >>> n;
};
var Ln2 = function(t, n, h) {
  return t ^ n ^ h;
};
var Fn2 = function(t, n, h) {
  return t & n ^ ~t & h;
};
var Bn2 = function(t, n, h) {
  return t & n ^ t & h ^ n & h;
};
var Lt2 = function(t) {
  return B2(t, 2) ^ B2(t, 13) ^ B2(t, 22);
};
var y2 = function(t, n) {
  let h = (65535 & t) + (65535 & n);
  return (65535 & (t >>> 16) + (n >>> 16) + (h >>> 16)) << 16 | 65535 & h;
};
var Mt2 = function(t, n, h, c2) {
  let i = (65535 & t) + (65535 & n) + (65535 & h) + (65535 & c2);
  return (65535 & (t >>> 16) + (n >>> 16) + (h >>> 16) + (c2 >>> 16) + (i >>> 16)) << 16 | 65535 & i;
};
var wn2 = function(t, n, h, c2, i) {
  let g2 = (65535 & t) + (65535 & n) + (65535 & h) + (65535 & c2) + (65535 & i);
  return (65535 & (t >>> 16) + (n >>> 16) + (h >>> 16) + (c2 >>> 16) + (i >>> 16) + (g2 >>> 16)) << 16 | 65535 & g2;
};
var Ht2 = function(t) {
  return B2(t, 7) ^ B2(t, 18) ^ Un2(t, 3);
};
var pt2 = function(t) {
  return B2(t, 6) ^ B2(t, 11) ^ B2(t, 25);
};
var Kt2 = function(t) {
  return [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
};
var Qn2 = function(t, n) {
  let h, c2, i, g2, w2, I, E2, j = [];
  for (h = n[0], c2 = n[1], i = n[2], g2 = n[3], w2 = n[4], E2 = 0;E2 < 80; E2 += 1)
    j[E2] = E2 < 16 ? t[E2] : cn2(j[E2 - 3] ^ j[E2 - 8] ^ j[E2 - 14] ^ j[E2 - 16], 1), I = E2 < 20 ? wn2(cn2(h, 5), Fn2(c2, i, g2), w2, 1518500249, j[E2]) : E2 < 40 ? wn2(cn2(h, 5), Ln2(c2, i, g2), w2, 1859775393, j[E2]) : E2 < 60 ? wn2(cn2(h, 5), Bn2(c2, i, g2), w2, 2400959708, j[E2]) : wn2(cn2(h, 5), Ln2(c2, i, g2), w2, 3395469782, j[E2]), w2 = g2, g2 = i, i = cn2(c2, 30), c2 = h, h = I;
  return n[0] = y2(h, n[0]), n[1] = y2(c2, n[1]), n[2] = y2(i, n[2]), n[3] = y2(g2, n[3]), n[4] = y2(w2, n[4]), n;
};
var dt2 = function(t, n, h, c2) {
  let i, g2 = 15 + (n + 65 >>> 9 << 4), w2 = n + h;
  for (;t.length <= g2; )
    t.push(0);
  for (t[n >>> 5] |= 128 << 24 - n % 32, t[g2] = 4294967295 & w2, t[g2 - 1] = w2 / En2 | 0, i = 0;i < t.length; i += 16)
    c2 = Qn2(t.slice(i, i + 16), c2);
  return c2;
};
var Mn2 = function(t) {
  let n;
  return n = t == "SHA-224" ? J2.slice() : q2.slice(), n;
};
var Hn2 = function(t, n) {
  let h, c2, i, g2, w2, I, E2, j, $2, Y, m2, s = [];
  for (h = n[0], c2 = n[1], i = n[2], g2 = n[3], w2 = n[4], I = n[5], E2 = n[6], j = n[7], m2 = 0;m2 < 64; m2 += 1)
    s[m2] = m2 < 16 ? t[m2] : Mt2(B2(P = s[m2 - 2], 17) ^ B2(P, 19) ^ Un2(P, 10), s[m2 - 7], Ht2(s[m2 - 15]), s[m2 - 16]), $2 = wn2(j, pt2(w2), Fn2(w2, I, E2), A2[m2], s[m2]), Y = y2(Lt2(h), Bn2(h, c2, i)), j = E2, E2 = I, I = w2, w2 = y2(g2, $2), g2 = i, i = c2, c2 = h, h = y2($2, Y);
  var P;
  return n[0] = y2(h, n[0]), n[1] = y2(c2, n[1]), n[2] = y2(i, n[2]), n[3] = y2(g2, n[3]), n[4] = y2(w2, n[4]), n[5] = y2(I, n[5]), n[6] = y2(E2, n[6]), n[7] = y2(j, n[7]), n;
};
var pn2 = function(t, n) {
  let h;
  return n > 32 ? (h = 64 - n, new N2(t.I << n | t.N >>> h, t.N << n | t.I >>> h)) : n !== 0 ? (h = 32 - n, new N2(t.N << n | t.I >>> h, t.I << n | t.N >>> h)) : t;
};
var Q2 = function(t, n) {
  let h;
  return n < 32 ? (h = 32 - n, new N2(t.N >>> n | t.I << h, t.I >>> n | t.N << h)) : (h = 64 - n, new N2(t.I >>> n | t.N << h, t.N >>> n | t.I << h));
};
var an2 = function(t, n) {
  return new N2(t.N >>> n, t.I >>> n | t.N << 32 - n);
};
var et2 = function(t, n, h) {
  return new N2(t.N & n.N ^ t.N & h.N ^ n.N & h.N, t.I & n.I ^ t.I & h.I ^ n.I & h.I);
};
var ft2 = function(t) {
  let n = Q2(t, 28), h = Q2(t, 34), c2 = Q2(t, 39);
  return new N2(n.N ^ h.N ^ c2.N, n.I ^ h.I ^ c2.I);
};
var F2 = function(t, n) {
  let h, c2;
  h = (65535 & t.I) + (65535 & n.I), c2 = (t.I >>> 16) + (n.I >>> 16) + (h >>> 16);
  let i = (65535 & c2) << 16 | 65535 & h;
  return h = (65535 & t.N) + (65535 & n.N) + (c2 >>> 16), c2 = (t.N >>> 16) + (n.N >>> 16) + (h >>> 16), new N2((65535 & c2) << 16 | 65535 & h, i);
};
var Vt2 = function(t, n, h, c2) {
  let i, g2;
  i = (65535 & t.I) + (65535 & n.I) + (65535 & h.I) + (65535 & c2.I), g2 = (t.I >>> 16) + (n.I >>> 16) + (h.I >>> 16) + (c2.I >>> 16) + (i >>> 16);
  let w2 = (65535 & g2) << 16 | 65535 & i;
  return i = (65535 & t.N) + (65535 & n.N) + (65535 & h.N) + (65535 & c2.N) + (g2 >>> 16), g2 = (t.N >>> 16) + (n.N >>> 16) + (h.N >>> 16) + (c2.N >>> 16) + (i >>> 16), new N2((65535 & g2) << 16 | 65535 & i, w2);
};
var yt2 = function(t, n, h, c2, i) {
  let g2, w2;
  g2 = (65535 & t.I) + (65535 & n.I) + (65535 & h.I) + (65535 & c2.I) + (65535 & i.I), w2 = (t.I >>> 16) + (n.I >>> 16) + (h.I >>> 16) + (c2.I >>> 16) + (i.I >>> 16) + (g2 >>> 16);
  let I = (65535 & w2) << 16 | 65535 & g2;
  return g2 = (65535 & t.N) + (65535 & n.N) + (65535 & h.N) + (65535 & c2.N) + (65535 & i.N) + (w2 >>> 16), w2 = (t.N >>> 16) + (n.N >>> 16) + (h.N >>> 16) + (c2.N >>> 16) + (i.N >>> 16) + (g2 >>> 16), new N2((65535 & w2) << 16 | 65535 & g2, I);
};
var Yn2 = function(t, n) {
  return new N2(t.N ^ n.N, t.I ^ n.I);
};
var ot2 = function(t) {
  let n = Q2(t, 19), h = Q2(t, 61), c2 = an2(t, 6);
  return new N2(n.N ^ h.N ^ c2.N, n.I ^ h.I ^ c2.I);
};
var Gt2 = function(t) {
  let n = Q2(t, 1), h = Q2(t, 8), c2 = an2(t, 7);
  return new N2(n.N ^ h.N ^ c2.N, n.I ^ h.I ^ c2.I);
};
var lt2 = function(t) {
  let n = Q2(t, 14), h = Q2(t, 18), c2 = Q2(t, 41);
  return new N2(n.N ^ h.N ^ c2.N, n.I ^ h.I ^ c2.I);
};
var Kn2 = function(t) {
  return t === "SHA-384" ? [new N2(3418070365, J2[0]), new N2(1654270250, J2[1]), new N2(2438529370, J2[2]), new N2(355462360, J2[3]), new N2(1731405415, J2[4]), new N2(41048885895, J2[5]), new N2(3675008525, J2[6]), new N2(1203062813, J2[7])] : [new N2(q2[0], 4089235720), new N2(q2[1], 2227873595), new N2(q2[2], 4271175723), new N2(q2[3], 1595750129), new N2(q2[4], 2917565137), new N2(q2[5], 725511199), new N2(q2[6], 4215389547), new N2(q2[7], 327033209)];
};
var dn2 = function(t, n) {
  let h, c2, i, g2, w2, I, E2, j, $2, Y, m2, s, P = [];
  for (h = n[0], c2 = n[1], i = n[2], g2 = n[3], w2 = n[4], I = n[5], E2 = n[6], j = n[7], m2 = 0;m2 < 80; m2 += 1)
    m2 < 16 ? (s = 2 * m2, P[m2] = new N2(t[s], t[s + 1])) : P[m2] = Vt2(ot2(P[m2 - 2]), P[m2 - 7], Gt2(P[m2 - 15]), P[m2 - 16]), $2 = yt2(j, lt2(w2), (T2 = I, v = E2, new N2((S = w2).N & T2.N ^ ~S.N & v.N, S.I & T2.I ^ ~S.I & v.I)), Bt2[m2], P[m2]), Y = F2(ft2(h), et2(h, c2, i)), j = E2, E2 = I, I = w2, w2 = F2(g2, $2), g2 = i, i = c2, c2 = h, h = F2($2, Y);
  var S, T2, v;
  return n[0] = F2(h, n[0]), n[1] = F2(c2, n[1]), n[2] = F2(i, n[2]), n[3] = F2(g2, n[3]), n[4] = F2(w2, n[4]), n[5] = F2(I, n[5]), n[6] = F2(E2, n[6]), n[7] = F2(j, n[7]), n;
};
var Cn2 = function(t) {
  let n, h = [];
  for (n = 0;n < 5; n += 1)
    h[n] = [new N2(0, 0), new N2(0, 0), new N2(0, 0), new N2(0, 0), new N2(0, 0)];
  return h;
};
var Zt2 = function(t) {
  let n, h = [];
  for (n = 0;n < 5; n += 1)
    h[n] = t[n].slice();
  return h;
};
var Pn2 = function(t, n) {
  let h, c2, i, g2, w2 = [], I = [];
  if (t !== null)
    for (c2 = 0;c2 < t.length; c2 += 2)
      n[(c2 >>> 1) % 5][(c2 >>> 1) / 5 | 0] = Yn2(n[(c2 >>> 1) % 5][(c2 >>> 1) / 5 | 0], new N2(t[c2 + 1], t[c2]));
  for (h = 0;h < 24; h += 1) {
    for (g2 = Cn2(), c2 = 0;c2 < 5; c2 += 1)
      w2[c2] = (E2 = n[c2][0], j = n[c2][1], $2 = n[c2][2], Y = n[c2][3], m2 = n[c2][4], new N2(E2.N ^ j.N ^ $2.N ^ Y.N ^ m2.N, E2.I ^ j.I ^ $2.I ^ Y.I ^ m2.I));
    for (c2 = 0;c2 < 5; c2 += 1)
      I[c2] = Yn2(w2[(c2 + 4) % 5], pn2(w2[(c2 + 1) % 5], 1));
    for (c2 = 0;c2 < 5; c2 += 1)
      for (i = 0;i < 5; i += 1)
        n[c2][i] = Yn2(n[c2][i], I[c2]);
    for (c2 = 0;c2 < 5; c2 += 1)
      for (i = 0;i < 5; i += 1)
        g2[i][(2 * c2 + 3 * i) % 5] = pn2(n[c2][i], Xt2[c2][i]);
    for (c2 = 0;c2 < 5; c2 += 1)
      for (i = 0;i < 5; i += 1)
        n[c2][i] = Yn2(g2[c2][i], new N2(~g2[(c2 + 1) % 5][i].N & g2[(c2 + 2) % 5][i].N, ~g2[(c2 + 1) % 5][i].I & g2[(c2 + 2) % 5][i].I));
    n[0][0] = Yn2(n[0][0], at2[h]);
  }
  var E2, j, $2, Y, m2;
  return n;
};
var Xn2 = function(t) {
  let n, h, c2 = 0, i = [0, 0], g2 = [4294967295 & t, t / En2 & 2097151];
  for (n = 6;n >= 0; n--)
    h = g2[n >> 2] >>> 8 * n & 255, h === 0 && c2 === 0 || (i[c2 + 1 >> 2] |= h << 8 * (c2 + 1), c2 += 1);
  return c2 = c2 !== 0 ? c2 : 1, i[0] |= c2, { value: c2 + 1 > 4 ? i : [i[0]], binLen: 8 + 8 * c2 };
};
var xn2 = function(t) {
  return vn2(Xn2(t.binLen), t);
};
var en2 = function(t, n) {
  let h, c2 = Xn2(n);
  c2 = vn2(c2, t);
  let i = n >>> 2, g2 = (i - c2.value.length % i) % i;
  for (h = 0;h < g2; h++)
    c2.value.push(0);
  return c2.value;
};
var En2 = 4294967296;
var A2 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
var J2 = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
var q2 = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
var Nn2 = "Chosen SHA variant is not supported";
var zn2 = "Cannot set numRounds with MAC";

class jn2 {
  constructor(t, n, h) {
    let c2 = h || {};
    if (this.t = n, this.i = c2.encoding || "UTF8", this.numRounds = c2.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds)
      throw new Error("numRounds must a integer >= 1");
    this.o = t, this.h = [], this.u = 0, this.l = false, this.A = 0, this.H = false, this.S = [], this.p = [];
  }
  update(t) {
    let n, h = 0, c2 = this.m >>> 5, i = this.C(t, this.h, this.u), g2 = i.binLen, w2 = i.value, I = g2 >>> 5;
    for (n = 0;n < I; n += c2)
      h + this.m <= g2 && (this.U = this.v(w2.slice(n, n + c2), this.U), h += this.m);
    return this.A += h, this.h = w2.slice(h >>> 5), this.u = g2 % this.m, this.l = true, this;
  }
  getHash(t, n) {
    let h, c2, i = this.R, g2 = bn2(n);
    if (this.K) {
      if (g2.outputLen === -1)
        throw new Error("Output length must be specified in options");
      i = g2.outputLen;
    }
    let w2 = Wn2(t, i, this.T, g2);
    if (this.H && this.g)
      return w2(this.g(g2));
    for (c2 = this.F(this.h.slice(), this.u, this.A, this.L(this.U), i), h = 1;h < this.numRounds; h += 1)
      this.K && i % 32 != 0 && (c2[c2.length - 1] &= 16777215 >>> 24 - i % 32), c2 = this.F(c2, i, 0, this.B(this.o), i);
    return w2(c2);
  }
  setHMACKey(t, n, h) {
    if (!this.M)
      throw new Error("Variant does not support HMAC");
    if (this.l)
      throw new Error("Cannot set MAC key after calling update");
    let c2 = mn2(n, (h || {}).encoding || "UTF8", this.T);
    this.k(c2(t));
  }
  k(t) {
    let n = this.m >>> 3, h = n / 4 - 1, c2;
    if (this.numRounds !== 1)
      throw new Error(zn2);
    if (this.H)
      throw new Error("MAC key already set");
    for (n < t.binLen / 8 && (t.value = this.F(t.value, t.binLen, 0, this.B(this.o), this.R));t.value.length <= h; )
      t.value.push(0);
    for (c2 = 0;c2 <= h; c2 += 1)
      this.S[c2] = 909522486 ^ t.value[c2], this.p[c2] = 1549556828 ^ t.value[c2];
    this.U = this.v(this.S, this.U), this.A = this.m, this.H = true;
  }
  getHMAC(t, n) {
    let h = bn2(n);
    return Wn2(t, this.R, this.T, h)(this.Y());
  }
  Y() {
    let t;
    if (!this.H)
      throw new Error("Cannot call getHMAC without first setting MAC key");
    let n = this.F(this.h.slice(), this.u, this.A, this.L(this.U), this.R);
    return t = this.v(this.p, this.B(this.o)), t = this.F(n, this.R, this.m, t, this.R), t;
  }
}
var Ut2 = class extends jn2 {
  constructor(t, n, h) {
    if (t !== "SHA-1")
      throw new Error(Nn2);
    super(t, n, h);
    let c2 = h || {};
    this.M = true, this.g = this.Y, this.T = -1, this.C = mn2(this.t, this.i, this.T), this.v = Qn2, this.L = function(i) {
      return i.slice();
    }, this.B = Kt2, this.F = dt2, this.U = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.m = 512, this.R = 160, this.K = false, c2.hmacKey && this.k(tn2("hmacKey", c2.hmacKey, this.T));
  }
};
var Ft2 = class extends jn2 {
  constructor(t, n, h) {
    if (t !== "SHA-224" && t !== "SHA-256")
      throw new Error(Nn2);
    super(t, n, h);
    let c2 = h || {};
    this.g = this.Y, this.M = true, this.T = -1, this.C = mn2(this.t, this.i, this.T), this.v = Hn2, this.L = function(i) {
      return i.slice();
    }, this.B = Mn2, this.F = function(i, g2, w2, I) {
      return function(E2, j, $2, Y, m2) {
        let s, P, S = 15 + (j + 65 >>> 9 << 4), T2 = j + $2;
        for (;E2.length <= S; )
          E2.push(0);
        for (E2[j >>> 5] |= 128 << 24 - j % 32, E2[S] = 4294967295 & T2, E2[S - 1] = T2 / En2 | 0, s = 0;s < E2.length; s += 16)
          Y = Hn2(E2.slice(s, s + 16), Y);
        return P = m2 === "SHA-224" ? [Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6]] : Y, P;
      }(i, g2, w2, I, t);
    }, this.U = Mn2(t), this.m = 512, this.R = t === "SHA-224" ? 224 : 256, this.K = false, c2.hmacKey && this.k(tn2("hmacKey", c2.hmacKey, this.T));
  }
};

class N2 {
  constructor(t, n) {
    this.N = t, this.I = n;
  }
}
var Bt2 = [new N2(A2[0], 3609767458), new N2(A2[1], 602891725), new N2(A2[2], 3964484399), new N2(A2[3], 2173295548), new N2(A2[4], 4081628472), new N2(A2[5], 3053834265), new N2(A2[6], 2937671579), new N2(A2[7], 3664609560), new N2(A2[8], 2734883394), new N2(A2[9], 1164996542), new N2(A2[10], 1323610764), new N2(A2[11], 3590304994), new N2(A2[12], 4068182383), new N2(A2[13], 991336113), new N2(A2[14], 633803317), new N2(A2[15], 3479774868), new N2(A2[16], 2666613458), new N2(A2[17], 944711139), new N2(A2[18], 2341262773), new N2(A2[19], 2007800933), new N2(A2[20], 1495990901), new N2(A2[21], 1856431235), new N2(A2[22], 3175218132), new N2(A2[23], 2198950837), new N2(A2[24], 3999719339), new N2(A2[25], 766784016), new N2(A2[26], 2566594879), new N2(A2[27], 3203337956), new N2(A2[28], 1034457026), new N2(A2[29], 2466948901), new N2(A2[30], 3758326383), new N2(A2[31], 168717936), new N2(A2[32], 1188179964), new N2(A2[33], 1546045734), new N2(A2[34], 1522805485), new N2(A2[35], 2643833823), new N2(A2[36], 2343527390), new N2(A2[37], 1014477480), new N2(A2[38], 1206759142), new N2(A2[39], 344077627), new N2(A2[40], 1290863460), new N2(A2[41], 3158454273), new N2(A2[42], 3505952657), new N2(A2[43], 106217008), new N2(A2[44], 3606008344), new N2(A2[45], 1432725776), new N2(A2[46], 1467031594), new N2(A2[47], 851169720), new N2(A2[48], 3100823752), new N2(A2[49], 1363258195), new N2(A2[50], 3750685593), new N2(A2[51], 3785050280), new N2(A2[52], 3318307427), new N2(A2[53], 3812723403), new N2(A2[54], 2003034995), new N2(A2[55], 3602036899), new N2(A2[56], 1575990012), new N2(A2[57], 1125592928), new N2(A2[58], 2716904306), new N2(A2[59], 442776044), new N2(A2[60], 593698344), new N2(A2[61], 3733110249), new N2(A2[62], 2999351573), new N2(A2[63], 3815920427), new N2(3391569614, 3928383900), new N2(3515267271, 566280711), new N2(3940187606, 3454069534), new N2(4118630271, 4000239992), new N2(116418474, 1914138554), new N2(174292421, 2731055270), new N2(289380356, 3203993006), new N2(460393269, 320620315), new N2(685471733, 587496836), new N2(852142971, 1086792851), new N2(1017036298, 365543100), new N2(1126000580, 2618297676), new N2(1288033470, 3409855158), new N2(1501505948, 4234509866), new N2(1607167915, 987167468), new N2(1816402316, 1246189591)];
var Qt2 = class extends jn2 {
  constructor(t, n, h) {
    if (t !== "SHA-384" && t !== "SHA-512")
      throw new Error(Nn2);
    super(t, n, h);
    let c2 = h || {};
    this.g = this.Y, this.M = true, this.T = -1, this.C = mn2(this.t, this.i, this.T), this.v = dn2, this.L = function(i) {
      return i.slice();
    }, this.B = Kn2, this.F = function(i, g2, w2, I) {
      return function(E2, j, $2, Y, m2) {
        let s, P, S = 31 + (j + 129 >>> 10 << 5), T2 = j + $2;
        for (;E2.length <= S; )
          E2.push(0);
        for (E2[j >>> 5] |= 128 << 24 - j % 32, E2[S] = 4294967295 & T2, E2[S - 1] = T2 / En2 | 0, s = 0;s < E2.length; s += 32)
          Y = dn2(E2.slice(s, s + 32), Y);
        return P = m2 === "SHA-384" ? [Y[0].N, Y[0].I, Y[1].N, Y[1].I, Y[2].N, Y[2].I, Y[3].N, Y[3].I, Y[4].N, Y[4].I, Y[5].N, Y[5].I] : [Y[0].N, Y[0].I, Y[1].N, Y[1].I, Y[2].N, Y[2].I, Y[3].N, Y[3].I, Y[4].N, Y[4].I, Y[5].N, Y[5].I, Y[6].N, Y[6].I, Y[7].N, Y[7].I], P;
      }(i, g2, w2, I, t);
    }, this.U = Kn2(t), this.m = 1024, this.R = t === "SHA-384" ? 384 : 512, this.K = false, c2.hmacKey && this.k(tn2("hmacKey", c2.hmacKey, this.T));
  }
};
var at2 = [new N2(0, 1), new N2(0, 32898), new N2(2147483648, 32906), new N2(2147483648, 2147516416), new N2(0, 32907), new N2(0, 2147483649), new N2(2147483648, 2147516545), new N2(2147483648, 32777), new N2(0, 138), new N2(0, 136), new N2(0, 2147516425), new N2(0, 2147483658), new N2(0, 2147516555), new N2(2147483648, 139), new N2(2147483648, 32905), new N2(2147483648, 32771), new N2(2147483648, 32770), new N2(2147483648, 128), new N2(0, 32778), new N2(2147483648, 2147483658), new N2(2147483648, 2147516545), new N2(2147483648, 32896), new N2(0, 2147483649), new N2(2147483648, 2147516424)];
var Xt2 = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];
var zt2 = class extends jn2 {
  constructor(t, n, h) {
    let c2 = 6, i = 0;
    super(t, n, h);
    let g2 = h || {};
    if (this.numRounds !== 1) {
      if (g2.kmacKey || g2.hmacKey)
        throw new Error(zn2);
      if (this.o === "CSHAKE128" || this.o === "CSHAKE256")
        throw new Error("Cannot set numRounds for CSHAKE variants");
    }
    switch (this.T = 1, this.C = mn2(this.t, this.i, this.T), this.v = Pn2, this.L = Zt2, this.B = Cn2, this.U = Cn2(), this.K = false, t) {
      case "SHA3-224":
        this.m = i = 1152, this.R = 224, this.M = true, this.g = this.Y;
        break;
      case "SHA3-256":
        this.m = i = 1088, this.R = 256, this.M = true, this.g = this.Y;
        break;
      case "SHA3-384":
        this.m = i = 832, this.R = 384, this.M = true, this.g = this.Y;
        break;
      case "SHA3-512":
        this.m = i = 576, this.R = 512, this.M = true, this.g = this.Y;
        break;
      case "SHAKE128":
        c2 = 31, this.m = i = 1344, this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "SHAKE256":
        c2 = 31, this.m = i = 1088, this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "KMAC128":
        c2 = 4, this.m = i = 1344, this.X(h), this.R = -1, this.K = true, this.M = false, this.g = this._;
        break;
      case "KMAC256":
        c2 = 4, this.m = i = 1088, this.X(h), this.R = -1, this.K = true, this.M = false, this.g = this._;
        break;
      case "CSHAKE128":
        this.m = i = 1344, c2 = this.O(h), this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      case "CSHAKE256":
        this.m = i = 1088, c2 = this.O(h), this.R = -1, this.K = true, this.M = false, this.g = null;
        break;
      default:
        throw new Error(Nn2);
    }
    this.F = function(w2, I, E2, j, $2) {
      return function(Y, m2, s, P, S, T2, v) {
        let x, O, C = 0, D = [], b = S >>> 5, k = m2 >>> 5;
        for (x = 0;x < k && m2 >= S; x += b)
          P = Pn2(Y.slice(x, x + b), P), m2 -= S;
        for (Y = Y.slice(x), m2 %= S;Y.length < b; )
          Y.push(0);
        for (x = m2 >>> 3, Y[x >> 2] ^= T2 << x % 4 * 8, Y[b - 1] ^= 2147483648, P = Pn2(Y, P);32 * D.length < v && (O = P[C % 5][C / 5 | 0], D.push(O.I), !(32 * D.length >= v)); )
          D.push(O.N), C += 1, 64 * C % S == 0 && (Pn2(null, P), C = 0);
        return D;
      }(w2, I, 0, j, i, c2, $2);
    }, g2.hmacKey && this.k(tn2("hmacKey", g2.hmacKey, this.T));
  }
  O(t, n) {
    let h = function(i) {
      let g2 = i || {};
      return { funcName: tn2("funcName", g2.funcName, 1, { value: [], binLen: 0 }), customization: tn2("Customization", g2.customization, 1, { value: [], binLen: 0 }) };
    }(t || {});
    n && (h.funcName = n);
    let c2 = vn2(xn2(h.funcName), xn2(h.customization));
    if (h.customization.binLen !== 0 || h.funcName.binLen !== 0) {
      let i = en2(c2, this.m >>> 3);
      for (let g2 = 0;g2 < i.length; g2 += this.m >>> 5)
        this.U = this.v(i.slice(g2, g2 + (this.m >>> 5)), this.U), this.A += this.m;
      return 4;
    }
    return 31;
  }
  X(t) {
    let n = function(c2) {
      let i = c2 || {};
      return { kmacKey: tn2("kmacKey", i.kmacKey, 1), funcName: { value: [1128353099], binLen: 32 }, customization: tn2("Customization", i.customization, 1, { value: [], binLen: 0 }) };
    }(t || {});
    this.O(t, n.funcName);
    let h = en2(xn2(n.kmacKey), this.m >>> 3);
    for (let c2 = 0;c2 < h.length; c2 += this.m >>> 5)
      this.U = this.v(h.slice(c2, c2 + (this.m >>> 5)), this.U), this.A += this.m;
    this.H = true;
  }
  _(t) {
    let n = vn2({ value: this.h.slice(), binLen: this.u }, function(h) {
      let c2, i, g2 = 0, w2 = [0, 0], I = [4294967295 & h, h / En2 & 2097151];
      for (c2 = 6;c2 >= 0; c2--)
        i = I[c2 >> 2] >>> 8 * c2 & 255, i === 0 && g2 === 0 || (w2[g2 >> 2] |= i << 8 * g2, g2 += 1);
      return g2 = g2 !== 0 ? g2 : 1, w2[g2 >> 2] |= g2 << 8 * g2, { value: g2 + 1 > 4 ? w2 : [w2[0]], binLen: 8 + 8 * g2 };
    }(t.outputLen));
    return this.F(n.value, n.binLen, this.A, this.L(this.U), t.outputLen);
  }
};

class _n2 {
  constructor(t, n, h) {
    if (t == "SHA-1")
      this.P = new Ut2(t, n, h);
    else if (t == "SHA-224" || t == "SHA-256")
      this.P = new Ft2(t, n, h);
    else if (t == "SHA-384" || t == "SHA-512")
      this.P = new Qt2(t, n, h);
    else {
      if (t != "SHA3-224" && t != "SHA3-256" && t != "SHA3-384" && t != "SHA3-512" && t != "SHAKE128" && t != "SHAKE256" && t != "CSHAKE128" && t != "CSHAKE256" && t != "KMAC128" && t != "KMAC256")
        throw new Error(Nn2);
      this.P = new zt2(t, n, h);
    }
  }
  update(t) {
    return this.P.update(t), this;
  }
  getHash(t, n) {
    return this.P.getHash(t, n);
  }
  setHMACKey(t, n, h) {
    this.P.setHMACKey(t, n, h);
  }
  getHMAC(t, n) {
    return this.P.getHMAC(t, n);
  }
}
var Sn2 = function(t, n, h = 0) {
  let c2 = Dn2.default({ ...t, signature: undefined }), i = n.noTimeWindow ? 0 : Math.floor(Date.now() / (n.timeWindow ?? nt2)) + h;
  return new _n2("SHA-256", "TEXT", { encoding: "UTF8" }).update(c2).update(Dn2.default(n)).update(`${i}`).getHash("B64");
};
function Jn2(t, n = {}) {
  return { ...t, signature: Sn2(t, n) };
}
function qn(t, n) {
  return (n.noTimeWindow ? 0 : n.timeWindow ?? nt2) ? t.signature === Sn2(t, n) || t.signature === Sn2(t, n, -1) : t.signature === Sn2(t, n);
}
var nt2 = 5000;

class un2 {
  data = [];
  #n = new TextEncoder;
  static payload(t, n, h) {
    return new un2().payload(t, n, h);
  }
  static blob(t, n) {
    return new un2().blob(t, n);
  }
  #t(t) {
    let n = this.#n.encode(t), h = new Uint8Array([n.byteLength]);
    this.data.push(h.buffer), this.data.push(n.buffer);
  }
  payload(t, n, h) {
    this.#t(t);
    let c2 = new Uint8Array([1]);
    this.data.push(c2.buffer);
    let i = JSON.stringify(h ? Jn2(n, { secret: h }) : n), g2 = this.#n.encode(i), w2 = new Uint32Array([g2.byteLength]);
    return this.data.push(w2.buffer), this.data.push(g2.buffer), this;
  }
  blob(t, n) {
    this.#t(t);
    let h = new Uint8Array([2]);
    this.data.push(h.buffer);
    let c2 = new Uint32Array([n.size]);
    return this.data.push(c2.buffer), this.data.push(n), this;
  }
  build() {
    return new Blob(this.data);
  }
}
var ct2 = new TextDecoder;
function Jt2(t, n) {
  let [h, c2] = mt2(t, n);
  return [ct2.decode(new Uint8Array(t, c2, h)), c2 + h];
}
function qt2(t, n) {
  let [h, c2] = it2(t, n);
  return [ct2.decode(new Uint8Array(t, c2, h)), c2 + h];
}
function n82(t, n) {
  let [h, c2] = it2(t, n);
  return [new Blob([new Uint8Array(t, c2, h)], { type: "application/octet-stream" }), c2 + h];
}
function it2(t, n) {
  return [new Uint32Array(t.slice(n, n + Uint32Array.BYTES_PER_ELEMENT), 0, 1)[0], n + Uint32Array.BYTES_PER_ELEMENT];
}
function mt2(t, n) {
  return [new Uint8Array(t, n, 1)[0], n + Uint8Array.BYTES_PER_ELEMENT];
}
function s8(t, n) {
  return qn(t, { secret: n });
}
async function I82(t) {
  let n = {}, h = {}, c2 = 0, i;
  while (c2 < t.size) {
    i = i ?? await t.arrayBuffer();
    let [g2, w2] = Jt2(i, c2);
    c2 = w2;
    let [I, E2] = mt2(i, c2);
    switch (c2 = E2, I) {
      case 1:
        let [j, $2] = qt2(i, c2);
        c2 = $2;
        try {
          n[g2] = JSON.parse(j);
        } catch (s) {
          console.error(`Error parsing JSON for key "${g2}":`, s);
        }
        break;
      case 2:
        let [Y, m2] = n82(i, c2);
        c2 = m2, h[g2] = Y;
        break;
    }
  }
  return { ...n, ...h };
}
async function t82(t) {
  let h = Math.ceil(t.size / 65536), c2 = await crypto.subtle.digest("SHA-256", new Uint8Array(0));
  for (let w2 = 0;w2 < h; w2++) {
    let E2 = await t.slice(w2 * 65536, (w2 + 1) * 65536).arrayBuffer(), j = await crypto.subtle.digest("SHA-256", E2), $2 = new Uint8Array(c2.byteLength + j.byteLength);
    $2.set(new Uint8Array(c2), 0), $2.set(new Uint8Array(j), c2.byteLength), c2 = await crypto.subtle.digest("SHA-256", $2.buffer);
  }
  return Array.from(new Uint8Array(c2)).map((w2) => w2.toString(16).padStart(2, "0")).join("");
}
async function tt2(t, n, h = t82) {
  if (typeof t === "string" && t.startsWith("blob:")) {
    let i = await fetch(t).then((w2) => w2.blob());
    URL.revokeObjectURL(t);
    let g2 = `{blobUrl:${await h(i)}}`;
    return n[g2] = i, g2;
  }
  if (typeof t === "object" && t instanceof Blob) {
    let i = `{blob:${await h(t)}}`;
    return n[i] = t, i;
  }
  let c2 = t;
  if (Array.isArray(t))
    await Promise.all(t.map(async (i, g2) => {
      let w2 = await tt2(i, n, h);
      if (w2 !== t[g2]) {
        if (t === c2)
          t = [...t];
        t[g2] = w2;
      }
    }));
  else if (typeof t === "object" && t)
    await Promise.all(Object.entries(t).map(async ([i, g2]) => {
      let w2 = await tt2(g2, n, h);
      if (w2 !== t[i]) {
        if (t === c2)
          t = { ...t };
        t[i] = w2;
      }
    }));
  return t;
}
function ht2(t, n) {
  if (typeof t === "string" && t.startsWith("{blobUrl:"))
    return URL.createObjectURL(n[t]);
  if (typeof t === "string" && t.startsWith("{blob:"))
    return n[t];
  let h = t;
  if (Array.isArray(t))
    t.forEach((c2, i) => {
      let g2 = ht2(c2, n);
      if (g2 !== c2) {
        if (t === h)
          t = [...t];
        t[i] = g2;
      }
    });
  else if (typeof t === "object" && t)
    Object.entries(t).forEach(([c2, i]) => {
      let g2 = ht2(i, n);
      if (g2 !== i) {
        if (t === h)
          t = { ...t };
        t[c2] = g2;
      }
    });
  return t;
}

// ../src/server/SocketEventHandler.ts
function addMessageReceiver(socket, payloadReceived) {
  socket.on("message", async (message, binary) => {
    if (binary) {
      const blob = new Blob([message]);
      const { payload, ...blobs } = await I82(blob);
      if (payload) {
        payloadReceived(payload, blobs);
      }
    } else {
      const payload = JSON.parse(message);
      payloadReceived(payload, {});
    }
  });
}

// ../src/server/peer-utils.ts
function removeRestrictedData(state, clientId) {
  const newState = {
    ...state,
    peer: { ...state.peer },
    updates: undefined
  };
  for (const key in newState.peer) {
    const clients = key.split(":");
    if (clients.length < 2 || clients[0] !== clientId && clients[1] !== clientId) {
      delete newState.peer[key];
    }
  }
  if (!Object.keys(newState.peer ?? {}).length) {
    delete newState.peer;
  }
  return newState;
}
function removeRestrictedPeersFromUpdates(updates, clientId) {
  return updates.filter((update) => {
    const parts = update.path.split("/");
    if (parts[0] === "peer") {
      const clients = parts[1].split(":");
      return clients.length >= 2 && (clients[0] === clientId || clients[1] === clientId);
    }
    return true;
  });
}

// ../src/server/path-utils.ts
function restrictedPath(path, clientId) {
  const pathSplit = path.split("/");
  switch (pathSplit[0]) {
    case "clients":
      if (pathSplit[1] === clientId) {
        return false;
      }
      return true;
    case "peer":
      const tag = pathSplit[1];
      const clientIds = tag.split(":");
      if (clientIds.length >= 2 && clientId && clientIds.includes(clientId)) {
        return false;
      }
      return true;
  }
  return false;
}

// ../src/server/SyncRoom.ts
var nextClientId = 1;

class SyncRoom {
  room;
  #sockets = new Map;
  state = {};
  #onRoomChange = new Set;
  #secret = crypto.randomUUID();
  constructor(room) {
    this.room = room;
  }
  addRoomChangeListener(callback) {
    this.#onRoomChange.add(callback);
  }
  async welcomeClient(client) {
    const now = Date.now();
    const clientId = `client-${nextClientId++}`;
    const clientPath = `clients/${clientId}`;
    const clientState = {
      joined: now
    };
    this.#sockets.set(client, clientId);
    const newUpdates = [{
      path: clientPath,
      value: clientState,
      confirmed: now
    }];
    this.#shareUpdates(newUpdates, client);
    addMessageReceiver(client, (payload2, blobs2) => {
      if (!s8(payload2, this.#secret)) {
        console.error("Invalid payload received", payload2);
        return;
      }
      payload2.updates?.forEach((update) => {
        const newValue = ht2(update.value, blobs2);
        if (newValue !== undefined) {
          update.value = newValue;
        }
      });
      payload2.updates = payload2.updates?.filter((update) => !restrictedPath(update.path, clientId));
      this.#shareUpdates(payload2.updates, client);
    });
    client.on("close", () => {
      this.#sockets.delete(client);
      this.#shareUpdates([{
        path: clientPath,
        value: undefined,
        confirmed: Date.now()
      }]);
      console.log(`client ${clientId} disconnected from room ${this.room}`);
      this.#onRoomChange.forEach((callback) => callback(this.state));
    });
    commitUpdates(this.state, {
      now
    });
    const blobs = {};
    const payload = await tt2(removeRestrictedData({ ...this.state }, clientId), blobs);
    console.log("Current state", payload);
    const updates = [];
    for (let key in payload) {
      updates.push({
        path: key,
        value: this.state[key],
        confirmed: now
      });
    }
    const welcomeBlobBuilder = un2.payload("payload", {
      myClientId: clientId,
      updates,
      serverTime: now,
      secret: this.#secret
    }, this.#secret);
    Object.entries(blobs ?? {}).forEach(([key, blob]) => welcomeBlobBuilder.blob(key, blob));
    client.send(await welcomeBlobBuilder.build().arrayBuffer());
    return { clientId };
  }
  #cleanupPeers() {
    for (let k in this.state.peer) {
      const clients = k.split(":");
      if (clients.length < 2 || !this.state.clients?.[clients[0]] && !this.state.clients?.[clients[1]]) {
        this.#shareUpdates([{
          path: `peer/${k}`,
          value: undefined,
          confirmed: Date.now()
        }]);
      }
    }
  }
  #shareUpdates(newUpdates, sender) {
    if (!newUpdates?.length) {
      return;
    }
    const updatesForSender = newUpdates.filter((update) => !update.confirmed);
    const now = Date.now();
    newUpdates.forEach((update) => markUpdateConfirmed(update, now));
    this.state.updates = this.state.updates ?? [];
    this.state.updates.push(...newUpdates);
    commitUpdates(this.state, {
      now: Date.now()
    });
    this.#broadcastUpdates(newUpdates, (client) => client !== sender);
    this.#broadcastUpdates(updatesForSender, (client) => client === sender);
    this.#cleanupPeers();
  }
  #broadcastUpdates(newUpdates, senderFilter) {
    if (!newUpdates?.length) {
      return;
    }
    this.#sockets.entries().forEach(async ([client, clientId]) => {
      if (senderFilter && !senderFilter(client)) {
        return;
      }
      const clientUpdates = removeRestrictedPeersFromUpdates(newUpdates, clientId);
      const blobs = {};
      for (let update of clientUpdates) {
        update.value = await tt2(update.value, blobs);
      }
      const blob = packageUpdates(clientUpdates, blobs, this.#secret);
      const buffer = await blob.arrayBuffer();
      client.send(buffer);
    });
  }
}

// ../src/server/SyncSocket.ts
class SyncSocket {
  #rooms = {};
  constructor(server) {
    if (server) {
      this.#hookupSocketServer(server);
    }
  }
  #hookupSocketServer(websocketServer) {
    websocketServer.on("listening", () => {
      const address = websocketServer.address();
      if (typeof address === "string") {
        console.log(`WebSocket server listening on ${address}`);
      } else if (address && typeof address === "object") {
        const host = address.address === "::" ? "localhost" : address.address;
        console.log(`WebSocket server listening on ws://${host}:${address.port}`);
      }
    });
    websocketServer.on("connection", async (socket, req) => {
      await this.handleWebSocket(socket, new URLSearchParams(req.url?.split("?")[1]));
    });
  }
  async handleWebSocket(socket, parameters) {
    const roomName = parameters.get("room") ?? "default";
    const room = this.#getRoom(roomName);
    const { clientId } = await room.welcomeClient(socket);
    console.log(`client ${clientId} connected in room ${roomName}.`);
  }
  #getRoom(roomName) {
    if (!this.#rooms[roomName]) {
      this.#rooms[roomName] = new SyncRoom(roomName);
      this.#rooms[roomName].addRoomChangeListener((roomState) => {
        setTimeout(() => {
          if (this.#rooms[roomName] && !Object.values(roomState.clients ?? {}).length) {
            console.log("closing room", roomName);
            delete this.#rooms[roomName];
          }
        }, 1e4);
      });
    }
    return this.#rooms[roomName];
  }
}
// ../src/client/Observer.ts
class Observer {
  sharedData;
  paths;
  observerManagger;
  multiValues;
  #partsArrays;
  #previousValues = [];
  #changeCallbacks = new Set;
  #addedElementsCallback = new Set;
  #deletedElementsCallback = new Set;
  constructor(sharedData, paths, observerManagger, multiValues = false) {
    this.sharedData = sharedData;
    this.paths = paths;
    this.observerManagger = observerManagger;
    this.multiValues = multiValues;
    this.#partsArrays = paths.map((p) => p === undefined ? [] : p.split("/"));
    this.#previousValues = paths.map(() => {
      return;
    });
    requestAnimationFrame(() => this.triggerIfChanged());
  }
  onChange(callback) {
    this.#changeCallbacks.add(callback);
    return this;
  }
  onElementsAdded(callback) {
    this.#addedElementsCallback.add(callback);
    return this;
  }
  onElementsDeleted(callback) {
    this.#deletedElementsCallback.add(callback);
    return this;
  }
  #valuesChanged(updates) {
    const newValues = this.paths.map((path, index) => updates && (path in updates) ? updates[path] : getLeafObject(this.sharedData.state, this.#partsArrays[index], 0, false, { self: this.sharedData.clientId }));
    if (this.#previousValues.every((prev, index) => {
      const newValue = newValues[index];
      if (prev === newValue) {
        return true;
      }
      if (Array.isArray(prev) && Array.isArray(newValue) && prev.length === newValue.length && prev.every((elem, idx) => elem === newValue[idx])) {
        return true;
      }
      return false;
    })) {
      return null;
    }
    return newValues;
  }
  triggerIfChanged(updates) {
    const newValues = !this.paths.length ? [] : this.#valuesChanged(updates);
    if (!newValues) {
      return;
    }
    const previousValues = this.#previousValues;
    this.#previousValues = newValues;
    this.#changeCallbacks.forEach((callback) => callback(this.multiValues ? newValues : newValues[0], this.multiValues ? previousValues : previousValues[0]));
    if (this.#addedElementsCallback && newValues.some((val) => Array.isArray(val))) {
      let hasNewElements = false;
      const newElementsArray = newValues.map((val, index) => {
        if (Array.isArray(val)) {
          const previousSet = new Set(Array.isArray(previousValues[index]) ? previousValues[index] : []);
          const newElements = val.filter((clientId) => !previousSet.has(clientId));
          if (newElements.length) {
            hasNewElements = true;
          }
          return newElements;
        }
      });
      if (hasNewElements) {
        this.#addedElementsCallback.forEach((callback) => callback(this.multiValues ? newElementsArray : newElementsArray[0]));
      }
    }
    if (this.#deletedElementsCallback && previousValues.some((val) => Array.isArray(val))) {
      let hasDeletedElements = false;
      const deletedElementsArray = previousValues.map((prev, index) => {
        if (Array.isArray(prev)) {
          const currentSet = new Set(Array.isArray(newValues[index]) ? newValues[index] : []);
          const deletedElements = prev.filter((clientId) => !currentSet.has(clientId));
          if (deletedElements.length) {
            hasDeletedElements = true;
          }
          return deletedElements;
        }
      });
      if (hasDeletedElements) {
        this.#deletedElementsCallback.forEach((callback) => callback(this.multiValues ? deletedElementsArray : deletedElementsArray[0]));
      }
    }
  }
  close() {
    this.observerManagger.removeObserver(this);
  }
}

// ../src/client/ObserverManager.ts
class ObserverManager {
  sharedData;
  #observers = new Set;
  constructor(sharedData) {
    this.sharedData = sharedData;
  }
  observe(paths, multi) {
    const observer = new Observer(this.sharedData, paths, this, multi);
    this.#observers.add(observer);
    return observer;
  }
  triggerObservers(updates) {
    this.#observers.forEach((o) => o.triggerIfChanged(updates));
  }
  removeObserver(observer) {
    this.#observers.delete(observer);
  }
  close() {
    this.#observers.forEach((o) => o.close());
  }
}

// ../src/client/ClientData.ts
class ClientData {
  syncClient;
  clientId = "";
  #observerManager;
  constructor(syncClient) {
    this.syncClient = syncClient;
    this.#observerManager = new ObserverManager(syncClient);
  }
  #getAbsolutePath(path) {
    return path.length ? `clients/~{self}/${path}` : "clients/~{self}";
  }
  getData(path) {
    return this.syncClient.getData(this.#getAbsolutePath(path));
  }
  observe(paths) {
    const multi = Array.isArray(paths);
    const pathArray = paths === undefined ? [] : multi ? paths : [paths];
    const updatedPaths = pathArray.map((path) => this.#getAbsolutePath(path));
    return this.#observerManager.observe(updatedPaths, multi);
  }
  triggerObservers(updates) {
    this.#observerManager.triggerObservers(updates);
  }
  async setData(path, value, options) {
    return this.syncClient.setData(this.#getAbsolutePath(path), value, options);
  }
  async pushData(path, value, options) {
    return this.syncClient.pushData(this.#getAbsolutePath(path), value, options);
  }
  get state() {
    return this.syncClient.state.clients?.[this.clientId] ?? {};
  }
}

// ../src/client/SubData.ts
class SubData {
  path;
  syncClient;
  #parts = [];
  #observerManager;
  constructor(path, syncClient) {
    this.path = path;
    this.syncClient = syncClient;
    this.#parts = path.split("/").map((v) => {
      return isNaN(Number(v)) ? v : Number(v);
    });
    this.#observerManager = new ObserverManager(syncClient);
  }
  getData(path) {
    return this.syncClient.getData(this.#getAbsolutePath(path));
  }
  get clientId() {
    return this.syncClient.clientId;
  }
  #getAbsolutePath(path) {
    return path.length ? `${this.path}/${path}` : this.path;
  }
  observe(paths) {
    const multi = Array.isArray(paths);
    const pathArray = paths === undefined ? [] : multi ? paths : [paths];
    const updatedPaths = pathArray.map((path) => this.#getAbsolutePath(path));
    return this.#observerManager.observe(updatedPaths, multi);
  }
  triggerObservers(updates) {
    this.#observerManager.triggerObservers(updates);
  }
  async setData(path, value, options) {
    return this.syncClient.setData(this.#getAbsolutePath(path), value, options);
  }
  async pushData(path, value, options) {
    return this.syncClient.pushData(this.#getAbsolutePath(path), value, options);
  }
  get state() {
    return getLeafObject(this.syncClient.state, this.#parts, 0, false, {
      self: this.syncClient.clientId
    }) ?? {};
  }
  close() {
    this.#observerManager.close();
    this.syncClient.removeChildData(this.path);
  }
}

// ../src/client/SyncClient.ts
class SyncClient {
  socketProvider;
  state;
  #children = new Map;
  #socket;
  #connectionPromise;
  #selfData = new ClientData(this);
  #observerManager = new ObserverManager(this);
  peerManagers = {};
  #serverTimeOffset = 0;
  #nextFrameInProcess = false;
  #secret;
  #processor = new Processor((blob) => this.#socket?.send(blob));
  constructor(socketProvider, initialState = {}) {
    this.socketProvider = socketProvider;
    this.state = initialState;
    this.#connect();
    globalThis.addEventListener("focus", () => {
      if (!this.#socket) {
        const autoReconnect = this.state.config?.autoReconnect ?? true;
        if (autoReconnect) {
          this.#connect().catch((e) => {
            console.warn("Failed to reconnect");
          });
        }
      }
    });
    this.#children.set(`clients/~{self}`, this.#selfData);
  }
  getData(path) {
    const parts = path.split("/");
    return getLeafObject(this.state, parts, 0, false, { self: this.#selfData.clientId });
  }
  async pushData(path, value, options = {}) {
    await this.#processDataUpdate({
      path,
      value,
      append: true
    }, options);
  }
  async setData(path, value, options = {}) {
    await this.#processDataUpdate({
      path,
      value,
      append: options.append,
      insert: options.insert
    }, options);
  }
  async#processDataUpdate(update, options = {}) {
    const isPeerUpdate = this.#isPeerUpdate(update);
    if (!isPeerUpdate) {
      await this.#waitForConnection();
    }
    if (options.active ?? this.state.config?.activeUpdates ?? this.#socket?.serverless) {
      markUpdateConfirmed(update, this.now);
    }
    this.state.outgoingUpdates = this.state.outgoingUpdates ?? [];
    this.state.outgoingUpdates.push(update);
    this.#prepareNextFrame();
  }
  get clientId() {
    return this.#selfData.clientId;
  }
  get self() {
    return this.#selfData;
  }
  access(path) {
    const childData = this.#children.get(path);
    if (childData) {
      return childData;
    }
    const subData = new SubData(path, this);
    this.#children.set(path, subData);
    return subData;
  }
  peerData(peerId) {
    const peerTag = [this.clientId, peerId].sort().join(":");
    return this.access(`peer/${peerTag}`);
  }
  removeChildData(path) {
    this.#children.delete(path);
  }
  observe(paths) {
    const multi = Array.isArray(paths);
    const pathArray = paths === undefined ? [] : multi ? paths : [paths];
    return this.#observerManager.observe(pathArray, multi);
  }
  async#waitForConnection() {
    if (!this.#socket) {
      this.#connect();
    }
    return this.#connectionPromise;
  }
  async#connect() {
    const socket = this.#socket = await this.socketProvider();
    return this.#connectionPromise = new Promise((resolve, reject) => {
      socket.onError((event) => {
        console.error("SyncClient connection error", event);
        reject(event);
      });
      socket.onMessage((data) => {
        this.onMessageBlob(data, resolve);
      });
      socket.onClose(() => {
        console.log("Disconnected from SyncClient");
        this.#socket = undefined;
      });
    });
  }
  close() {
    this.#socket?.close();
  }
  async onMessageBlob(blob, onClientIdConfirmed, skipValidation = false) {
    const context = {
      root: this.state,
      secret: this.#secret,
      clientId: this.clientId,
      localTimeOffset: this.#serverTimeOffset,
      properties: {
        self: this.clientId,
        now: this.now
      },
      skipValidation
    };
    const preClient = context.clientId;
    await this.#processor.processBlob(blob, context);
    this.#serverTimeOffset = context.localTimeOffset;
    this.#secret = context.secret;
    if (!preClient && context.clientId) {
      this.#selfData.clientId = context.clientId;
      onClientIdConfirmed?.();
    }
    this.#prepareNextFrame();
  }
  triggerObservers(updates) {
    this.#observerManager.triggerObservers(updates);
    this.#children.forEach((child) => child.triggerObservers(updates));
  }
  removeObserver(observer) {
    this.#observerManager.removeObserver(observer);
  }
  get now() {
    return Date.now() + this.#serverTimeOffset;
  }
  #prepareNextFrame() {
    if (this.#nextFrameInProcess) {
      return;
    }
    this.#nextFrameInProcess = true;
    requestAnimationFrame(() => this.#processNextFrame());
  }
  #processNextFrame() {
    this.#nextFrameInProcess = false;
    const context = {
      root: this.state,
      secret: this.#secret,
      clientId: this.clientId,
      localTimeOffset: this.#serverTimeOffset,
      properties: {
        self: this.clientId,
        now: this.now
      }
    };
    const updates = this.#processor.performCycle(context);
    this.#selfData.clientId = context.clientId;
    this.#serverTimeOffset = context.localTimeOffset;
    this.#secret = context.secret;
    this.triggerObservers(updates);
    this.#socket?.stateChanged?.(this.state);
  }
  #isPeerUpdate(update) {
    if (update.path?.startsWith("peer/")) {
      const tag = update.path.split("/")[1];
      const clientIds = tag.split(":");
      return clientIds.length === 2 && (clientIds[0] === this.clientId || clientIds[1] === this.clientId);
    }
    return false;
  }
}
// ../src/client/provide-socket-client.ts
function provideSocketClient({ host, room }, state = {}) {
  const prefix = host.startsWith("ws://") || host.startsWith("wss://") ? "" : globalThis.location.protocol === "https:" ? "wss://" : "ws://";
  const connectionUrl = `${prefix}${host}${room ? `?room=${room}` : ""}`;
  const socketProvider = async () => {
    const websocket = new WebSocket(connectionUrl);
    websocket.addEventListener("open", () => {
      console.log("SyncClient connection opened");
    });
    return {
      send(data) {
        websocket.send(data);
      },
      onMessage(listener) {
        websocket.addEventListener("message", (event) => {
          listener(event.data);
        });
      },
      onError(listener) {
        websocket.addEventListener("error", listener);
      },
      onClose(listener) {
        websocket.addEventListener("close", listener);
      },
      close() {
        websocket.close();
      },
      supportBlob: true
    };
  };
  return new SyncClient(socketProvider, state);
}
// ../node_modules/playroomkit/multiplayer.mjs
var ve = __toESM(require_react(), 1);
var import_react = __toESM(require_react(), 1);
var Jm = __toESM(require_react_dom(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var Vm = Object.defineProperty;
var qm = (t, e, r) => (e in t) ? Vm(t, e, { enumerable: true, configurable: true, writable: true, value: r }) : t[e] = r;
var ye = (t, e, r) => (qm(t, typeof e != "symbol" ? e + "" : e, r), r);
var p02 = {
  SyncIntervalTime: 3000
};
var fs = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
function g0(t) {
  if (t.__esModule)
    return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function n() {
      if (this instanceof n) {
        var i = [null];
        i.push.apply(i, arguments);
        var o = Function.bind.apply(e, i);
        return new o;
      }
      return e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else
    r = {};
  return Object.defineProperty(r, "__esModule", { value: true }), Object.keys(t).forEach(function(n) {
    var i = Object.getOwnPropertyDescriptor(t, n);
    Object.defineProperty(r, n, i.get ? i : {
      enumerable: true,
      get: function() {
        return t[n];
      }
    });
  }), r;
}
var wi = {};
var Qm = {
  get exports() {
    return wi;
  },
  set exports(t) {
    wi = t;
  }
};
var pi = typeof Reflect == "object" ? Reflect : null;
var Mf = pi && typeof pi.apply == "function" ? pi.apply : function(e, r, n) {
  return Function.prototype.apply.call(e, r, n);
};
var Ws;
pi && typeof pi.ownKeys == "function" ? Ws = pi.ownKeys : Object.getOwnPropertySymbols ? Ws = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : Ws = function(e) {
  return Object.getOwnPropertyNames(e);
};
function Gm(t) {
  console && console.warn && console.warn(t);
}
var m02 = Number.isNaN || function(e) {
  return e !== e;
};
function tt3() {
  tt3.init.call(this);
}
Qm.exports = tt3;
wi.once = ty;
tt3.EventEmitter = tt3;
tt3.prototype._events = undefined;
tt3.prototype._eventsCount = 0;
tt3.prototype._maxListeners = undefined;
var Nf = 10;
function Na(t) {
  if (typeof t != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
}
Object.defineProperty(tt3, "defaultMaxListeners", {
  enumerable: true,
  get: function() {
    return Nf;
  },
  set: function(t) {
    if (typeof t != "number" || t < 0 || m02(t))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
    Nf = t;
  }
});
tt3.init = function() {
  (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
};
tt3.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || m02(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function y0(t) {
  return t._maxListeners === undefined ? tt3.defaultMaxListeners : t._maxListeners;
}
tt3.prototype.getMaxListeners = function() {
  return y0(this);
};
tt3.prototype.emit = function(e) {
  for (var r = [], n = 1;n < arguments.length; n++)
    r.push(arguments[n]);
  var i = e === "error", o = this._events;
  if (o !== undefined)
    i = i && o.error === undefined;
  else if (!i)
    return false;
  if (i) {
    var s;
    if (r.length > 0 && (s = r[0]), s instanceof Error)
      throw s;
    var a = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
    throw a.context = s, a;
  }
  var l = o[e];
  if (l === undefined)
    return false;
  if (typeof l == "function")
    Mf(l, this, r);
  else
    for (var c2 = l.length, u = x0(l, c2), n = 0;n < c2; ++n)
      Mf(u[n], this, r);
  return true;
};
function b02(t, e, r, n) {
  var i, o, s;
  if (Na(r), o = t._events, o === undefined ? (o = t._events = /* @__PURE__ */ Object.create(null), t._eventsCount = 0) : (o.newListener !== undefined && (t.emit("newListener", e, r.listener ? r.listener : r), o = t._events), s = o[e]), s === undefined)
    s = o[e] = r, ++t._eventsCount;
  else if (typeof s == "function" ? s = o[e] = n ? [r, s] : [s, r] : n ? s.unshift(r) : s.push(r), i = y0(t), i > 0 && s.length > i && !s.warned) {
    s.warned = true;
    var a = new Error("Possible EventEmitter memory leak detected. " + s.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    a.name = "MaxListenersExceededWarning", a.emitter = t, a.type = e, a.count = s.length, Gm(a);
  }
  return t;
}
tt3.prototype.addListener = function(e, r) {
  return b02(this, e, r, false);
};
tt3.prototype.on = tt3.prototype.addListener;
tt3.prototype.prependListener = function(e, r) {
  return b02(this, e, r, true);
};
function Zm() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function v0(t, e, r) {
  var n = { fired: false, wrapFn: undefined, target: t, type: e, listener: r }, i = Zm.bind(n);
  return i.listener = r, n.wrapFn = i, i;
}
tt3.prototype.once = function(e, r) {
  return Na(r), this.on(e, v0(this, e, r)), this;
};
tt3.prototype.prependOnceListener = function(e, r) {
  return Na(r), this.prependListener(e, v0(this, e, r)), this;
};
tt3.prototype.removeListener = function(e, r) {
  var n, i, o, s, a;
  if (Na(r), i = this._events, i === undefined)
    return this;
  if (n = i[e], n === undefined)
    return this;
  if (n === r || n.listener === r)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, n.listener || r));
  else if (typeof n != "function") {
    for (o = -1, s = n.length - 1;s >= 0; s--)
      if (n[s] === r || n[s].listener === r) {
        a = n[s].listener, o = s;
        break;
      }
    if (o < 0)
      return this;
    o === 0 ? n.shift() : $m(n, o), n.length === 1 && (i[e] = n[0]), i.removeListener !== undefined && this.emit("removeListener", e, a || r);
  }
  return this;
};
tt3.prototype.off = tt3.prototype.removeListener;
tt3.prototype.removeAllListeners = function(e) {
  var r, n, i;
  if (n = this._events, n === undefined)
    return this;
  if (n.removeListener === undefined)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : n[e] !== undefined && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete n[e]), this;
  if (arguments.length === 0) {
    var o = Object.keys(n), s;
    for (i = 0;i < o.length; ++i)
      s = o[i], s !== "removeListener" && this.removeAllListeners(s);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (r = n[e], typeof r == "function")
    this.removeListener(e, r);
  else if (r !== undefined)
    for (i = r.length - 1;i >= 0; i--)
      this.removeListener(e, r[i]);
  return this;
};
function A0(t, e, r) {
  var n = t._events;
  if (n === undefined)
    return [];
  var i = n[e];
  return i === undefined ? [] : typeof i == "function" ? r ? [i.listener || i] : [i] : r ? ey(i) : x0(i, i.length);
}
tt3.prototype.listeners = function(e) {
  return A0(this, e, true);
};
tt3.prototype.rawListeners = function(e) {
  return A0(this, e, false);
};
tt3.listenerCount = function(t, e) {
  return typeof t.listenerCount == "function" ? t.listenerCount(e) : w02.call(t, e);
};
tt3.prototype.listenerCount = w02;
function w02(t) {
  var e = this._events;
  if (e !== undefined) {
    var r = e[t];
    if (typeof r == "function")
      return 1;
    if (r !== undefined)
      return r.length;
  }
  return 0;
}
tt3.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Ws(this._events) : [];
};
function x0(t, e) {
  for (var r = new Array(e), n = 0;n < e; ++n)
    r[n] = t[n];
  return r;
}
function $m(t, e) {
  for (;e + 1 < t.length; e++)
    t[e] = t[e + 1];
  t.pop();
}
function ey(t) {
  for (var e = new Array(t.length), r = 0;r < e.length; ++r)
    e[r] = t[r].listener || t[r];
  return e;
}
function ty(t, e) {
  return new Promise(function(r, n) {
    function i(s) {
      t.removeListener(e, o), n(s);
    }
    function o() {
      typeof t.removeListener == "function" && t.removeListener("error", i), r([].slice.call(arguments));
    }
    _02(t, e, o, { once: true }), e !== "error" && ry(t, i, { once: true });
  });
}
function ry(t, e, r) {
  typeof t.on == "function" && _02(t, "error", e, r);
}
function _02(t, e, r, n) {
  if (typeof t.on == "function")
    n.once ? t.once(e, r) : t.on(e, r);
  else if (typeof t.addEventListener == "function")
    t.addEventListener(e, function i(o) {
      n.once && t.removeEventListener(e, i), r(o);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
}

class gu extends wi.EventEmitter {
  constructor() {
    super(), this.temporaryListeners = [];
  }
  on(e, r, n) {
    return super.on(e, r), n && this.temporaryListeners.push([e, r]), () => {
      this.off(e, r);
    };
  }
  removeTemporaryListeners() {
    console.log("removeTemporaryListeners CALLED", this, this.temporaryListeners), this.temporaryListeners.forEach(([e, r]) => {
      this.removeListener(e, r);
    }), this.temporaryListeners = [];
  }
}
var na = {};
var ny = {
  get exports() {
    return na;
  },
  set exports(t) {
    na = t;
  }
};
var _l;
var Lf;
function iy() {
  if (Lf)
    return _l;
  Lf = 1;
  var t = 1000, e = t * 60, r = e * 60, n = r * 24, i = n * 7, o = n * 365.25;
  _l = function(u, f2) {
    f2 = f2 || {};
    var d = typeof u;
    if (d === "string" && u.length > 0)
      return s(u);
    if (d === "number" && isFinite(u))
      return f2.long ? l(u) : a(u);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(u));
  };
  function s(u) {
    if (u = String(u), !(u.length > 100)) {
      var f2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(u);
      if (f2) {
        var d = parseFloat(f2[1]), h = (f2[2] || "ms").toLowerCase();
        switch (h) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return d * o;
          case "weeks":
          case "week":
          case "w":
            return d * i;
          case "days":
          case "day":
          case "d":
            return d * n;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return d * r;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return d * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return d * t;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return d;
          default:
            return;
        }
      }
    }
  }
  function a(u) {
    var f2 = Math.abs(u);
    return f2 >= n ? Math.round(u / n) + "d" : f2 >= r ? Math.round(u / r) + "h" : f2 >= e ? Math.round(u / e) + "m" : f2 >= t ? Math.round(u / t) + "s" : u + "ms";
  }
  function l(u) {
    var f2 = Math.abs(u);
    return f2 >= n ? c2(u, f2, n, "day") : f2 >= r ? c2(u, f2, r, "hour") : f2 >= e ? c2(u, f2, e, "minute") : f2 >= t ? c2(u, f2, t, "second") : u + " ms";
  }
  function c2(u, f2, d, h) {
    var g2 = f2 >= d * 1.5;
    return Math.round(u / d) + " " + h + (g2 ? "s" : "");
  }
  return _l;
}
function oy(t) {
  r.debug = r, r.default = r, r.coerce = l, r.disable = o, r.enable = i, r.enabled = s, r.humanize = iy(), r.destroy = c2, Object.keys(t).forEach((u) => {
    r[u] = t[u];
  }), r.names = [], r.skips = [], r.formatters = {};
  function e(u) {
    let f2 = 0;
    for (let d = 0;d < u.length; d++)
      f2 = (f2 << 5) - f2 + u.charCodeAt(d), f2 |= 0;
    return r.colors[Math.abs(f2) % r.colors.length];
  }
  r.selectColor = e;
  function r(u) {
    let f2, d = null, h, g2;
    function p(...y4) {
      if (!p.enabled)
        return;
      const b = p, x = Number(/* @__PURE__ */ new Date), S = x - (f2 || x);
      b.diff = S, b.prev = f2, b.curr = x, f2 = x, y4[0] = r.coerce(y4[0]), typeof y4[0] != "string" && y4.unshift("%O");
      let O = 0;
      y4[0] = y4[0].replace(/%([a-zA-Z%])/g, (L, N4) => {
        if (L === "%%")
          return "%";
        O++;
        const j = r.formatters[N4];
        if (typeof j == "function") {
          const W = y4[O];
          L = j.call(b, W), y4.splice(O, 1), O--;
        }
        return L;
      }), r.formatArgs.call(b, y4), (b.log || r.log).apply(b, y4);
    }
    return p.namespace = u, p.useColors = r.useColors(), p.color = r.selectColor(u), p.extend = n, p.destroy = r.destroy, Object.defineProperty(p, "enabled", {
      enumerable: true,
      configurable: false,
      get: () => d !== null ? d : (h !== r.namespaces && (h = r.namespaces, g2 = r.enabled(u)), g2),
      set: (y4) => {
        d = y4;
      }
    }), typeof r.init == "function" && r.init(p), p;
  }
  function n(u, f2) {
    const d = r(this.namespace + (typeof f2 > "u" ? ":" : f2) + u);
    return d.log = this.log, d;
  }
  function i(u) {
    r.save(u), r.namespaces = u, r.names = [], r.skips = [];
    let f2;
    const d = (typeof u == "string" ? u : "").split(/[\s,]+/), h = d.length;
    for (f2 = 0;f2 < h; f2++)
      d[f2] && (u = d[f2].replace(/\*/g, ".*?"), u[0] === "-" ? r.skips.push(new RegExp("^" + u.slice(1) + "$")) : r.names.push(new RegExp("^" + u + "$")));
  }
  function o() {
    const u = [
      ...r.names.map(a),
      ...r.skips.map(a).map((f2) => "-" + f2)
    ].join(",");
    return r.enable(""), u;
  }
  function s(u) {
    if (u[u.length - 1] === "*")
      return true;
    let f2, d;
    for (f2 = 0, d = r.skips.length;f2 < d; f2++)
      if (r.skips[f2].test(u))
        return false;
    for (f2 = 0, d = r.names.length;f2 < d; f2++)
      if (r.names[f2].test(u))
        return true;
    return false;
  }
  function a(u) {
    return u.toString().substring(2, u.toString().length - 2).replace(/\.\*\?$/, "*");
  }
  function l(u) {
    return u instanceof Error ? u.stack || u.message : u;
  }
  function c2() {
    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  }
  return r.enable(r.load()), r;
}
var sy = oy;
(function(t, e) {
  e.formatArgs = n, e.save = i, e.load = o, e.useColors = r, e.storage = s(), e.destroy = (() => {
    let l = false;
    return () => {
      l || (l = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
  })(), e.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function r() {
    return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function n(l) {
    if (l[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + l[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), !this.useColors)
      return;
    const c2 = "color: " + this.color;
    l.splice(1, 0, c2, "color: inherit");
    let u = 0, f2 = 0;
    l[0].replace(/%[a-zA-Z%]/g, (d) => {
      d !== "%%" && (u++, d === "%c" && (f2 = u));
    }), l.splice(f2, 0, c2);
  }
  e.log = console.debug || console.log || (() => {
  });
  function i(l) {
    try {
      l ? e.storage.setItem("debug", l) : e.storage.removeItem("debug");
    } catch {
    }
  }
  function o() {
    let l;
    try {
      l = e.storage.getItem("debug");
    } catch {
    }
    return !l && typeof process < "u" && "env" in process && (l = process.env.DEBUG), l;
  }
  function s() {
    try {
      return localStorage;
    } catch {
    }
  }
  t.exports = sy(e);
  const { formatters: a } = t.exports;
  a.j = function(l) {
    try {
      return JSON.stringify(l);
    } catch (c2) {
      return "[UnexpectedJSONParseError]: " + c2.message;
    }
  };
})(ny, na);
var ay = function() {
  if (typeof globalThis > "u")
    return null;
  var e = {
    RTCPeerConnection: globalThis.RTCPeerConnection || globalThis.mozRTCPeerConnection || globalThis.webkitRTCPeerConnection,
    RTCSessionDescription: globalThis.RTCSessionDescription || globalThis.mozRTCSessionDescription || globalThis.webkitRTCSessionDescription,
    RTCIceCandidate: globalThis.RTCIceCandidate || globalThis.mozRTCIceCandidate || globalThis.webkitRTCIceCandidate
  };
  return e.RTCPeerConnection ? e : null;
};
var _c = {};
var Bf = {
  get exports() {
    return _c;
  },
  set exports(t) {
    _c = t;
  }
};
var So = {};
var ly = {
  get exports() {
    return So;
  },
  set exports(t) {
    So = t;
  }
};
var Ho = {};
var Yo = {};
Yo.byteLength = fy;
Yo.toByteArray = hy;
Yo.fromByteArray = my;
var _r = [];
var rr = [];
var cy = typeof Uint8Array < "u" ? Uint8Array : Array;
var Sl = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for ($n = 0, uy = Sl.length;$n < uy; ++$n)
  _r[$n] = Sl[$n], rr[Sl.charCodeAt($n)] = $n;
var $n;
var uy;
rr[45] = 62;
rr[95] = 63;
function S02(t) {
  var e = t.length;
  if (e % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var r = t.indexOf("=");
  r === -1 && (r = e);
  var n = r === e ? 0 : 4 - r % 4;
  return [r, n];
}
function fy(t) {
  var e = S02(t), r = e[0], n = e[1];
  return (r + n) * 3 / 4 - n;
}
function dy(t, e, r) {
  return (e + r) * 3 / 4 - r;
}
function hy(t) {
  var e, r = S02(t), n = r[0], i = r[1], o = new cy(dy(t, n, i)), s = 0, a = i > 0 ? n - 4 : n, l;
  for (l = 0;l < a; l += 4)
    e = rr[t.charCodeAt(l)] << 18 | rr[t.charCodeAt(l + 1)] << 12 | rr[t.charCodeAt(l + 2)] << 6 | rr[t.charCodeAt(l + 3)], o[s++] = e >> 16 & 255, o[s++] = e >> 8 & 255, o[s++] = e & 255;
  return i === 2 && (e = rr[t.charCodeAt(l)] << 2 | rr[t.charCodeAt(l + 1)] >> 4, o[s++] = e & 255), i === 1 && (e = rr[t.charCodeAt(l)] << 10 | rr[t.charCodeAt(l + 1)] << 4 | rr[t.charCodeAt(l + 2)] >> 2, o[s++] = e >> 8 & 255, o[s++] = e & 255), o;
}
function py(t) {
  return _r[t >> 18 & 63] + _r[t >> 12 & 63] + _r[t >> 6 & 63] + _r[t & 63];
}
function gy(t, e, r) {
  for (var n, i = [], o = e;o < r; o += 3)
    n = (t[o] << 16 & 16711680) + (t[o + 1] << 8 & 65280) + (t[o + 2] & 255), i.push(py(n));
  return i.join("");
}
function my(t) {
  for (var e, r = t.length, n = r % 3, i = [], o = 16383, s = 0, a = r - n;s < a; s += o)
    i.push(gy(t, s, s + o > a ? a : s + o));
  return n === 1 ? (e = t[r - 1], i.push(_r[e >> 2] + _r[e << 4 & 63] + "==")) : n === 2 && (e = (t[r - 2] << 8) + t[r - 1], i.push(_r[e >> 10] + _r[e >> 4 & 63] + _r[e << 2 & 63] + "=")), i.join("");
}
var La = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
La.read = function(t, e, r, n, i) {
  var o, s, a = i * 8 - n - 1, l = (1 << a) - 1, c2 = l >> 1, u = -7, f2 = r ? i - 1 : 0, d = r ? -1 : 1, h = t[e + f2];
  for (f2 += d, o = h & (1 << -u) - 1, h >>= -u, u += a;u > 0; o = o * 256 + t[e + f2], f2 += d, u -= 8)
    ;
  for (s = o & (1 << -u) - 1, o >>= -u, u += n;u > 0; s = s * 256 + t[e + f2], f2 += d, u -= 8)
    ;
  if (o === 0)
    o = 1 - c2;
  else {
    if (o === l)
      return s ? NaN : (h ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, n), o = o - c2;
  }
  return (h ? -1 : 1) * s * Math.pow(2, o - n);
};
La.write = function(t, e, r, n, i, o) {
  var s, a, l, c2 = o * 8 - i - 1, u = (1 << c2) - 1, f2 = u >> 1, d = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, h = n ? 0 : o - 1, g2 = n ? 1 : -1, p = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = u) : (s = Math.floor(Math.log(e) / Math.LN2), e * (l = Math.pow(2, -s)) < 1 && (s--, l *= 2), s + f2 >= 1 ? e += d / l : e += d * Math.pow(2, 1 - f2), e * l >= 2 && (s++, l /= 2), s + f2 >= u ? (a = 0, s = u) : s + f2 >= 1 ? (a = (e * l - 1) * Math.pow(2, i), s = s + f2) : (a = e * Math.pow(2, f2 - 1) * Math.pow(2, i), s = 0));i >= 8; t[r + h] = a & 255, h += g2, a /= 256, i -= 8)
    ;
  for (s = s << i | a, c2 += i;c2 > 0; t[r + h] = s & 255, h += g2, s /= 256, c2 -= 8)
    ;
  t[r + h - g2] |= p * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(t) {
  var e = Yo, r = La, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  t.Buffer = a, t.SlowBuffer = x, t.INSPECT_MAX_BYTES = 50;
  var i = 2147483647;
  t.kMaxLength = i, a.TYPED_ARRAY_SUPPORT = o(), !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  function o() {
    try {
      var C = new Uint8Array(1), v = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(v, Uint8Array.prototype), Object.setPrototypeOf(C, v), C.foo() === 42;
    } catch {
      return false;
    }
  }
  Object.defineProperty(a.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (a.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(a.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (a.isBuffer(this))
        return this.byteOffset;
    }
  });
  function s(C) {
    if (C > i)
      throw new RangeError('The value "' + C + '" is invalid for option "size"');
    var v = new Uint8Array(C);
    return Object.setPrototypeOf(v, a.prototype), v;
  }
  function a(C, v, w2) {
    if (typeof C == "number") {
      if (typeof v == "string")
        throw new TypeError('The "string" argument must be of type string. Received type number');
      return f2(C);
    }
    return l(C, v, w2);
  }
  a.poolSize = 8192;
  function l(C, v, w2) {
    if (typeof C == "string")
      return d(C, v);
    if (ArrayBuffer.isView(C))
      return g2(C);
    if (C == null)
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof C);
    if (re(C, ArrayBuffer) || C && re(C.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (re(C, SharedArrayBuffer) || C && re(C.buffer, SharedArrayBuffer)))
      return p(C, v, w2);
    if (typeof C == "number")
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    var D = C.valueOf && C.valueOf();
    if (D != null && D !== C)
      return a.from(D, v, w2);
    var J3 = y4(C);
    if (J3)
      return J3;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof C[Symbol.toPrimitive] == "function")
      return a.from(C[Symbol.toPrimitive]("string"), v, w2);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof C);
  }
  a.from = function(C, v, w2) {
    return l(C, v, w2);
  }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array);
  function c2(C) {
    if (typeof C != "number")
      throw new TypeError('"size" argument must be of type number');
    if (C < 0)
      throw new RangeError('The value "' + C + '" is invalid for option "size"');
  }
  function u(C, v, w2) {
    return c2(C), C <= 0 ? s(C) : v !== undefined ? typeof w2 == "string" ? s(C).fill(v, w2) : s(C).fill(v) : s(C);
  }
  a.alloc = function(C, v, w2) {
    return u(C, v, w2);
  };
  function f2(C) {
    return c2(C), s(C < 0 ? 0 : b(C) | 0);
  }
  a.allocUnsafe = function(C) {
    return f2(C);
  }, a.allocUnsafeSlow = function(C) {
    return f2(C);
  };
  function d(C, v) {
    if ((typeof v != "string" || v === "") && (v = "utf8"), !a.isEncoding(v))
      throw new TypeError("Unknown encoding: " + v);
    var w2 = S(C, v) | 0, D = s(w2), J3 = D.write(C, v);
    return J3 !== w2 && (D = D.slice(0, J3)), D;
  }
  function h(C) {
    for (var v = C.length < 0 ? 0 : b(C.length) | 0, w2 = s(v), D = 0;D < v; D += 1)
      w2[D] = C[D] & 255;
    return w2;
  }
  function g2(C) {
    if (re(C, Uint8Array)) {
      var v = new Uint8Array(C);
      return p(v.buffer, v.byteOffset, v.byteLength);
    }
    return h(C);
  }
  function p(C, v, w2) {
    if (v < 0 || C.byteLength < v)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (C.byteLength < v + (w2 || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    var D;
    return v === undefined && w2 === undefined ? D = new Uint8Array(C) : w2 === undefined ? D = new Uint8Array(C, v) : D = new Uint8Array(C, v, w2), Object.setPrototypeOf(D, a.prototype), D;
  }
  function y4(C) {
    if (a.isBuffer(C)) {
      var v = b(C.length) | 0, w2 = s(v);
      return w2.length === 0 || C.copy(w2, 0, 0, v), w2;
    }
    if (C.length !== undefined)
      return typeof C.length != "number" || ne(C.length) ? s(0) : h(C);
    if (C.type === "Buffer" && Array.isArray(C.data))
      return h(C.data);
  }
  function b(C) {
    if (C >= i)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");
    return C | 0;
  }
  function x(C) {
    return +C != C && (C = 0), a.alloc(+C);
  }
  a.isBuffer = function(v) {
    return v != null && v._isBuffer === true && v !== a.prototype;
  }, a.compare = function(v, w2) {
    if (re(v, Uint8Array) && (v = a.from(v, v.offset, v.byteLength)), re(w2, Uint8Array) && (w2 = a.from(w2, w2.offset, w2.byteLength)), !a.isBuffer(v) || !a.isBuffer(w2))
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (v === w2)
      return 0;
    for (var D = v.length, J3 = w2.length, ae = 0, ue = Math.min(D, J3);ae < ue; ++ae)
      if (v[ae] !== w2[ae]) {
        D = v[ae], J3 = w2[ae];
        break;
      }
    return D < J3 ? -1 : J3 < D ? 1 : 0;
  }, a.isEncoding = function(v) {
    switch (String(v).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  }, a.concat = function(v, w2) {
    if (!Array.isArray(v))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (v.length === 0)
      return a.alloc(0);
    var D;
    if (w2 === undefined)
      for (w2 = 0, D = 0;D < v.length; ++D)
        w2 += v[D].length;
    var J3 = a.allocUnsafe(w2), ae = 0;
    for (D = 0;D < v.length; ++D) {
      var ue = v[D];
      if (re(ue, Uint8Array))
        ae + ue.length > J3.length ? a.from(ue).copy(J3, ae) : Uint8Array.prototype.set.call(J3, ue, ae);
      else if (a.isBuffer(ue))
        ue.copy(J3, ae);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      ae += ue.length;
    }
    return J3;
  };
  function S(C, v) {
    if (a.isBuffer(C))
      return C.length;
    if (ArrayBuffer.isView(C) || re(C, ArrayBuffer))
      return C.byteLength;
    if (typeof C != "string")
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof C);
    var w2 = C.length, D = arguments.length > 2 && arguments[2] === true;
    if (!D && w2 === 0)
      return 0;
    for (var J3 = false;; )
      switch (v) {
        case "ascii":
        case "latin1":
        case "binary":
          return w2;
        case "utf8":
        case "utf-8":
          return Z(C).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return w2 * 2;
        case "hex":
          return w2 >>> 1;
        case "base64":
          return R4(C).length;
        default:
          if (J3)
            return D ? -1 : Z(C).length;
          v = ("" + v).toLowerCase(), J3 = true;
      }
  }
  a.byteLength = S;
  function O(C, v, w2) {
    var D = false;
    if ((v === undefined || v < 0) && (v = 0), v > this.length || ((w2 === undefined || w2 > this.length) && (w2 = this.length), w2 <= 0) || (w2 >>>= 0, v >>>= 0, w2 <= v))
      return "";
    for (C || (C = "utf8");; )
      switch (C) {
        case "hex":
          return X2(this, v, w2);
        case "utf8":
        case "utf-8":
          return z(this, v, w2);
        case "ascii":
          return V(this, v, w2);
        case "latin1":
        case "binary":
          return te(this, v, w2);
        case "base64":
          return P(this, v, w2);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return H(this, v, w2);
        default:
          if (D)
            throw new TypeError("Unknown encoding: " + C);
          C = (C + "").toLowerCase(), D = true;
      }
  }
  a.prototype._isBuffer = true;
  function _(C, v, w2) {
    var D = C[v];
    C[v] = C[w2], C[w2] = D;
  }
  a.prototype.swap16 = function() {
    var v = this.length;
    if (v % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (var w2 = 0;w2 < v; w2 += 2)
      _(this, w2, w2 + 1);
    return this;
  }, a.prototype.swap32 = function() {
    var v = this.length;
    if (v % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (var w2 = 0;w2 < v; w2 += 4)
      _(this, w2, w2 + 3), _(this, w2 + 1, w2 + 2);
    return this;
  }, a.prototype.swap64 = function() {
    var v = this.length;
    if (v % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (var w2 = 0;w2 < v; w2 += 8)
      _(this, w2, w2 + 7), _(this, w2 + 1, w2 + 6), _(this, w2 + 2, w2 + 5), _(this, w2 + 3, w2 + 4);
    return this;
  }, a.prototype.toString = function() {
    var v = this.length;
    return v === 0 ? "" : arguments.length === 0 ? z(this, 0, v) : O.apply(this, arguments);
  }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(v) {
    if (!a.isBuffer(v))
      throw new TypeError("Argument must be a Buffer");
    return this === v ? true : a.compare(this, v) === 0;
  }, a.prototype.inspect = function() {
    var v = "", w2 = t.INSPECT_MAX_BYTES;
    return v = this.toString("hex", 0, w2).replace(/(.{2})/g, "$1 ").trim(), this.length > w2 && (v += " ... "), "<Buffer " + v + ">";
  }, n && (a.prototype[n] = a.prototype.inspect), a.prototype.compare = function(v, w2, D, J3, ae) {
    if (re(v, Uint8Array) && (v = a.from(v, v.offset, v.byteLength)), !a.isBuffer(v))
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof v);
    if (w2 === undefined && (w2 = 0), D === undefined && (D = v ? v.length : 0), J3 === undefined && (J3 = 0), ae === undefined && (ae = this.length), w2 < 0 || D > v.length || J3 < 0 || ae > this.length)
      throw new RangeError("out of range index");
    if (J3 >= ae && w2 >= D)
      return 0;
    if (J3 >= ae)
      return -1;
    if (w2 >= D)
      return 1;
    if (w2 >>>= 0, D >>>= 0, J3 >>>= 0, ae >>>= 0, this === v)
      return 0;
    for (var ue = ae - J3, Se = D - w2, _e = Math.min(ue, Se), we = this.slice(J3, ae), Ne = v.slice(w2, D), E2 = 0;E2 < _e; ++E2)
      if (we[E2] !== Ne[E2]) {
        ue = we[E2], Se = Ne[E2];
        break;
      }
    return ue < Se ? -1 : Se < ue ? 1 : 0;
  };
  function L(C, v, w2, D, J3) {
    if (C.length === 0)
      return -1;
    if (typeof w2 == "string" ? (D = w2, w2 = 0) : w2 > 2147483647 ? w2 = 2147483647 : w2 < -2147483648 && (w2 = -2147483648), w2 = +w2, ne(w2) && (w2 = J3 ? 0 : C.length - 1), w2 < 0 && (w2 = C.length + w2), w2 >= C.length) {
      if (J3)
        return -1;
      w2 = C.length - 1;
    } else if (w2 < 0)
      if (J3)
        w2 = 0;
      else
        return -1;
    if (typeof v == "string" && (v = a.from(v, D)), a.isBuffer(v))
      return v.length === 0 ? -1 : N4(C, v, w2, D, J3);
    if (typeof v == "number")
      return v = v & 255, typeof Uint8Array.prototype.indexOf == "function" ? J3 ? Uint8Array.prototype.indexOf.call(C, v, w2) : Uint8Array.prototype.lastIndexOf.call(C, v, w2) : N4(C, [v], w2, D, J3);
    throw new TypeError("val must be string, number or Buffer");
  }
  function N4(C, v, w2, D, J3) {
    var ae = 1, ue = C.length, Se = v.length;
    if (D !== undefined && (D = String(D).toLowerCase(), D === "ucs2" || D === "ucs-2" || D === "utf16le" || D === "utf-16le")) {
      if (C.length < 2 || v.length < 2)
        return -1;
      ae = 2, ue /= 2, Se /= 2, w2 /= 2;
    }
    function _e(A4, M2) {
      return ae === 1 ? A4[M2] : A4.readUInt16BE(M2 * ae);
    }
    var we;
    if (J3) {
      var Ne = -1;
      for (we = w2;we < ue; we++)
        if (_e(C, we) === _e(v, Ne === -1 ? 0 : we - Ne)) {
          if (Ne === -1 && (Ne = we), we - Ne + 1 === Se)
            return Ne * ae;
        } else
          Ne !== -1 && (we -= we - Ne), Ne = -1;
    } else
      for (w2 + Se > ue && (w2 = ue - Se), we = w2;we >= 0; we--) {
        for (var E2 = true, m2 = 0;m2 < Se; m2++)
          if (_e(C, we + m2) !== _e(v, m2)) {
            E2 = false;
            break;
          }
        if (E2)
          return we;
      }
    return -1;
  }
  a.prototype.includes = function(v, w2, D) {
    return this.indexOf(v, w2, D) !== -1;
  }, a.prototype.indexOf = function(v, w2, D) {
    return L(this, v, w2, D, true);
  }, a.prototype.lastIndexOf = function(v, w2, D) {
    return L(this, v, w2, D, false);
  };
  function j(C, v, w2, D) {
    w2 = Number(w2) || 0;
    var J3 = C.length - w2;
    D ? (D = Number(D), D > J3 && (D = J3)) : D = J3;
    var ae = v.length;
    D > ae / 2 && (D = ae / 2);
    for (var ue = 0;ue < D; ++ue) {
      var Se = parseInt(v.substr(ue * 2, 2), 16);
      if (ne(Se))
        return ue;
      C[w2 + ue] = Se;
    }
    return ue;
  }
  function W(C, v, w2, D) {
    return k(Z(v, C.length - w2), C, w2, D);
  }
  function G(C, v, w2, D) {
    return k(oe(v), C, w2, D);
  }
  function ee(C, v, w2, D) {
    return k(R4(v), C, w2, D);
  }
  function fe(C, v, w2, D) {
    return k(de(v, C.length - w2), C, w2, D);
  }
  a.prototype.write = function(v, w2, D, J3) {
    if (w2 === undefined)
      J3 = "utf8", D = this.length, w2 = 0;
    else if (D === undefined && typeof w2 == "string")
      J3 = w2, D = this.length, w2 = 0;
    else if (isFinite(w2))
      w2 = w2 >>> 0, isFinite(D) ? (D = D >>> 0, J3 === undefined && (J3 = "utf8")) : (J3 = D, D = undefined);
    else
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var ae = this.length - w2;
    if ((D === undefined || D > ae) && (D = ae), v.length > 0 && (D < 0 || w2 < 0) || w2 > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    J3 || (J3 = "utf8");
    for (var ue = false;; )
      switch (J3) {
        case "hex":
          return j(this, v, w2, D);
        case "utf8":
        case "utf-8":
          return W(this, v, w2, D);
        case "ascii":
        case "latin1":
        case "binary":
          return G(this, v, w2, D);
        case "base64":
          return ee(this, v, w2, D);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return fe(this, v, w2, D);
        default:
          if (ue)
            throw new TypeError("Unknown encoding: " + J3);
          J3 = ("" + J3).toLowerCase(), ue = true;
      }
  }, a.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function P(C, v, w2) {
    return v === 0 && w2 === C.length ? e.fromByteArray(C) : e.fromByteArray(C.slice(v, w2));
  }
  function z(C, v, w2) {
    w2 = Math.min(C.length, w2);
    for (var D = [], J3 = v;J3 < w2; ) {
      var ae = C[J3], ue = null, Se = ae > 239 ? 4 : ae > 223 ? 3 : ae > 191 ? 2 : 1;
      if (J3 + Se <= w2) {
        var _e, we, Ne, E2;
        switch (Se) {
          case 1:
            ae < 128 && (ue = ae);
            break;
          case 2:
            _e = C[J3 + 1], (_e & 192) === 128 && (E2 = (ae & 31) << 6 | _e & 63, E2 > 127 && (ue = E2));
            break;
          case 3:
            _e = C[J3 + 1], we = C[J3 + 2], (_e & 192) === 128 && (we & 192) === 128 && (E2 = (ae & 15) << 12 | (_e & 63) << 6 | we & 63, E2 > 2047 && (E2 < 55296 || E2 > 57343) && (ue = E2));
            break;
          case 4:
            _e = C[J3 + 1], we = C[J3 + 2], Ne = C[J3 + 3], (_e & 192) === 128 && (we & 192) === 128 && (Ne & 192) === 128 && (E2 = (ae & 15) << 18 | (_e & 63) << 12 | (we & 63) << 6 | Ne & 63, E2 > 65535 && E2 < 1114112 && (ue = E2));
        }
      }
      ue === null ? (ue = 65533, Se = 1) : ue > 65535 && (ue -= 65536, D.push(ue >>> 10 & 1023 | 55296), ue = 56320 | ue & 1023), D.push(ue), J3 += Se;
    }
    return I(D);
  }
  var U = 4096;
  function I(C) {
    var v = C.length;
    if (v <= U)
      return String.fromCharCode.apply(String, C);
    for (var w2 = "", D = 0;D < v; )
      w2 += String.fromCharCode.apply(String, C.slice(D, D += U));
    return w2;
  }
  function V(C, v, w2) {
    var D = "";
    w2 = Math.min(C.length, w2);
    for (var J3 = v;J3 < w2; ++J3)
      D += String.fromCharCode(C[J3] & 127);
    return D;
  }
  function te(C, v, w2) {
    var D = "";
    w2 = Math.min(C.length, w2);
    for (var J3 = v;J3 < w2; ++J3)
      D += String.fromCharCode(C[J3]);
    return D;
  }
  function X2(C, v, w2) {
    var D = C.length;
    (!v || v < 0) && (v = 0), (!w2 || w2 < 0 || w2 > D) && (w2 = D);
    for (var J3 = "", ae = v;ae < w2; ++ae)
      J3 += Ae[C[ae]];
    return J3;
  }
  function H(C, v, w2) {
    for (var D = C.slice(v, w2), J3 = "", ae = 0;ae < D.length - 1; ae += 2)
      J3 += String.fromCharCode(D[ae] + D[ae + 1] * 256);
    return J3;
  }
  a.prototype.slice = function(v, w2) {
    var D = this.length;
    v = ~~v, w2 = w2 === undefined ? D : ~~w2, v < 0 ? (v += D, v < 0 && (v = 0)) : v > D && (v = D), w2 < 0 ? (w2 += D, w2 < 0 && (w2 = 0)) : w2 > D && (w2 = D), w2 < v && (w2 = v);
    var J3 = this.subarray(v, w2);
    return Object.setPrototypeOf(J3, a.prototype), J3;
  };
  function $2(C, v, w2) {
    if (C % 1 !== 0 || C < 0)
      throw new RangeError("offset is not uint");
    if (C + v > w2)
      throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(v, w2, D) {
    v = v >>> 0, w2 = w2 >>> 0, D || $2(v, w2, this.length);
    for (var J3 = this[v], ae = 1, ue = 0;++ue < w2 && (ae *= 256); )
      J3 += this[v + ue] * ae;
    return J3;
  }, a.prototype.readUintBE = a.prototype.readUIntBE = function(v, w2, D) {
    v = v >>> 0, w2 = w2 >>> 0, D || $2(v, w2, this.length);
    for (var J3 = this[v + --w2], ae = 1;w2 > 0 && (ae *= 256); )
      J3 += this[v + --w2] * ae;
    return J3;
  }, a.prototype.readUint8 = a.prototype.readUInt8 = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 1, this.length), this[v];
  }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 2, this.length), this[v] | this[v + 1] << 8;
  }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 2, this.length), this[v] << 8 | this[v + 1];
  }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 4, this.length), (this[v] | this[v + 1] << 8 | this[v + 2] << 16) + this[v + 3] * 16777216;
  }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 4, this.length), this[v] * 16777216 + (this[v + 1] << 16 | this[v + 2] << 8 | this[v + 3]);
  }, a.prototype.readIntLE = function(v, w2, D) {
    v = v >>> 0, w2 = w2 >>> 0, D || $2(v, w2, this.length);
    for (var J3 = this[v], ae = 1, ue = 0;++ue < w2 && (ae *= 256); )
      J3 += this[v + ue] * ae;
    return ae *= 128, J3 >= ae && (J3 -= Math.pow(2, 8 * w2)), J3;
  }, a.prototype.readIntBE = function(v, w2, D) {
    v = v >>> 0, w2 = w2 >>> 0, D || $2(v, w2, this.length);
    for (var J3 = w2, ae = 1, ue = this[v + --J3];J3 > 0 && (ae *= 256); )
      ue += this[v + --J3] * ae;
    return ae *= 128, ue >= ae && (ue -= Math.pow(2, 8 * w2)), ue;
  }, a.prototype.readInt8 = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 1, this.length), this[v] & 128 ? (255 - this[v] + 1) * -1 : this[v];
  }, a.prototype.readInt16LE = function(v, w2) {
    v = v >>> 0, w2 || $2(v, 2, this.length);
    var D = this[v] | this[v + 1] << 8;
    return D & 32768 ? D | 4294901760 : D;
  }, a.prototype.readInt16BE = function(v, w2) {
    v = v >>> 0, w2 || $2(v, 2, this.length);
    var D = this[v + 1] | this[v] << 8;
    return D & 32768 ? D | 4294901760 : D;
  }, a.prototype.readInt32LE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 4, this.length), this[v] | this[v + 1] << 8 | this[v + 2] << 16 | this[v + 3] << 24;
  }, a.prototype.readInt32BE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 4, this.length), this[v] << 24 | this[v + 1] << 16 | this[v + 2] << 8 | this[v + 3];
  }, a.prototype.readFloatLE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 4, this.length), r.read(this, v, true, 23, 4);
  }, a.prototype.readFloatBE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 4, this.length), r.read(this, v, false, 23, 4);
  }, a.prototype.readDoubleLE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 8, this.length), r.read(this, v, true, 52, 8);
  }, a.prototype.readDoubleBE = function(v, w2) {
    return v = v >>> 0, w2 || $2(v, 8, this.length), r.read(this, v, false, 52, 8);
  };
  function se(C, v, w2, D, J3, ae) {
    if (!a.isBuffer(C))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (v > J3 || v < ae)
      throw new RangeError('"value" argument is out of bounds');
    if (w2 + D > C.length)
      throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(v, w2, D, J3) {
    if (v = +v, w2 = w2 >>> 0, D = D >>> 0, !J3) {
      var ae = Math.pow(2, 8 * D) - 1;
      se(this, v, w2, D, ae, 0);
    }
    var ue = 1, Se = 0;
    for (this[w2] = v & 255;++Se < D && (ue *= 256); )
      this[w2 + Se] = v / ue & 255;
    return w2 + D;
  }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(v, w2, D, J3) {
    if (v = +v, w2 = w2 >>> 0, D = D >>> 0, !J3) {
      var ae = Math.pow(2, 8 * D) - 1;
      se(this, v, w2, D, ae, 0);
    }
    var ue = D - 1, Se = 1;
    for (this[w2 + ue] = v & 255;--ue >= 0 && (Se *= 256); )
      this[w2 + ue] = v / Se & 255;
    return w2 + D;
  }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 1, 255, 0), this[w2] = v & 255, w2 + 1;
  }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 2, 65535, 0), this[w2] = v & 255, this[w2 + 1] = v >>> 8, w2 + 2;
  }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 2, 65535, 0), this[w2] = v >>> 8, this[w2 + 1] = v & 255, w2 + 2;
  }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 4, 4294967295, 0), this[w2 + 3] = v >>> 24, this[w2 + 2] = v >>> 16, this[w2 + 1] = v >>> 8, this[w2] = v & 255, w2 + 4;
  }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 4, 4294967295, 0), this[w2] = v >>> 24, this[w2 + 1] = v >>> 16, this[w2 + 2] = v >>> 8, this[w2 + 3] = v & 255, w2 + 4;
  }, a.prototype.writeIntLE = function(v, w2, D, J3) {
    if (v = +v, w2 = w2 >>> 0, !J3) {
      var ae = Math.pow(2, 8 * D - 1);
      se(this, v, w2, D, ae - 1, -ae);
    }
    var ue = 0, Se = 1, _e = 0;
    for (this[w2] = v & 255;++ue < D && (Se *= 256); )
      v < 0 && _e === 0 && this[w2 + ue - 1] !== 0 && (_e = 1), this[w2 + ue] = (v / Se >> 0) - _e & 255;
    return w2 + D;
  }, a.prototype.writeIntBE = function(v, w2, D, J3) {
    if (v = +v, w2 = w2 >>> 0, !J3) {
      var ae = Math.pow(2, 8 * D - 1);
      se(this, v, w2, D, ae - 1, -ae);
    }
    var ue = D - 1, Se = 1, _e = 0;
    for (this[w2 + ue] = v & 255;--ue >= 0 && (Se *= 256); )
      v < 0 && _e === 0 && this[w2 + ue + 1] !== 0 && (_e = 1), this[w2 + ue] = (v / Se >> 0) - _e & 255;
    return w2 + D;
  }, a.prototype.writeInt8 = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 1, 127, -128), v < 0 && (v = 255 + v + 1), this[w2] = v & 255, w2 + 1;
  }, a.prototype.writeInt16LE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 2, 32767, -32768), this[w2] = v & 255, this[w2 + 1] = v >>> 8, w2 + 2;
  }, a.prototype.writeInt16BE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 2, 32767, -32768), this[w2] = v >>> 8, this[w2 + 1] = v & 255, w2 + 2;
  }, a.prototype.writeInt32LE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 4, 2147483647, -2147483648), this[w2] = v & 255, this[w2 + 1] = v >>> 8, this[w2 + 2] = v >>> 16, this[w2 + 3] = v >>> 24, w2 + 4;
  }, a.prototype.writeInt32BE = function(v, w2, D) {
    return v = +v, w2 = w2 >>> 0, D || se(this, v, w2, 4, 2147483647, -2147483648), v < 0 && (v = 4294967295 + v + 1), this[w2] = v >>> 24, this[w2 + 1] = v >>> 16, this[w2 + 2] = v >>> 8, this[w2 + 3] = v & 255, w2 + 4;
  };
  function he(C, v, w2, D, J3, ae) {
    if (w2 + D > C.length)
      throw new RangeError("Index out of range");
    if (w2 < 0)
      throw new RangeError("Index out of range");
  }
  function pe(C, v, w2, D, J3) {
    return v = +v, w2 = w2 >>> 0, J3 || he(C, v, w2, 4), r.write(C, v, w2, D, 23, 4), w2 + 4;
  }
  a.prototype.writeFloatLE = function(v, w2, D) {
    return pe(this, v, w2, true, D);
  }, a.prototype.writeFloatBE = function(v, w2, D) {
    return pe(this, v, w2, false, D);
  };
  function me(C, v, w2, D, J3) {
    return v = +v, w2 = w2 >>> 0, J3 || he(C, v, w2, 8), r.write(C, v, w2, D, 52, 8), w2 + 8;
  }
  a.prototype.writeDoubleLE = function(v, w2, D) {
    return me(this, v, w2, true, D);
  }, a.prototype.writeDoubleBE = function(v, w2, D) {
    return me(this, v, w2, false, D);
  }, a.prototype.copy = function(v, w2, D, J3) {
    if (!a.isBuffer(v))
      throw new TypeError("argument should be a Buffer");
    if (D || (D = 0), !J3 && J3 !== 0 && (J3 = this.length), w2 >= v.length && (w2 = v.length), w2 || (w2 = 0), J3 > 0 && J3 < D && (J3 = D), J3 === D || v.length === 0 || this.length === 0)
      return 0;
    if (w2 < 0)
      throw new RangeError("targetStart out of bounds");
    if (D < 0 || D >= this.length)
      throw new RangeError("Index out of range");
    if (J3 < 0)
      throw new RangeError("sourceEnd out of bounds");
    J3 > this.length && (J3 = this.length), v.length - w2 < J3 - D && (J3 = v.length - w2 + D);
    var ae = J3 - D;
    return this === v && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(w2, D, J3) : Uint8Array.prototype.set.call(v, this.subarray(D, J3), w2), ae;
  }, a.prototype.fill = function(v, w2, D, J3) {
    if (typeof v == "string") {
      if (typeof w2 == "string" ? (J3 = w2, w2 = 0, D = this.length) : typeof D == "string" && (J3 = D, D = this.length), J3 !== undefined && typeof J3 != "string")
        throw new TypeError("encoding must be a string");
      if (typeof J3 == "string" && !a.isEncoding(J3))
        throw new TypeError("Unknown encoding: " + J3);
      if (v.length === 1) {
        var ae = v.charCodeAt(0);
        (J3 === "utf8" && ae < 128 || J3 === "latin1") && (v = ae);
      }
    } else
      typeof v == "number" ? v = v & 255 : typeof v == "boolean" && (v = Number(v));
    if (w2 < 0 || this.length < w2 || this.length < D)
      throw new RangeError("Out of range index");
    if (D <= w2)
      return this;
    w2 = w2 >>> 0, D = D === undefined ? this.length : D >>> 0, v || (v = 0);
    var ue;
    if (typeof v == "number")
      for (ue = w2;ue < D; ++ue)
        this[ue] = v;
    else {
      var Se = a.isBuffer(v) ? v : a.from(v, J3), _e = Se.length;
      if (_e === 0)
        throw new TypeError('The value "' + v + '" is invalid for argument "value"');
      for (ue = 0;ue < D - w2; ++ue)
        this[ue + w2] = Se[ue % _e];
    }
    return this;
  };
  var B3 = /[^+/0-9A-Za-z-_]/g;
  function q3(C) {
    if (C = C.split("=")[0], C = C.trim().replace(B3, ""), C.length < 2)
      return "";
    for (;C.length % 4 !== 0; )
      C = C + "=";
    return C;
  }
  function Z(C, v) {
    v = v || 1 / 0;
    for (var w2, D = C.length, J3 = null, ae = [], ue = 0;ue < D; ++ue) {
      if (w2 = C.charCodeAt(ue), w2 > 55295 && w2 < 57344) {
        if (!J3) {
          if (w2 > 56319) {
            (v -= 3) > -1 && ae.push(239, 191, 189);
            continue;
          } else if (ue + 1 === D) {
            (v -= 3) > -1 && ae.push(239, 191, 189);
            continue;
          }
          J3 = w2;
          continue;
        }
        if (w2 < 56320) {
          (v -= 3) > -1 && ae.push(239, 191, 189), J3 = w2;
          continue;
        }
        w2 = (J3 - 55296 << 10 | w2 - 56320) + 65536;
      } else
        J3 && (v -= 3) > -1 && ae.push(239, 191, 189);
      if (J3 = null, w2 < 128) {
        if ((v -= 1) < 0)
          break;
        ae.push(w2);
      } else if (w2 < 2048) {
        if ((v -= 2) < 0)
          break;
        ae.push(w2 >> 6 | 192, w2 & 63 | 128);
      } else if (w2 < 65536) {
        if ((v -= 3) < 0)
          break;
        ae.push(w2 >> 12 | 224, w2 >> 6 & 63 | 128, w2 & 63 | 128);
      } else if (w2 < 1114112) {
        if ((v -= 4) < 0)
          break;
        ae.push(w2 >> 18 | 240, w2 >> 12 & 63 | 128, w2 >> 6 & 63 | 128, w2 & 63 | 128);
      } else
        throw new Error("Invalid code point");
    }
    return ae;
  }
  function oe(C) {
    for (var v = [], w2 = 0;w2 < C.length; ++w2)
      v.push(C.charCodeAt(w2) & 255);
    return v;
  }
  function de(C, v) {
    for (var w2, D, J3, ae = [], ue = 0;ue < C.length && !((v -= 2) < 0); ++ue)
      w2 = C.charCodeAt(ue), D = w2 >> 8, J3 = w2 % 256, ae.push(J3), ae.push(D);
    return ae;
  }
  function R4(C) {
    return e.toByteArray(q3(C));
  }
  function k(C, v, w2, D) {
    for (var J3 = 0;J3 < D && !(J3 + w2 >= v.length || J3 >= C.length); ++J3)
      v[J3 + w2] = C[J3];
    return J3;
  }
  function re(C, v) {
    return C instanceof v || C != null && C.constructor != null && C.constructor.name != null && C.constructor.name === v.name;
  }
  function ne(C) {
    return C !== C;
  }
  var Ae = function() {
    for (var C = "0123456789abcdef", v = new Array(256), w2 = 0;w2 < 16; ++w2)
      for (var D = w2 * 16, J3 = 0;J3 < 16; ++J3)
        v[D + J3] = C[w2] + C[J3];
    return v;
  }();
})(Ho);
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
(function(t, e) {
  var r = Ho, n = r.Buffer;
  function i(s, a) {
    for (var l in s)
      a[l] = s[l];
  }
  n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? t.exports = r : (i(r, e), e.Buffer = o);
  function o(s, a, l) {
    return n(s, a, l);
  }
  o.prototype = Object.create(n.prototype), i(n, o), o.from = function(s, a, l) {
    if (typeof s == "number")
      throw new TypeError("Argument must not be a number");
    return n(s, a, l);
  }, o.alloc = function(s, a, l) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    var c2 = n(s);
    return a !== undefined ? typeof l == "string" ? c2.fill(a, l) : c2.fill(a) : c2.fill(0), c2;
  }, o.allocUnsafe = function(s) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    return n(s);
  }, o.allocUnsafeSlow = function(s) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    return r.SlowBuffer(s);
  };
})(ly, So);
var El = 65536;
var yy = 4294967295;
function by() {
  throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
}
var vy = So.Buffer;
var ia = globalThis.crypto || globalThis.msCrypto;
ia && ia.getRandomValues ? Bf.exports = Ay : Bf.exports = by;
function Ay(t, e) {
  if (t > yy)
    throw new RangeError("requested too many random bytes");
  var r = vy.allocUnsafe(t);
  if (t > 0)
    if (t > El)
      for (var n = 0;n < t; n += El)
        ia.getRandomValues(r.slice(n, n + El));
    else
      ia.getRandomValues(r);
  return typeof e == "function" ? process.nextTick(function() {
    e(null, r);
  }) : r;
}
var oa = {};
var wy = {
  get exports() {
    return oa;
  },
  set exports(t) {
    oa = t;
  }
};
var E0 = wi.EventEmitter;
var xy = {};
var _y = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: xy
}, Symbol.toStringTag, { value: "Module" }));
var k0 = /* @__PURE__ */ g0(_y);
var kl;
var Ff;
function Sy() {
  if (Ff)
    return kl;
  Ff = 1;
  function t(d, h) {
    var g2 = Object.keys(d);
    if (Object.getOwnPropertySymbols) {
      var p = Object.getOwnPropertySymbols(d);
      h && (p = p.filter(function(y4) {
        return Object.getOwnPropertyDescriptor(d, y4).enumerable;
      })), g2.push.apply(g2, p);
    }
    return g2;
  }
  function e(d) {
    for (var h = 1;h < arguments.length; h++) {
      var g2 = arguments[h] != null ? arguments[h] : {};
      h % 2 ? t(Object(g2), true).forEach(function(p) {
        r(d, p, g2[p]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(d, Object.getOwnPropertyDescriptors(g2)) : t(Object(g2)).forEach(function(p) {
        Object.defineProperty(d, p, Object.getOwnPropertyDescriptor(g2, p));
      });
    }
    return d;
  }
  function r(d, h, g2) {
    return h in d ? Object.defineProperty(d, h, { value: g2, enumerable: true, configurable: true, writable: true }) : d[h] = g2, d;
  }
  function n(d, h) {
    if (!(d instanceof h))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(d, h) {
    for (var g2 = 0;g2 < h.length; g2++) {
      var p = h[g2];
      p.enumerable = p.enumerable || false, p.configurable = true, "value" in p && (p.writable = true), Object.defineProperty(d, p.key, p);
    }
  }
  function o(d, h, g2) {
    return h && i(d.prototype, h), g2 && i(d, g2), d;
  }
  var s = Ho, a = s.Buffer, l = k0, c2 = l.inspect, u = c2 && c2.custom || "inspect";
  function f2(d, h, g2) {
    a.prototype.copy.call(d, h, g2);
  }
  return kl = /* @__PURE__ */ function() {
    function d() {
      n(this, d), this.head = null, this.tail = null, this.length = 0;
    }
    return o(d, [{
      key: "push",
      value: function(g2) {
        var p = {
          data: g2,
          next: null
        };
        this.length > 0 ? this.tail.next = p : this.head = p, this.tail = p, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(g2) {
        var p = {
          data: g2,
          next: this.head
        };
        this.length === 0 && (this.tail = p), this.head = p, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var g2 = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, g2;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(g2) {
        if (this.length === 0)
          return "";
        for (var p = this.head, y4 = "" + p.data;p = p.next; )
          y4 += g2 + p.data;
        return y4;
      }
    }, {
      key: "concat",
      value: function(g2) {
        if (this.length === 0)
          return a.alloc(0);
        for (var p = a.allocUnsafe(g2 >>> 0), y4 = this.head, b = 0;y4; )
          f2(y4.data, p, b), b += y4.data.length, y4 = y4.next;
        return p;
      }
    }, {
      key: "consume",
      value: function(g2, p) {
        var y4;
        return g2 < this.head.data.length ? (y4 = this.head.data.slice(0, g2), this.head.data = this.head.data.slice(g2)) : g2 === this.head.data.length ? y4 = this.shift() : y4 = p ? this._getString(g2) : this._getBuffer(g2), y4;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
    }, {
      key: "_getString",
      value: function(g2) {
        var p = this.head, y4 = 1, b = p.data;
        for (g2 -= b.length;p = p.next; ) {
          var x = p.data, S = g2 > x.length ? x.length : g2;
          if (S === x.length ? b += x : b += x.slice(0, g2), g2 -= S, g2 === 0) {
            S === x.length ? (++y4, p.next ? this.head = p.next : this.head = this.tail = null) : (this.head = p, p.data = x.slice(S));
            break;
          }
          ++y4;
        }
        return this.length -= y4, b;
      }
    }, {
      key: "_getBuffer",
      value: function(g2) {
        var p = a.allocUnsafe(g2), y4 = this.head, b = 1;
        for (y4.data.copy(p), g2 -= y4.data.length;y4 = y4.next; ) {
          var x = y4.data, S = g2 > x.length ? x.length : g2;
          if (x.copy(p, p.length - g2, 0, S), g2 -= S, g2 === 0) {
            S === x.length ? (++b, y4.next ? this.head = y4.next : this.head = this.tail = null) : (this.head = y4, y4.data = x.slice(S));
            break;
          }
          ++b;
        }
        return this.length -= b, p;
      }
    }, {
      key: u,
      value: function(g2, p) {
        return c2(this, e({}, p, {
          depth: 0,
          customInspect: false
        }));
      }
    }]), d;
  }(), kl;
}
function Ey(t, e) {
  var r = this, n = this._readableState && this._readableState.destroyed, i = this._writableState && this._writableState.destroyed;
  return n || i ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(Sc, this, t)) : process.nextTick(Sc, this, t)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t || null, function(o) {
    !e && o ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(Us, r) : (r._writableState.errorEmitted = true, process.nextTick(jf, r, o)) : process.nextTick(jf, r, o) : e ? (process.nextTick(Us, r), e(o)) : process.nextTick(Us, r);
  }), this);
}
function jf(t, e) {
  Sc(t, e), Us(t);
}
function Us(t) {
  t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
}
function ky() {
  this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
}
function Sc(t, e) {
  t.emit("error", e);
}
function Cy(t, e) {
  var { _readableState: r, _writableState: n } = t;
  r && r.autoDestroy || n && n.autoDestroy ? t.destroy(e) : t.emit("error", e);
}
var C0 = {
  destroy: Ey,
  undestroy: ky,
  errorOrDestroy: Cy
};
var Gn3 = {};
function Ty(t, e) {
  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
}
var T0 = {};
function lr(t, e, r) {
  r || (r = Error);
  function n(o, s, a) {
    return typeof e == "string" ? e : e(o, s, a);
  }
  var i = /* @__PURE__ */ function(o) {
    Ty(s, o);
    function s(a, l, c2) {
      return o.call(this, n(a, l, c2)) || this;
    }
    return s;
  }(r);
  i.prototype.name = r.name, i.prototype.code = t, T0[t] = i;
}
function Wf(t, e) {
  if (Array.isArray(t)) {
    var r = t.length;
    return t = t.map(function(n) {
      return String(n);
    }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : r === 2 ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
  } else
    return "of ".concat(e, " ").concat(String(t));
}
function Oy(t, e, r) {
  return t.substr(!r || r < 0 ? 0 : +r, e.length) === e;
}
function Iy(t, e, r) {
  return (r === undefined || r > t.length) && (r = t.length), t.substring(r - e.length, r) === e;
}
function Py(t, e, r) {
  return typeof r != "number" && (r = 0), r + e.length > t.length ? false : t.indexOf(e, r) !== -1;
}
lr("ERR_INVALID_OPT_VALUE", function(t, e) {
  return 'The value "' + e + '" is invalid for option "' + t + '"';
}, TypeError);
lr("ERR_INVALID_ARG_TYPE", function(t, e, r) {
  var n;
  typeof e == "string" && Oy(e, "not ") ? (n = "must not be", e = e.replace(/^not /, "")) : n = "must be";
  var i;
  if (Iy(t, " argument"))
    i = "The ".concat(t, " ").concat(n, " ").concat(Wf(e, "type"));
  else {
    var o = Py(t, ".") ? "property" : "argument";
    i = 'The "'.concat(t, '" ').concat(o, " ").concat(n, " ").concat(Wf(e, "type"));
  }
  return i += ". Received type ".concat(typeof r), i;
}, TypeError);
lr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
lr("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
  return "The " + t + " method is not implemented";
});
lr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
lr("ERR_STREAM_DESTROYED", function(t) {
  return "Cannot call " + t + " after a stream was destroyed";
});
lr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
lr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
lr("ERR_STREAM_WRITE_AFTER_END", "write after end");
lr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
lr("ERR_UNKNOWN_ENCODING", function(t) {
  return "Unknown encoding: " + t;
}, TypeError);
lr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
Gn3.codes = T0;
var Ry = Gn3.codes.ERR_INVALID_OPT_VALUE;
function Dy(t, e, r) {
  return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
}
function My(t, e, r, n) {
  var i = Dy(e, n, r);
  if (i != null) {
    if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
      var o = n ? r : "highWaterMark";
      throw new Ry(o, i);
    }
    return Math.floor(i);
  }
  return t.objectMode ? 16 : 16 * 1024;
}
var O0 = {
  getHighWaterMark: My
};
var Un3 = {};
var Uf = {
  get exports() {
    return Un3;
  },
  set exports(t) {
    Un3 = t;
  }
};
typeof Object.create == "function" ? Uf.exports = function(e, r) {
  r && (e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: false,
      writable: true,
      configurable: true
    }
  }));
} : Uf.exports = function(e, r) {
  if (r) {
    e.super_ = r;
    var n = function() {
    };
    n.prototype = r.prototype, e.prototype = new n, e.prototype.constructor = e;
  }
};
var Ny = Ly;
function Ly(t, e) {
  if (Cl("noDeprecation"))
    return t;
  var r = false;
  function n() {
    if (!r) {
      if (Cl("throwDeprecation"))
        throw new Error(e);
      Cl("traceDeprecation") ? console.trace(e) : console.warn(e), r = true;
    }
    return t.apply(this, arguments);
  }
  return n;
}
function Cl(t) {
  try {
    if (!globalThis.localStorage)
      return false;
  } catch {
    return false;
  }
  var e = globalThis.localStorage[t];
  return e == null ? false : String(e).toLowerCase() === "true";
}
var Tl;
var zf;
function I0() {
  if (zf)
    return Tl;
  zf = 1, Tl = j;
  function t(B3) {
    var q3 = this;
    this.next = null, this.entry = null, this.finish = function() {
      me(q3, B3);
    };
  }
  var e;
  j.WritableState = L;
  var r = {
    deprecate: Ny
  }, n = E0, i = Ho.Buffer, o = globalThis.Uint8Array || function() {
  };
  function s(B3) {
    return i.from(B3);
  }
  function a(B3) {
    return i.isBuffer(B3) || B3 instanceof o;
  }
  var l = C0, c2 = O0, u = c2.getHighWaterMark, f2 = Gn3.codes, d = f2.ERR_INVALID_ARG_TYPE, h = f2.ERR_METHOD_NOT_IMPLEMENTED, g2 = f2.ERR_MULTIPLE_CALLBACK, p = f2.ERR_STREAM_CANNOT_PIPE, y4 = f2.ERR_STREAM_DESTROYED, b = f2.ERR_STREAM_NULL_VALUES, x = f2.ERR_STREAM_WRITE_AFTER_END, S = f2.ERR_UNKNOWN_ENCODING, O = l.errorOrDestroy;
  Un3(j, n);
  function _() {
  }
  function L(B3, q3, Z) {
    e = e || xi(), B3 = B3 || {}, typeof Z != "boolean" && (Z = q3 instanceof e), this.objectMode = !!B3.objectMode, Z && (this.objectMode = this.objectMode || !!B3.writableObjectMode), this.highWaterMark = u(this, B3, "writableHighWaterMark", Z), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
    var oe = B3.decodeStrings === false;
    this.decodeStrings = !oe, this.defaultEncoding = B3.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(de) {
      I(q3, de);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = B3.emitClose !== false, this.autoDestroy = !!B3.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new t(this);
  }
  L.prototype.getBuffer = function() {
    for (var q3 = this.bufferedRequest, Z = [];q3; )
      Z.push(q3), q3 = q3.next;
    return Z;
  }, function() {
    try {
      Object.defineProperty(L.prototype, "buffer", {
        get: r.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var N4;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (N4 = Function.prototype[Symbol.hasInstance], Object.defineProperty(j, Symbol.hasInstance, {
    value: function(q3) {
      return N4.call(this, q3) ? true : this !== j ? false : q3 && q3._writableState instanceof L;
    }
  })) : N4 = function(q3) {
    return q3 instanceof this;
  };
  function j(B3) {
    e = e || xi();
    var q3 = this instanceof e;
    if (!q3 && !N4.call(j, this))
      return new j(B3);
    this._writableState = new L(B3, this, q3), this.writable = true, B3 && (typeof B3.write == "function" && (this._write = B3.write), typeof B3.writev == "function" && (this._writev = B3.writev), typeof B3.destroy == "function" && (this._destroy = B3.destroy), typeof B3.final == "function" && (this._final = B3.final)), n.call(this);
  }
  j.prototype.pipe = function() {
    O(this, new p);
  };
  function W(B3, q3) {
    var Z = new x;
    O(B3, Z), process.nextTick(q3, Z);
  }
  function G(B3, q3, Z, oe) {
    var de;
    return Z === null ? de = new b : typeof Z != "string" && !q3.objectMode && (de = new d("chunk", ["string", "Buffer"], Z)), de ? (O(B3, de), process.nextTick(oe, de), false) : true;
  }
  j.prototype.write = function(B3, q3, Z) {
    var oe = this._writableState, de = false, R4 = !oe.objectMode && a(B3);
    return R4 && !i.isBuffer(B3) && (B3 = s(B3)), typeof q3 == "function" && (Z = q3, q3 = null), R4 ? q3 = "buffer" : q3 || (q3 = oe.defaultEncoding), typeof Z != "function" && (Z = _), oe.ending ? W(this, Z) : (R4 || G(this, oe, B3, Z)) && (oe.pendingcb++, de = fe(this, oe, R4, B3, q3, Z)), de;
  }, j.prototype.cork = function() {
    this._writableState.corked++;
  }, j.prototype.uncork = function() {
    var B3 = this._writableState;
    B3.corked && (B3.corked--, !B3.writing && !B3.corked && !B3.bufferProcessing && B3.bufferedRequest && X2(this, B3));
  }, j.prototype.setDefaultEncoding = function(q3) {
    if (typeof q3 == "string" && (q3 = q3.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((q3 + "").toLowerCase()) > -1))
      throw new S(q3);
    return this._writableState.defaultEncoding = q3, this;
  }, Object.defineProperty(j.prototype, "writableBuffer", {
    enumerable: false,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function ee(B3, q3, Z) {
    return !B3.objectMode && B3.decodeStrings !== false && typeof q3 == "string" && (q3 = i.from(q3, Z)), q3;
  }
  Object.defineProperty(j.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function fe(B3, q3, Z, oe, de, R4) {
    if (!Z) {
      var k = ee(q3, oe, de);
      oe !== k && (Z = true, de = "buffer", oe = k);
    }
    var re = q3.objectMode ? 1 : oe.length;
    q3.length += re;
    var ne = q3.length < q3.highWaterMark;
    if (ne || (q3.needDrain = true), q3.writing || q3.corked) {
      var Ae = q3.lastBufferedRequest;
      q3.lastBufferedRequest = {
        chunk: oe,
        encoding: de,
        isBuf: Z,
        callback: R4,
        next: null
      }, Ae ? Ae.next = q3.lastBufferedRequest : q3.bufferedRequest = q3.lastBufferedRequest, q3.bufferedRequestCount += 1;
    } else
      P(B3, q3, false, re, oe, de, R4);
    return ne;
  }
  function P(B3, q3, Z, oe, de, R4, k) {
    q3.writelen = oe, q3.writecb = k, q3.writing = true, q3.sync = true, q3.destroyed ? q3.onwrite(new y4("write")) : Z ? B3._writev(de, q3.onwrite) : B3._write(de, R4, q3.onwrite), q3.sync = false;
  }
  function z(B3, q3, Z, oe, de) {
    --q3.pendingcb, Z ? (process.nextTick(de, oe), process.nextTick(he, B3, q3), B3._writableState.errorEmitted = true, O(B3, oe)) : (de(oe), B3._writableState.errorEmitted = true, O(B3, oe), he(B3, q3));
  }
  function U(B3) {
    B3.writing = false, B3.writecb = null, B3.length -= B3.writelen, B3.writelen = 0;
  }
  function I(B3, q3) {
    var Z = B3._writableState, oe = Z.sync, de = Z.writecb;
    if (typeof de != "function")
      throw new g2;
    if (U(Z), q3)
      z(B3, Z, oe, q3, de);
    else {
      var R4 = H(Z) || B3.destroyed;
      !R4 && !Z.corked && !Z.bufferProcessing && Z.bufferedRequest && X2(B3, Z), oe ? process.nextTick(V, B3, Z, R4, de) : V(B3, Z, R4, de);
    }
  }
  function V(B3, q3, Z, oe) {
    Z || te(B3, q3), q3.pendingcb--, oe(), he(B3, q3);
  }
  function te(B3, q3) {
    q3.length === 0 && q3.needDrain && (q3.needDrain = false, B3.emit("drain"));
  }
  function X2(B3, q3) {
    q3.bufferProcessing = true;
    var Z = q3.bufferedRequest;
    if (B3._writev && Z && Z.next) {
      var oe = q3.bufferedRequestCount, de = new Array(oe), R4 = q3.corkedRequestsFree;
      R4.entry = Z;
      for (var k = 0, re = true;Z; )
        de[k] = Z, Z.isBuf || (re = false), Z = Z.next, k += 1;
      de.allBuffers = re, P(B3, q3, true, q3.length, de, "", R4.finish), q3.pendingcb++, q3.lastBufferedRequest = null, R4.next ? (q3.corkedRequestsFree = R4.next, R4.next = null) : q3.corkedRequestsFree = new t(q3), q3.bufferedRequestCount = 0;
    } else {
      for (;Z; ) {
        var { chunk: ne, encoding: Ae, callback: C } = Z, v = q3.objectMode ? 1 : ne.length;
        if (P(B3, q3, false, v, ne, Ae, C), Z = Z.next, q3.bufferedRequestCount--, q3.writing)
          break;
      }
      Z === null && (q3.lastBufferedRequest = null);
    }
    q3.bufferedRequest = Z, q3.bufferProcessing = false;
  }
  j.prototype._write = function(B3, q3, Z) {
    Z(new h("_write()"));
  }, j.prototype._writev = null, j.prototype.end = function(B3, q3, Z) {
    var oe = this._writableState;
    return typeof B3 == "function" ? (Z = B3, B3 = null, q3 = null) : typeof q3 == "function" && (Z = q3, q3 = null), B3 != null && this.write(B3, q3), oe.corked && (oe.corked = 1, this.uncork()), oe.ending || pe(this, oe, Z), this;
  }, Object.defineProperty(j.prototype, "writableLength", {
    enumerable: false,
    get: function() {
      return this._writableState.length;
    }
  });
  function H(B3) {
    return B3.ending && B3.length === 0 && B3.bufferedRequest === null && !B3.finished && !B3.writing;
  }
  function $2(B3, q3) {
    B3._final(function(Z) {
      q3.pendingcb--, Z && O(B3, Z), q3.prefinished = true, B3.emit("prefinish"), he(B3, q3);
    });
  }
  function se(B3, q3) {
    !q3.prefinished && !q3.finalCalled && (typeof B3._final == "function" && !q3.destroyed ? (q3.pendingcb++, q3.finalCalled = true, process.nextTick($2, B3, q3)) : (q3.prefinished = true, B3.emit("prefinish")));
  }
  function he(B3, q3) {
    var Z = H(q3);
    if (Z && (se(B3, q3), q3.pendingcb === 0 && (q3.finished = true, B3.emit("finish"), q3.autoDestroy))) {
      var oe = B3._readableState;
      (!oe || oe.autoDestroy && oe.endEmitted) && B3.destroy();
    }
    return Z;
  }
  function pe(B3, q3, Z) {
    q3.ending = true, he(B3, q3), Z && (q3.finished ? process.nextTick(Z) : B3.once("finish", Z)), q3.ended = true, B3.writable = false;
  }
  function me(B3, q3, Z) {
    var oe = B3.entry;
    for (B3.entry = null;oe; ) {
      var de = oe.callback;
      q3.pendingcb--, de(Z), oe = oe.next;
    }
    q3.corkedRequestsFree.next = B3;
  }
  return Object.defineProperty(j.prototype, "destroyed", {
    enumerable: false,
    get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    },
    set: function(q3) {
      this._writableState && (this._writableState.destroyed = q3);
    }
  }), j.prototype.destroy = l.destroy, j.prototype._undestroy = l.undestroy, j.prototype._destroy = function(B3, q3) {
    q3(B3);
  }, Tl;
}
var Ol;
var Vf;
function xi() {
  if (Vf)
    return Ol;
  Vf = 1;
  var t = Object.keys || function(c2) {
    var u = [];
    for (var f2 in c2)
      u.push(f2);
    return u;
  };
  Ol = s;
  var e = R0(), r = I0();
  Un3(s, e);
  for (var n = t(r.prototype), i = 0;i < n.length; i++) {
    var o = n[i];
    s.prototype[o] || (s.prototype[o] = r.prototype[o]);
  }
  function s(c2) {
    if (!(this instanceof s))
      return new s(c2);
    e.call(this, c2), r.call(this, c2), this.allowHalfOpen = true, c2 && (c2.readable === false && (this.readable = false), c2.writable === false && (this.writable = false), c2.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", a)));
  }
  Object.defineProperty(s.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  }), Object.defineProperty(s.prototype, "writableBuffer", {
    enumerable: false,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  }), Object.defineProperty(s.prototype, "writableLength", {
    enumerable: false,
    get: function() {
      return this._writableState.length;
    }
  });
  function a() {
    this._writableState.ended || process.nextTick(l, this);
  }
  function l(c2) {
    c2.end();
  }
  return Object.defineProperty(s.prototype, "destroyed", {
    enumerable: false,
    get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(u) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = u, this._writableState.destroyed = u);
    }
  }), Ol;
}
var Il = {};
var qf;
function Hf() {
  if (qf)
    return Il;
  qf = 1;
  var t = So.Buffer, e = t.isEncoding || function(b) {
    switch (b = "" + b, b && b.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function r(b) {
    if (!b)
      return "utf8";
    for (var x;; )
      switch (b) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return b;
        default:
          if (x)
            return;
          b = ("" + b).toLowerCase(), x = true;
      }
  }
  function n(b) {
    var x = r(b);
    if (typeof x != "string" && (t.isEncoding === e || !e(b)))
      throw new Error("Unknown encoding: " + b);
    return x || b;
  }
  Il.StringDecoder = i;
  function i(b) {
    this.encoding = n(b);
    var x;
    switch (this.encoding) {
      case "utf16le":
        this.text = f2, this.end = d, x = 4;
        break;
      case "utf8":
        this.fillLast = l, x = 4;
        break;
      case "base64":
        this.text = h, this.end = g2, x = 3;
        break;
      default:
        this.write = p, this.end = y4;
        return;
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = t.allocUnsafe(x);
  }
  i.prototype.write = function(b) {
    if (b.length === 0)
      return "";
    var x, S;
    if (this.lastNeed) {
      if (x = this.fillLast(b), x === undefined)
        return "";
      S = this.lastNeed, this.lastNeed = 0;
    } else
      S = 0;
    return S < b.length ? x ? x + this.text(b, S) : this.text(b, S) : x || "";
  }, i.prototype.end = u, i.prototype.text = c2, i.prototype.fillLast = function(b) {
    if (this.lastNeed <= b.length)
      return b.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    b.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, b.length), this.lastNeed -= b.length;
  };
  function o(b) {
    return b <= 127 ? 0 : b >> 5 === 6 ? 2 : b >> 4 === 14 ? 3 : b >> 3 === 30 ? 4 : b >> 6 === 2 ? -1 : -2;
  }
  function s(b, x, S) {
    var O = x.length - 1;
    if (O < S)
      return 0;
    var _ = o(x[O]);
    return _ >= 0 ? (_ > 0 && (b.lastNeed = _ - 1), _) : --O < S || _ === -2 ? 0 : (_ = o(x[O]), _ >= 0 ? (_ > 0 && (b.lastNeed = _ - 2), _) : --O < S || _ === -2 ? 0 : (_ = o(x[O]), _ >= 0 ? (_ > 0 && (_ === 2 ? _ = 0 : b.lastNeed = _ - 3), _) : 0));
  }
  function a(b, x, S) {
    if ((x[0] & 192) !== 128)
      return b.lastNeed = 0, "�";
    if (b.lastNeed > 1 && x.length > 1) {
      if ((x[1] & 192) !== 128)
        return b.lastNeed = 1, "�";
      if (b.lastNeed > 2 && x.length > 2 && (x[2] & 192) !== 128)
        return b.lastNeed = 2, "�";
    }
  }
  function l(b) {
    var x = this.lastTotal - this.lastNeed, S = a(this, b);
    if (S !== undefined)
      return S;
    if (this.lastNeed <= b.length)
      return b.copy(this.lastChar, x, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    b.copy(this.lastChar, x, 0, b.length), this.lastNeed -= b.length;
  }
  function c2(b, x) {
    var S = s(this, b, x);
    if (!this.lastNeed)
      return b.toString("utf8", x);
    this.lastTotal = S;
    var O = b.length - (S - this.lastNeed);
    return b.copy(this.lastChar, 0, O), b.toString("utf8", x, O);
  }
  function u(b) {
    var x = b && b.length ? this.write(b) : "";
    return this.lastNeed ? x + "�" : x;
  }
  function f2(b, x) {
    if ((b.length - x) % 2 === 0) {
      var S = b.toString("utf16le", x);
      if (S) {
        var O = S.charCodeAt(S.length - 1);
        if (O >= 55296 && O <= 56319)
          return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = b[b.length - 2], this.lastChar[1] = b[b.length - 1], S.slice(0, -1);
      }
      return S;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = b[b.length - 1], b.toString("utf16le", x, b.length - 1);
  }
  function d(b) {
    var x = b && b.length ? this.write(b) : "";
    if (this.lastNeed) {
      var S = this.lastTotal - this.lastNeed;
      return x + this.lastChar.toString("utf16le", 0, S);
    }
    return x;
  }
  function h(b, x) {
    var S = (b.length - x) % 3;
    return S === 0 ? b.toString("base64", x) : (this.lastNeed = 3 - S, this.lastTotal = 3, S === 1 ? this.lastChar[0] = b[b.length - 1] : (this.lastChar[0] = b[b.length - 2], this.lastChar[1] = b[b.length - 1]), b.toString("base64", x, b.length - S));
  }
  function g2(b) {
    var x = b && b.length ? this.write(b) : "";
    return this.lastNeed ? x + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : x;
  }
  function p(b) {
    return b.toString(this.encoding);
  }
  function y4(b) {
    return b && b.length ? this.write(b) : "";
  }
  return Il;
}
var Yf = Gn3.codes.ERR_STREAM_PREMATURE_CLOSE;
function By(t) {
  var e = false;
  return function() {
    if (!e) {
      e = true;
      for (var r = arguments.length, n = new Array(r), i = 0;i < r; i++)
        n[i] = arguments[i];
      t.apply(this, n);
    }
  };
}
function Fy() {
}
function jy(t) {
  return t.setHeader && typeof t.abort == "function";
}
function P0(t, e, r) {
  if (typeof e == "function")
    return P0(t, null, e);
  e || (e = {}), r = By(r || Fy);
  var n = e.readable || e.readable !== false && t.readable, i = e.writable || e.writable !== false && t.writable, o = function() {
    t.writable || a();
  }, s = t._writableState && t._writableState.finished, a = function() {
    i = false, s = true, n || r.call(t);
  }, l = t._readableState && t._readableState.endEmitted, c2 = function() {
    n = false, l = true, i || r.call(t);
  }, u = function(g2) {
    r.call(t, g2);
  }, f2 = function() {
    var g2;
    if (n && !l)
      return (!t._readableState || !t._readableState.ended) && (g2 = new Yf), r.call(t, g2);
    if (i && !s)
      return (!t._writableState || !t._writableState.ended) && (g2 = new Yf), r.call(t, g2);
  }, d = function() {
    t.req.on("finish", a);
  };
  return jy(t) ? (t.on("complete", a), t.on("abort", f2), t.req ? d() : t.on("request", d)) : i && !t._writableState && (t.on("end", o), t.on("close", o)), t.on("end", c2), t.on("finish", a), e.error !== false && t.on("error", u), t.on("close", f2), function() {
    t.removeListener("complete", a), t.removeListener("abort", f2), t.removeListener("request", d), t.req && t.req.removeListener("finish", a), t.removeListener("end", o), t.removeListener("close", o), t.removeListener("finish", a), t.removeListener("end", c2), t.removeListener("error", u), t.removeListener("close", f2);
  };
}
var mu = P0;
var Pl;
var Kf;
function Wy() {
  if (Kf)
    return Pl;
  Kf = 1;
  var t;
  function e(b, x, S) {
    return x in b ? Object.defineProperty(b, x, { value: S, enumerable: true, configurable: true, writable: true }) : b[x] = S, b;
  }
  var r = mu, n = Symbol("lastResolve"), i = Symbol("lastReject"), o = Symbol("error"), s = Symbol("ended"), a = Symbol("lastPromise"), l = Symbol("handlePromise"), c2 = Symbol("stream");
  function u(b, x) {
    return {
      value: b,
      done: x
    };
  }
  function f2(b) {
    var x = b[n];
    if (x !== null) {
      var S = b[c2].read();
      S !== null && (b[a] = null, b[n] = null, b[i] = null, x(u(S, false)));
    }
  }
  function d(b) {
    process.nextTick(f2, b);
  }
  function h(b, x) {
    return function(S, O) {
      b.then(function() {
        if (x[s]) {
          S(u(undefined, true));
          return;
        }
        x[l](S, O);
      }, O);
    };
  }
  var g2 = Object.getPrototypeOf(function() {
  }), p = Object.setPrototypeOf((t = {
    get stream() {
      return this[c2];
    },
    next: function() {
      var x = this, S = this[o];
      if (S !== null)
        return Promise.reject(S);
      if (this[s])
        return Promise.resolve(u(undefined, true));
      if (this[c2].destroyed)
        return new Promise(function(N4, j) {
          process.nextTick(function() {
            x[o] ? j(x[o]) : N4(u(undefined, true));
          });
        });
      var O = this[a], _;
      if (O)
        _ = new Promise(h(O, this));
      else {
        var L = this[c2].read();
        if (L !== null)
          return Promise.resolve(u(L, false));
        _ = new Promise(this[l]);
      }
      return this[a] = _, _;
    }
  }, e(t, Symbol.asyncIterator, function() {
    return this;
  }), e(t, "return", function() {
    var x = this;
    return new Promise(function(S, O) {
      x[c2].destroy(null, function(_) {
        if (_) {
          O(_);
          return;
        }
        S(u(undefined, true));
      });
    });
  }), t), g2), y4 = function(x) {
    var S, O = Object.create(p, (S = {}, e(S, c2, {
      value: x,
      writable: true
    }), e(S, n, {
      value: null,
      writable: true
    }), e(S, i, {
      value: null,
      writable: true
    }), e(S, o, {
      value: null,
      writable: true
    }), e(S, s, {
      value: x._readableState.endEmitted,
      writable: true
    }), e(S, l, {
      value: function(L, N4) {
        var j = O[c2].read();
        j ? (O[a] = null, O[n] = null, O[i] = null, L(u(j, false))) : (O[n] = L, O[i] = N4);
      },
      writable: true
    }), S));
    return O[a] = null, r(x, function(_) {
      if (_ && _.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var L = O[i];
        L !== null && (O[a] = null, O[n] = null, O[i] = null, L(_)), O[o] = _;
        return;
      }
      var N4 = O[n];
      N4 !== null && (O[a] = null, O[n] = null, O[i] = null, N4(u(undefined, true))), O[s] = true;
    }), x.on("readable", d.bind(null, O)), O;
  };
  return Pl = y4, Pl;
}
var Rl;
var Xf;
function Uy() {
  return Xf || (Xf = 1, Rl = function() {
    throw new Error("Readable.from is not available in the browser");
  }), Rl;
}
var Dl;
var Jf;
function R0() {
  if (Jf)
    return Dl;
  Jf = 1, Dl = W;
  var t;
  W.ReadableState = j, wi.EventEmitter;
  var e = function(k, re) {
    return k.listeners(re).length;
  }, r = E0, n = Ho.Buffer, i = globalThis.Uint8Array || function() {
  };
  function o(R4) {
    return n.from(R4);
  }
  function s(R4) {
    return n.isBuffer(R4) || R4 instanceof i;
  }
  var a = k0, l;
  a && a.debuglog ? l = a.debuglog("stream") : l = function() {
  };
  var c2 = Sy(), u = C0, f2 = O0, d = f2.getHighWaterMark, h = Gn3.codes, g2 = h.ERR_INVALID_ARG_TYPE, p = h.ERR_STREAM_PUSH_AFTER_EOF, y4 = h.ERR_METHOD_NOT_IMPLEMENTED, b = h.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, x, S, O;
  Un3(W, r);
  var _ = u.errorOrDestroy, L = ["error", "close", "destroy", "pause", "resume"];
  function N4(R4, k, re) {
    if (typeof R4.prependListener == "function")
      return R4.prependListener(k, re);
    !R4._events || !R4._events[k] ? R4.on(k, re) : Array.isArray(R4._events[k]) ? R4._events[k].unshift(re) : R4._events[k] = [re, R4._events[k]];
  }
  function j(R4, k, re) {
    t = t || xi(), R4 = R4 || {}, typeof re != "boolean" && (re = k instanceof t), this.objectMode = !!R4.objectMode, re && (this.objectMode = this.objectMode || !!R4.readableObjectMode), this.highWaterMark = d(this, R4, "readableHighWaterMark", re), this.buffer = new c2, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = R4.emitClose !== false, this.autoDestroy = !!R4.autoDestroy, this.destroyed = false, this.defaultEncoding = R4.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, R4.encoding && (x || (x = Hf().StringDecoder), this.decoder = new x(R4.encoding), this.encoding = R4.encoding);
  }
  function W(R4) {
    if (t = t || xi(), !(this instanceof W))
      return new W(R4);
    var k = this instanceof t;
    this._readableState = new j(R4, this, k), this.readable = true, R4 && (typeof R4.read == "function" && (this._read = R4.read), typeof R4.destroy == "function" && (this._destroy = R4.destroy)), r.call(this);
  }
  Object.defineProperty(W.prototype, "destroyed", {
    enumerable: false,
    get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    },
    set: function(k) {
      this._readableState && (this._readableState.destroyed = k);
    }
  }), W.prototype.destroy = u.destroy, W.prototype._undestroy = u.undestroy, W.prototype._destroy = function(R4, k) {
    k(R4);
  }, W.prototype.push = function(R4, k) {
    var re = this._readableState, ne;
    return re.objectMode ? ne = true : typeof R4 == "string" && (k = k || re.defaultEncoding, k !== re.encoding && (R4 = n.from(R4, k), k = ""), ne = true), G(this, R4, k, false, ne);
  }, W.prototype.unshift = function(R4) {
    return G(this, R4, null, true, false);
  };
  function G(R4, k, re, ne, Ae) {
    l("readableAddChunk", k);
    var C = R4._readableState;
    if (k === null)
      C.reading = false, I(R4, C);
    else {
      var v;
      if (Ae || (v = fe(C, k)), v)
        _(R4, v);
      else if (C.objectMode || k && k.length > 0)
        if (typeof k != "string" && !C.objectMode && Object.getPrototypeOf(k) !== n.prototype && (k = o(k)), ne)
          C.endEmitted ? _(R4, new b) : ee(R4, C, k, true);
        else if (C.ended)
          _(R4, new p);
        else {
          if (C.destroyed)
            return false;
          C.reading = false, C.decoder && !re ? (k = C.decoder.write(k), C.objectMode || k.length !== 0 ? ee(R4, C, k, false) : X2(R4, C)) : ee(R4, C, k, false);
        }
      else
        ne || (C.reading = false, X2(R4, C));
    }
    return !C.ended && (C.length < C.highWaterMark || C.length === 0);
  }
  function ee(R4, k, re, ne) {
    k.flowing && k.length === 0 && !k.sync ? (k.awaitDrain = 0, R4.emit("data", re)) : (k.length += k.objectMode ? 1 : re.length, ne ? k.buffer.unshift(re) : k.buffer.push(re), k.needReadable && V(R4)), X2(R4, k);
  }
  function fe(R4, k) {
    var re;
    return !s(k) && typeof k != "string" && k !== undefined && !R4.objectMode && (re = new g2("chunk", ["string", "Buffer", "Uint8Array"], k)), re;
  }
  W.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  }, W.prototype.setEncoding = function(R4) {
    x || (x = Hf().StringDecoder);
    var k = new x(R4);
    this._readableState.decoder = k, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var re = this._readableState.buffer.head, ne = "";re !== null; )
      ne += k.write(re.data), re = re.next;
    return this._readableState.buffer.clear(), ne !== "" && this._readableState.buffer.push(ne), this._readableState.length = ne.length, this;
  };
  var P = 1073741824;
  function z(R4) {
    return R4 >= P ? R4 = P : (R4--, R4 |= R4 >>> 1, R4 |= R4 >>> 2, R4 |= R4 >>> 4, R4 |= R4 >>> 8, R4 |= R4 >>> 16, R4++), R4;
  }
  function U(R4, k) {
    return R4 <= 0 || k.length === 0 && k.ended ? 0 : k.objectMode ? 1 : R4 !== R4 ? k.flowing && k.length ? k.buffer.head.data.length : k.length : (R4 > k.highWaterMark && (k.highWaterMark = z(R4)), R4 <= k.length ? R4 : k.ended ? k.length : (k.needReadable = true, 0));
  }
  W.prototype.read = function(R4) {
    l("read", R4), R4 = parseInt(R4, 10);
    var k = this._readableState, re = R4;
    if (R4 !== 0 && (k.emittedReadable = false), R4 === 0 && k.needReadable && ((k.highWaterMark !== 0 ? k.length >= k.highWaterMark : k.length > 0) || k.ended))
      return l("read: emitReadable", k.length, k.ended), k.length === 0 && k.ended ? Z(this) : V(this), null;
    if (R4 = U(R4, k), R4 === 0 && k.ended)
      return k.length === 0 && Z(this), null;
    var ne = k.needReadable;
    l("need readable", ne), (k.length === 0 || k.length - R4 < k.highWaterMark) && (ne = true, l("length less than watermark", ne)), k.ended || k.reading ? (ne = false, l("reading or ended", ne)) : ne && (l("do read"), k.reading = true, k.sync = true, k.length === 0 && (k.needReadable = true), this._read(k.highWaterMark), k.sync = false, k.reading || (R4 = U(re, k)));
    var Ae;
    return R4 > 0 ? Ae = q3(R4, k) : Ae = null, Ae === null ? (k.needReadable = k.length <= k.highWaterMark, R4 = 0) : (k.length -= R4, k.awaitDrain = 0), k.length === 0 && (k.ended || (k.needReadable = true), re !== R4 && k.ended && Z(this)), Ae !== null && this.emit("data", Ae), Ae;
  };
  function I(R4, k) {
    if (l("onEofChunk"), !k.ended) {
      if (k.decoder) {
        var re = k.decoder.end();
        re && re.length && (k.buffer.push(re), k.length += k.objectMode ? 1 : re.length);
      }
      k.ended = true, k.sync ? V(R4) : (k.needReadable = false, k.emittedReadable || (k.emittedReadable = true, te(R4)));
    }
  }
  function V(R4) {
    var k = R4._readableState;
    l("emitReadable", k.needReadable, k.emittedReadable), k.needReadable = false, k.emittedReadable || (l("emitReadable", k.flowing), k.emittedReadable = true, process.nextTick(te, R4));
  }
  function te(R4) {
    var k = R4._readableState;
    l("emitReadable_", k.destroyed, k.length, k.ended), !k.destroyed && (k.length || k.ended) && (R4.emit("readable"), k.emittedReadable = false), k.needReadable = !k.flowing && !k.ended && k.length <= k.highWaterMark, B3(R4);
  }
  function X2(R4, k) {
    k.readingMore || (k.readingMore = true, process.nextTick(H, R4, k));
  }
  function H(R4, k) {
    for (;!k.reading && !k.ended && (k.length < k.highWaterMark || k.flowing && k.length === 0); ) {
      var re = k.length;
      if (l("maybeReadMore read 0"), R4.read(0), re === k.length)
        break;
    }
    k.readingMore = false;
  }
  W.prototype._read = function(R4) {
    _(this, new y4("_read()"));
  }, W.prototype.pipe = function(R4, k) {
    var re = this, ne = this._readableState;
    switch (ne.pipesCount) {
      case 0:
        ne.pipes = R4;
        break;
      case 1:
        ne.pipes = [ne.pipes, R4];
        break;
      default:
        ne.pipes.push(R4);
        break;
    }
    ne.pipesCount += 1, l("pipe count=%d opts=%j", ne.pipesCount, k);
    var Ae = (!k || k.end !== false) && R4 !== process.stdout && R4 !== process.stderr, C = Ae ? w2 : Ne;
    ne.endEmitted ? process.nextTick(C) : re.once("end", C), R4.on("unpipe", v);
    function v(E2, m2) {
      l("onunpipe"), E2 === re && m2 && m2.hasUnpiped === false && (m2.hasUnpiped = true, ae());
    }
    function w2() {
      l("onend"), R4.end();
    }
    var D = $2(re);
    R4.on("drain", D);
    var J3 = false;
    function ae() {
      l("cleanup"), R4.removeListener("close", _e), R4.removeListener("finish", we), R4.removeListener("drain", D), R4.removeListener("error", Se), R4.removeListener("unpipe", v), re.removeListener("end", w2), re.removeListener("end", Ne), re.removeListener("data", ue), J3 = true, ne.awaitDrain && (!R4._writableState || R4._writableState.needDrain) && D();
    }
    re.on("data", ue);
    function ue(E2) {
      l("ondata");
      var m2 = R4.write(E2);
      l("dest.write", m2), m2 === false && ((ne.pipesCount === 1 && ne.pipes === R4 || ne.pipesCount > 1 && de(ne.pipes, R4) !== -1) && !J3 && (l("false write response, pause", ne.awaitDrain), ne.awaitDrain++), re.pause());
    }
    function Se(E2) {
      l("onerror", E2), Ne(), R4.removeListener("error", Se), e(R4, "error") === 0 && _(R4, E2);
    }
    N4(R4, "error", Se);
    function _e() {
      R4.removeListener("finish", we), Ne();
    }
    R4.once("close", _e);
    function we() {
      l("onfinish"), R4.removeListener("close", _e), Ne();
    }
    R4.once("finish", we);
    function Ne() {
      l("unpipe"), re.unpipe(R4);
    }
    return R4.emit("pipe", re), ne.flowing || (l("pipe resume"), re.resume()), R4;
  };
  function $2(R4) {
    return function() {
      var re = R4._readableState;
      l("pipeOnDrain", re.awaitDrain), re.awaitDrain && re.awaitDrain--, re.awaitDrain === 0 && e(R4, "data") && (re.flowing = true, B3(R4));
    };
  }
  W.prototype.unpipe = function(R4) {
    var k = this._readableState, re = {
      hasUnpiped: false
    };
    if (k.pipesCount === 0)
      return this;
    if (k.pipesCount === 1)
      return R4 && R4 !== k.pipes ? this : (R4 || (R4 = k.pipes), k.pipes = null, k.pipesCount = 0, k.flowing = false, R4 && R4.emit("unpipe", this, re), this);
    if (!R4) {
      var { pipes: ne, pipesCount: Ae } = k;
      k.pipes = null, k.pipesCount = 0, k.flowing = false;
      for (var C = 0;C < Ae; C++)
        ne[C].emit("unpipe", this, {
          hasUnpiped: false
        });
      return this;
    }
    var v = de(k.pipes, R4);
    return v === -1 ? this : (k.pipes.splice(v, 1), k.pipesCount -= 1, k.pipesCount === 1 && (k.pipes = k.pipes[0]), R4.emit("unpipe", this, re), this);
  }, W.prototype.on = function(R4, k) {
    var re = r.prototype.on.call(this, R4, k), ne = this._readableState;
    return R4 === "data" ? (ne.readableListening = this.listenerCount("readable") > 0, ne.flowing !== false && this.resume()) : R4 === "readable" && !ne.endEmitted && !ne.readableListening && (ne.readableListening = ne.needReadable = true, ne.flowing = false, ne.emittedReadable = false, l("on readable", ne.length, ne.reading), ne.length ? V(this) : ne.reading || process.nextTick(he, this)), re;
  }, W.prototype.addListener = W.prototype.on, W.prototype.removeListener = function(R4, k) {
    var re = r.prototype.removeListener.call(this, R4, k);
    return R4 === "readable" && process.nextTick(se, this), re;
  }, W.prototype.removeAllListeners = function(R4) {
    var k = r.prototype.removeAllListeners.apply(this, arguments);
    return (R4 === "readable" || R4 === undefined) && process.nextTick(se, this), k;
  };
  function se(R4) {
    var k = R4._readableState;
    k.readableListening = R4.listenerCount("readable") > 0, k.resumeScheduled && !k.paused ? k.flowing = true : R4.listenerCount("data") > 0 && R4.resume();
  }
  function he(R4) {
    l("readable nexttick read 0"), R4.read(0);
  }
  W.prototype.resume = function() {
    var R4 = this._readableState;
    return R4.flowing || (l("resume"), R4.flowing = !R4.readableListening, pe(this, R4)), R4.paused = false, this;
  };
  function pe(R4, k) {
    k.resumeScheduled || (k.resumeScheduled = true, process.nextTick(me, R4, k));
  }
  function me(R4, k) {
    l("resume", k.reading), k.reading || R4.read(0), k.resumeScheduled = false, R4.emit("resume"), B3(R4), k.flowing && !k.reading && R4.read(0);
  }
  W.prototype.pause = function() {
    return l("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (l("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
  };
  function B3(R4) {
    var k = R4._readableState;
    for (l("flow", k.flowing);k.flowing && R4.read() !== null; )
      ;
  }
  W.prototype.wrap = function(R4) {
    var k = this, re = this._readableState, ne = false;
    R4.on("end", function() {
      if (l("wrapped end"), re.decoder && !re.ended) {
        var v = re.decoder.end();
        v && v.length && k.push(v);
      }
      k.push(null);
    }), R4.on("data", function(v) {
      if (l("wrapped data"), re.decoder && (v = re.decoder.write(v)), !(re.objectMode && v == null) && !(!re.objectMode && (!v || !v.length))) {
        var w2 = k.push(v);
        w2 || (ne = true, R4.pause());
      }
    });
    for (var Ae in R4)
      this[Ae] === undefined && typeof R4[Ae] == "function" && (this[Ae] = function(w2) {
        return function() {
          return R4[w2].apply(R4, arguments);
        };
      }(Ae));
    for (var C = 0;C < L.length; C++)
      R4.on(L[C], this.emit.bind(this, L[C]));
    return this._read = function(v) {
      l("wrapped _read", v), ne && (ne = false, R4.resume());
    }, this;
  }, typeof Symbol == "function" && (W.prototype[Symbol.asyncIterator] = function() {
    return S === undefined && (S = Wy()), S(this);
  }), Object.defineProperty(W.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), Object.defineProperty(W.prototype, "readableBuffer", {
    enumerable: false,
    get: function() {
      return this._readableState && this._readableState.buffer;
    }
  }), Object.defineProperty(W.prototype, "readableFlowing", {
    enumerable: false,
    get: function() {
      return this._readableState.flowing;
    },
    set: function(k) {
      this._readableState && (this._readableState.flowing = k);
    }
  }), W._fromList = q3, Object.defineProperty(W.prototype, "readableLength", {
    enumerable: false,
    get: function() {
      return this._readableState.length;
    }
  });
  function q3(R4, k) {
    if (k.length === 0)
      return null;
    var re;
    return k.objectMode ? re = k.buffer.shift() : !R4 || R4 >= k.length ? (k.decoder ? re = k.buffer.join("") : k.buffer.length === 1 ? re = k.buffer.first() : re = k.buffer.concat(k.length), k.buffer.clear()) : re = k.buffer.consume(R4, k.decoder), re;
  }
  function Z(R4) {
    var k = R4._readableState;
    l("endReadable", k.endEmitted), k.endEmitted || (k.ended = true, process.nextTick(oe, k, R4));
  }
  function oe(R4, k) {
    if (l("endReadableNT", R4.endEmitted, R4.length), !R4.endEmitted && R4.length === 0 && (R4.endEmitted = true, k.readable = false, k.emit("end"), R4.autoDestroy)) {
      var re = k._writableState;
      (!re || re.autoDestroy && re.finished) && k.destroy();
    }
  }
  typeof Symbol == "function" && (W.from = function(R4, k) {
    return O === undefined && (O = Uy()), O(W, R4, k);
  });
  function de(R4, k) {
    for (var re = 0, ne = R4.length;re < ne; re++)
      if (R4[re] === k)
        return re;
    return -1;
  }
  return Dl;
}
var D0 = Hr;
var Ba = Gn3.codes;
var zy = Ba.ERR_METHOD_NOT_IMPLEMENTED;
var Vy = Ba.ERR_MULTIPLE_CALLBACK;
var qy = Ba.ERR_TRANSFORM_ALREADY_TRANSFORMING;
var Hy = Ba.ERR_TRANSFORM_WITH_LENGTH_0;
var Fa = xi();
Un3(Hr, Fa);
function Yy(t, e) {
  var r = this._transformState;
  r.transforming = false;
  var n = r.writecb;
  if (n === null)
    return this.emit("error", new Vy);
  r.writechunk = null, r.writecb = null, e != null && this.push(e), n(t);
  var i = this._readableState;
  i.reading = false, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
}
function Hr(t) {
  if (!(this instanceof Hr))
    return new Hr(t);
  Fa.call(this, t), this._transformState = {
    afterTransform: Yy.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }, this._readableState.needReadable = true, this._readableState.sync = false, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", Ky);
}
function Ky() {
  var t = this;
  typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e, r) {
    Qf(t, e, r);
  }) : Qf(this, null, null);
}
Hr.prototype.push = function(t, e) {
  return this._transformState.needTransform = false, Fa.prototype.push.call(this, t, e);
};
Hr.prototype._transform = function(t, e, r) {
  r(new zy("_transform()"));
};
Hr.prototype._write = function(t, e, r) {
  var n = this._transformState;
  if (n.writecb = r, n.writechunk = t, n.writeencoding = e, !n.transforming) {
    var i = this._readableState;
    (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
  }
};
Hr.prototype._read = function(t) {
  var e = this._transformState;
  e.writechunk !== null && !e.transforming ? (e.transforming = true, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = true;
};
Hr.prototype._destroy = function(t, e) {
  Fa.prototype._destroy.call(this, t, function(r) {
    e(r);
  });
};
function Qf(t, e, r) {
  if (e)
    return t.emit("error", e);
  if (r != null && t.push(r), t._writableState.length)
    throw new Hy;
  if (t._transformState.transforming)
    throw new qy;
  return t.push(null);
}
var Xy = Eo;
var M0 = D0;
Un3(Eo, M0);
function Eo(t) {
  if (!(this instanceof Eo))
    return new Eo(t);
  M0.call(this, t);
}
Eo.prototype._transform = function(t, e, r) {
  r(null, t);
};
var Ml;
function Jy(t) {
  var e = false;
  return function() {
    e || (e = true, t.apply(undefined, arguments));
  };
}
var N0 = Gn3.codes;
var Qy = N0.ERR_MISSING_ARGS;
var Gy = N0.ERR_STREAM_DESTROYED;
function Gf(t) {
  if (t)
    throw t;
}
function Zy(t) {
  return t.setHeader && typeof t.abort == "function";
}
function $y(t, e, r, n) {
  n = Jy(n);
  var i = false;
  t.on("close", function() {
    i = true;
  }), Ml === undefined && (Ml = mu), Ml(t, {
    readable: e,
    writable: r
  }, function(s) {
    if (s)
      return n(s);
    i = true, n();
  });
  var o = false;
  return function(s) {
    if (!i && !o) {
      if (o = true, Zy(t))
        return t.abort();
      if (typeof t.destroy == "function")
        return t.destroy();
      n(s || new Gy("pipe"));
    }
  };
}
function Zf(t) {
  t();
}
function eb(t, e) {
  return t.pipe(e);
}
function tb(t) {
  return !t.length || typeof t[t.length - 1] != "function" ? Gf : t.pop();
}
function rb() {
  for (var t = arguments.length, e = new Array(t), r = 0;r < t; r++)
    e[r] = arguments[r];
  var n = tb(e);
  if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
    throw new Qy("streams");
  var i, o = e.map(function(s, a) {
    var l = a < e.length - 1, c2 = a > 0;
    return $y(s, l, c2, function(u) {
      i || (i = u), u && o.forEach(Zf), !l && (o.forEach(Zf), n(i));
    });
  });
  return e.reduce(eb);
}
var nb = rb;
(function(t, e) {
  e = t.exports = R0(), e.Stream = e, e.Readable = e, e.Writable = I0(), e.Duplex = xi(), e.Transform = D0, e.PassThrough = Xy, e.finished = mu, e.pipeline = nb;
})(wy, oa);
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var $f;
var ib = typeof queueMicrotask == "function" ? queueMicrotask.bind(typeof window < "u" ? window : globalThis) : (t) => ($f || ($f = Promise.resolve())).then(t).catch((e) => setTimeout(() => {
  throw e;
}, 0));
function ed(t, e) {
  for (const r in e)
    Object.defineProperty(t, r, {
      value: e[r],
      enumerable: true,
      configurable: true
    });
  return t;
}
function ob(t, e, r) {
  if (!t || typeof t == "string")
    throw new TypeError("Please pass an Error to err-code");
  r || (r = {}), typeof e == "object" && (r = e, e = ""), e && (r.code = e);
  try {
    return ed(t, r);
  } catch {
    r.message = t.message, r.stack = t.stack;
    const i = function() {
    };
    return i.prototype = Object.create(Object.getPrototypeOf(t)), ed(new i, r);
  }
}
var sb = ob;
var L02 = {};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(t) {
  const e = Yo, r = La, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  t.Buffer = a, t.SlowBuffer = x, t.INSPECT_MAX_BYTES = 50;
  const i = 2147483647;
  t.kMaxLength = i, a.TYPED_ARRAY_SUPPORT = o(), !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  function o() {
    try {
      const E2 = new Uint8Array(1), m2 = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(m2, Uint8Array.prototype), Object.setPrototypeOf(E2, m2), E2.foo() === 42;
    } catch {
      return false;
    }
  }
  Object.defineProperty(a.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (a.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(a.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (a.isBuffer(this))
        return this.byteOffset;
    }
  });
  function s(E2) {
    if (E2 > i)
      throw new RangeError('The value "' + E2 + '" is invalid for option "size"');
    const m2 = new Uint8Array(E2);
    return Object.setPrototypeOf(m2, a.prototype), m2;
  }
  function a(E2, m2, A4) {
    if (typeof E2 == "number") {
      if (typeof m2 == "string")
        throw new TypeError('The "string" argument must be of type string. Received type number');
      return f2(E2);
    }
    return l(E2, m2, A4);
  }
  a.poolSize = 8192;
  function l(E2, m2, A4) {
    if (typeof E2 == "string")
      return d(E2, m2);
    if (ArrayBuffer.isView(E2))
      return g2(E2);
    if (E2 == null)
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof E2);
    if (ue(E2, ArrayBuffer) || E2 && ue(E2.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (ue(E2, SharedArrayBuffer) || E2 && ue(E2.buffer, SharedArrayBuffer)))
      return p(E2, m2, A4);
    if (typeof E2 == "number")
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    const M2 = E2.valueOf && E2.valueOf();
    if (M2 != null && M2 !== E2)
      return a.from(M2, m2, A4);
    const Q3 = y4(E2);
    if (Q3)
      return Q3;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof E2[Symbol.toPrimitive] == "function")
      return a.from(E2[Symbol.toPrimitive]("string"), m2, A4);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof E2);
  }
  a.from = function(E2, m2, A4) {
    return l(E2, m2, A4);
  }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array);
  function c2(E2) {
    if (typeof E2 != "number")
      throw new TypeError('"size" argument must be of type number');
    if (E2 < 0)
      throw new RangeError('The value "' + E2 + '" is invalid for option "size"');
  }
  function u(E2, m2, A4) {
    return c2(E2), E2 <= 0 ? s(E2) : m2 !== undefined ? typeof A4 == "string" ? s(E2).fill(m2, A4) : s(E2).fill(m2) : s(E2);
  }
  a.alloc = function(E2, m2, A4) {
    return u(E2, m2, A4);
  };
  function f2(E2) {
    return c2(E2), s(E2 < 0 ? 0 : b(E2) | 0);
  }
  a.allocUnsafe = function(E2) {
    return f2(E2);
  }, a.allocUnsafeSlow = function(E2) {
    return f2(E2);
  };
  function d(E2, m2) {
    if ((typeof m2 != "string" || m2 === "") && (m2 = "utf8"), !a.isEncoding(m2))
      throw new TypeError("Unknown encoding: " + m2);
    const A4 = S(E2, m2) | 0;
    let M2 = s(A4);
    const Q3 = M2.write(E2, m2);
    return Q3 !== A4 && (M2 = M2.slice(0, Q3)), M2;
  }
  function h(E2) {
    const m2 = E2.length < 0 ? 0 : b(E2.length) | 0, A4 = s(m2);
    for (let M2 = 0;M2 < m2; M2 += 1)
      A4[M2] = E2[M2] & 255;
    return A4;
  }
  function g2(E2) {
    if (ue(E2, Uint8Array)) {
      const m2 = new Uint8Array(E2);
      return p(m2.buffer, m2.byteOffset, m2.byteLength);
    }
    return h(E2);
  }
  function p(E2, m2, A4) {
    if (m2 < 0 || E2.byteLength < m2)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (E2.byteLength < m2 + (A4 || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let M2;
    return m2 === undefined && A4 === undefined ? M2 = new Uint8Array(E2) : A4 === undefined ? M2 = new Uint8Array(E2, m2) : M2 = new Uint8Array(E2, m2, A4), Object.setPrototypeOf(M2, a.prototype), M2;
  }
  function y4(E2) {
    if (a.isBuffer(E2)) {
      const m2 = b(E2.length) | 0, A4 = s(m2);
      return A4.length === 0 || E2.copy(A4, 0, 0, m2), A4;
    }
    if (E2.length !== undefined)
      return typeof E2.length != "number" || Se(E2.length) ? s(0) : h(E2);
    if (E2.type === "Buffer" && Array.isArray(E2.data))
      return h(E2.data);
  }
  function b(E2) {
    if (E2 >= i)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");
    return E2 | 0;
  }
  function x(E2) {
    return +E2 != E2 && (E2 = 0), a.alloc(+E2);
  }
  a.isBuffer = function(m2) {
    return m2 != null && m2._isBuffer === true && m2 !== a.prototype;
  }, a.compare = function(m2, A4) {
    if (ue(m2, Uint8Array) && (m2 = a.from(m2, m2.offset, m2.byteLength)), ue(A4, Uint8Array) && (A4 = a.from(A4, A4.offset, A4.byteLength)), !a.isBuffer(m2) || !a.isBuffer(A4))
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (m2 === A4)
      return 0;
    let M2 = m2.length, Q3 = A4.length;
    for (let ie = 0, le = Math.min(M2, Q3);ie < le; ++ie)
      if (m2[ie] !== A4[ie]) {
        M2 = m2[ie], Q3 = A4[ie];
        break;
      }
    return M2 < Q3 ? -1 : Q3 < M2 ? 1 : 0;
  }, a.isEncoding = function(m2) {
    switch (String(m2).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  }, a.concat = function(m2, A4) {
    if (!Array.isArray(m2))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (m2.length === 0)
      return a.alloc(0);
    let M2;
    if (A4 === undefined)
      for (A4 = 0, M2 = 0;M2 < m2.length; ++M2)
        A4 += m2[M2].length;
    const Q3 = a.allocUnsafe(A4);
    let ie = 0;
    for (M2 = 0;M2 < m2.length; ++M2) {
      let le = m2[M2];
      if (ue(le, Uint8Array))
        ie + le.length > Q3.length ? (a.isBuffer(le) || (le = a.from(le)), le.copy(Q3, ie)) : Uint8Array.prototype.set.call(Q3, le, ie);
      else if (a.isBuffer(le))
        le.copy(Q3, ie);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      ie += le.length;
    }
    return Q3;
  };
  function S(E2, m2) {
    if (a.isBuffer(E2))
      return E2.length;
    if (ArrayBuffer.isView(E2) || ue(E2, ArrayBuffer))
      return E2.byteLength;
    if (typeof E2 != "string")
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof E2);
    const A4 = E2.length, M2 = arguments.length > 2 && arguments[2] === true;
    if (!M2 && A4 === 0)
      return 0;
    let Q3 = false;
    for (;; )
      switch (m2) {
        case "ascii":
        case "latin1":
        case "binary":
          return A4;
        case "utf8":
        case "utf-8":
          return v(E2).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return A4 * 2;
        case "hex":
          return A4 >>> 1;
        case "base64":
          return J3(E2).length;
        default:
          if (Q3)
            return M2 ? -1 : v(E2).length;
          m2 = ("" + m2).toLowerCase(), Q3 = true;
      }
  }
  a.byteLength = S;
  function O(E2, m2, A4) {
    let M2 = false;
    if ((m2 === undefined || m2 < 0) && (m2 = 0), m2 > this.length || ((A4 === undefined || A4 > this.length) && (A4 = this.length), A4 <= 0) || (A4 >>>= 0, m2 >>>= 0, A4 <= m2))
      return "";
    for (E2 || (E2 = "utf8");; )
      switch (E2) {
        case "hex":
          return X2(this, m2, A4);
        case "utf8":
        case "utf-8":
          return z(this, m2, A4);
        case "ascii":
          return V(this, m2, A4);
        case "latin1":
        case "binary":
          return te(this, m2, A4);
        case "base64":
          return P(this, m2, A4);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return H(this, m2, A4);
        default:
          if (M2)
            throw new TypeError("Unknown encoding: " + E2);
          E2 = (E2 + "").toLowerCase(), M2 = true;
      }
  }
  a.prototype._isBuffer = true;
  function _(E2, m2, A4) {
    const M2 = E2[m2];
    E2[m2] = E2[A4], E2[A4] = M2;
  }
  a.prototype.swap16 = function() {
    const m2 = this.length;
    if (m2 % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let A4 = 0;A4 < m2; A4 += 2)
      _(this, A4, A4 + 1);
    return this;
  }, a.prototype.swap32 = function() {
    const m2 = this.length;
    if (m2 % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let A4 = 0;A4 < m2; A4 += 4)
      _(this, A4, A4 + 3), _(this, A4 + 1, A4 + 2);
    return this;
  }, a.prototype.swap64 = function() {
    const m2 = this.length;
    if (m2 % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let A4 = 0;A4 < m2; A4 += 8)
      _(this, A4, A4 + 7), _(this, A4 + 1, A4 + 6), _(this, A4 + 2, A4 + 5), _(this, A4 + 3, A4 + 4);
    return this;
  }, a.prototype.toString = function() {
    const m2 = this.length;
    return m2 === 0 ? "" : arguments.length === 0 ? z(this, 0, m2) : O.apply(this, arguments);
  }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(m2) {
    if (!a.isBuffer(m2))
      throw new TypeError("Argument must be a Buffer");
    return this === m2 ? true : a.compare(this, m2) === 0;
  }, a.prototype.inspect = function() {
    let m2 = "";
    const A4 = t.INSPECT_MAX_BYTES;
    return m2 = this.toString("hex", 0, A4).replace(/(.{2})/g, "$1 ").trim(), this.length > A4 && (m2 += " ... "), "<Buffer " + m2 + ">";
  }, n && (a.prototype[n] = a.prototype.inspect), a.prototype.compare = function(m2, A4, M2, Q3, ie) {
    if (ue(m2, Uint8Array) && (m2 = a.from(m2, m2.offset, m2.byteLength)), !a.isBuffer(m2))
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof m2);
    if (A4 === undefined && (A4 = 0), M2 === undefined && (M2 = m2 ? m2.length : 0), Q3 === undefined && (Q3 = 0), ie === undefined && (ie = this.length), A4 < 0 || M2 > m2.length || Q3 < 0 || ie > this.length)
      throw new RangeError("out of range index");
    if (Q3 >= ie && A4 >= M2)
      return 0;
    if (Q3 >= ie)
      return -1;
    if (A4 >= M2)
      return 1;
    if (A4 >>>= 0, M2 >>>= 0, Q3 >>>= 0, ie >>>= 0, this === m2)
      return 0;
    let le = ie - Q3, Ee = M2 - A4;
    const Fe = Math.min(le, Ee), Ve = this.slice(Q3, ie), Ge = m2.slice(A4, M2);
    for (let Ue = 0;Ue < Fe; ++Ue)
      if (Ve[Ue] !== Ge[Ue]) {
        le = Ve[Ue], Ee = Ge[Ue];
        break;
      }
    return le < Ee ? -1 : Ee < le ? 1 : 0;
  };
  function L(E2, m2, A4, M2, Q3) {
    if (E2.length === 0)
      return -1;
    if (typeof A4 == "string" ? (M2 = A4, A4 = 0) : A4 > 2147483647 ? A4 = 2147483647 : A4 < -2147483648 && (A4 = -2147483648), A4 = +A4, Se(A4) && (A4 = Q3 ? 0 : E2.length - 1), A4 < 0 && (A4 = E2.length + A4), A4 >= E2.length) {
      if (Q3)
        return -1;
      A4 = E2.length - 1;
    } else if (A4 < 0)
      if (Q3)
        A4 = 0;
      else
        return -1;
    if (typeof m2 == "string" && (m2 = a.from(m2, M2)), a.isBuffer(m2))
      return m2.length === 0 ? -1 : N4(E2, m2, A4, M2, Q3);
    if (typeof m2 == "number")
      return m2 = m2 & 255, typeof Uint8Array.prototype.indexOf == "function" ? Q3 ? Uint8Array.prototype.indexOf.call(E2, m2, A4) : Uint8Array.prototype.lastIndexOf.call(E2, m2, A4) : N4(E2, [m2], A4, M2, Q3);
    throw new TypeError("val must be string, number or Buffer");
  }
  function N4(E2, m2, A4, M2, Q3) {
    let ie = 1, le = E2.length, Ee = m2.length;
    if (M2 !== undefined && (M2 = String(M2).toLowerCase(), M2 === "ucs2" || M2 === "ucs-2" || M2 === "utf16le" || M2 === "utf-16le")) {
      if (E2.length < 2 || m2.length < 2)
        return -1;
      ie = 2, le /= 2, Ee /= 2, A4 /= 2;
    }
    function Fe(Ge, Ue) {
      return ie === 1 ? Ge[Ue] : Ge.readUInt16BE(Ue * ie);
    }
    let Ve;
    if (Q3) {
      let Ge = -1;
      for (Ve = A4;Ve < le; Ve++)
        if (Fe(E2, Ve) === Fe(m2, Ge === -1 ? 0 : Ve - Ge)) {
          if (Ge === -1 && (Ge = Ve), Ve - Ge + 1 === Ee)
            return Ge * ie;
        } else
          Ge !== -1 && (Ve -= Ve - Ge), Ge = -1;
    } else
      for (A4 + Ee > le && (A4 = le - Ee), Ve = A4;Ve >= 0; Ve--) {
        let Ge = true;
        for (let Ue = 0;Ue < Ee; Ue++)
          if (Fe(E2, Ve + Ue) !== Fe(m2, Ue)) {
            Ge = false;
            break;
          }
        if (Ge)
          return Ve;
      }
    return -1;
  }
  a.prototype.includes = function(m2, A4, M2) {
    return this.indexOf(m2, A4, M2) !== -1;
  }, a.prototype.indexOf = function(m2, A4, M2) {
    return L(this, m2, A4, M2, true);
  }, a.prototype.lastIndexOf = function(m2, A4, M2) {
    return L(this, m2, A4, M2, false);
  };
  function j(E2, m2, A4, M2) {
    A4 = Number(A4) || 0;
    const Q3 = E2.length - A4;
    M2 ? (M2 = Number(M2), M2 > Q3 && (M2 = Q3)) : M2 = Q3;
    const ie = m2.length;
    M2 > ie / 2 && (M2 = ie / 2);
    let le;
    for (le = 0;le < M2; ++le) {
      const Ee = parseInt(m2.substr(le * 2, 2), 16);
      if (Se(Ee))
        return le;
      E2[A4 + le] = Ee;
    }
    return le;
  }
  function W(E2, m2, A4, M2) {
    return ae(v(m2, E2.length - A4), E2, A4, M2);
  }
  function G(E2, m2, A4, M2) {
    return ae(w2(m2), E2, A4, M2);
  }
  function ee(E2, m2, A4, M2) {
    return ae(J3(m2), E2, A4, M2);
  }
  function fe(E2, m2, A4, M2) {
    return ae(D(m2, E2.length - A4), E2, A4, M2);
  }
  a.prototype.write = function(m2, A4, M2, Q3) {
    if (A4 === undefined)
      Q3 = "utf8", M2 = this.length, A4 = 0;
    else if (M2 === undefined && typeof A4 == "string")
      Q3 = A4, M2 = this.length, A4 = 0;
    else if (isFinite(A4))
      A4 = A4 >>> 0, isFinite(M2) ? (M2 = M2 >>> 0, Q3 === undefined && (Q3 = "utf8")) : (Q3 = M2, M2 = undefined);
    else
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const ie = this.length - A4;
    if ((M2 === undefined || M2 > ie) && (M2 = ie), m2.length > 0 && (M2 < 0 || A4 < 0) || A4 > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    Q3 || (Q3 = "utf8");
    let le = false;
    for (;; )
      switch (Q3) {
        case "hex":
          return j(this, m2, A4, M2);
        case "utf8":
        case "utf-8":
          return W(this, m2, A4, M2);
        case "ascii":
        case "latin1":
        case "binary":
          return G(this, m2, A4, M2);
        case "base64":
          return ee(this, m2, A4, M2);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return fe(this, m2, A4, M2);
        default:
          if (le)
            throw new TypeError("Unknown encoding: " + Q3);
          Q3 = ("" + Q3).toLowerCase(), le = true;
      }
  }, a.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function P(E2, m2, A4) {
    return m2 === 0 && A4 === E2.length ? e.fromByteArray(E2) : e.fromByteArray(E2.slice(m2, A4));
  }
  function z(E2, m2, A4) {
    A4 = Math.min(E2.length, A4);
    const M2 = [];
    let Q3 = m2;
    for (;Q3 < A4; ) {
      const ie = E2[Q3];
      let le = null, Ee = ie > 239 ? 4 : ie > 223 ? 3 : ie > 191 ? 2 : 1;
      if (Q3 + Ee <= A4) {
        let Fe, Ve, Ge, Ue;
        switch (Ee) {
          case 1:
            ie < 128 && (le = ie);
            break;
          case 2:
            Fe = E2[Q3 + 1], (Fe & 192) === 128 && (Ue = (ie & 31) << 6 | Fe & 63, Ue > 127 && (le = Ue));
            break;
          case 3:
            Fe = E2[Q3 + 1], Ve = E2[Q3 + 2], (Fe & 192) === 128 && (Ve & 192) === 128 && (Ue = (ie & 15) << 12 | (Fe & 63) << 6 | Ve & 63, Ue > 2047 && (Ue < 55296 || Ue > 57343) && (le = Ue));
            break;
          case 4:
            Fe = E2[Q3 + 1], Ve = E2[Q3 + 2], Ge = E2[Q3 + 3], (Fe & 192) === 128 && (Ve & 192) === 128 && (Ge & 192) === 128 && (Ue = (ie & 15) << 18 | (Fe & 63) << 12 | (Ve & 63) << 6 | Ge & 63, Ue > 65535 && Ue < 1114112 && (le = Ue));
        }
      }
      le === null ? (le = 65533, Ee = 1) : le > 65535 && (le -= 65536, M2.push(le >>> 10 & 1023 | 55296), le = 56320 | le & 1023), M2.push(le), Q3 += Ee;
    }
    return I(M2);
  }
  const U = 4096;
  function I(E2) {
    const m2 = E2.length;
    if (m2 <= U)
      return String.fromCharCode.apply(String, E2);
    let A4 = "", M2 = 0;
    for (;M2 < m2; )
      A4 += String.fromCharCode.apply(String, E2.slice(M2, M2 += U));
    return A4;
  }
  function V(E2, m2, A4) {
    let M2 = "";
    A4 = Math.min(E2.length, A4);
    for (let Q3 = m2;Q3 < A4; ++Q3)
      M2 += String.fromCharCode(E2[Q3] & 127);
    return M2;
  }
  function te(E2, m2, A4) {
    let M2 = "";
    A4 = Math.min(E2.length, A4);
    for (let Q3 = m2;Q3 < A4; ++Q3)
      M2 += String.fromCharCode(E2[Q3]);
    return M2;
  }
  function X2(E2, m2, A4) {
    const M2 = E2.length;
    (!m2 || m2 < 0) && (m2 = 0), (!A4 || A4 < 0 || A4 > M2) && (A4 = M2);
    let Q3 = "";
    for (let ie = m2;ie < A4; ++ie)
      Q3 += _e[E2[ie]];
    return Q3;
  }
  function H(E2, m2, A4) {
    const M2 = E2.slice(m2, A4);
    let Q3 = "";
    for (let ie = 0;ie < M2.length - 1; ie += 2)
      Q3 += String.fromCharCode(M2[ie] + M2[ie + 1] * 256);
    return Q3;
  }
  a.prototype.slice = function(m2, A4) {
    const M2 = this.length;
    m2 = ~~m2, A4 = A4 === undefined ? M2 : ~~A4, m2 < 0 ? (m2 += M2, m2 < 0 && (m2 = 0)) : m2 > M2 && (m2 = M2), A4 < 0 ? (A4 += M2, A4 < 0 && (A4 = 0)) : A4 > M2 && (A4 = M2), A4 < m2 && (A4 = m2);
    const Q3 = this.subarray(m2, A4);
    return Object.setPrototypeOf(Q3, a.prototype), Q3;
  };
  function $2(E2, m2, A4) {
    if (E2 % 1 !== 0 || E2 < 0)
      throw new RangeError("offset is not uint");
    if (E2 + m2 > A4)
      throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(m2, A4, M2) {
    m2 = m2 >>> 0, A4 = A4 >>> 0, M2 || $2(m2, A4, this.length);
    let Q3 = this[m2], ie = 1, le = 0;
    for (;++le < A4 && (ie *= 256); )
      Q3 += this[m2 + le] * ie;
    return Q3;
  }, a.prototype.readUintBE = a.prototype.readUIntBE = function(m2, A4, M2) {
    m2 = m2 >>> 0, A4 = A4 >>> 0, M2 || $2(m2, A4, this.length);
    let Q3 = this[m2 + --A4], ie = 1;
    for (;A4 > 0 && (ie *= 256); )
      Q3 += this[m2 + --A4] * ie;
    return Q3;
  }, a.prototype.readUint8 = a.prototype.readUInt8 = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 1, this.length), this[m2];
  }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 2, this.length), this[m2] | this[m2 + 1] << 8;
  }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 2, this.length), this[m2] << 8 | this[m2 + 1];
  }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 4, this.length), (this[m2] | this[m2 + 1] << 8 | this[m2 + 2] << 16) + this[m2 + 3] * 16777216;
  }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 4, this.length), this[m2] * 16777216 + (this[m2 + 1] << 16 | this[m2 + 2] << 8 | this[m2 + 3]);
  }, a.prototype.readBigUInt64LE = we(function(m2) {
    m2 = m2 >>> 0, re(m2, "offset");
    const A4 = this[m2], M2 = this[m2 + 7];
    (A4 === undefined || M2 === undefined) && ne(m2, this.length - 8);
    const Q3 = A4 + this[++m2] * 2 ** 8 + this[++m2] * 2 ** 16 + this[++m2] * 2 ** 24, ie = this[++m2] + this[++m2] * 2 ** 8 + this[++m2] * 2 ** 16 + M2 * 2 ** 24;
    return BigInt(Q3) + (BigInt(ie) << BigInt(32));
  }), a.prototype.readBigUInt64BE = we(function(m2) {
    m2 = m2 >>> 0, re(m2, "offset");
    const A4 = this[m2], M2 = this[m2 + 7];
    (A4 === undefined || M2 === undefined) && ne(m2, this.length - 8);
    const Q3 = A4 * 2 ** 24 + this[++m2] * 2 ** 16 + this[++m2] * 2 ** 8 + this[++m2], ie = this[++m2] * 2 ** 24 + this[++m2] * 2 ** 16 + this[++m2] * 2 ** 8 + M2;
    return (BigInt(Q3) << BigInt(32)) + BigInt(ie);
  }), a.prototype.readIntLE = function(m2, A4, M2) {
    m2 = m2 >>> 0, A4 = A4 >>> 0, M2 || $2(m2, A4, this.length);
    let Q3 = this[m2], ie = 1, le = 0;
    for (;++le < A4 && (ie *= 256); )
      Q3 += this[m2 + le] * ie;
    return ie *= 128, Q3 >= ie && (Q3 -= Math.pow(2, 8 * A4)), Q3;
  }, a.prototype.readIntBE = function(m2, A4, M2) {
    m2 = m2 >>> 0, A4 = A4 >>> 0, M2 || $2(m2, A4, this.length);
    let Q3 = A4, ie = 1, le = this[m2 + --Q3];
    for (;Q3 > 0 && (ie *= 256); )
      le += this[m2 + --Q3] * ie;
    return ie *= 128, le >= ie && (le -= Math.pow(2, 8 * A4)), le;
  }, a.prototype.readInt8 = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 1, this.length), this[m2] & 128 ? (255 - this[m2] + 1) * -1 : this[m2];
  }, a.prototype.readInt16LE = function(m2, A4) {
    m2 = m2 >>> 0, A4 || $2(m2, 2, this.length);
    const M2 = this[m2] | this[m2 + 1] << 8;
    return M2 & 32768 ? M2 | 4294901760 : M2;
  }, a.prototype.readInt16BE = function(m2, A4) {
    m2 = m2 >>> 0, A4 || $2(m2, 2, this.length);
    const M2 = this[m2 + 1] | this[m2] << 8;
    return M2 & 32768 ? M2 | 4294901760 : M2;
  }, a.prototype.readInt32LE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 4, this.length), this[m2] | this[m2 + 1] << 8 | this[m2 + 2] << 16 | this[m2 + 3] << 24;
  }, a.prototype.readInt32BE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 4, this.length), this[m2] << 24 | this[m2 + 1] << 16 | this[m2 + 2] << 8 | this[m2 + 3];
  }, a.prototype.readBigInt64LE = we(function(m2) {
    m2 = m2 >>> 0, re(m2, "offset");
    const A4 = this[m2], M2 = this[m2 + 7];
    (A4 === undefined || M2 === undefined) && ne(m2, this.length - 8);
    const Q3 = this[m2 + 4] + this[m2 + 5] * 2 ** 8 + this[m2 + 6] * 2 ** 16 + (M2 << 24);
    return (BigInt(Q3) << BigInt(32)) + BigInt(A4 + this[++m2] * 2 ** 8 + this[++m2] * 2 ** 16 + this[++m2] * 2 ** 24);
  }), a.prototype.readBigInt64BE = we(function(m2) {
    m2 = m2 >>> 0, re(m2, "offset");
    const A4 = this[m2], M2 = this[m2 + 7];
    (A4 === undefined || M2 === undefined) && ne(m2, this.length - 8);
    const Q3 = (A4 << 24) + this[++m2] * 2 ** 16 + this[++m2] * 2 ** 8 + this[++m2];
    return (BigInt(Q3) << BigInt(32)) + BigInt(this[++m2] * 2 ** 24 + this[++m2] * 2 ** 16 + this[++m2] * 2 ** 8 + M2);
  }), a.prototype.readFloatLE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 4, this.length), r.read(this, m2, true, 23, 4);
  }, a.prototype.readFloatBE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 4, this.length), r.read(this, m2, false, 23, 4);
  }, a.prototype.readDoubleLE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 8, this.length), r.read(this, m2, true, 52, 8);
  }, a.prototype.readDoubleBE = function(m2, A4) {
    return m2 = m2 >>> 0, A4 || $2(m2, 8, this.length), r.read(this, m2, false, 52, 8);
  };
  function se(E2, m2, A4, M2, Q3, ie) {
    if (!a.isBuffer(E2))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (m2 > Q3 || m2 < ie)
      throw new RangeError('"value" argument is out of bounds');
    if (A4 + M2 > E2.length)
      throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(m2, A4, M2, Q3) {
    if (m2 = +m2, A4 = A4 >>> 0, M2 = M2 >>> 0, !Q3) {
      const Ee = Math.pow(2, 8 * M2) - 1;
      se(this, m2, A4, M2, Ee, 0);
    }
    let ie = 1, le = 0;
    for (this[A4] = m2 & 255;++le < M2 && (ie *= 256); )
      this[A4 + le] = m2 / ie & 255;
    return A4 + M2;
  }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(m2, A4, M2, Q3) {
    if (m2 = +m2, A4 = A4 >>> 0, M2 = M2 >>> 0, !Q3) {
      const Ee = Math.pow(2, 8 * M2) - 1;
      se(this, m2, A4, M2, Ee, 0);
    }
    let ie = M2 - 1, le = 1;
    for (this[A4 + ie] = m2 & 255;--ie >= 0 && (le *= 256); )
      this[A4 + ie] = m2 / le & 255;
    return A4 + M2;
  }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 1, 255, 0), this[A4] = m2 & 255, A4 + 1;
  }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 2, 65535, 0), this[A4] = m2 & 255, this[A4 + 1] = m2 >>> 8, A4 + 2;
  }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 2, 65535, 0), this[A4] = m2 >>> 8, this[A4 + 1] = m2 & 255, A4 + 2;
  }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 4, 4294967295, 0), this[A4 + 3] = m2 >>> 24, this[A4 + 2] = m2 >>> 16, this[A4 + 1] = m2 >>> 8, this[A4] = m2 & 255, A4 + 4;
  }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 4, 4294967295, 0), this[A4] = m2 >>> 24, this[A4 + 1] = m2 >>> 16, this[A4 + 2] = m2 >>> 8, this[A4 + 3] = m2 & 255, A4 + 4;
  };
  function he(E2, m2, A4, M2, Q3) {
    k(m2, M2, Q3, E2, A4, 7);
    let ie = Number(m2 & BigInt(4294967295));
    E2[A4++] = ie, ie = ie >> 8, E2[A4++] = ie, ie = ie >> 8, E2[A4++] = ie, ie = ie >> 8, E2[A4++] = ie;
    let le = Number(m2 >> BigInt(32) & BigInt(4294967295));
    return E2[A4++] = le, le = le >> 8, E2[A4++] = le, le = le >> 8, E2[A4++] = le, le = le >> 8, E2[A4++] = le, A4;
  }
  function pe(E2, m2, A4, M2, Q3) {
    k(m2, M2, Q3, E2, A4, 7);
    let ie = Number(m2 & BigInt(4294967295));
    E2[A4 + 7] = ie, ie = ie >> 8, E2[A4 + 6] = ie, ie = ie >> 8, E2[A4 + 5] = ie, ie = ie >> 8, E2[A4 + 4] = ie;
    let le = Number(m2 >> BigInt(32) & BigInt(4294967295));
    return E2[A4 + 3] = le, le = le >> 8, E2[A4 + 2] = le, le = le >> 8, E2[A4 + 1] = le, le = le >> 8, E2[A4] = le, A4 + 8;
  }
  a.prototype.writeBigUInt64LE = we(function(m2, A4 = 0) {
    return he(this, m2, A4, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeBigUInt64BE = we(function(m2, A4 = 0) {
    return pe(this, m2, A4, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeIntLE = function(m2, A4, M2, Q3) {
    if (m2 = +m2, A4 = A4 >>> 0, !Q3) {
      const Fe = Math.pow(2, 8 * M2 - 1);
      se(this, m2, A4, M2, Fe - 1, -Fe);
    }
    let ie = 0, le = 1, Ee = 0;
    for (this[A4] = m2 & 255;++ie < M2 && (le *= 256); )
      m2 < 0 && Ee === 0 && this[A4 + ie - 1] !== 0 && (Ee = 1), this[A4 + ie] = (m2 / le >> 0) - Ee & 255;
    return A4 + M2;
  }, a.prototype.writeIntBE = function(m2, A4, M2, Q3) {
    if (m2 = +m2, A4 = A4 >>> 0, !Q3) {
      const Fe = Math.pow(2, 8 * M2 - 1);
      se(this, m2, A4, M2, Fe - 1, -Fe);
    }
    let ie = M2 - 1, le = 1, Ee = 0;
    for (this[A4 + ie] = m2 & 255;--ie >= 0 && (le *= 256); )
      m2 < 0 && Ee === 0 && this[A4 + ie + 1] !== 0 && (Ee = 1), this[A4 + ie] = (m2 / le >> 0) - Ee & 255;
    return A4 + M2;
  }, a.prototype.writeInt8 = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 1, 127, -128), m2 < 0 && (m2 = 255 + m2 + 1), this[A4] = m2 & 255, A4 + 1;
  }, a.prototype.writeInt16LE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 2, 32767, -32768), this[A4] = m2 & 255, this[A4 + 1] = m2 >>> 8, A4 + 2;
  }, a.prototype.writeInt16BE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 2, 32767, -32768), this[A4] = m2 >>> 8, this[A4 + 1] = m2 & 255, A4 + 2;
  }, a.prototype.writeInt32LE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 4, 2147483647, -2147483648), this[A4] = m2 & 255, this[A4 + 1] = m2 >>> 8, this[A4 + 2] = m2 >>> 16, this[A4 + 3] = m2 >>> 24, A4 + 4;
  }, a.prototype.writeInt32BE = function(m2, A4, M2) {
    return m2 = +m2, A4 = A4 >>> 0, M2 || se(this, m2, A4, 4, 2147483647, -2147483648), m2 < 0 && (m2 = 4294967295 + m2 + 1), this[A4] = m2 >>> 24, this[A4 + 1] = m2 >>> 16, this[A4 + 2] = m2 >>> 8, this[A4 + 3] = m2 & 255, A4 + 4;
  }, a.prototype.writeBigInt64LE = we(function(m2, A4 = 0) {
    return he(this, m2, A4, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), a.prototype.writeBigInt64BE = we(function(m2, A4 = 0) {
    return pe(this, m2, A4, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function me(E2, m2, A4, M2, Q3, ie) {
    if (A4 + M2 > E2.length)
      throw new RangeError("Index out of range");
    if (A4 < 0)
      throw new RangeError("Index out of range");
  }
  function B3(E2, m2, A4, M2, Q3) {
    return m2 = +m2, A4 = A4 >>> 0, Q3 || me(E2, m2, A4, 4), r.write(E2, m2, A4, M2, 23, 4), A4 + 4;
  }
  a.prototype.writeFloatLE = function(m2, A4, M2) {
    return B3(this, m2, A4, true, M2);
  }, a.prototype.writeFloatBE = function(m2, A4, M2) {
    return B3(this, m2, A4, false, M2);
  };
  function q3(E2, m2, A4, M2, Q3) {
    return m2 = +m2, A4 = A4 >>> 0, Q3 || me(E2, m2, A4, 8), r.write(E2, m2, A4, M2, 52, 8), A4 + 8;
  }
  a.prototype.writeDoubleLE = function(m2, A4, M2) {
    return q3(this, m2, A4, true, M2);
  }, a.prototype.writeDoubleBE = function(m2, A4, M2) {
    return q3(this, m2, A4, false, M2);
  }, a.prototype.copy = function(m2, A4, M2, Q3) {
    if (!a.isBuffer(m2))
      throw new TypeError("argument should be a Buffer");
    if (M2 || (M2 = 0), !Q3 && Q3 !== 0 && (Q3 = this.length), A4 >= m2.length && (A4 = m2.length), A4 || (A4 = 0), Q3 > 0 && Q3 < M2 && (Q3 = M2), Q3 === M2 || m2.length === 0 || this.length === 0)
      return 0;
    if (A4 < 0)
      throw new RangeError("targetStart out of bounds");
    if (M2 < 0 || M2 >= this.length)
      throw new RangeError("Index out of range");
    if (Q3 < 0)
      throw new RangeError("sourceEnd out of bounds");
    Q3 > this.length && (Q3 = this.length), m2.length - A4 < Q3 - M2 && (Q3 = m2.length - A4 + M2);
    const ie = Q3 - M2;
    return this === m2 && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(A4, M2, Q3) : Uint8Array.prototype.set.call(m2, this.subarray(M2, Q3), A4), ie;
  }, a.prototype.fill = function(m2, A4, M2, Q3) {
    if (typeof m2 == "string") {
      if (typeof A4 == "string" ? (Q3 = A4, A4 = 0, M2 = this.length) : typeof M2 == "string" && (Q3 = M2, M2 = this.length), Q3 !== undefined && typeof Q3 != "string")
        throw new TypeError("encoding must be a string");
      if (typeof Q3 == "string" && !a.isEncoding(Q3))
        throw new TypeError("Unknown encoding: " + Q3);
      if (m2.length === 1) {
        const le = m2.charCodeAt(0);
        (Q3 === "utf8" && le < 128 || Q3 === "latin1") && (m2 = le);
      }
    } else
      typeof m2 == "number" ? m2 = m2 & 255 : typeof m2 == "boolean" && (m2 = Number(m2));
    if (A4 < 0 || this.length < A4 || this.length < M2)
      throw new RangeError("Out of range index");
    if (M2 <= A4)
      return this;
    A4 = A4 >>> 0, M2 = M2 === undefined ? this.length : M2 >>> 0, m2 || (m2 = 0);
    let ie;
    if (typeof m2 == "number")
      for (ie = A4;ie < M2; ++ie)
        this[ie] = m2;
    else {
      const le = a.isBuffer(m2) ? m2 : a.from(m2, Q3), Ee = le.length;
      if (Ee === 0)
        throw new TypeError('The value "' + m2 + '" is invalid for argument "value"');
      for (ie = 0;ie < M2 - A4; ++ie)
        this[ie + A4] = le[ie % Ee];
    }
    return this;
  };
  const Z = {};
  function oe(E2, m2, A4) {
    Z[E2] = class extends A4 {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: m2.apply(this, arguments),
          writable: true,
          configurable: true
        }), this.name = `${this.name} [${E2}]`, this.stack, delete this.name;
      }
      get code() {
        return E2;
      }
      set code(Q3) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value: Q3,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${E2}]: ${this.message}`;
      }
    };
  }
  oe("ERR_BUFFER_OUT_OF_BOUNDS", function(E2) {
    return E2 ? `${E2} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
  }, RangeError), oe("ERR_INVALID_ARG_TYPE", function(E2, m2) {
    return `The "${E2}" argument must be of type number. Received type ${typeof m2}`;
  }, TypeError), oe("ERR_OUT_OF_RANGE", function(E2, m2, A4) {
    let M2 = `The value of "${E2}" is out of range.`, Q3 = A4;
    return Number.isInteger(A4) && Math.abs(A4) > 2 ** 32 ? Q3 = de(String(A4)) : typeof A4 == "bigint" && (Q3 = String(A4), (A4 > BigInt(2) ** BigInt(32) || A4 < -(BigInt(2) ** BigInt(32))) && (Q3 = de(Q3)), Q3 += "n"), M2 += ` It must be ${m2}. Received ${Q3}`, M2;
  }, RangeError);
  function de(E2) {
    let m2 = "", A4 = E2.length;
    const M2 = E2[0] === "-" ? 1 : 0;
    for (;A4 >= M2 + 4; A4 -= 3)
      m2 = `_${E2.slice(A4 - 3, A4)}${m2}`;
    return `${E2.slice(0, A4)}${m2}`;
  }
  function R4(E2, m2, A4) {
    re(m2, "offset"), (E2[m2] === undefined || E2[m2 + A4] === undefined) && ne(m2, E2.length - (A4 + 1));
  }
  function k(E2, m2, A4, M2, Q3, ie) {
    if (E2 > A4 || E2 < m2) {
      const le = typeof m2 == "bigint" ? "n" : "";
      let Ee;
      throw ie > 3 ? m2 === 0 || m2 === BigInt(0) ? Ee = `>= 0${le} and < 2${le} ** ${(ie + 1) * 8}${le}` : Ee = `>= -(2${le} ** ${(ie + 1) * 8 - 1}${le}) and < 2 ** ${(ie + 1) * 8 - 1}${le}` : Ee = `>= ${m2}${le} and <= ${A4}${le}`, new Z.ERR_OUT_OF_RANGE("value", Ee, E2);
    }
    R4(M2, Q3, ie);
  }
  function re(E2, m2) {
    if (typeof E2 != "number")
      throw new Z.ERR_INVALID_ARG_TYPE(m2, "number", E2);
  }
  function ne(E2, m2, A4) {
    throw Math.floor(E2) !== E2 ? (re(E2, A4), new Z.ERR_OUT_OF_RANGE(A4 || "offset", "an integer", E2)) : m2 < 0 ? new Z.ERR_BUFFER_OUT_OF_BOUNDS : new Z.ERR_OUT_OF_RANGE(A4 || "offset", `>= ${A4 ? 1 : 0} and <= ${m2}`, E2);
  }
  const Ae = /[^+/0-9A-Za-z-_]/g;
  function C(E2) {
    if (E2 = E2.split("=")[0], E2 = E2.trim().replace(Ae, ""), E2.length < 2)
      return "";
    for (;E2.length % 4 !== 0; )
      E2 = E2 + "=";
    return E2;
  }
  function v(E2, m2) {
    m2 = m2 || 1 / 0;
    let A4;
    const M2 = E2.length;
    let Q3 = null;
    const ie = [];
    for (let le = 0;le < M2; ++le) {
      if (A4 = E2.charCodeAt(le), A4 > 55295 && A4 < 57344) {
        if (!Q3) {
          if (A4 > 56319) {
            (m2 -= 3) > -1 && ie.push(239, 191, 189);
            continue;
          } else if (le + 1 === M2) {
            (m2 -= 3) > -1 && ie.push(239, 191, 189);
            continue;
          }
          Q3 = A4;
          continue;
        }
        if (A4 < 56320) {
          (m2 -= 3) > -1 && ie.push(239, 191, 189), Q3 = A4;
          continue;
        }
        A4 = (Q3 - 55296 << 10 | A4 - 56320) + 65536;
      } else
        Q3 && (m2 -= 3) > -1 && ie.push(239, 191, 189);
      if (Q3 = null, A4 < 128) {
        if ((m2 -= 1) < 0)
          break;
        ie.push(A4);
      } else if (A4 < 2048) {
        if ((m2 -= 2) < 0)
          break;
        ie.push(A4 >> 6 | 192, A4 & 63 | 128);
      } else if (A4 < 65536) {
        if ((m2 -= 3) < 0)
          break;
        ie.push(A4 >> 12 | 224, A4 >> 6 & 63 | 128, A4 & 63 | 128);
      } else if (A4 < 1114112) {
        if ((m2 -= 4) < 0)
          break;
        ie.push(A4 >> 18 | 240, A4 >> 12 & 63 | 128, A4 >> 6 & 63 | 128, A4 & 63 | 128);
      } else
        throw new Error("Invalid code point");
    }
    return ie;
  }
  function w2(E2) {
    const m2 = [];
    for (let A4 = 0;A4 < E2.length; ++A4)
      m2.push(E2.charCodeAt(A4) & 255);
    return m2;
  }
  function D(E2, m2) {
    let A4, M2, Q3;
    const ie = [];
    for (let le = 0;le < E2.length && !((m2 -= 2) < 0); ++le)
      A4 = E2.charCodeAt(le), M2 = A4 >> 8, Q3 = A4 % 256, ie.push(Q3), ie.push(M2);
    return ie;
  }
  function J3(E2) {
    return e.toByteArray(C(E2));
  }
  function ae(E2, m2, A4, M2) {
    let Q3;
    for (Q3 = 0;Q3 < M2 && !(Q3 + A4 >= m2.length || Q3 >= E2.length); ++Q3)
      m2[Q3 + A4] = E2[Q3];
    return Q3;
  }
  function ue(E2, m2) {
    return E2 instanceof m2 || E2 != null && E2.constructor != null && E2.constructor.name != null && E2.constructor.name === m2.name;
  }
  function Se(E2) {
    return E2 !== E2;
  }
  const _e = function() {
    const E2 = "0123456789abcdef", m2 = new Array(256);
    for (let A4 = 0;A4 < 16; ++A4) {
      const M2 = A4 * 16;
      for (let Q3 = 0;Q3 < 16; ++Q3)
        m2[M2 + Q3] = E2[A4] + E2[Q3];
    }
    return m2;
  }();
  function we(E2) {
    return typeof BigInt > "u" ? Ne : E2;
  }
  function Ne() {
    throw new Error("BigInt not supported");
  }
})(L02);
/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var ab = na("simple-peer");
var B0 = ay;
var td = _c;
var lb = oa;
var Nl = ib;
var Be = sb;
var { Buffer: cb } = L02;
var Ll = 64 * 1024;
var ub = 5 * 1000;
var fb = 5 * 1000;
function rd(t) {
  return t.replace(/a=ice-options:trickle\s\n/g, "");
}
function db(t) {
  console.warn(t);
}

class zn3 extends lb.Duplex {
  constructor(e) {
    if (e = Object.assign({
      allowHalfOpen: false
    }, e), super(e), this._id = td(4).toString("hex").slice(0, 7), this._debug("new peer %o", e), this.channelName = e.initiator ? e.channelName || td(20).toString("hex") : null, this.initiator = e.initiator || false, this.channelConfig = e.channelConfig || zn3.channelConfig, this.channelNegotiated = this.channelConfig.negotiated, this.config = Object.assign({}, zn3.config, e.config), this.offerOptions = e.offerOptions || {}, this.answerOptions = e.answerOptions || {}, this.sdpTransform = e.sdpTransform || ((r) => r), this.streams = e.streams || (e.stream ? [e.stream] : []), this.trickle = e.trickle !== undefined ? e.trickle : true, this.allowHalfTrickle = e.allowHalfTrickle !== undefined ? e.allowHalfTrickle : false, this.iceCompleteTimeout = e.iceCompleteTimeout || ub, this.destroyed = false, this.destroying = false, this._connected = false, this.remoteAddress = undefined, this.remoteFamily = undefined, this.remotePort = undefined, this.localAddress = undefined, this.localFamily = undefined, this.localPort = undefined, this._wrtc = e.wrtc && typeof e.wrtc == "object" ? e.wrtc : B0(), !this._wrtc)
      throw Be(typeof window > "u" ? new Error("No WebRTC support: Specify `opts.wrtc` option in this environment") : new Error("No WebRTC support: Not a supported browser"), "ERR_WEBRTC_SUPPORT");
    this._pcReady = false, this._channelReady = false, this._iceComplete = false, this._iceCompleteTimer = null, this._channel = null, this._pendingCandidates = [], this._isNegotiating = false, this._firstNegotiation = true, this._batchedNegotiation = false, this._queuedNegotiation = false, this._sendersAwaitingStable = [], this._senderMap = /* @__PURE__ */ new Map, this._closingInterval = null, this._remoteTracks = [], this._remoteStreams = [], this._chunk = null, this._cb = null, this._interval = null;
    try {
      this._pc = new this._wrtc.RTCPeerConnection(this.config);
    } catch (r) {
      this.destroy(Be(r, "ERR_PC_CONSTRUCTOR"));
      return;
    }
    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId == "number", this._pc.oniceconnectionstatechange = () => {
      this._onIceStateChange();
    }, this._pc.onicegatheringstatechange = () => {
      this._onIceStateChange();
    }, this._pc.onconnectionstatechange = () => {
      this._onConnectionStateChange();
    }, this._pc.onsignalingstatechange = () => {
      this._onSignalingStateChange();
    }, this._pc.onicecandidate = (r) => {
      this._onIceCandidate(r);
    }, typeof this._pc.peerIdentity == "object" && this._pc.peerIdentity.catch((r) => {
      this.destroy(Be(r, "ERR_PC_PEER_IDENTITY"));
    }), this.initiator || this.channelNegotiated ? this._setupData({
      channel: this._pc.createDataChannel(this.channelName, this.channelConfig)
    }) : this._pc.ondatachannel = (r) => {
      this._setupData(r);
    }, this.streams && this.streams.forEach((r) => {
      this.addStream(r);
    }), this._pc.ontrack = (r) => {
      this._onTrack(r);
    }, this._debug("initial negotiation"), this._needsNegotiation(), this._onFinishBound = () => {
      this._onFinish();
    }, this.once("finish", this._onFinishBound);
  }
  get bufferSize() {
    return this._channel && this._channel.bufferedAmount || 0;
  }
  get connected() {
    return this._connected && this._channel.readyState === "open";
  }
  address() {
    return { port: this.localPort, family: this.localFamily, address: this.localAddress };
  }
  signal(e) {
    if (!this.destroying) {
      if (this.destroyed)
        throw Be(new Error("cannot signal after peer is destroyed"), "ERR_DESTROYED");
      if (typeof e == "string")
        try {
          e = JSON.parse(e);
        } catch {
          e = {};
        }
      this._debug("signal()"), e.renegotiate && this.initiator && (this._debug("got request to renegotiate"), this._needsNegotiation()), e.transceiverRequest && this.initiator && (this._debug("got request for transceiver"), this.addTransceiver(e.transceiverRequest.kind, e.transceiverRequest.init)), e.candidate && (this._pc.remoteDescription && this._pc.remoteDescription.type ? this._addIceCandidate(e.candidate) : this._pendingCandidates.push(e.candidate)), e.sdp && this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(e)).then(() => {
        this.destroyed || (this._pendingCandidates.forEach((r) => {
          this._addIceCandidate(r);
        }), this._pendingCandidates = [], this._pc.remoteDescription.type === "offer" && this._createAnswer());
      }).catch((r) => {
        this.destroy(Be(r, "ERR_SET_REMOTE_DESCRIPTION"));
      }), !e.sdp && !e.candidate && !e.renegotiate && !e.transceiverRequest && this.destroy(Be(new Error("signal() called with invalid signal data"), "ERR_SIGNALING"));
    }
  }
  _addIceCandidate(e) {
    const r = new this._wrtc.RTCIceCandidate(e);
    this._pc.addIceCandidate(r).catch((n) => {
      !r.address || r.address.endsWith(".local") ? db("Ignoring unsupported ICE candidate.") : this.destroy(Be(n, "ERR_ADD_ICE_CANDIDATE"));
    });
  }
  send(e) {
    if (!this.destroying) {
      if (this.destroyed)
        throw Be(new Error("cannot send after peer is destroyed"), "ERR_DESTROYED");
      this._channel.send(e);
    }
  }
  addTransceiver(e, r) {
    if (!this.destroying) {
      if (this.destroyed)
        throw Be(new Error("cannot addTransceiver after peer is destroyed"), "ERR_DESTROYED");
      if (this._debug("addTransceiver()"), this.initiator)
        try {
          this._pc.addTransceiver(e, r), this._needsNegotiation();
        } catch (n) {
          this.destroy(Be(n, "ERR_ADD_TRANSCEIVER"));
        }
      else
        this.emit("signal", {
          type: "transceiverRequest",
          transceiverRequest: { kind: e, init: r }
        });
    }
  }
  addStream(e) {
    if (!this.destroying) {
      if (this.destroyed)
        throw Be(new Error("cannot addStream after peer is destroyed"), "ERR_DESTROYED");
      this._debug("addStream()"), e.getTracks().forEach((r) => {
        this.addTrack(r, e);
      });
    }
  }
  addTrack(e, r) {
    if (this.destroying)
      return;
    if (this.destroyed)
      throw Be(new Error("cannot addTrack after peer is destroyed"), "ERR_DESTROYED");
    this._debug("addTrack()");
    const n = this._senderMap.get(e) || /* @__PURE__ */ new Map;
    let i = n.get(r);
    if (!i)
      i = this._pc.addTrack(e, r), n.set(r, i), this._senderMap.set(e, n), this._needsNegotiation();
    else
      throw i.removed ? Be(new Error("Track has been removed. You should enable/disable tracks that you want to re-add."), "ERR_SENDER_REMOVED") : Be(new Error("Track has already been added to that stream."), "ERR_SENDER_ALREADY_ADDED");
  }
  replaceTrack(e, r, n) {
    if (this.destroying)
      return;
    if (this.destroyed)
      throw Be(new Error("cannot replaceTrack after peer is destroyed"), "ERR_DESTROYED");
    this._debug("replaceTrack()");
    const i = this._senderMap.get(e), o = i ? i.get(n) : null;
    if (!o)
      throw Be(new Error("Cannot replace track that was never added."), "ERR_TRACK_NOT_ADDED");
    r && this._senderMap.set(r, i), o.replaceTrack != null ? o.replaceTrack(r) : this.destroy(Be(new Error("replaceTrack is not supported in this browser"), "ERR_UNSUPPORTED_REPLACETRACK"));
  }
  removeTrack(e, r) {
    if (this.destroying)
      return;
    if (this.destroyed)
      throw Be(new Error("cannot removeTrack after peer is destroyed"), "ERR_DESTROYED");
    this._debug("removeSender()");
    const n = this._senderMap.get(e), i = n ? n.get(r) : null;
    if (!i)
      throw Be(new Error("Cannot remove track that was never added."), "ERR_TRACK_NOT_ADDED");
    try {
      i.removed = true, this._pc.removeTrack(i);
    } catch (o) {
      o.name === "NS_ERROR_UNEXPECTED" ? this._sendersAwaitingStable.push(i) : this.destroy(Be(o, "ERR_REMOVE_TRACK"));
    }
    this._needsNegotiation();
  }
  removeStream(e) {
    if (!this.destroying) {
      if (this.destroyed)
        throw Be(new Error("cannot removeStream after peer is destroyed"), "ERR_DESTROYED");
      this._debug("removeSenders()"), e.getTracks().forEach((r) => {
        this.removeTrack(r, e);
      });
    }
  }
  _needsNegotiation() {
    this._debug("_needsNegotiation"), !this._batchedNegotiation && (this._batchedNegotiation = true, Nl(() => {
      this._batchedNegotiation = false, this.initiator || !this._firstNegotiation ? (this._debug("starting batched negotiation"), this.negotiate()) : this._debug("non-initiator initial negotiation request discarded"), this._firstNegotiation = false;
    }));
  }
  negotiate() {
    if (!this.destroying) {
      if (this.destroyed)
        throw Be(new Error("cannot negotiate after peer is destroyed"), "ERR_DESTROYED");
      this.initiator ? this._isNegotiating ? (this._queuedNegotiation = true, this._debug("already negotiating, queueing")) : (this._debug("start negotiation"), setTimeout(() => {
        this._createOffer();
      }, 0)) : this._isNegotiating ? (this._queuedNegotiation = true, this._debug("already negotiating, queueing")) : (this._debug("requesting negotiation from initiator"), this.emit("signal", {
        type: "renegotiate",
        renegotiate: true
      })), this._isNegotiating = true;
    }
  }
  destroy(e) {
    this._destroy(e, () => {
    });
  }
  _destroy(e, r) {
    this.destroyed || this.destroying || (this.destroying = true, this._debug("destroying (error: %s)", e && (e.message || e)), Nl(() => {
      if (this.destroyed = true, this.destroying = false, this._debug("destroy (error: %s)", e && (e.message || e)), this.readable = this.writable = false, this._readableState.ended || this.push(null), this._writableState.finished || this.end(), this._connected = false, this._pcReady = false, this._channelReady = false, this._remoteTracks = null, this._remoteStreams = null, this._senderMap = null, clearInterval(this._closingInterval), this._closingInterval = null, clearInterval(this._interval), this._interval = null, this._chunk = null, this._cb = null, this._onFinishBound && this.removeListener("finish", this._onFinishBound), this._onFinishBound = null, this._channel) {
        try {
          this._channel.close();
        } catch {
        }
        this._channel.onmessage = null, this._channel.onopen = null, this._channel.onclose = null, this._channel.onerror = null;
      }
      if (this._pc) {
        try {
          this._pc.close();
        } catch {
        }
        this._pc.oniceconnectionstatechange = null, this._pc.onicegatheringstatechange = null, this._pc.onsignalingstatechange = null, this._pc.onicecandidate = null, this._pc.ontrack = null, this._pc.ondatachannel = null;
      }
      this._pc = null, this._channel = null, e && this.emit("error", e), this.emit("close"), r();
    }));
  }
  _setupData(e) {
    if (!e.channel)
      return this.destroy(Be(new Error("Data channel event is missing `channel` property"), "ERR_DATA_CHANNEL"));
    this._channel = e.channel, this._channel.binaryType = "arraybuffer", typeof this._channel.bufferedAmountLowThreshold == "number" && (this._channel.bufferedAmountLowThreshold = Ll), this.channelName = this._channel.label, this._channel.onmessage = (n) => {
      this._onChannelMessage(n);
    }, this._channel.onbufferedamountlow = () => {
      this._onChannelBufferedAmountLow();
    }, this._channel.onopen = () => {
      this._onChannelOpen();
    }, this._channel.onclose = () => {
      this._onChannelClose();
    }, this._channel.onerror = (n) => {
      const i = n.error instanceof Error ? n.error : new Error(`Datachannel error: ${n.message} ${n.filename}:${n.lineno}:${n.colno}`);
      this.destroy(Be(i, "ERR_DATA_CHANNEL"));
    };
    let r = false;
    this._closingInterval = setInterval(() => {
      this._channel && this._channel.readyState === "closing" ? (r && this._onChannelClose(), r = true) : r = false;
    }, fb);
  }
  _read() {
  }
  _write(e, r, n) {
    if (this.destroyed)
      return n(Be(new Error("cannot write after peer is destroyed"), "ERR_DATA_CHANNEL"));
    if (this._connected) {
      try {
        this.send(e);
      } catch (i) {
        return this.destroy(Be(i, "ERR_DATA_CHANNEL"));
      }
      this._channel.bufferedAmount > Ll ? (this._debug("start backpressure: bufferedAmount %d", this._channel.bufferedAmount), this._cb = n) : n(null);
    } else
      this._debug("write before connect"), this._chunk = e, this._cb = n;
  }
  _onFinish() {
    if (this.destroyed)
      return;
    const e = () => {
      setTimeout(() => this.destroy(), 1000);
    };
    this._connected ? e() : this.once("connect", e);
  }
  _startIceCompleteTimeout() {
    this.destroyed || this._iceCompleteTimer || (this._debug("started iceComplete timeout"), this._iceCompleteTimer = setTimeout(() => {
      this._iceComplete || (this._iceComplete = true, this._debug("iceComplete timeout completed"), this.emit("iceTimeout"), this.emit("_iceComplete"));
    }, this.iceCompleteTimeout));
  }
  _createOffer() {
    this.destroyed || this._pc.createOffer(this.offerOptions).then((e) => {
      if (this.destroyed)
        return;
      !this.trickle && !this.allowHalfTrickle && (e.sdp = rd(e.sdp)), e.sdp = this.sdpTransform(e.sdp);
      const r = () => {
        if (this.destroyed)
          return;
        const o = this._pc.localDescription || e;
        this._debug("signal"), this.emit("signal", {
          type: o.type,
          sdp: o.sdp
        });
      }, n = () => {
        this._debug("createOffer success"), !this.destroyed && (this.trickle || this._iceComplete ? r() : this.once("_iceComplete", r));
      }, i = (o) => {
        this.destroy(Be(o, "ERR_SET_LOCAL_DESCRIPTION"));
      };
      this._pc.setLocalDescription(e).then(n).catch(i);
    }).catch((e) => {
      this.destroy(Be(e, "ERR_CREATE_OFFER"));
    });
  }
  _requestMissingTransceivers() {
    this._pc.getTransceivers && this._pc.getTransceivers().forEach((e) => {
      !e.mid && e.sender.track && !e.requested && (e.requested = true, this.addTransceiver(e.sender.track.kind));
    });
  }
  _createAnswer() {
    this.destroyed || this._pc.createAnswer(this.answerOptions).then((e) => {
      if (this.destroyed)
        return;
      !this.trickle && !this.allowHalfTrickle && (e.sdp = rd(e.sdp)), e.sdp = this.sdpTransform(e.sdp);
      const r = () => {
        if (this.destroyed)
          return;
        const o = this._pc.localDescription || e;
        this._debug("signal"), this.emit("signal", {
          type: o.type,
          sdp: o.sdp
        }), this.initiator || this._requestMissingTransceivers();
      }, n = () => {
        this.destroyed || (this.trickle || this._iceComplete ? r() : this.once("_iceComplete", r));
      }, i = (o) => {
        this.destroy(Be(o, "ERR_SET_LOCAL_DESCRIPTION"));
      };
      this._pc.setLocalDescription(e).then(n).catch(i);
    }).catch((e) => {
      this.destroy(Be(e, "ERR_CREATE_ANSWER"));
    });
  }
  _onConnectionStateChange() {
    this.destroyed || this._pc.connectionState === "failed" && this.destroy(Be(new Error("Connection failed."), "ERR_CONNECTION_FAILURE"));
  }
  _onIceStateChange() {
    if (this.destroyed)
      return;
    const e = this._pc.iceConnectionState, r = this._pc.iceGatheringState;
    this._debug("iceStateChange (connection: %s) (gathering: %s)", e, r), this.emit("iceStateChange", e, r), (e === "connected" || e === "completed") && (this._pcReady = true, this._maybeReady()), e === "failed" && this.destroy(Be(new Error("Ice connection failed."), "ERR_ICE_CONNECTION_FAILURE")), e === "closed" && this.destroy(Be(new Error("Ice connection closed."), "ERR_ICE_CONNECTION_CLOSED"));
  }
  getStats(e) {
    const r = (n) => (Object.prototype.toString.call(n.values) === "[object Array]" && n.values.forEach((i) => {
      Object.assign(n, i);
    }), n);
    this._pc.getStats.length === 0 || this._isReactNativeWebrtc ? this._pc.getStats().then((n) => {
      const i = [];
      n.forEach((o) => {
        i.push(r(o));
      }), e(null, i);
    }, (n) => e(n)) : this._pc.getStats.length > 0 ? this._pc.getStats((n) => {
      if (this.destroyed)
        return;
      const i = [];
      n.result().forEach((o) => {
        const s = {};
        o.names().forEach((a) => {
          s[a] = o.stat(a);
        }), s.id = o.id, s.type = o.type, s.timestamp = o.timestamp, i.push(r(s));
      }), e(null, i);
    }, (n) => e(n)) : e(null, []);
  }
  _maybeReady() {
    if (this._debug("maybeReady pc %s channel %s", this._pcReady, this._channelReady), this._connected || this._connecting || !this._pcReady || !this._channelReady)
      return;
    this._connecting = true;
    const e = () => {
      this.destroyed || this.getStats((r, n) => {
        if (this.destroyed)
          return;
        r && (n = []);
        const i = {}, o = {}, s = {};
        let a = false;
        n.forEach((c2) => {
          (c2.type === "remotecandidate" || c2.type === "remote-candidate") && (i[c2.id] = c2), (c2.type === "localcandidate" || c2.type === "local-candidate") && (o[c2.id] = c2), (c2.type === "candidatepair" || c2.type === "candidate-pair") && (s[c2.id] = c2);
        });
        const l = (c2) => {
          a = true;
          let u = o[c2.localCandidateId];
          u && (u.ip || u.address) ? (this.localAddress = u.ip || u.address, this.localPort = Number(u.port)) : u && u.ipAddress ? (this.localAddress = u.ipAddress, this.localPort = Number(u.portNumber)) : typeof c2.googLocalAddress == "string" && (u = c2.googLocalAddress.split(":"), this.localAddress = u[0], this.localPort = Number(u[1])), this.localAddress && (this.localFamily = this.localAddress.includes(":") ? "IPv6" : "IPv4");
          let f2 = i[c2.remoteCandidateId];
          f2 && (f2.ip || f2.address) ? (this.remoteAddress = f2.ip || f2.address, this.remotePort = Number(f2.port)) : f2 && f2.ipAddress ? (this.remoteAddress = f2.ipAddress, this.remotePort = Number(f2.portNumber)) : typeof c2.googRemoteAddress == "string" && (f2 = c2.googRemoteAddress.split(":"), this.remoteAddress = f2[0], this.remotePort = Number(f2[1])), this.remoteAddress && (this.remoteFamily = this.remoteAddress.includes(":") ? "IPv6" : "IPv4"), this._debug("connect local: %s:%s remote: %s:%s", this.localAddress, this.localPort, this.remoteAddress, this.remotePort);
        };
        if (n.forEach((c2) => {
          c2.type === "transport" && c2.selectedCandidatePairId && l(s[c2.selectedCandidatePairId]), (c2.type === "googCandidatePair" && c2.googActiveConnection === "true" || (c2.type === "candidatepair" || c2.type === "candidate-pair") && c2.selected) && l(c2);
        }), !a && (!Object.keys(s).length || Object.keys(o).length)) {
          setTimeout(e, 100);
          return;
        } else
          this._connecting = false, this._connected = true;
        if (this._chunk) {
          try {
            this.send(this._chunk);
          } catch (u) {
            return this.destroy(Be(u, "ERR_DATA_CHANNEL"));
          }
          this._chunk = null, this._debug('sent chunk from "write before connect"');
          const c2 = this._cb;
          this._cb = null, c2(null);
        }
        typeof this._channel.bufferedAmountLowThreshold != "number" && (this._interval = setInterval(() => this._onInterval(), 150), this._interval.unref && this._interval.unref()), this._debug("connect"), this.emit("connect");
      });
    };
    e();
  }
  _onInterval() {
    !this._cb || !this._channel || this._channel.bufferedAmount > Ll || this._onChannelBufferedAmountLow();
  }
  _onSignalingStateChange() {
    this.destroyed || (this._pc.signalingState === "stable" && (this._isNegotiating = false, this._debug("flushing sender queue", this._sendersAwaitingStable), this._sendersAwaitingStable.forEach((e) => {
      this._pc.removeTrack(e), this._queuedNegotiation = true;
    }), this._sendersAwaitingStable = [], this._queuedNegotiation ? (this._debug("flushing negotiation queue"), this._queuedNegotiation = false, this._needsNegotiation()) : (this._debug("negotiated"), this.emit("negotiated"))), this._debug("signalingStateChange %s", this._pc.signalingState), this.emit("signalingStateChange", this._pc.signalingState));
  }
  _onIceCandidate(e) {
    this.destroyed || (e.candidate && this.trickle ? this.emit("signal", {
      type: "candidate",
      candidate: {
        candidate: e.candidate.candidate,
        sdpMLineIndex: e.candidate.sdpMLineIndex,
        sdpMid: e.candidate.sdpMid
      }
    }) : !e.candidate && !this._iceComplete && (this._iceComplete = true, this.emit("_iceComplete")), e.candidate && this._startIceCompleteTimeout());
  }
  _onChannelMessage(e) {
    if (this.destroyed)
      return;
    let r = e.data;
    r instanceof ArrayBuffer && (r = cb.from(r)), this.push(r);
  }
  _onChannelBufferedAmountLow() {
    if (this.destroyed || !this._cb)
      return;
    this._debug("ending backpressure: bufferedAmount %d", this._channel.bufferedAmount);
    const e = this._cb;
    this._cb = null, e(null);
  }
  _onChannelOpen() {
    this._connected || this.destroyed || (this._debug("on channel open"), this._channelReady = true, this._maybeReady());
  }
  _onChannelClose() {
    this.destroyed || (this._debug("on channel close"), this.destroy());
  }
  _onTrack(e) {
    this.destroyed || e.streams.forEach((r) => {
      this._debug("on track"), this.emit("track", e.track, r), this._remoteTracks.push({
        track: e.track,
        stream: r
      }), !this._remoteStreams.some((n) => n.id === r.id) && (this._remoteStreams.push(r), Nl(() => {
        this._debug("on stream"), this.emit("stream", r);
      }));
    });
  }
  _debug() {
    const e = [].slice.call(arguments);
    e[0] = "[" + this._id + "] " + e[0], ab.apply(null, e);
  }
}
zn3.WEBRTC_SUPPORT = !!B0();
zn3.config = {
  iceServers: [
    {
      urls: [
        "stun:stun.l.google.com:19302",
        "stun:globalThis.stun.twilio.com:3478"
      ]
    }
  ],
  sdpSemantics: "unified-plan"
};
zn3.channelConfig = {};
var nd = zn3;
function Ce() {
  localStorage.getItem("debug") === "true" && console.log(...arguments);
}
typeof window < "u" && (window.process = {
  ...window.process,
  nextTick: function(t, e, r, n) {
    setTimeout(() => {
      t(e, r, n);
    }, 0);
  }
}, window.process.env = window.process.env || {});
function hb(t) {
  t = t.replace(/#/g, "");
  var e = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  t = t.replace(e, function(n, i, o, s) {
    return i + i + o + o + s + s;
  });
  var r = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);
  return r ? {
    r: parseInt(r[1], 16),
    g: parseInt(r[2], 16),
    b: parseInt(r[3], 16),
    hexString: `#${t}`,
    hex: parseInt(r[1], 16) << 16 | parseInt(r[2], 16) << 8 | parseInt(r[3], 16)
  } : null;
}

class pb extends gu {
  constructor({
    websocketSend: e,
    id: r,
    myId: n,
    isRenderServer: i,
    isRenderServerOrHostIfNotCasting: o,
    playerIsSpectator: s,
    playerIsProxy: a,
    broadcastUnreliable: l,
    setPlayerState: c2,
    getBootDate: u,
    avatarList: f2,
    kickPlayer: d,
    state: h = {},
    defaultPlayerState: g2 = {}
  }) {
    super(), this.websocketSend = e, this.broadcastUnreliable = l, this.setPlayerState = c2, this.myId = n, this._kickPlayerTrigger = d, this.id = r, this.avatarList = f2, this.syncIntervalTime = p02.SyncIntervalTime, this.isRenderServer = i, this.isRenderServerOrHostIfNotCasting = o, this.playerIsSpectator = s, this.playerIsProxy = a, this.state = h, this.defaultPlayerState = g2, this.iUpdatedStateAt = {}, this.playerIsProxy && (this.state.__proxyBy = n), this.getBootDate = u, this.stateKeyUpdateOrder = {}, this.inputState = {}, this.peer = null, this.webrtcConnected = false, this.webrtcRetryCount = 0, this.controllerLegacy = false, this.heartbeatInterval = 0, this.retryWebRtcTimeout = 0, this.isDestroyed = false, this.timeDiffFromServer = 0, this.bot = undefined, this.on("input_broadcast", (p) => {
      !o() && !s && this.send({ pinput: p });
    });
  }
  send(e, r, n) {
    if (this.webrtcConnected && !r && !this.playerIsProxy)
      try {
        Ce("sending unreliable", e, r, "webrtcConnected", this.webrtcConnected), this.peer.send(JSON.stringify(e));
      } catch (i) {
        Ce(i);
      }
    else
      !r && this.isRenderServerOrHostIfNotCasting() && !n ? this.broadcastUnreliable(e) : this.playerIsProxy || (this.isRenderServerOrHostIfNotCasting() && (e.for = this.id), Ce("sending reliable", e, r, "webrtcConnected", this.webrtcConnected), this.websocketSend(JSON.stringify(e)));
  }
  startWebrtc() {
    if (this.retryWebRtcTimeout && (clearTimeout(this.retryWebRtcTimeout), this.retryWebRtcTimeout = 0), this.peer && this.peer.destroy(), !this.isRenderServerOrHostIfNotCasting() && this.myId === this.id) {
      Ce("webrtc::connecting", "not render server, isMyId");
      try {
        this.peer = new nd({ initiator: true, objectMode: true });
      } catch (e) {
        Ce(this._idToHuman(), "::webrtc:", "connection error", e), this.webrtcConnected = false;
        return;
      }
      this.peer.on("signal", (e) => {
        Ce("got signal", e), this.send({ signal: e }, true);
      }), this.peer.on("connect", () => {
        this.webrtcConnected = true, this.webrtcRetryCount = 0, this.emit("webrtc_connected"), clearTimeout(this.retryWebRtcTimeout);
      }), this.peer.on("data", (e) => {
        e = JSON.parse(e), Ce("webrtc::host says:", e), e.ping ? (this.timeDiffFromServer = e.ping - Date.now(), this.send({ pong: e.ping })) : e.pstate ? this.setPlayerState(e) : e.gstate && this.emit("global_state_unreliable", e.gstate);
      }), this.peer.on("stream", (e) => {
        this.emit("stream", e);
      }), this.peer.on("close", () => {
        Ce(this._idToHuman(), "::webrtc:", "connection closed"), this.webrtcConnected = false, this.retryWebRtcTimeout = setTimeout(() => {
          !this.isDestroyed && this.webrtcRetryCount < 5 && (this.startWebrtc(), this.webrtcRetryCount++);
        }, 3000);
      }), this.peer.on("error", (e) => {
        Ce(this._idToHuman(), "::webrtc:", "connection error", e), this.webrtcConnected = false;
      });
    } else if (this.isRenderServerOrHostIfNotCasting() && this.myId !== this.id) {
      Ce("webrtc::connecting", "is render server, notMyId"), clearInterval(this.heartbeatInterval), this.heartbeatInterval = setInterval(() => {
        this.send({
          ping: Date.now()
        });
      }, 5000);
      try {
        this.peer = new nd({ objectMode: true });
      } catch (e) {
        Ce(this._idToHuman(), "::webrtc:", "connection error", e), this.webrtcConnected = false;
        return;
      }
      this.peer.on("signal", (e) => {
        Ce("got signal", e), this.send({ for: this.id, signal: e }, true);
      }), this.peer.on("connect", () => {
        Ce("connected to player via webrtc"), this.webrtcConnected = true, this.send({ ping: Date.now() }), this.emit("webrtc_connected");
      }), this.peer.on("data", (e) => {
        Ce(this._idToHuman(), "::webrtc:", e), e = JSON.parse(e), e.pinput ? this.handleInput(e.pinput) : e.pstate ? this.setState(e.d[0], e.d[1]) : e.pong && this.handlePingResponse(e);
      }), this.peer.on("close", () => {
        this.webrtcConnected = false, Ce(this._idToHuman(), "::webrtc:", "connection closed");
      }), this.peer.on("error", (e) => {
        this.webrtcConnected = false, Ce(this._idToHuman(), "::webrtc:", "connection error", e);
      });
    }
  }
  _idToHuman() {
    return `${this.playerIsSpectator ? "spectator" : "player"}(${this.id})`;
  }
  signal(e) {
    this.peer.destroyed && this.isRenderServerOrHostIfNotCasting() && this.startWebrtc();
    try {
      Ce("signaling", e), this.peer.signal(e);
    } catch (r) {
      Ce(r);
    }
  }
  handlePingResponse(e) {
    var r = Date.now() - e.pong;
    this.emit("ping", r);
  }
  attachControllerLegacy(e) {
    this.detachControllerLegacy(), this.controllerLegacy = e, this.controllerLegacy.on("keydown", this.handleKeyDown.bind(this)), this.controllerLegacy.on("keyup", this.handleKeyUp.bind(this)), this.controllerLegacy.on("dpad", this.handleDpad.bind(this)), this.controllerLegacy.on("gyro", this.handleGyro.bind(this));
  }
  detachControllerLegacy() {
    if (this.controllerLegacy) {
      const e = this.controllerLegacy;
      return this.controllerLegacy.off("keydown", this.handleKeyDown), this.controllerLegacy.off("keyup", this.handleKeyUp), this.controllerLegacy.off("dpad", this.handleDpad), this.controllerLegacy.off("gyro", this.handleGyro), delete this.controllerLegacy, e;
    }
  }
  onKeyPress(e, r) {
    this.on("keypress", (n) => {
      n.key === e && r(n);
    });
  }
  onKeyUp(e, r) {
    this.on("keyup", (n) => {
      n.key === e && r(n);
    });
  }
  onKeyDown(e, r) {
    this.on("keydown", (n) => {
      n.key === e && r(n);
    });
  }
  onQuit(e) {
    return this.on("quit", e);
  }
  handleKeyDown(e) {
    this.handleInput({ keydown: e });
  }
  handleKeyUp(e) {
    this.handleInput({ keyup: e });
  }
  handleDpad(e) {
    this.handleInput({ dpad: e });
  }
  handleGyro(e) {
    this.handleInput({ gyro: e });
  }
  handleInput(e, r) {
    let n = false;
    Object.keys(e).forEach((i) => {
      const o = e[i];
      i === "keydown" && !this.inputState[o] && (this.inputState[o] = true, this.emit("keydown", { key: o }), this.emit("keypress", { key: o }), n = true), i === "keyup" && this.inputState[o] && (delete this.inputState[o], this.emit("keyup", { key: o }), n = true), i === "dpad" && (this.inputState.dpad = e.dpad, n = true), i === "gyro" && (this.inputState.gyro = e.gyro, n = true);
    }), n && (Ce("inputEmit", e), this.emit("input", e), r || this.emit("input_broadcast", e));
  }
  isKeyDown(e) {
    return this.inputState[e];
  }
  on(e, r, n) {
    return e === "profile" && r(this.state.profile), e === "webrtc_connected" && this.webrtcConnected && r(), super.on(e, r, n);
  }
  getState(e) {
    return e ? typeof this.state[e] == "object" ? JSON.parse(JSON.stringify(this.state[e])) : this.state[e] : this.state;
  }
  setState(e, r, n) {
    JSON.stringify(this.state[e]) !== JSON.stringify(r) && (this.setLocalState(e, r), this.iUpdatedStateAt[e] = Date.now(), this.isRenderServerOrHostIfNotCasting() && !n ? this.broadcastUnreliable({
      pstate: this.id,
      d: [e, r],
      o: Date.now() - this.getBootDate()
    }) : this.send({
      pstate: this.id,
      d: [e, r],
      o: Date.now() - this.getBootDate() - this.timeDiffFromServer
    }, n));
  }
  setFullDefaultLocalState(e) {
    Object.keys(e).forEach((r) => {
      this.setDefaultLocalState(r, e[r]);
    });
  }
  getDefaultState(e) {
    return e ? typeof this.defaultPlayerState[e] == "object" ? JSON.parse(JSON.stringify(this.defaultPlayerState[e])) : this.defaultPlayerState[e] : this.defaultPlayerState;
  }
  setDefaultState(e, r) {
    const n = typeof r == "object" ? JSON.parse(JSON.stringify(r)) : r;
    this.setDefaultLocalState(e, n) && this.send({
      default_pstate: this.id,
      d: [e, n],
      o: Date.now() - this.getBootDate() - this.timeDiffFromServer
    }, true);
  }
  setDefaultLocalState(e, r) {
    if (JSON.stringify(this.defaultPlayerState[e]) !== JSON.stringify(r))
      return this.defaultPlayerState[e] = r, true;
  }
  getProfile() {
    let e = this.getState("profile") || { color: "#ffffff", name: "" };
    return e && e.color && (e = { ...e, color: hb(e.color) }), this.avatarList && this.avatarList.length > 0 && (e.avatarIndex = this.avatarList.indexOf(e.photo)), e.avatarIndex === undefined && (e.avatarIndex = -1), e;
  }
  setRoundState(e, r, n) {
    this.setState(`round.${e}`, r, n);
  }
  getRoundState(e) {
    if (e)
      return this.getState(`round.${e}`);
    {
      let r = {};
      return Object.keys(this.getState()).forEach((n) => {
        n.startsWith("round.") && (r[n.substring(6)] = this.getState(n));
      }), r;
    }
  }
  resetRoundState() {
    Object.keys(this.getState()).forEach((e) => {
      e.startsWith("round.") && this.setState(e, undefined);
    });
  }
  setFullLocalState(e, r) {
    Object.keys(e).forEach((n) => {
      (!this.iUpdatedStateAt[n] || this.iUpdatedStateAt[n] + this.syncIntervalTime < Date.now()) && this.setLocalState(n, e[n], r);
    }), Object.keys(this.state).forEach((n) => {
      var i;
      (!this.iUpdatedStateAt[n] || this.iUpdatedStateAt[n] + this.syncIntervalTime < Date.now()) && e[n] === undefined && (Ce("set default states for the playerState", this.state[n]), this.setLocalState(n, (i = this.defaultPlayerState) == null ? undefined : i[n], r));
    });
  }
  setLocalState(e, r, n) {
    if (n && this.stateKeyUpdateOrder[e] && this.stateKeyUpdateOrder[e] > n)
      return;
    this.stateKeyUpdateOrder[e] = n || 0;
    const i = JSON.stringify(r);
    var o = false;
    JSON.stringify(this.state[e]) !== i && (o = true);
    const s = typeof r == "object" ? JSON.parse(i) : r;
    return this.state[e] = s, o && (this.emit("state", e, s), e === "profile" && this.emit("profile", s)), o;
  }
  kick() {
    return new Promise((e, r) => {
      if (!this.isRenderServerOrHostIfNotCasting()) {
        r("Only the host can kick a player.");
        return;
      }
      this._kickPlayerTrigger(this.id, e);
    });
  }
  disconnect(e) {
    Ce("[PlayerState] disconnecting with eventCode:", e), this.detachControllerLegacy(), clearInterval(this.heartbeatInterval), this.isDestroyed = true, this.peer && this.peer.destroy(), this.emit("quit", this);
  }
  isBot() {
    return this.state.__bot;
  }
  isProxyPlayer() {
    return this.state.__proxyBy;
  }
}
typeof window < "u" && (window.__TEMPSTORAGE__ = {});
function gb(t, e) {
  var r;
  window._USETEMPSTORAGE ? window.__TEMPSTORAGE__[t] = e : (r = window._PLAYROOM_CONFIG) != null && r.sessionStorage ? sessionStorage.setItem(t, e) : localStorage.setItem(t, e);
}
function mb(t) {
  var e;
  return window._USETEMPSTORAGE ? window.__TEMPSTORAGE__[t] : (e = window._PLAYROOM_CONFIG) != null && e.sessionStorage ? sessionStorage.getItem(t) : localStorage.getItem(t);
}
var xt3 = {
  set: gb,
  get: mb
};
var ja = (t = 21) => crypto.getRandomValues(new Uint8Array(t)).reduce((e, r) => (r &= 63, r < 36 ? e += r.toString(36) : r < 62 ? e += (r - 26).toString(36).toUpperCase() : r > 62 ? e += "-" : e += "_", e), "");
function F02() {
  const t = localStorage.getItem("permId") || ja(32);
  return localStorage.setItem("permId", t), t;
}
function yb() {
  const t = xt3.get("myId") || ja(12);
  return xt3.set("myId", t), t;
}
function bb(t, e) {
  return new Promise((r, n) => {
    if (t.getState(e) !== undefined)
      r();
    else {
      const i = t.on("state", (o, s) => {
        o === e && (i(), r());
      }, true);
    }
  });
}
var j02 = {};
var W0 = {};
Object.defineProperty(W0, "__esModule", { value: true });
var U0 = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: true }), t.createArrayPatch = t.createObjectPatch = t.createPatch = undefined;
  const e = (s) => (s instanceof Object && typeof s.toJSON == "function" && (s = s.toJSON()), typeof s == "function" ? s = undefined : typeof s == "number" && (s !== s || s === 1 / 0 || s === -1 / 0) && (s = null), s), r = (s, a) => (s = e(s), a = e(a), n(s, a));
  t.createPatch = r;
  const n = (s, a) => {
    if (s === undefined && (s = null), a === undefined && (a = null), s === a)
      return "none";
    if (typeof s == "object" && s !== null && (typeof a == "object" && a !== null)) {
      const u = Array.isArray(s), f2 = Array.isArray(a);
      if (u && f2)
        return (0, t.createArrayPatch)(s, a);
      if (!u && !f2)
        return (0, t.createObjectPatch)(s, a);
    }
    return "reset";
  }, i = (s, a) => {
    const l = [], c2 = {}, u = {};
    let f2 = 0, d = 0, h = 0;
    for (const p in s) {
      const y4 = e(s[p]);
      if (y4 === undefined)
        continue;
      f2 += 1;
      const b = e(a[p]);
      if (b === undefined) {
        l.push(p);
        continue;
      }
      const x = n(y4, b);
      x === "reset" ? (c2[p] = b, d += 1) : x !== "none" && (u[p] = x, h += 1);
    }
    if (f2 && l.length + d === f2)
      return "reset";
    for (const p in a) {
      const y4 = e(a[p]);
      if (y4 === undefined)
        continue;
      if (f2 === 0)
        return "reset";
      e(s[p]) === undefined && (c2[p] = y4, d += 1);
    }
    const g2 = { t: "o" };
    return l.length && (g2.r = l), d && (g2.s = c2), h && (g2.p = u), !g2.r && !g2.s && !g2.p ? "none" : g2;
  };
  t.createObjectPatch = i;
  const o = (s, a) => {
    const l = s.length, c2 = a.length;
    let u, f2, d, h, g2;
    for (h = 0;h < l && h < c2; h += 1) {
      const V = e(s[h]), te = e(a[h]);
      if (g2 = n(V, te), g2 !== "none")
        break;
    }
    if (h === l)
      return h === c2 ? "none" : { t: "a", s: [[
        l,
        0,
        ...a.slice(h, c2).map(e)
      ]] };
    if (h === c2)
      return { t: "a", s: [[h, l - h]] };
    let p = l - 1, y4 = c2 - 1, b;
    for (;p >= h && y4 >= h && (u = e(s[p]), f2 = e(a[y4]), b = n(u, f2), b === "none"); )
      p -= 1, y4 -= 1;
    if (p < h)
      return { t: "a", s: [[
        h,
        0,
        ...a.slice(h, y4 + 1).map(e)
      ]] };
    if (y4 < h)
      return { t: "a", s: [[h, p - h + 1]] };
    const x = p - h + 1, S = y4 - h + 1, O = x * S, _ = x + 1, L = new Array(O);
    L[0] = g2, L[O - 1] = b;
    let N4, j, W, G, ee, fe;
    N4 = { 1: 0 };
    e:
      for (j = 0;j < O; j++)
        for (N4 = Object.create(N4), W = -j;W <= j; W += 2) {
          for (W === -j || W !== j && N4[W - 1] < N4[W + 1] ? G = N4[W + 1] : G = N4[W - 1] + 1, ee = G - W, d = ee * x + G;d < O && G < x && ee < S && (fe = L[d], fe || (u = e(s[h + G]), f2 = e(a[h + ee]), fe = L[d] = n(u, f2)), fe !== "reset"); )
            G++, ee++, d += _;
          if (N4[W] = G, G >= x && ee >= S)
            break e;
        }
    let P = false;
    const z = {}, U = [];
    if (j === O) {
      if (h === 0 && x === l)
        return "reset";
      U.push([h, x, ...a.slice(h, y4 + 1)]);
    } else {
      W = x - S;
      let V = [NaN, NaN];
      for (;j-- >= 0; ) {
        const te = N4[W - 1] === undefined || N4[W + 1] !== undefined && N4[W - 1] < N4[W + 1];
        W = te ? W + 1 : W - 1, G = N4[W], ee = G - W;
        const X2 = h + G;
        for (te ? (ee !== -1 && (V[0] === X2 ? (f2 = e(a[h + ee]), V.splice(2, 0, f2)) : U.push(V = [X2, 0, a[h + ee]])), ee++) : (ee !== -1 && (V[0] === X2 + 1 ? (V[0] -= 1, V[1] += 1) : U.push(V = [X2, 1])), G++), d = ee * x + G;d < O && G < x && ee < S && (fe = L[d], fe !== "reset"); )
          fe !== "none" && (z[h + G] = fe, P = true), G++, ee++, d += _;
        N4 = Object.getPrototypeOf(N4);
      }
    }
    const I = { t: "a" };
    return P && (I.p = z), U.length && (I.s = U), I;
  };
  t.createArrayPatch = o;
})(U0);
var ln3 = {};
Object.defineProperty(ln3, "__esModule", { value: true });
ln3.applyArrayPatch = ln3.applyObjectPatch = ln3.applyPatch = undefined;
function z02(t = false) {
  const e = (i, o) => {
    if (o.t === "o")
      return r(i, o);
    if (o.t === "a")
      return n(i, o);
    throw Error("Invalid patch");
  }, r = (i, o) => {
    let s = t ? i : Object.assign({}, i);
    const a = o.r;
    if (a)
      for (const u of a)
        delete s[u];
    const l = o.s;
    if (l)
      for (const u in l)
        s[u] = l[u];
    const c2 = o.p;
    if (c2)
      for (const u in c2)
        s[u] = e(s[u], c2[u]);
    return s;
  }, n = (i, o) => {
    const s = t ? i : [...i], a = o.p;
    if (a)
      for (const c2 in a)
        s[c2] = e(s[c2], a[c2]);
    const l = o.s;
    if (l)
      for (let c2 of l)
        s.splice(...c2);
    return s;
  };
  return { applyPatch: e, applyObjectPatch: r, applyArrayPatch: n };
}
var yu = z02();
var bu = z02(true);
ln3.applyPatch = Object.assign(yu.applyPatch, {
  inPlace: bu.applyPatch
});
ln3.applyObjectPatch = Object.assign(yu.applyObjectPatch, {
  inPlace: bu.applyObjectPatch
});
ln3.applyArrayPatch = Object.assign(yu.applyArrayPatch, {
  inPlace: bu.applyArrayPatch
});
(function(t) {
  var e = fs && fs.__createBinding || (Object.create ? function(n, i, o, s) {
    s === undefined && (s = o);
    var a = Object.getOwnPropertyDescriptor(i, o);
    (!a || ("get" in a ? !i.__esModule : a.writable || a.configurable)) && (a = { enumerable: true, get: function() {
      return i[o];
    } }), Object.defineProperty(n, s, a);
  } : function(n, i, o, s) {
    s === undefined && (s = o), n[s] = i[o];
  }), r = fs && fs.__exportStar || function(n, i) {
    for (var o in n)
      o !== "default" && !Object.prototype.hasOwnProperty.call(i, o) && e(i, n, o);
  };
  Object.defineProperty(t, "__esModule", { value: true }), r(W0, t), r(U0, t), r(ln3, t);
})(j02);
var cn3 = {
  DEBUG: false,
  LIB_VERSION: "2.45.0"
};
var Dt3;
if (typeof window > "u") {
  id = {
    hostname: ""
  };
  Dt3 = {
    navigator: { userAgent: "" },
    document: {
      location: id,
      referrer: ""
    },
    screen: { width: 0, height: 0 },
    location: id
  };
} else
  Dt3 = window;
var id;
var Wa = Array.prototype;
var vb = Function.prototype;
var V02 = Object.prototype;
var en3 = Wa.slice;
var Ko = V02.toString;
var Ua = V02.hasOwnProperty;
var yt3 = Dt3.console;
var Br = Dt3.navigator;
var rt3 = Dt3.document;
var zi = Dt3.opera;
var sa = Dt3.screen;
var ur = Br.userAgent;
var Fl = vb.bind;
var od = Wa.forEach;
var sd = Wa.indexOf;
var ad = Wa.map;
var Ab = Array.isArray;
var Ec = {};
var T2 = {
  trim: function(t) {
    return t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  }
};
var et3 = {
  log: function() {
    if (cn3.DEBUG && !T2.isUndefined(yt3) && yt3)
      try {
        yt3.log.apply(yt3, arguments);
      } catch {
        T2.each(arguments, function(e) {
          yt3.log(e);
        });
      }
  },
  warn: function() {
    if (cn3.DEBUG && !T2.isUndefined(yt3) && yt3) {
      var t = ["Mixpanel warning:"].concat(T2.toArray(arguments));
      try {
        yt3.warn.apply(yt3, t);
      } catch {
        T2.each(t, function(r) {
          yt3.warn(r);
        });
      }
    }
  },
  error: function() {
    if (cn3.DEBUG && !T2.isUndefined(yt3) && yt3) {
      var t = ["Mixpanel error:"].concat(T2.toArray(arguments));
      try {
        yt3.error.apply(yt3, t);
      } catch {
        T2.each(t, function(r) {
          yt3.error(r);
        });
      }
    }
  },
  critical: function() {
    if (!T2.isUndefined(yt3) && yt3) {
      var t = ["Mixpanel error:"].concat(T2.toArray(arguments));
      try {
        yt3.error.apply(yt3, t);
      } catch {
        T2.each(t, function(r) {
          yt3.error(r);
        });
      }
    }
  }
};
var jl = function(t, e) {
  return function() {
    return arguments[0] = "[" + e + "] " + arguments[0], t.apply(et3, arguments);
  };
};
var vu = function(t) {
  return {
    log: jl(et3.log, t),
    error: jl(et3.error, t),
    critical: jl(et3.critical, t)
  };
};
T2.bind = function(t, e) {
  var r, n;
  if (Fl && t.bind === Fl)
    return Fl.apply(t, en3.call(arguments, 1));
  if (!T2.isFunction(t))
    throw new TypeError;
  return r = en3.call(arguments, 2), n = function() {
    if (!(this instanceof n))
      return t.apply(e, r.concat(en3.call(arguments)));
    var i = {};
    i.prototype = t.prototype;
    var o = new i;
    i.prototype = null;
    var s = t.apply(o, r.concat(en3.call(arguments)));
    return Object(s) === s ? s : o;
  }, n;
};
T2.each = function(t, e, r) {
  if (t != null) {
    if (od && t.forEach === od)
      t.forEach(e, r);
    else if (t.length === +t.length) {
      for (var n = 0, i = t.length;n < i; n++)
        if (n in t && e.call(r, t[n], n, t) === Ec)
          return;
    } else
      for (var o in t)
        if (Ua.call(t, o) && e.call(r, t[o], o, t) === Ec)
          return;
  }
};
T2.extend = function(t) {
  return T2.each(en3.call(arguments, 1), function(e) {
    for (var r in e)
      e[r] !== undefined && (t[r] = e[r]);
  }), t;
};
T2.isArray = Ab || function(t) {
  return Ko.call(t) === "[object Array]";
};
T2.isFunction = function(t) {
  try {
    return /^\s*\bfunction\b/.test(t);
  } catch {
    return false;
  }
};
T2.isArguments = function(t) {
  return !!(t && Ua.call(t, "callee"));
};
T2.toArray = function(t) {
  return t ? t.toArray ? t.toArray() : T2.isArray(t) || T2.isArguments(t) ? en3.call(t) : T2.values(t) : [];
};
T2.map = function(t, e, r) {
  if (ad && t.map === ad)
    return t.map(e, r);
  var n = [];
  return T2.each(t, function(i) {
    n.push(e.call(r, i));
  }), n;
};
T2.keys = function(t) {
  var e = [];
  return t === null || T2.each(t, function(r, n) {
    e[e.length] = n;
  }), e;
};
T2.values = function(t) {
  var e = [];
  return t === null || T2.each(t, function(r) {
    e[e.length] = r;
  }), e;
};
T2.include = function(t, e) {
  var r = false;
  return t === null ? r : sd && t.indexOf === sd ? t.indexOf(e) != -1 : (T2.each(t, function(n) {
    if (r || (r = n === e))
      return Ec;
  }), r);
};
T2.includes = function(t, e) {
  return t.indexOf(e) !== -1;
};
T2.inherit = function(t, e) {
  return t.prototype = new e, t.prototype.constructor = t, t.superclass = e.prototype, t;
};
T2.isObject = function(t) {
  return t === Object(t) && !T2.isArray(t);
};
T2.isEmptyObject = function(t) {
  if (T2.isObject(t)) {
    for (var e in t)
      if (Ua.call(t, e))
        return false;
    return true;
  }
  return false;
};
T2.isUndefined = function(t) {
  return t === undefined;
};
T2.isString = function(t) {
  return Ko.call(t) == "[object String]";
};
T2.isDate = function(t) {
  return Ko.call(t) == "[object Date]";
};
T2.isNumber = function(t) {
  return Ko.call(t) == "[object Number]";
};
T2.isElement = function(t) {
  return !!(t && t.nodeType === 1);
};
T2.encodeDates = function(t) {
  return T2.each(t, function(e, r) {
    T2.isDate(e) ? t[r] = T2.formatDate(e) : T2.isObject(e) && (t[r] = T2.encodeDates(e));
  }), t;
};
T2.timestamp = function() {
  return Date.now = Date.now || function() {
    return +/* @__PURE__ */ new Date;
  }, Date.now();
};
T2.formatDate = function(t) {
  function e(r) {
    return r < 10 ? "0" + r : r;
  }
  return t.getUTCFullYear() + "-" + e(t.getUTCMonth() + 1) + "-" + e(t.getUTCDate()) + "T" + e(t.getUTCHours()) + ":" + e(t.getUTCMinutes()) + ":" + e(t.getUTCSeconds());
};
T2.strip_empty_properties = function(t) {
  var e = {};
  return T2.each(t, function(r, n) {
    T2.isString(r) && r.length > 0 && (e[n] = r);
  }), e;
};
T2.truncate = function(t, e) {
  var r;
  return typeof t == "string" ? r = t.slice(0, e) : T2.isArray(t) ? (r = [], T2.each(t, function(n) {
    r.push(T2.truncate(n, e));
  })) : T2.isObject(t) ? (r = {}, T2.each(t, function(n, i) {
    r[i] = T2.truncate(n, e);
  })) : r = t, r;
};
T2.JSONEncode = function() {
  return function(t) {
    var e = t, r = function(i) {
      var o = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, s = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': "\\\"",
        "\\": "\\\\"
      };
      return o.lastIndex = 0, o.test(i) ? '"' + i.replace(o, function(a) {
        var l = s[a];
        return typeof l == "string" ? l : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + i + '"';
    }, n = function(i, o) {
      var s = "", a = "    ", l = 0, c2 = "", u = "", f2 = 0, d = s, h = [], g2 = o[i];
      switch (g2 && typeof g2 == "object" && typeof g2.toJSON == "function" && (g2 = g2.toJSON(i)), typeof g2) {
        case "string":
          return r(g2);
        case "number":
          return isFinite(g2) ? String(g2) : "null";
        case "boolean":
        case "null":
          return String(g2);
        case "object":
          if (!g2)
            return "null";
          if (s += a, h = [], Ko.apply(g2) === "[object Array]") {
            for (f2 = g2.length, l = 0;l < f2; l += 1)
              h[l] = n(l, g2) || "null";
            return u = h.length === 0 ? "[]" : s ? `[
` + s + h.join(`,
` + s) + `
` + d + "]" : "[" + h.join(",") + "]", s = d, u;
          }
          for (c2 in g2)
            Ua.call(g2, c2) && (u = n(c2, g2), u && h.push(r(c2) + (s ? ": " : ":") + u));
          return u = h.length === 0 ? "{}" : s ? "{" + h.join(",") + d + "}" : "{" + h.join(",") + "}", s = d, u;
      }
    };
    return n("", {
      "": e
    });
  };
}();
T2.JSONDecode = function() {
  var t, e, r = {
    '"': '"',
    "\\": "\\",
    "/": "/",
    b: "\b",
    f: "\f",
    n: `
`,
    r: "\r",
    t: "\t"
  }, n, i = function(h) {
    var g2 = new SyntaxError(h);
    throw g2.at = t, g2.text = n, g2;
  }, o = function(h) {
    return h && h !== e && i("Expected '" + h + "' instead of '" + e + "'"), e = n.charAt(t), t += 1, e;
  }, s = function() {
    var h, g2 = "";
    for (e === "-" && (g2 = "-", o("-"));e >= "0" && e <= "9"; )
      g2 += e, o();
    if (e === ".")
      for (g2 += ".";o() && e >= "0" && e <= "9"; )
        g2 += e;
    if (e === "e" || e === "E")
      for (g2 += e, o(), (e === "-" || e === "+") && (g2 += e, o());e >= "0" && e <= "9"; )
        g2 += e, o();
    if (h = +g2, !isFinite(h))
      i("Bad number");
    else
      return h;
  }, a = function() {
    var h, g2, p = "", y4;
    if (e === '"')
      for (;o(); ) {
        if (e === '"')
          return o(), p;
        if (e === "\\")
          if (o(), e === "u") {
            for (y4 = 0, g2 = 0;g2 < 4 && (h = parseInt(o(), 16), !!isFinite(h)); g2 += 1)
              y4 = y4 * 16 + h;
            p += String.fromCharCode(y4);
          } else if (typeof r[e] == "string")
            p += r[e];
          else
            break;
        else
          p += e;
      }
    i("Bad string");
  }, l = function() {
    for (;e && e <= " "; )
      o();
  }, c2 = function() {
    switch (e) {
      case "t":
        return o("t"), o("r"), o("u"), o("e"), true;
      case "f":
        return o("f"), o("a"), o("l"), o("s"), o("e"), false;
      case "n":
        return o("n"), o("u"), o("l"), o("l"), null;
    }
    i('Unexpected "' + e + '"');
  }, u, f2 = function() {
    var h = [];
    if (e === "[") {
      if (o("["), l(), e === "]")
        return o("]"), h;
      for (;e; ) {
        if (h.push(u()), l(), e === "]")
          return o("]"), h;
        o(","), l();
      }
    }
    i("Bad array");
  }, d = function() {
    var h, g2 = {};
    if (e === "{") {
      if (o("{"), l(), e === "}")
        return o("}"), g2;
      for (;e; ) {
        if (h = a(), l(), o(":"), Object.hasOwnProperty.call(g2, h) && i('Duplicate key "' + h + '"'), g2[h] = u(), l(), e === "}")
          return o("}"), g2;
        o(","), l();
      }
    }
    i("Bad object");
  };
  return u = function() {
    switch (l(), e) {
      case "{":
        return d();
      case "[":
        return f2();
      case '"':
        return a();
      case "-":
        return s();
      default:
        return e >= "0" && e <= "9" ? s() : c2();
    }
  }, function(h) {
    var g2;
    return n = h, t = 0, e = " ", g2 = u(), l(), e && i("Syntax error"), g2;
  };
}();
T2.base64Encode = function(t) {
  var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", r, n, i, o, s, a, l, c2, u = 0, f2 = 0, d = "", h = [];
  if (!t)
    return t;
  t = T2.utf8Encode(t);
  do
    r = t.charCodeAt(u++), n = t.charCodeAt(u++), i = t.charCodeAt(u++), c2 = r << 16 | n << 8 | i, o = c2 >> 18 & 63, s = c2 >> 12 & 63, a = c2 >> 6 & 63, l = c2 & 63, h[f2++] = e.charAt(o) + e.charAt(s) + e.charAt(a) + e.charAt(l);
  while (u < t.length);
  switch (d = h.join(""), t.length % 3) {
    case 1:
      d = d.slice(0, -2) + "==";
      break;
    case 2:
      d = d.slice(0, -1) + "=";
      break;
  }
  return d;
};
T2.utf8Encode = function(t) {
  t = (t + "").replace(/\r\n/g, `
`).replace(/\r/g, `
`);
  var e = "", r, n, i = 0, o;
  for (r = n = 0, i = t.length, o = 0;o < i; o++) {
    var s = t.charCodeAt(o), a = null;
    s < 128 ? n++ : s > 127 && s < 2048 ? a = String.fromCharCode(s >> 6 | 192, s & 63 | 128) : a = String.fromCharCode(s >> 12 | 224, s >> 6 & 63 | 128, s & 63 | 128), a !== null && (n > r && (e += t.substring(r, n)), e += a, r = n = o + 1);
  }
  return n > r && (e += t.substring(r, t.length)), e;
};
T2.UUID = function() {
  var t = function() {
    for (var n = 1 * /* @__PURE__ */ new Date, i = 0;n == 1 * /* @__PURE__ */ new Date; )
      i++;
    return n.toString(16) + i.toString(16);
  }, e = function() {
    return Math.random().toString(16).replace(".", "");
  }, r = function() {
    var n = ur, i, o, s = [], a = 0;
    function l(c2, u) {
      var f2, d = 0;
      for (f2 = 0;f2 < u.length; f2++)
        d |= s[f2] << f2 * 8;
      return c2 ^ d;
    }
    for (i = 0;i < n.length; i++)
      o = n.charCodeAt(i), s.unshift(o & 255), s.length >= 4 && (a = l(a, s), s = []);
    return s.length > 0 && (a = l(a, s)), a.toString(16);
  };
  return function() {
    var n = (sa.height * sa.width).toString(16);
    return t() + "-" + e() + "-" + r() + "-" + n + "-" + t();
  };
}();
var ld = [
  "ahrefsbot",
  "baiduspider",
  "bingbot",
  "bingpreview",
  "facebookexternal",
  "petalbot",
  "pinterest",
  "screaming frog",
  "yahoo! slurp",
  "yandexbot",
  "adsbot-google",
  "apis-google",
  "duplexweb-google",
  "feedfetcher-google",
  "google favicon",
  "google web preview",
  "google-read-aloud",
  "googlebot",
  "googleweblight",
  "mediapartners-google",
  "storebot-google"
];
T2.isBlockedUA = function(t) {
  var e;
  for (t = t.toLowerCase(), e = 0;e < ld.length; e++)
    if (t.indexOf(ld[e]) !== -1)
      return true;
  return false;
};
T2.HTTPBuildQuery = function(t, e) {
  var r, n, i = [];
  return T2.isUndefined(e) && (e = "&"), T2.each(t, function(o, s) {
    r = encodeURIComponent(o.toString()), n = encodeURIComponent(s), i[i.length] = n + "=" + r;
  }), i.join(e);
};
T2.getQueryParam = function(t, e) {
  e = e.replace(/[[]/, "\\[").replace(/[\]]/, "\\]");
  var r = "[\\?&]" + e + "=([^&#]*)", n = new RegExp(r), i = n.exec(t);
  if (i === null || i && typeof i[1] != "string" && i[1].length)
    return "";
  var o = i[1];
  try {
    o = decodeURIComponent(o);
  } catch {
    et3.error("Skipping decoding for malformed query param: " + o);
  }
  return o.replace(/\+/g, " ");
};
T2.cookie = {
  get: function(t) {
    for (var e = t + "=", r = rt3.cookie.split(";"), n = 0;n < r.length; n++) {
      for (var i = r[n];i.charAt(0) == " "; )
        i = i.substring(1, i.length);
      if (i.indexOf(e) === 0)
        return decodeURIComponent(i.substring(e.length, i.length));
    }
    return null;
  },
  parse: function(t) {
    var e;
    try {
      e = T2.JSONDecode(T2.cookie.get(t)) || {};
    } catch {
    }
    return e;
  },
  set_seconds: function(t, e, r, n, i, o, s) {
    var a = "", l = "", c2 = "";
    if (s)
      a = "; domain=" + s;
    else if (n) {
      var u = cd(rt3.location.hostname);
      a = u ? "; domain=." + u : "";
    }
    if (r) {
      var f2 = /* @__PURE__ */ new Date;
      f2.setTime(f2.getTime() + r * 1000), l = "; expires=" + f2.toGMTString();
    }
    o && (i = true, c2 = "; SameSite=None"), i && (c2 += "; secure"), rt3.cookie = t + "=" + encodeURIComponent(e) + l + "; path=/" + a + c2;
  },
  set: function(t, e, r, n, i, o, s) {
    var a = "", l = "", c2 = "";
    if (s)
      a = "; domain=" + s;
    else if (n) {
      var u = cd(rt3.location.hostname);
      a = u ? "; domain=." + u : "";
    }
    if (r) {
      var f2 = /* @__PURE__ */ new Date;
      f2.setTime(f2.getTime() + r * 24 * 60 * 60 * 1000), l = "; expires=" + f2.toGMTString();
    }
    o && (i = true, c2 = "; SameSite=None"), i && (c2 += "; secure");
    var d = t + "=" + encodeURIComponent(e) + l + "; path=/" + a + c2;
    return rt3.cookie = d, d;
  },
  remove: function(t, e, r) {
    T2.cookie.set(t, "", -1, e, false, false, r);
  }
};
var Wl = null;
var aa = function(t, e) {
  if (Wl !== null && !e)
    return Wl;
  var r = true;
  try {
    t = t || window.localStorage;
    var n = "__mplss_" + Au(8), i = "xyz";
    t.setItem(n, i), t.getItem(n) !== i && (r = false), t.removeItem(n);
  } catch {
    r = false;
  }
  return Wl = r, r;
};
T2.localStorage = {
  is_supported: function(t) {
    var e = aa(null, t);
    return e || et3.error("localStorage unsupported; falling back to cookie store"), e;
  },
  error: function(t) {
    et3.error("localStorage error: " + t);
  },
  get: function(t) {
    try {
      return window.localStorage.getItem(t);
    } catch (e) {
      T2.localStorage.error(e);
    }
    return null;
  },
  parse: function(t) {
    try {
      return T2.JSONDecode(T2.localStorage.get(t)) || {};
    } catch {
    }
    return null;
  },
  set: function(t, e) {
    try {
      window.localStorage.setItem(t, e);
    } catch (r) {
      T2.localStorage.error(r);
    }
  },
  remove: function(t) {
    try {
      window.localStorage.removeItem(t);
    } catch (e) {
      T2.localStorage.error(e);
    }
  }
};
T2.register_event = function() {
  var t = function(n, i, o, s, a) {
    if (!n) {
      et3.error("No valid element provided to register_event");
      return;
    }
    if (n.addEventListener && !s)
      n.addEventListener(i, o, !!a);
    else {
      var l = "on" + i, c2 = n[l];
      n[l] = e(n, o, c2);
    }
  };
  function e(n, i, o) {
    var s = function(a) {
      if (a = a || r(window.event), !!a) {
        var l = true, c2, u;
        return T2.isFunction(o) && (c2 = o(a)), u = i.call(n, a), (c2 === false || u === false) && (l = false), l;
      }
    };
    return s;
  }
  function r(n) {
    return n && (n.preventDefault = r.preventDefault, n.stopPropagation = r.stopPropagation), n;
  }
  return r.preventDefault = function() {
    this.returnValue = false;
  }, r.stopPropagation = function() {
    this.cancelBubble = true;
  }, t;
}();
var wb = new RegExp('^(\\w*)\\[(\\w+)([=~\\|\\^\\$\\*]?)=?"?([^\\]"]*)"?\\]$');
T2.dom_query = function() {
  function t(i) {
    return i.all ? i.all : i.getElementsByTagName("*");
  }
  var e = /[\t\r\n]/g;
  function r(i, o) {
    var s = " " + o + " ";
    return (" " + i.className + " ").replace(e, " ").indexOf(s) >= 0;
  }
  function n(i) {
    if (!rt3.getElementsByTagName)
      return [];
    var o = i.split(" "), s, a, l, c2, u, f2, d, h, g2, p, y4 = [rt3];
    for (f2 = 0;f2 < o.length; f2++) {
      if (s = o[f2].replace(/^\s+/, "").replace(/\s+$/, ""), s.indexOf("#") > -1) {
        a = s.split("#"), l = a[0];
        var b = a[1], x = rt3.getElementById(b);
        if (!x || l && x.nodeName.toLowerCase() != l)
          return [];
        y4 = [x];
        continue;
      }
      if (s.indexOf(".") > -1) {
        a = s.split("."), l = a[0];
        var S = a[1];
        for (l || (l = "*"), c2 = [], u = 0, d = 0;d < y4.length; d++)
          for (l == "*" ? g2 = t(y4[d]) : g2 = y4[d].getElementsByTagName(l), h = 0;h < g2.length; h++)
            c2[u++] = g2[h];
        for (y4 = [], p = 0, d = 0;d < c2.length; d++)
          c2[d].className && T2.isString(c2[d].className) && r(c2[d], S) && (y4[p++] = c2[d]);
        continue;
      }
      var O = s.match(wb);
      if (O) {
        l = O[1];
        var _ = O[2], L = O[3], N4 = O[4];
        for (l || (l = "*"), c2 = [], u = 0, d = 0;d < y4.length; d++)
          for (l == "*" ? g2 = t(y4[d]) : g2 = y4[d].getElementsByTagName(l), h = 0;h < g2.length; h++)
            c2[u++] = g2[h];
        y4 = [], p = 0;
        var j;
        switch (L) {
          case "=":
            j = function(W) {
              return W.getAttribute(_) == N4;
            };
            break;
          case "~":
            j = function(W) {
              return W.getAttribute(_).match(new RegExp("\\b" + N4 + "\\b"));
            };
            break;
          case "|":
            j = function(W) {
              return W.getAttribute(_).match(new RegExp("^" + N4 + "-?"));
            };
            break;
          case "^":
            j = function(W) {
              return W.getAttribute(_).indexOf(N4) === 0;
            };
            break;
          case "$":
            j = function(W) {
              return W.getAttribute(_).lastIndexOf(N4) == W.getAttribute(_).length - N4.length;
            };
            break;
          case "*":
            j = function(W) {
              return W.getAttribute(_).indexOf(N4) > -1;
            };
            break;
          default:
            j = function(W) {
              return W.getAttribute(_);
            };
        }
        for (y4 = [], p = 0, d = 0;d < c2.length; d++)
          j(c2[d]) && (y4[p++] = c2[d]);
        continue;
      }
      for (l = s, c2 = [], u = 0, d = 0;d < y4.length; d++)
        for (g2 = y4[d].getElementsByTagName(l), h = 0;h < g2.length; h++)
          c2[u++] = g2[h];
      y4 = c2;
    }
    return y4;
  }
  return function(i) {
    return T2.isElement(i) ? [i] : T2.isObject(i) && !T2.isUndefined(i.length) ? i : n.call(this, i);
  };
}();
T2.info = {
  campaignParams: function() {
    var t = "utm_source utm_medium utm_campaign utm_content utm_term".split(" "), e = "", r = {};
    return T2.each(t, function(n) {
      e = T2.getQueryParam(rt3.URL, n), e.length && (r[n] = e);
    }), r;
  },
  searchEngine: function(t) {
    return t.search("https?://(.*)google.([^/?]*)") === 0 ? "google" : t.search("https?://(.*)bing.com") === 0 ? "bing" : t.search("https?://(.*)yahoo.com") === 0 ? "yahoo" : t.search("https?://(.*)duckduckgo.com") === 0 ? "duckduckgo" : null;
  },
  searchInfo: function(t) {
    var e = T2.info.searchEngine(t), r = e != "yahoo" ? "q" : "p", n = {};
    if (e !== null) {
      n.$search_engine = e;
      var i = T2.getQueryParam(t, r);
      i.length && (n.mp_keyword = i);
    }
    return n;
  },
  browser: function(t, e, r) {
    return e = e || "", r || T2.includes(t, " OPR/") ? T2.includes(t, "Mini") ? "Opera Mini" : "Opera" : /(BlackBerry|PlayBook|BB10)/i.test(t) ? "BlackBerry" : T2.includes(t, "IEMobile") || T2.includes(t, "WPDesktop") ? "Internet Explorer Mobile" : T2.includes(t, "SamsungBrowser/") ? "Samsung Internet" : T2.includes(t, "Edge") || T2.includes(t, "Edg/") ? "Microsoft Edge" : T2.includes(t, "FBIOS") ? "Facebook Mobile" : T2.includes(t, "Chrome") ? "Chrome" : T2.includes(t, "CriOS") ? "Chrome iOS" : T2.includes(t, "UCWEB") || T2.includes(t, "UCBrowser") ? "UC Browser" : T2.includes(t, "FxiOS") ? "Firefox iOS" : T2.includes(e, "Apple") ? T2.includes(t, "Mobile") ? "Mobile Safari" : "Safari" : T2.includes(t, "Android") ? "Android Mobile" : T2.includes(t, "Konqueror") ? "Konqueror" : T2.includes(t, "Firefox") ? "Firefox" : T2.includes(t, "MSIE") || T2.includes(t, "Trident/") ? "Internet Explorer" : T2.includes(t, "Gecko") ? "Mozilla" : "";
  },
  browserVersion: function(t, e, r) {
    var n = T2.info.browser(t, e, r), i = {
      "Internet Explorer Mobile": /rv:(\d+(\.\d+)?)/,
      "Microsoft Edge": /Edge?\/(\d+(\.\d+)?)/,
      Chrome: /Chrome\/(\d+(\.\d+)?)/,
      "Chrome iOS": /CriOS\/(\d+(\.\d+)?)/,
      "UC Browser": /(UCBrowser|UCWEB)\/(\d+(\.\d+)?)/,
      Safari: /Version\/(\d+(\.\d+)?)/,
      "Mobile Safari": /Version\/(\d+(\.\d+)?)/,
      Opera: /(Opera|OPR)\/(\d+(\.\d+)?)/,
      Firefox: /Firefox\/(\d+(\.\d+)?)/,
      "Firefox iOS": /FxiOS\/(\d+(\.\d+)?)/,
      Konqueror: /Konqueror:(\d+(\.\d+)?)/,
      BlackBerry: /BlackBerry (\d+(\.\d+)?)/,
      "Android Mobile": /android\s(\d+(\.\d+)?)/,
      "Samsung Internet": /SamsungBrowser\/(\d+(\.\d+)?)/,
      "Internet Explorer": /(rv:|MSIE )(\d+(\.\d+)?)/,
      Mozilla: /rv:(\d+(\.\d+)?)/
    }, o = i[n];
    if (o === undefined)
      return null;
    var s = t.match(o);
    return s ? parseFloat(s[s.length - 2]) : null;
  },
  os: function() {
    var t = ur;
    return /Windows/i.test(t) ? /Phone/.test(t) || /WPDesktop/.test(t) ? "Windows Phone" : "Windows" : /(iPhone|iPad|iPod)/.test(t) ? "iOS" : /Android/.test(t) ? "Android" : /(BlackBerry|PlayBook|BB10)/i.test(t) ? "BlackBerry" : /Mac/i.test(t) ? "Mac OS X" : /Linux/.test(t) ? "Linux" : /CrOS/.test(t) ? "Chrome OS" : "";
  },
  device: function(t) {
    return /Windows Phone/i.test(t) || /WPDesktop/.test(t) ? "Windows Phone" : /iPad/.test(t) ? "iPad" : /iPod/.test(t) ? "iPod Touch" : /iPhone/.test(t) ? "iPhone" : /(BlackBerry|PlayBook|BB10)/i.test(t) ? "BlackBerry" : /Android/.test(t) ? "Android" : "";
  },
  referringDomain: function(t) {
    var e = t.split("/");
    return e.length >= 3 ? e[2] : "";
  },
  properties: function() {
    return T2.extend(T2.strip_empty_properties({
      $os: T2.info.os(),
      $browser: T2.info.browser(ur, Br.vendor, zi),
      $referrer: rt3.referrer,
      $referring_domain: T2.info.referringDomain(rt3.referrer),
      $device: T2.info.device(ur)
    }), {
      $current_url: Dt3.location.href,
      $browser_version: T2.info.browserVersion(ur, Br.vendor, zi),
      $screen_height: sa.height,
      $screen_width: sa.width,
      mp_lib: "web",
      $lib_version: cn3.LIB_VERSION,
      $insert_id: Au(),
      time: T2.timestamp() / 1000
    });
  },
  people_properties: function() {
    return T2.extend(T2.strip_empty_properties({
      $os: T2.info.os(),
      $browser: T2.info.browser(ur, Br.vendor, zi)
    }), {
      $browser_version: T2.info.browserVersion(ur, Br.vendor, zi)
    });
  },
  pageviewInfo: function(t) {
    return T2.strip_empty_properties({
      mp_page: t,
      mp_referrer: rt3.referrer,
      mp_browser: T2.info.browser(ur, Br.vendor, zi),
      mp_platform: T2.info.os()
    });
  }
};
var Au = function(t) {
  var e = Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10);
  return t ? e.substring(0, t) : e;
};
var xb = /[a-z0-9][a-z0-9-]*\.[a-z]+$/i;
var _b = /[a-z0-9][a-z0-9-]+\.[a-z.]{2,6}$/i;
var cd = function(t) {
  var e = _b, r = t.split("."), n = r[r.length - 1];
  (n.length > 4 || n === "com" || n === "org") && (e = xb);
  var i = t.match(e);
  return i ? i[0] : "";
};
var la = null;
var ca = null;
typeof JSON < "u" && (la = JSON.stringify, ca = JSON.parse);
la = la || T2.JSONEncode;
ca = ca || T2.JSONDecode;
T2.toArray = T2.toArray;
T2.isObject = T2.isObject;
T2.JSONEncode = T2.JSONEncode;
T2.JSONDecode = T2.JSONDecode;
T2.isBlockedUA = T2.isBlockedUA;
T2.isEmptyObject = T2.isEmptyObject;
T2.info = T2.info;
T2.info.device = T2.info.device;
T2.info.browser = T2.info.browser;
T2.info.browserVersion = T2.info.browserVersion;
T2.info.properties = T2.info.properties;
var Xr = function() {
};
Xr.prototype.create_properties = function() {
};
Xr.prototype.event_handler = function() {
};
Xr.prototype.after_track_handler = function() {
};
Xr.prototype.init = function(t) {
  return this.mp = t, this;
};
Xr.prototype.track = function(t, e, r, n) {
  var i = this, o = T2.dom_query(t);
  if (o.length === 0) {
    et3.error("The DOM query (" + t + ") returned 0 elements");
    return;
  }
  return T2.each(o, function(s) {
    T2.register_event(s, this.override_event, function(a) {
      var l = {}, c2 = i.create_properties(r, this), u = i.mp.get_config("track_links_timeout");
      i.event_handler(a, this, l), window.setTimeout(i.track_callback(n, c2, l, true), u), i.mp.track(e, c2, i.track_callback(n, c2, l));
    });
  }, this), true;
};
Xr.prototype.track_callback = function(t, e, r, n) {
  n = n || false;
  var i = this;
  return function() {
    r.callback_fired || (r.callback_fired = true, !(t && t(n, e) === false) && i.after_track_handler(e, r, n));
  };
};
Xr.prototype.create_properties = function(t, e) {
  var r;
  return typeof t == "function" ? r = t(e) : r = T2.extend({}, t), r;
};
var _i = function() {
  this.override_event = "click";
};
T2.inherit(_i, Xr);
_i.prototype.create_properties = function(t, e) {
  var r = _i.superclass.create_properties.apply(this, arguments);
  return e.href && (r.url = e.href), r;
};
_i.prototype.event_handler = function(t, e, r) {
  r.new_tab = t.which === 2 || t.metaKey || t.ctrlKey || e.target === "_blank", r.href = e.href, r.new_tab || t.preventDefault();
};
_i.prototype.after_track_handler = function(t, e) {
  e.new_tab || setTimeout(function() {
    window.location = e.href;
  }, 0);
};
var za = function() {
  this.override_event = "submit";
};
T2.inherit(za, Xr);
za.prototype.event_handler = function(t, e, r) {
  r.element = e, t.preventDefault();
};
za.prototype.after_track_handler = function(t, e) {
  setTimeout(function() {
    e.element.submit();
  }, 0);
};
var Sb = vu("lock");
var q02 = function(t, e) {
  e = e || {}, this.storageKey = t, this.storage = e.storage || window.localStorage, this.pollIntervalMS = e.pollIntervalMS || 100, this.timeoutMS = e.timeoutMS || 2000;
};
q02.prototype.withLock = function(t, e, r) {
  !r && typeof e != "function" && (r = e, e = null);
  var n = r || (/* @__PURE__ */ new Date()).getTime() + "|" + Math.random(), i = (/* @__PURE__ */ new Date()).getTime(), o = this.storageKey, s = this.pollIntervalMS, a = this.timeoutMS, l = this.storage, c2 = o + ":X", u = o + ":Y", f2 = o + ":Z", d = function(x) {
    e && e(x);
  }, h = function(x) {
    if ((/* @__PURE__ */ new Date()).getTime() - i > a) {
      Sb.error("Timeout waiting for mutex on " + o + "; clearing lock. [" + n + "]"), l.removeItem(f2), l.removeItem(u), y4();
      return;
    }
    setTimeout(function() {
      try {
        x();
      } catch (S) {
        d(S);
      }
    }, s * (Math.random() + 0.1));
  }, g2 = function(x, S) {
    x() ? S() : h(function() {
      g2(x, S);
    });
  }, p = function() {
    var x = l.getItem(u);
    if (x && x !== n)
      return false;
    if (l.setItem(u, n), l.getItem(u) === n)
      return true;
    if (!aa(l, true))
      throw new Error("localStorage support dropped while acquiring lock");
    return false;
  }, y4 = function() {
    l.setItem(c2, n), g2(p, function() {
      if (l.getItem(c2) === n) {
        b();
        return;
      }
      h(function() {
        if (l.getItem(u) !== n) {
          y4();
          return;
        }
        g2(function() {
          return !l.getItem(f2);
        }, b);
      });
    });
  }, b = function() {
    l.setItem(f2, "1");
    try {
      t();
    } finally {
      l.removeItem(f2), l.getItem(u) === n && l.removeItem(u), l.getItem(c2) === n && l.removeItem(c2);
    }
  };
  try {
    if (aa(l, true))
      y4();
    else
      throw new Error("localStorage support check failed");
  } catch (x) {
    d(x);
  }
};
var ud = vu("batch");
var yn3 = function(t, e) {
  e = e || {}, this.storageKey = t, this.storage = e.storage || window.localStorage, this.reportError = e.errorReporter || T2.bind(ud.error, ud), this.lock = new q02(t, { storage: this.storage }), this.pid = e.pid || null, this.memQueue = [];
};
yn3.prototype.enqueue = function(t, e, r) {
  var n = {
    id: Au(),
    flushAfter: (/* @__PURE__ */ new Date()).getTime() + e * 2,
    payload: t
  };
  this.lock.withLock(T2.bind(function() {
    var o;
    try {
      var s = this.readFromStorage();
      s.push(n), o = this.saveToStorage(s), o && this.memQueue.push(n);
    } catch {
      this.reportError("Error enqueueing item", t), o = false;
    }
    r && r(o);
  }, this), T2.bind(function(o) {
    this.reportError("Error acquiring storage lock", o), r && r(false);
  }, this), this.pid);
};
yn3.prototype.fillBatch = function(t) {
  var e = this.memQueue.slice(0, t);
  if (e.length < t) {
    var r = this.readFromStorage();
    if (r.length) {
      var n = {};
      T2.each(e, function(s) {
        n[s.id] = true;
      });
      for (var i = 0;i < r.length; i++) {
        var o = r[i];
        if ((/* @__PURE__ */ new Date()).getTime() > o.flushAfter && !n[o.id] && (o.orphaned = true, e.push(o), e.length >= t))
          break;
      }
    }
  }
  return e;
};
var fd = function(t, e) {
  var r = [];
  return T2.each(t, function(n) {
    n.id && !e[n.id] && r.push(n);
  }), r;
};
yn3.prototype.removeItemsByID = function(t, e) {
  var r = {};
  T2.each(t, function(i) {
    r[i] = true;
  }), this.memQueue = fd(this.memQueue, r);
  var n = T2.bind(function() {
    var i;
    try {
      var o = this.readFromStorage();
      if (o = fd(o, r), i = this.saveToStorage(o), i) {
        o = this.readFromStorage();
        for (var s = 0;s < o.length; s++) {
          var a = o[s];
          if (a.id && r[a.id])
            return this.reportError("Item not removed from storage"), false;
        }
      }
    } catch {
      this.reportError("Error removing items", t), i = false;
    }
    return i;
  }, this);
  this.lock.withLock(function() {
    var o = n();
    e && e(o);
  }, T2.bind(function(o) {
    var s = false;
    if (this.reportError("Error acquiring storage lock", o), !aa(this.storage, true) && (s = n(), !s))
      try {
        this.storage.removeItem(this.storageKey);
      } catch (a) {
        this.reportError("Error clearing queue", a);
      }
    e && e(s);
  }, this), this.pid);
};
var dd = function(t, e) {
  var r = [];
  return T2.each(t, function(n) {
    var i = n.id;
    if (i in e) {
      var o = e[i];
      o !== null && (n.payload = o, r.push(n));
    } else
      r.push(n);
  }), r;
};
yn3.prototype.updatePayloads = function(t, e) {
  this.memQueue = dd(this.memQueue, t), this.lock.withLock(T2.bind(function() {
    var n;
    try {
      var i = this.readFromStorage();
      i = dd(i, t), n = this.saveToStorage(i);
    } catch {
      this.reportError("Error updating items", t), n = false;
    }
    e && e(n);
  }, this), T2.bind(function(n) {
    this.reportError("Error acquiring storage lock", n), e && e(false);
  }, this), this.pid);
};
yn3.prototype.readFromStorage = function() {
  var t;
  try {
    t = this.storage.getItem(this.storageKey), t && (t = ca(t), T2.isArray(t) || (this.reportError("Invalid storage entry:", t), t = null));
  } catch (e) {
    this.reportError("Error retrieving queue", e), t = null;
  }
  return t || [];
};
yn3.prototype.saveToStorage = function(t) {
  try {
    return this.storage.setItem(this.storageKey, la(t)), true;
  } catch (e) {
    return this.reportError("Error saving queue", e), false;
  }
};
yn3.prototype.clear = function() {
  this.memQueue = [], this.storage.removeItem(this.storageKey);
};
var Eb = 10 * 60 * 1000;
var po = vu("batch");
var Ir = function(t, e) {
  this.errorReporter = e.errorReporter, this.queue = new yn3(t, {
    errorReporter: T2.bind(this.reportError, this),
    storage: e.storage
  }), this.libConfig = e.libConfig, this.sendRequest = e.sendRequestFunc, this.beforeSendHook = e.beforeSendHook, this.stopAllBatching = e.stopAllBatchingFunc, this.batchSize = this.libConfig.batch_size, this.flushInterval = this.libConfig.batch_flush_interval_ms, this.stopped = !this.libConfig.batch_autostart, this.consecutiveRemovalFailures = 0;
};
Ir.prototype.enqueue = function(t, e) {
  this.queue.enqueue(t, this.flushInterval, e);
};
Ir.prototype.start = function() {
  this.stopped = false, this.consecutiveRemovalFailures = 0, this.flush();
};
Ir.prototype.stop = function() {
  this.stopped = true, this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null);
};
Ir.prototype.clear = function() {
  this.queue.clear();
};
Ir.prototype.resetBatchSize = function() {
  this.batchSize = this.libConfig.batch_size;
};
Ir.prototype.resetFlush = function() {
  this.scheduleFlush(this.libConfig.batch_flush_interval_ms);
};
Ir.prototype.scheduleFlush = function(t) {
  this.flushInterval = t, this.stopped || (this.timeoutID = setTimeout(T2.bind(this.flush, this), this.flushInterval));
};
Ir.prototype.flush = function(t) {
  try {
    if (this.requestInProgress) {
      po.log("Flush: Request already in progress");
      return;
    }
    t = t || {};
    var e = this.libConfig.batch_request_timeout_ms, r = (/* @__PURE__ */ new Date()).getTime(), n = this.batchSize, i = this.queue.fillBatch(n), o = [], s = {};
    if (T2.each(i, function(c2) {
      var u = c2.payload;
      this.beforeSendHook && !c2.orphaned && (u = this.beforeSendHook(u)), u && o.push(u), s[c2.id] = u;
    }, this), o.length < 1) {
      this.resetFlush();
      return;
    }
    this.requestInProgress = true;
    var a = T2.bind(function(c2) {
      this.requestInProgress = false;
      try {
        var u = false;
        if (t.unloading)
          this.queue.updatePayloads(s);
        else if (T2.isObject(c2) && c2.error === "timeout" && (/* @__PURE__ */ new Date()).getTime() - r >= e)
          this.reportError("Network timeout; retrying"), this.flush();
        else if (T2.isObject(c2) && c2.xhr_req && (c2.xhr_req.status >= 500 || c2.xhr_req.status === 429 || c2.error === "timeout")) {
          var f2 = this.flushInterval * 2, d = c2.xhr_req.responseHeaders;
          if (d) {
            var h = d["Retry-After"];
            h && (f2 = parseInt(h, 10) * 1000 || f2);
          }
          f2 = Math.min(Eb, f2), this.reportError("Error; retry in " + f2 + " ms"), this.scheduleFlush(f2);
        } else if (T2.isObject(c2) && c2.xhr_req && c2.xhr_req.status === 413)
          if (i.length > 1) {
            var g2 = Math.max(1, Math.floor(n / 2));
            this.batchSize = Math.min(this.batchSize, g2, i.length - 1), this.reportError("413 response; reducing batch size to " + this.batchSize), this.resetFlush();
          } else
            this.reportError("Single-event request too large; dropping", i), this.resetBatchSize(), u = true;
        else
          u = true;
        u && this.queue.removeItemsByID(T2.map(i, function(p) {
          return p.id;
        }), T2.bind(function(p) {
          p ? (this.consecutiveRemovalFailures = 0, this.flush()) : (this.reportError("Failed to remove items from queue"), ++this.consecutiveRemovalFailures > 5 ? (this.reportError("Too many queue failures; disabling batching system."), this.stopAllBatching()) : this.resetFlush());
        }, this));
      } catch (p) {
        this.reportError("Error handling API response", p), this.resetFlush();
      }
    }, this), l = {
      method: "POST",
      verbose: true,
      ignore_json_errors: true,
      timeout_ms: e
    };
    t.unloading && (l.transport = "sendBeacon"), po.log("MIXPANEL REQUEST:", o), this.sendRequest(o, l, a);
  } catch (c2) {
    this.reportError("Error flushing request queue", c2), this.resetFlush();
  }
};
Ir.prototype.reportError = function(t, e) {
  if (po.error.apply(po.error, arguments), this.errorReporter)
    try {
      e instanceof Error || (e = new Error(t)), this.errorReporter(t, e);
    } catch (r) {
      po.error(r);
    }
};
var kb = "__mp_opt_in_out_";
function Cb(t, e) {
  K02(true, t, e);
}
function Tb(t, e) {
  K02(false, t, e);
}
function Ob(t, e) {
  return Y0(t, e) === "1";
}
function H0(t, e) {
  if (Pb(e))
    return et3.warn('This browser has "Do Not Track" enabled. This will prevent the Mixpanel SDK from sending any data. To ignore the "Do Not Track" browser setting, initialize the Mixpanel instance with the config "ignore_dnt: true"'), true;
  var r = Y0(t, e) === "0";
  return r && et3.warn("You are opted out of Mixpanel tracking. This will prevent the Mixpanel SDK from sending any data."), r;
}
function Xo(t) {
  return _u(t, function(e) {
    return this.get_config(e);
  });
}
function bn3(t) {
  return _u(t, function(e) {
    return this._get_config(e);
  });
}
function Ni(t) {
  return _u(t, function(e) {
    return this._get_config(e);
  });
}
function Ib(t, e) {
  e = e || {}, wu(e).remove(xu(t, e), !!e.crossSubdomainCookie, e.cookieDomain);
}
function wu(t) {
  return t = t || {}, t.persistenceType === "localStorage" ? T2.localStorage : T2.cookie;
}
function xu(t, e) {
  return e = e || {}, (e.persistencePrefix || kb) + t;
}
function Y0(t, e) {
  return wu(e).get(xu(t, e));
}
function Pb(t) {
  if (t && t.ignoreDnt)
    return false;
  var e = t && t.window || Dt3, r = e.navigator || {}, n = false;
  return T2.each([
    r.doNotTrack,
    r.msDoNotTrack,
    e.doNotTrack
  ], function(i) {
    T2.includes([true, 1, "1", "yes"], i) && (n = true);
  }), n;
}
function K02(t, e, r) {
  if (!T2.isString(e) || !e.length) {
    et3.error("gdpr." + (t ? "optIn" : "optOut") + " called with an invalid token");
    return;
  }
  r = r || {}, wu(r).set(xu(e, r), t ? 1 : 0, T2.isNumber(r.cookieExpiration) ? r.cookieExpiration : null, !!r.crossSubdomainCookie, !!r.secureCookie, !!r.crossSiteCookie, r.cookieDomain), r.track && t && r.track(r.trackEventName || "$opt_in", r.trackProperties, {
    send_immediately: true
  });
}
function _u(t, e) {
  return function() {
    var r = false;
    try {
      var n = e.call(this, "token"), i = e.call(this, "ignore_dnt"), o = e.call(this, "opt_out_tracking_persistence_type"), s = e.call(this, "opt_out_tracking_cookie_prefix"), a = e.call(this, "window");
      n && (r = H0(n, {
        ignoreDnt: i,
        persistenceType: o,
        persistencePrefix: s,
        window: a
      }));
    } catch (c2) {
      et3.error("Unexpected error when checking tracking opt-out status: " + c2);
    }
    if (!r)
      return t.apply(this, arguments);
    var l = arguments[arguments.length - 1];
    typeof l == "function" && l(0);
  };
}
var dn3 = "$set";
var Si = "$set_once";
var fr = "$unset";
var Vn3 = "$add";
var Yr = "$append";
var qn2 = "$union";
var hn = "$remove";
var Rb = "$delete";
var X0 = {
  set_action: function(t, e) {
    var r = {}, n = {};
    return T2.isObject(t) ? T2.each(t, function(i, o) {
      this._is_reserved_property(o) || (n[o] = i);
    }, this) : n[t] = e, r[dn3] = n, r;
  },
  unset_action: function(t) {
    var e = {}, r = [];
    return T2.isArray(t) || (t = [t]), T2.each(t, function(n) {
      this._is_reserved_property(n) || r.push(n);
    }, this), e[fr] = r, e;
  },
  set_once_action: function(t, e) {
    var r = {}, n = {};
    return T2.isObject(t) ? T2.each(t, function(i, o) {
      this._is_reserved_property(o) || (n[o] = i);
    }, this) : n[t] = e, r[Si] = n, r;
  },
  union_action: function(t, e) {
    var r = {}, n = {};
    return T2.isObject(t) ? T2.each(t, function(i, o) {
      this._is_reserved_property(o) || (n[o] = T2.isArray(i) ? i : [i]);
    }, this) : n[t] = T2.isArray(e) ? e : [e], r[qn2] = n, r;
  },
  append_action: function(t, e) {
    var r = {}, n = {};
    return T2.isObject(t) ? T2.each(t, function(i, o) {
      this._is_reserved_property(o) || (n[o] = i);
    }, this) : n[t] = e, r[Yr] = n, r;
  },
  remove_action: function(t, e) {
    var r = {}, n = {};
    return T2.isObject(t) ? T2.each(t, function(i, o) {
      this._is_reserved_property(o) || (n[o] = i);
    }, this) : n[t] = e, r[hn] = n, r;
  },
  delete_action: function() {
    var t = {};
    return t[Rb] = "", t;
  }
};
var at3 = function() {
};
T2.extend(at3.prototype, X0);
at3.prototype._init = function(t, e, r) {
  this._mixpanel = t, this._group_key = e, this._group_id = r;
};
at3.prototype.set = Ni(function(t, e, r) {
  var n = this.set_action(t, e);
  return T2.isObject(t) && (r = e), this._send_request(n, r);
});
at3.prototype.set_once = Ni(function(t, e, r) {
  var n = this.set_once_action(t, e);
  return T2.isObject(t) && (r = e), this._send_request(n, r);
});
at3.prototype.unset = Ni(function(t, e) {
  var r = this.unset_action(t);
  return this._send_request(r, e);
});
at3.prototype.union = Ni(function(t, e, r) {
  T2.isObject(t) && (r = e);
  var n = this.union_action(t, e);
  return this._send_request(n, r);
});
at3.prototype.delete = Ni(function(t) {
  var e = this.delete_action();
  return this._send_request(e, t);
});
at3.prototype.remove = Ni(function(t, e, r) {
  var n = this.remove_action(t, e);
  return this._send_request(n, r);
});
at3.prototype._send_request = function(t, e) {
  t.$group_key = this._group_key, t.$group_id = this._group_id, t.$token = this._get_config("token");
  var r = T2.encodeDates(t);
  return this._mixpanel._track_or_batch({
    type: "groups",
    data: r,
    endpoint: this._get_config("api_host") + "/groups/",
    batcher: this._mixpanel.request_batchers.groups
  }, e);
};
at3.prototype._is_reserved_property = function(t) {
  return t === "$group_key" || t === "$group_id";
};
at3.prototype._get_config = function(t) {
  return this._mixpanel.get_config(t);
};
at3.prototype.toString = function() {
  return this._mixpanel.toString() + ".group." + this._group_key + "." + this._group_id;
};
at3.prototype.remove = at3.prototype.remove;
at3.prototype.set = at3.prototype.set;
at3.prototype.set_once = at3.prototype.set_once;
at3.prototype.union = at3.prototype.union;
at3.prototype.unset = at3.prototype.unset;
at3.prototype.toString = at3.prototype.toString;
var Te = function() {
};
T2.extend(Te.prototype, X0);
Te.prototype._init = function(t) {
  this._mixpanel = t;
};
Te.prototype.set = bn3(function(t, e, r) {
  var n = this.set_action(t, e);
  return T2.isObject(t) && (r = e), this._get_config("save_referrer") && this._mixpanel.persistence.update_referrer_info(document.referrer), n[dn3] = T2.extend({}, T2.info.people_properties(), this._mixpanel.persistence.get_referrer_info(), n[dn3]), this._send_request(n, r);
});
Te.prototype.set_once = bn3(function(t, e, r) {
  var n = this.set_once_action(t, e);
  return T2.isObject(t) && (r = e), this._send_request(n, r);
});
Te.prototype.unset = bn3(function(t, e) {
  var r = this.unset_action(t);
  return this._send_request(r, e);
});
Te.prototype.increment = bn3(function(t, e, r) {
  var n = {}, i = {};
  return T2.isObject(t) ? (T2.each(t, function(o, s) {
    if (!this._is_reserved_property(s))
      if (isNaN(parseFloat(o))) {
        et3.error("Invalid increment value passed to mixpanel.people.increment - must be a number");
        return;
      } else
        i[s] = o;
  }, this), r = e) : (T2.isUndefined(e) && (e = 1), i[t] = e), n[Vn3] = i, this._send_request(n, r);
});
Te.prototype.append = bn3(function(t, e, r) {
  T2.isObject(t) && (r = e);
  var n = this.append_action(t, e);
  return this._send_request(n, r);
});
Te.prototype.remove = bn3(function(t, e, r) {
  T2.isObject(t) && (r = e);
  var n = this.remove_action(t, e);
  return this._send_request(n, r);
});
Te.prototype.union = bn3(function(t, e, r) {
  T2.isObject(t) && (r = e);
  var n = this.union_action(t, e);
  return this._send_request(n, r);
});
Te.prototype.track_charge = bn3(function(t, e, r) {
  if (!T2.isNumber(t) && (t = parseFloat(t), isNaN(t))) {
    et3.error("Invalid value passed to mixpanel.people.track_charge - must be a number");
    return;
  }
  return this.append("$transactions", T2.extend({
    $amount: t
  }, e), r);
});
Te.prototype.clear_charges = function(t) {
  return this.set("$transactions", [], t);
};
Te.prototype.delete_user = function() {
  if (!this._identify_called()) {
    et3.error("mixpanel.people.delete_user() requires you to call identify() first");
    return;
  }
  var t = { $delete: this._mixpanel.get_distinct_id() };
  return this._send_request(t);
};
Te.prototype.toString = function() {
  return this._mixpanel.toString() + ".people";
};
Te.prototype._send_request = function(t, e) {
  t.$token = this._get_config("token"), t.$distinct_id = this._mixpanel.get_distinct_id();
  var r = this._mixpanel.get_property("$device_id"), n = this._mixpanel.get_property("$user_id"), i = this._mixpanel.get_property("$had_persisted_distinct_id");
  r && (t.$device_id = r), n && (t.$user_id = n), i && (t.$had_persisted_distinct_id = i);
  var o = T2.encodeDates(t);
  return this._identify_called() ? this._mixpanel._track_or_batch({
    type: "people",
    data: o,
    endpoint: this._get_config("api_host") + "/engage/",
    batcher: this._mixpanel.request_batchers.people
  }, e) : (this._enqueue(t), T2.isUndefined(e) || (this._get_config("verbose") ? e({ status: -1, error: null }) : e(-1)), T2.truncate(o, 255));
};
Te.prototype._get_config = function(t) {
  return this._mixpanel.get_config(t);
};
Te.prototype._identify_called = function() {
  return this._mixpanel._flags.identify_called === true;
};
Te.prototype._enqueue = function(t) {
  dn3 in t ? this._mixpanel.persistence._add_to_people_queue(dn3, t) : (Si in t) ? this._mixpanel.persistence._add_to_people_queue(Si, t) : (fr in t) ? this._mixpanel.persistence._add_to_people_queue(fr, t) : (Vn3 in t) ? this._mixpanel.persistence._add_to_people_queue(Vn3, t) : (Yr in t) ? this._mixpanel.persistence._add_to_people_queue(Yr, t) : (hn in t) ? this._mixpanel.persistence._add_to_people_queue(hn, t) : (qn2 in t) ? this._mixpanel.persistence._add_to_people_queue(qn2, t) : et3.error("Invalid call to _enqueue():", t);
};
Te.prototype._flush_one_queue = function(t, e, r, n) {
  var i = this, o = T2.extend({}, this._mixpanel.persistence._get_queue(t)), s = o;
  !T2.isUndefined(o) && T2.isObject(o) && !T2.isEmptyObject(o) && (i._mixpanel.persistence._pop_from_people_queue(t, o), n && (s = n(o)), e.call(i, s, function(a, l) {
    a === 0 && i._mixpanel.persistence._add_to_people_queue(t, o), T2.isUndefined(r) || r(a, l);
  }));
};
Te.prototype._flush = function(t, e, r, n, i, o, s) {
  var a = this, l = this._mixpanel.persistence._get_queue(Yr), c2 = this._mixpanel.persistence._get_queue(hn);
  if (this._flush_one_queue(dn3, this.set, t), this._flush_one_queue(Si, this.set_once, n), this._flush_one_queue(fr, this.unset, o, function(y4) {
    return T2.keys(y4);
  }), this._flush_one_queue(Vn3, this.increment, e), this._flush_one_queue(qn2, this.union, i), !T2.isUndefined(l) && T2.isArray(l) && l.length) {
    for (var u, f2 = function(y4, b) {
      y4 === 0 && a._mixpanel.persistence._add_to_people_queue(Yr, u), T2.isUndefined(r) || r(y4, b);
    }, d = l.length - 1;d >= 0; d--)
      u = l.pop(), T2.isEmptyObject(u) || a.append(u, f2);
    a._mixpanel.persistence.save();
  }
  if (!T2.isUndefined(c2) && T2.isArray(c2) && c2.length) {
    for (var h, g2 = function(y4, b) {
      y4 === 0 && a._mixpanel.persistence._add_to_people_queue(hn, h), T2.isUndefined(s) || s(y4, b);
    }, p = c2.length - 1;p >= 0; p--)
      h = c2.pop(), T2.isEmptyObject(h) || a.remove(h, g2);
    a._mixpanel.persistence.save();
  }
};
Te.prototype._is_reserved_property = function(t) {
  return t === "$distinct_id" || t === "$token" || t === "$device_id" || t === "$user_id" || t === "$had_persisted_distinct_id";
};
Te.prototype.set = Te.prototype.set;
Te.prototype.set_once = Te.prototype.set_once;
Te.prototype.unset = Te.prototype.unset;
Te.prototype.increment = Te.prototype.increment;
Te.prototype.append = Te.prototype.append;
Te.prototype.remove = Te.prototype.remove;
Te.prototype.union = Te.prototype.union;
Te.prototype.track_charge = Te.prototype.track_charge;
Te.prototype.clear_charges = Te.prototype.clear_charges;
Te.prototype.delete_user = Te.prototype.delete_user;
Te.prototype.toString = Te.prototype.toString;
var Su = "__mps";
var Eu = "__mpso";
var ku = "__mpus";
var Cu = "__mpa";
var Tu = "__mpap";
var Ou = "__mpr";
var Iu = "__mpu";
var J02 = "$people_distinct_id";
var ua = "__alias";
var ko = "__timers";
var Db = [
  Su,
  Eu,
  ku,
  Cu,
  Tu,
  Ou,
  Iu,
  J02,
  ua,
  ko
];
var Me = function(t) {
  this.props = {}, this.campaign_params_saved = false, t.persistence_name ? this.name = "mp_" + t.persistence_name : this.name = "mp_" + t.token + "_mixpanel";
  var e = t.persistence;
  e !== "cookie" && e !== "localStorage" && (et3.critical("Unknown persistence type " + e + "; falling back to cookie"), e = t.persistence = "cookie"), e === "localStorage" && T2.localStorage.is_supported() ? this.storage = T2.localStorage : this.storage = T2.cookie, this.load(), this.update_config(t), this.upgrade(t), this.save();
};
Me.prototype.properties = function() {
  var t = {};
  return T2.each(this.props, function(e, r) {
    T2.include(Db, r) || (t[r] = e);
  }), t;
};
Me.prototype.load = function() {
  if (!this.disabled) {
    var t = this.storage.parse(this.name);
    t && (this.props = T2.extend({}, t));
  }
};
Me.prototype.upgrade = function(t) {
  var e = t.upgrade, r, n;
  e && (r = "mp_super_properties", typeof e == "string" && (r = e), n = this.storage.parse(r), this.storage.remove(r), this.storage.remove(r, true), n && (this.props = T2.extend(this.props, n.all, n.events))), !t.cookie_name && t.name !== "mixpanel" && (r = "mp_" + t.token + "_" + t.name, n = this.storage.parse(r), n && (this.storage.remove(r), this.storage.remove(r, true), this.register_once(n))), this.storage === T2.localStorage && (n = T2.cookie.parse(this.name), T2.cookie.remove(this.name), T2.cookie.remove(this.name, true), n && this.register_once(n));
};
Me.prototype.save = function() {
  this.disabled || this.storage.set(this.name, T2.JSONEncode(this.props), this.expire_days, this.cross_subdomain, this.secure, this.cross_site, this.cookie_domain);
};
Me.prototype.remove = function() {
  this.storage.remove(this.name, false, this.cookie_domain), this.storage.remove(this.name, true, this.cookie_domain);
};
Me.prototype.clear = function() {
  this.remove(), this.props = {};
};
Me.prototype.register_once = function(t, e, r) {
  return T2.isObject(t) ? (typeof e > "u" && (e = "None"), this.expire_days = typeof r > "u" ? this.default_expiry : r, T2.each(t, function(n, i) {
    (!this.props.hasOwnProperty(i) || this.props[i] === e) && (this.props[i] = n);
  }, this), this.save(), true) : false;
};
Me.prototype.register = function(t, e) {
  return T2.isObject(t) ? (this.expire_days = typeof e > "u" ? this.default_expiry : e, T2.extend(this.props, t), this.save(), true) : false;
};
Me.prototype.unregister = function(t) {
  t in this.props && (delete this.props[t], this.save());
};
Me.prototype.update_campaign_params = function() {
  this.campaign_params_saved || (this.register_once(T2.info.campaignParams()), this.campaign_params_saved = true);
};
Me.prototype.update_search_keyword = function(t) {
  this.register(T2.info.searchInfo(t));
};
Me.prototype.update_referrer_info = function(t) {
  this.register_once({
    $initial_referrer: t || "$direct",
    $initial_referring_domain: T2.info.referringDomain(t) || "$direct"
  }, "");
};
Me.prototype.get_referrer_info = function() {
  return T2.strip_empty_properties({
    $initial_referrer: this.props.$initial_referrer,
    $initial_referring_domain: this.props.$initial_referring_domain
  });
};
Me.prototype.safe_merge = function(t) {
  return T2.each(this.props, function(e, r) {
    r in t || (t[r] = e);
  }), t;
};
Me.prototype.update_config = function(t) {
  this.default_expiry = this.expire_days = t.cookie_expiration, this.set_disabled(t.disable_persistence), this.set_cookie_domain(t.cookie_domain), this.set_cross_site(t.cross_site_cookie), this.set_cross_subdomain(t.cross_subdomain_cookie), this.set_secure(t.secure_cookie);
};
Me.prototype.set_disabled = function(t) {
  this.disabled = t, this.disabled ? this.remove() : this.save();
};
Me.prototype.set_cookie_domain = function(t) {
  t !== this.cookie_domain && (this.remove(), this.cookie_domain = t, this.save());
};
Me.prototype.set_cross_site = function(t) {
  t !== this.cross_site && (this.cross_site = t, this.remove(), this.save());
};
Me.prototype.set_cross_subdomain = function(t) {
  t !== this.cross_subdomain && (this.cross_subdomain = t, this.remove(), this.save());
};
Me.prototype.get_cross_subdomain = function() {
  return this.cross_subdomain;
};
Me.prototype.set_secure = function(t) {
  t !== this.secure && (this.secure = !!t, this.remove(), this.save());
};
Me.prototype._add_to_people_queue = function(t, e) {
  var r = this._get_queue_key(t), n = e[t], i = this._get_or_create_queue(dn3), o = this._get_or_create_queue(Si), s = this._get_or_create_queue(fr), a = this._get_or_create_queue(Vn3), l = this._get_or_create_queue(qn2), c2 = this._get_or_create_queue(hn, []), u = this._get_or_create_queue(Yr, []);
  r === Su ? (T2.extend(i, n), this._pop_from_people_queue(Vn3, n), this._pop_from_people_queue(qn2, n), this._pop_from_people_queue(fr, n)) : r === Eu ? (T2.each(n, function(f2, d) {
    d in o || (o[d] = f2);
  }), this._pop_from_people_queue(fr, n)) : r === ku ? T2.each(n, function(f2) {
    T2.each([i, o, a, l], function(d) {
      f2 in d && delete d[f2];
    }), T2.each(u, function(d) {
      f2 in d && delete d[f2];
    }), s[f2] = true;
  }) : r === Cu ? (T2.each(n, function(f2, d) {
    d in i ? i[d] += f2 : ((d in a) || (a[d] = 0), a[d] += f2);
  }, this), this._pop_from_people_queue(fr, n)) : r === Iu ? (T2.each(n, function(f2, d) {
    T2.isArray(f2) && ((d in l) || (l[d] = []), l[d] = l[d].concat(f2));
  }), this._pop_from_people_queue(fr, n)) : r === Ou ? (c2.push(n), this._pop_from_people_queue(Yr, n)) : r === Tu && (u.push(n), this._pop_from_people_queue(fr, n)), et3.log("MIXPANEL PEOPLE REQUEST (QUEUED, PENDING IDENTIFY):"), et3.log(e), this.save();
};
Me.prototype._pop_from_people_queue = function(t, e) {
  var r = this._get_queue(t);
  T2.isUndefined(r) || (T2.each(e, function(n, i) {
    t === Yr || t === hn ? T2.each(r, function(o) {
      o[i] === n && delete o[i];
    }) : delete r[i];
  }, this), this.save());
};
Me.prototype._get_queue_key = function(t) {
  if (t === dn3)
    return Su;
  if (t === Si)
    return Eu;
  if (t === fr)
    return ku;
  if (t === Vn3)
    return Cu;
  if (t === Yr)
    return Tu;
  if (t === hn)
    return Ou;
  if (t === qn2)
    return Iu;
  et3.error("Invalid queue:", t);
};
Me.prototype._get_queue = function(t) {
  return this.props[this._get_queue_key(t)];
};
Me.prototype._get_or_create_queue = function(t, e) {
  var r = this._get_queue_key(t);
  return e = T2.isUndefined(e) ? {} : e, this.props[r] || (this.props[r] = e);
};
Me.prototype.set_event_timer = function(t, e) {
  var r = this.props[ko] || {};
  r[t] = e, this.props[ko] = r, this.save();
};
Me.prototype.remove_event_timer = function(t) {
  var e = this.props[ko] || {}, r = e[t];
  return T2.isUndefined(r) || (delete this.props[ko][t], this.save()), r;
};
var Pu;
var Pt3;
var Q02 = 0;
var Mb = 1;
var Nb = function(t) {
  return t;
};
var Co = function() {
};
var nr = "mixpanel";
var G0 = "base64";
var Lb = "json";
var gi = Dt3.XMLHttpRequest && "withCredentials" in new XMLHttpRequest;
var Z0 = !gi && ur.indexOf("MSIE") === -1 && ur.indexOf("Mozilla") === -1;
var fa = null;
Br.sendBeacon && (fa = function() {
  return Br.sendBeacon.apply(Br, arguments);
});
var hd = {
  api_host: "https://api-js.mixpanel.com",
  api_method: "POST",
  api_transport: "XHR",
  api_payload_format: G0,
  app_host: "https://mixpanel.com",
  cdn: "https://cdn.mxpnl.com",
  cross_site_cookie: false,
  cross_subdomain_cookie: true,
  error_reporter: Co,
  persistence: "cookie",
  persistence_name: "",
  cookie_domain: "",
  cookie_name: "",
  loaded: Co,
  store_google: true,
  save_referrer: true,
  test: false,
  verbose: false,
  img: false,
  debug: false,
  track_links_timeout: 300,
  cookie_expiration: 365,
  upgrade: false,
  disable_persistence: false,
  disable_cookie: false,
  secure_cookie: false,
  ip: true,
  opt_out_tracking_by_default: false,
  opt_out_persistence_by_default: false,
  opt_out_tracking_persistence_type: "localStorage",
  opt_out_tracking_cookie_prefix: null,
  property_blacklist: [],
  xhr_headers: {},
  ignore_dnt: false,
  batch_requests: true,
  batch_size: 50,
  batch_flush_interval_ms: 5000,
  batch_request_timeout_ms: 90000,
  batch_autostart: true,
  hooks: {}
};
var $0 = false;
var ce = function() {
};
var kc = function(t, e, r) {
  var n, i = r === nr ? Pt3 : Pt3[r];
  if (i && Pu === Q02)
    n = i;
  else {
    if (i && !T2.isArray(i)) {
      et3.error("You have already initialized " + r);
      return;
    }
    n = new ce;
  }
  return n._cached_groups = {}, n._init(t, e, r), n.people = new Te, n.people._init(n), cn3.DEBUG = cn3.DEBUG || n.get_config("debug"), !T2.isUndefined(i) && T2.isArray(i) && (n._execute_array.call(n.people, i.people), n._execute_array(i)), n;
};
ce.prototype.init = function(t, e, r) {
  if (T2.isUndefined(r)) {
    this.report_error("You must name your new library: init(token, config, name)");
    return;
  }
  if (r === nr) {
    this.report_error("You must initialize the main mixpanel object right after you include the Mixpanel js snippet");
    return;
  }
  var n = kc(t, e, r);
  return Pt3[r] = n, n._loaded(), n;
};
ce.prototype._init = function(t, e, r) {
  e = e || {}, this.__loaded = true, this.config = {};
  var n = {};
  if (!("api_payload_format" in e)) {
    var i = e.api_host || hd.api_host;
    i.match(/\.mixpanel\.com$/) && (n.api_payload_format = Lb);
  }
  if (this.set_config(T2.extend({}, hd, n, e, {
    name: r,
    token: t,
    callback_fn: (r === nr ? r : nr + "." + r) + "._jsc"
  })), this._jsc = Co, this.__dom_loaded_queue = [], this.__request_queue = [], this.__disabled_events = [], this._flags = {
    disable_all_events: false,
    identify_called: false
  }, this.request_batchers = {}, this._batch_requests = this.get_config("batch_requests"), this._batch_requests) {
    if (!T2.localStorage.is_supported(true) || !gi)
      this._batch_requests = false, et3.log("Turning off Mixpanel request-queueing; needs XHR and localStorage support");
    else if (this.init_batchers(), fa && Dt3.addEventListener) {
      var o = T2.bind(function() {
        this.request_batchers.events.stopped || this.request_batchers.events.flush({ unloading: true });
      }, this);
      Dt3.addEventListener("pagehide", function(a) {
        a.persisted && o();
      }), Dt3.addEventListener("visibilitychange", function() {
        rt3.visibilityState === "hidden" && o();
      });
    }
  }
  this.persistence = this.cookie = new Me(this.config), this.unpersisted_superprops = {}, this._gdpr_init();
  var s = T2.UUID();
  this.get_distinct_id() || this.register_once({
    distinct_id: s,
    $device_id: s
  }, "");
};
ce.prototype._loaded = function() {
  this.get_config("loaded")(this), this._set_default_superprops();
};
ce.prototype._set_default_superprops = function() {
  this.persistence.update_search_keyword(rt3.referrer), this.get_config("store_google") && this.persistence.update_campaign_params(), this.get_config("save_referrer") && this.persistence.update_referrer_info(rt3.referrer);
};
ce.prototype._dom_loaded = function() {
  T2.each(this.__dom_loaded_queue, function(t) {
    this._track_dom.apply(this, t);
  }, this), this.has_opted_out_tracking() || T2.each(this.__request_queue, function(t) {
    this._send_request.apply(this, t);
  }, this), delete this.__dom_loaded_queue, delete this.__request_queue;
};
ce.prototype._track_dom = function(t, e) {
  if (this.get_config("img"))
    return this.report_error("You can't use DOM tracking functions with img = true."), false;
  if (!$0)
    return this.__dom_loaded_queue.push([t, e]), false;
  var r = new t().init(this);
  return r.track.apply(r, e);
};
ce.prototype._prepare_callback = function(t, e) {
  if (T2.isUndefined(t))
    return null;
  if (gi) {
    var r = function(s) {
      t(s, e);
    };
    return r;
  } else {
    var n = this._jsc, i = "" + Math.floor(Math.random() * 1e8), o = this.get_config("callback_fn") + "[" + i + "]";
    return n[i] = function(s) {
      delete n[i], t(s, e);
    }, o;
  }
};
ce.prototype._send_request = function(t, e, r, n) {
  var i = true;
  if (Z0)
    return this.__request_queue.push(arguments), i;
  var o = {
    method: this.get_config("api_method"),
    transport: this.get_config("api_transport"),
    verbose: this.get_config("verbose")
  }, s = null;
  !n && (T2.isFunction(r) || typeof r == "string") && (n = r, r = null), r = T2.extend(o, r || {}), gi || (r.method = "GET");
  var a = r.method === "POST", l = fa && a && r.transport.toLowerCase() === "sendbeacon", c2 = r.verbose;
  e.verbose && (c2 = true), this.get_config("test") && (e.test = 1), c2 && (e.verbose = 1), this.get_config("img") && (e.img = 1), gi || (n ? e.callback = n : (c2 || this.get_config("test")) && (e.callback = "(function(){})")), e.ip = this.get_config("ip") ? 1 : 0, e._ = (/* @__PURE__ */ new Date()).getTime().toString(), a && (s = "data=" + encodeURIComponent(e.data), delete e.data), t += "?" + T2.HTTPBuildQuery(e);
  var u = this;
  if ("img" in e) {
    var f2 = rt3.createElement("img");
    f2.src = t, rt3.body.appendChild(f2);
  } else if (l) {
    try {
      i = fa(t, s);
    } catch (b) {
      u.report_error(b), i = false;
    }
    try {
      n && n(i ? 1 : 0);
    } catch (b) {
      u.report_error(b);
    }
  } else if (gi)
    try {
      var d = new XMLHttpRequest;
      d.open(r.method, t, true);
      var h = this.get_config("xhr_headers");
      if (a && (h["Content-Type"] = "application/x-www-form-urlencoded"), T2.each(h, function(b, x) {
        d.setRequestHeader(x, b);
      }), r.timeout_ms && typeof d.timeout < "u") {
        d.timeout = r.timeout_ms;
        var g2 = (/* @__PURE__ */ new Date()).getTime();
      }
      d.withCredentials = true, d.onreadystatechange = function() {
        if (d.readyState === 4)
          if (d.status === 200) {
            if (n)
              if (c2) {
                var b;
                try {
                  b = T2.JSONDecode(d.responseText);
                } catch (S) {
                  if (u.report_error(S), r.ignore_json_errors)
                    b = d.responseText;
                  else
                    return;
                }
                n(b);
              } else
                n(Number(d.responseText));
          } else {
            var x;
            d.timeout && !d.status && (/* @__PURE__ */ new Date()).getTime() - g2 >= d.timeout ? x = "timeout" : x = "Bad HTTP status: " + d.status + " " + d.statusText, u.report_error(x), n && n(c2 ? { status: 0, error: x, xhr_req: d } : 0);
          }
      }, d.send(s);
    } catch (b) {
      u.report_error(b), i = false;
    }
  else {
    var p = rt3.createElement("script");
    p.type = "text/javascript", p.async = true, p.defer = true, p.src = t;
    var y4 = rt3.getElementsByTagName("script")[0];
    y4.parentNode.insertBefore(p, y4);
  }
  return i;
};
ce.prototype._execute_array = function(t) {
  var e, r = [], n = [], i = [];
  T2.each(t, function(s) {
    s && (e = s[0], T2.isArray(e) ? i.push(s) : typeof s == "function" ? s.call(this) : T2.isArray(s) && e === "alias" ? r.push(s) : T2.isArray(s) && e.indexOf("track") !== -1 && typeof this[e] == "function" ? i.push(s) : n.push(s));
  }, this);
  var o = function(s, a) {
    T2.each(s, function(l) {
      if (T2.isArray(l[0])) {
        var c2 = a;
        T2.each(l, function(u) {
          c2 = c2[u[0]].apply(c2, u.slice(1));
        });
      } else
        this[l[0]].apply(this, l.slice(1));
    }, a);
  };
  o(r, this), o(n, this), o(i, this);
};
ce.prototype.are_batchers_initialized = function() {
  return !!this.request_batchers.events;
};
ce.prototype.init_batchers = function() {
  var t = this.get_config("token");
  if (!this.are_batchers_initialized()) {
    var e = T2.bind(function(r) {
      return new Ir("__mpq_" + t + r.queue_suffix, {
        libConfig: this.config,
        sendRequestFunc: T2.bind(function(n, i, o) {
          this._send_request(this.get_config("api_host") + r.endpoint, this._encode_data_for_request(n), i, this._prepare_callback(o, n));
        }, this),
        beforeSendHook: T2.bind(function(n) {
          return this._run_hook("before_send_" + r.type, n);
        }, this),
        errorReporter: this.get_config("error_reporter"),
        stopAllBatchingFunc: T2.bind(this.stop_batch_senders, this)
      });
    }, this);
    this.request_batchers = {
      events: e({ type: "events", endpoint: "/track/", queue_suffix: "_ev" }),
      people: e({ type: "people", endpoint: "/engage/", queue_suffix: "_pp" }),
      groups: e({ type: "groups", endpoint: "/groups/", queue_suffix: "_gr" })
    };
  }
  this.get_config("batch_autostart") && this.start_batch_senders();
};
ce.prototype.start_batch_senders = function() {
  this.are_batchers_initialized() && (this._batch_requests = true, T2.each(this.request_batchers, function(t) {
    t.start();
  }));
};
ce.prototype.stop_batch_senders = function() {
  this._batch_requests = false, T2.each(this.request_batchers, function(t) {
    t.stop(), t.clear();
  });
};
ce.prototype.push = function(t) {
  this._execute_array([t]);
};
ce.prototype.disable = function(t) {
  typeof t > "u" ? this._flags.disable_all_events = true : this.__disabled_events = this.__disabled_events.concat(t);
};
ce.prototype._encode_data_for_request = function(t) {
  var e = T2.JSONEncode(t);
  return this.get_config("api_payload_format") === G0 && (e = T2.base64Encode(e)), { data: e };
};
ce.prototype._track_or_batch = function(t, e) {
  var r = T2.truncate(t.data, 255), n = t.endpoint, i = t.batcher, o = t.should_send_immediately, s = t.send_request_options || {};
  e = e || Co;
  var a = true, l = T2.bind(function() {
    return s.skip_hooks || (r = this._run_hook("before_send_" + t.type, r)), r ? (et3.log("MIXPANEL REQUEST:"), et3.log(r), this._send_request(n, this._encode_data_for_request(r), s, this._prepare_callback(e, r))) : null;
  }, this);
  return this._batch_requests && !o ? i.enqueue(r, function(c2) {
    c2 ? e(1, r) : l();
  }) : a = l(), a && r;
};
ce.prototype.track = Xo(function(t, e, r, n) {
  !n && typeof r == "function" && (n = r, r = null), r = r || {};
  var i = r.transport;
  i && (r.transport = i);
  var o = r.send_immediately;
  if (typeof n != "function" && (n = Co), T2.isUndefined(t)) {
    this.report_error("No event name provided to mixpanel.track");
    return;
  }
  if (this._event_is_disabled(t)) {
    n(0);
    return;
  }
  e = e || {}, e.token = this.get_config("token");
  var s = this.persistence.remove_event_timer(t);
  if (!T2.isUndefined(s)) {
    var a = (/* @__PURE__ */ new Date()).getTime() - s;
    e.$duration = parseFloat((a / 1000).toFixed(3));
  }
  this._set_default_superprops(), e = T2.extend({}, T2.info.properties(), this.persistence.properties(), this.unpersisted_superprops, e);
  var l = this.get_config("property_blacklist");
  T2.isArray(l) ? T2.each(l, function(f2) {
    delete e[f2];
  }) : this.report_error("Invalid value for property_blacklist config: " + l);
  var c2 = {
    event: t,
    properties: e
  }, u = this._track_or_batch({
    type: "events",
    data: c2,
    endpoint: this.get_config("api_host") + "/track/",
    batcher: this.request_batchers.events,
    should_send_immediately: o,
    send_request_options: r
  }, n);
  return u;
});
ce.prototype.set_group = Xo(function(t, e, r) {
  T2.isArray(e) || (e = [e]);
  var n = {};
  return n[t] = e, this.register(n), this.people.set(t, e, r);
});
ce.prototype.add_group = Xo(function(t, e, r) {
  var n = this.get_property(t);
  if (n === undefined) {
    var i = {};
    i[t] = [e], this.register(i);
  } else
    n.indexOf(e) === -1 && (n.push(e), this.register(i));
  return this.people.union(t, e, r);
});
ce.prototype.remove_group = Xo(function(t, e, r) {
  var n = this.get_property(t);
  if (n !== undefined) {
    var i = n.indexOf(e);
    i > -1 && (n.splice(i, 1), this.register({ group_key: n })), n.length === 0 && this.unregister(t);
  }
  return this.people.remove(t, e, r);
});
ce.prototype.track_with_groups = Xo(function(t, e, r, n) {
  var i = T2.extend({}, e || {});
  return T2.each(r, function(o, s) {
    o != null && (i[s] = o);
  }), this.track(t, i, n);
});
ce.prototype._create_map_key = function(t, e) {
  return t + "_" + JSON.stringify(e);
};
ce.prototype._remove_group_from_cache = function(t, e) {
  delete this._cached_groups[this._create_map_key(t, e)];
};
ce.prototype.get_group = function(t, e) {
  var r = this._create_map_key(t, e), n = this._cached_groups[r];
  return (n === undefined || n._group_key !== t || n._group_id !== e) && (n = new at3, n._init(this, t, e), this._cached_groups[r] = n), n;
};
ce.prototype.track_pageview = function(t) {
  T2.isUndefined(t) && (t = rt3.location.href), this.track("mp_page_view", T2.info.pageviewInfo(t));
};
ce.prototype.track_links = function() {
  return this._track_dom.call(this, _i, arguments);
};
ce.prototype.track_forms = function() {
  return this._track_dom.call(this, za, arguments);
};
ce.prototype.time_event = function(t) {
  if (T2.isUndefined(t)) {
    this.report_error("No event name provided to mixpanel.time_event");
    return;
  }
  this._event_is_disabled(t) || this.persistence.set_event_timer(t, (/* @__PURE__ */ new Date()).getTime());
};
var Bb = {
  persistent: true
};
var Ru = function(t) {
  var e;
  return T2.isObject(t) ? e = t : T2.isUndefined(t) ? e = {} : e = { days: t }, T2.extend({}, Bb, e);
};
ce.prototype.register = function(t, e) {
  var r = Ru(e);
  r.persistent ? this.persistence.register(t, r.days) : T2.extend(this.unpersisted_superprops, t);
};
ce.prototype.register_once = function(t, e, r) {
  var n = Ru(r);
  n.persistent ? this.persistence.register_once(t, e, n.days) : (typeof e > "u" && (e = "None"), T2.each(t, function(i, o) {
    (!this.unpersisted_superprops.hasOwnProperty(o) || this.unpersisted_superprops[o] === e) && (this.unpersisted_superprops[o] = i);
  }, this));
};
ce.prototype.unregister = function(t, e) {
  e = Ru(e), e.persistent ? this.persistence.unregister(t) : delete this.unpersisted_superprops[t];
};
ce.prototype._register_single = function(t, e) {
  var r = {};
  r[t] = e, this.register(r);
};
ce.prototype.identify = function(t, e, r, n, i, o, s, a) {
  var l = this.get_distinct_id();
  if (this.register({ $user_id: t }), !this.get_property("$device_id")) {
    var c2 = l;
    this.register_once({
      $had_persisted_distinct_id: true,
      $device_id: c2
    }, "");
  }
  t !== l && t !== this.get_property(ua) && (this.unregister(ua), this.register({ distinct_id: t })), this._flags.identify_called = true, this.people._flush(e, r, n, i, o, s, a), t !== l && this.track("$identify", {
    distinct_id: t,
    $anon_distinct_id: l
  }, { skip_hooks: true });
};
ce.prototype.reset = function() {
  this.persistence.clear(), this._flags.identify_called = false;
  var t = T2.UUID();
  this.register_once({
    distinct_id: t,
    $device_id: t
  }, "");
};
ce.prototype.get_distinct_id = function() {
  return this.get_property("distinct_id");
};
ce.prototype.alias = function(t, e) {
  if (t === this.get_property(J02))
    return this.report_error("Attempting to create alias for existing People user - aborting."), -2;
  var r = this;
  return T2.isUndefined(e) && (e = this.get_distinct_id()), t !== e ? (this._register_single(ua, t), this.track("$create_alias", {
    alias: t,
    distinct_id: e
  }, {
    skip_hooks: true
  }, function() {
    r.identify(t);
  })) : (this.report_error("alias matches current distinct_id - skipping api call."), this.identify(t), -1);
};
ce.prototype.name_tag = function(t) {
  this._register_single("mp_name_tag", t);
};
ce.prototype.set_config = function(t) {
  if (T2.isObject(t)) {
    T2.extend(this.config, t);
    var e = t.batch_size;
    e && T2.each(this.request_batchers, function(r) {
      r.resetBatchSize();
    }), this.get_config("persistence_name") || (this.config.persistence_name = this.config.cookie_name), this.get_config("disable_persistence") || (this.config.disable_persistence = this.config.disable_cookie), this.persistence && this.persistence.update_config(this.config), cn3.DEBUG = cn3.DEBUG || this.get_config("debug");
  }
};
ce.prototype.get_config = function(t) {
  return this.config[t];
};
ce.prototype._run_hook = function(t) {
  var e = (this.config.hooks[t] || Nb).apply(this, en3.call(arguments, 1));
  return typeof e > "u" && (this.report_error(t + " hook did not return a value"), e = null), e;
};
ce.prototype.get_property = function(t) {
  return this.persistence.props[t];
};
ce.prototype.toString = function() {
  var t = this.get_config("name");
  return t !== nr && (t = nr + "." + t), t;
};
ce.prototype._event_is_disabled = function(t) {
  return T2.isBlockedUA(ur) || this._flags.disable_all_events || T2.include(this.__disabled_events, t);
};
ce.prototype._gdpr_init = function() {
  var t = this.get_config("opt_out_tracking_persistence_type") === "localStorage";
  t && T2.localStorage.is_supported() && (!this.has_opted_in_tracking() && this.has_opted_in_tracking({ persistence_type: "cookie" }) && this.opt_in_tracking({ enable_persistence: false }), !this.has_opted_out_tracking() && this.has_opted_out_tracking({ persistence_type: "cookie" }) && this.opt_out_tracking({ clear_persistence: false }), this.clear_opt_in_out_tracking({
    persistence_type: "cookie",
    enable_persistence: false
  })), this.has_opted_out_tracking() ? this._gdpr_update_persistence({ clear_persistence: true }) : !this.has_opted_in_tracking() && (this.get_config("opt_out_tracking_by_default") || T2.cookie.get("mp_optout")) && (T2.cookie.remove("mp_optout"), this.opt_out_tracking({
    clear_persistence: this.get_config("opt_out_persistence_by_default")
  }));
};
ce.prototype._gdpr_update_persistence = function(t) {
  var e;
  if (t && t.clear_persistence)
    e = true;
  else if (t && t.enable_persistence)
    e = false;
  else
    return;
  !this.get_config("disable_persistence") && this.persistence.disabled !== e && this.persistence.set_disabled(e), e && T2.each(this.request_batchers, function(r) {
    r.clear();
  });
};
ce.prototype._gdpr_call_func = function(t, e) {
  return e = T2.extend({
    track: T2.bind(this.track, this),
    persistence_type: this.get_config("opt_out_tracking_persistence_type"),
    cookie_prefix: this.get_config("opt_out_tracking_cookie_prefix"),
    cookie_expiration: this.get_config("cookie_expiration"),
    cross_site_cookie: this.get_config("cross_site_cookie"),
    cross_subdomain_cookie: this.get_config("cross_subdomain_cookie"),
    cookie_domain: this.get_config("cookie_domain"),
    secure_cookie: this.get_config("secure_cookie"),
    ignore_dnt: this.get_config("ignore_dnt")
  }, e), T2.localStorage.is_supported() || (e.persistence_type = "cookie"), t(this.get_config("token"), {
    track: e.track,
    trackEventName: e.track_event_name,
    trackProperties: e.track_properties,
    persistenceType: e.persistence_type,
    persistencePrefix: e.cookie_prefix,
    cookieDomain: e.cookie_domain,
    cookieExpiration: e.cookie_expiration,
    crossSiteCookie: e.cross_site_cookie,
    crossSubdomainCookie: e.cross_subdomain_cookie,
    secureCookie: e.secure_cookie,
    ignoreDnt: e.ignore_dnt
  });
};
ce.prototype.opt_in_tracking = function(t) {
  t = T2.extend({
    enable_persistence: true
  }, t), this._gdpr_call_func(Cb, t), this._gdpr_update_persistence(t);
};
ce.prototype.opt_out_tracking = function(t) {
  t = T2.extend({
    clear_persistence: true,
    delete_user: true
  }, t), t.delete_user && this.people && this.people._identify_called() && (this.people.delete_user(), this.people.clear_charges()), this._gdpr_call_func(Tb, t), this._gdpr_update_persistence(t);
};
ce.prototype.has_opted_in_tracking = function(t) {
  return this._gdpr_call_func(Ob, t);
};
ce.prototype.has_opted_out_tracking = function(t) {
  return this._gdpr_call_func(H0, t);
};
ce.prototype.clear_opt_in_out_tracking = function(t) {
  t = T2.extend({
    enable_persistence: true
  }, t), this._gdpr_call_func(Ib, t), this._gdpr_update_persistence(t);
};
ce.prototype.report_error = function(t, e) {
  et3.error.apply(et3.error, arguments);
  try {
    !e && !(t instanceof Error) && (t = new Error(t)), this.get_config("error_reporter")(t, e);
  } catch (r) {
    et3.error(r);
  }
};
ce.prototype.init = ce.prototype.init;
ce.prototype.reset = ce.prototype.reset;
ce.prototype.disable = ce.prototype.disable;
ce.prototype.time_event = ce.prototype.time_event;
ce.prototype.track = ce.prototype.track;
ce.prototype.track_links = ce.prototype.track_links;
ce.prototype.track_forms = ce.prototype.track_forms;
ce.prototype.track_pageview = ce.prototype.track_pageview;
ce.prototype.register = ce.prototype.register;
ce.prototype.register_once = ce.prototype.register_once;
ce.prototype.unregister = ce.prototype.unregister;
ce.prototype.identify = ce.prototype.identify;
ce.prototype.alias = ce.prototype.alias;
ce.prototype.name_tag = ce.prototype.name_tag;
ce.prototype.set_config = ce.prototype.set_config;
ce.prototype.get_config = ce.prototype.get_config;
ce.prototype.get_property = ce.prototype.get_property;
ce.prototype.get_distinct_id = ce.prototype.get_distinct_id;
ce.prototype.toString = ce.prototype.toString;
ce.prototype.opt_out_tracking = ce.prototype.opt_out_tracking;
ce.prototype.opt_in_tracking = ce.prototype.opt_in_tracking;
ce.prototype.has_opted_out_tracking = ce.prototype.has_opted_out_tracking;
ce.prototype.has_opted_in_tracking = ce.prototype.has_opted_in_tracking;
ce.prototype.clear_opt_in_out_tracking = ce.prototype.clear_opt_in_out_tracking;
ce.prototype.get_group = ce.prototype.get_group;
ce.prototype.set_group = ce.prototype.set_group;
ce.prototype.add_group = ce.prototype.add_group;
ce.prototype.remove_group = ce.prototype.remove_group;
ce.prototype.track_with_groups = ce.prototype.track_with_groups;
ce.prototype.start_batch_senders = ce.prototype.start_batch_senders;
ce.prototype.stop_batch_senders = ce.prototype.stop_batch_senders;
Me.prototype.properties = Me.prototype.properties;
Me.prototype.update_search_keyword = Me.prototype.update_search_keyword;
Me.prototype.update_referrer_info = Me.prototype.update_referrer_info;
Me.prototype.get_cross_subdomain = Me.prototype.get_cross_subdomain;
Me.prototype.clear = Me.prototype.clear;
var di = {};
var Fb = function() {
  T2.each(di, function(t, e) {
    e !== nr && (Pt3[e] = t);
  }), Pt3._ = T2;
};
var jb = function() {
  Pt3.init = function(t, e, r) {
    if (r)
      return Pt3[r] || (Pt3[r] = di[r] = kc(t, e, r), Pt3[r]._loaded()), Pt3[r];
    var n = Pt3;
    di[nr] ? n = di[nr] : t && (n = kc(t, e, nr), n._loaded(), di[nr] = n), Pt3 = n, Pu === Mb && (Dt3[nr] = Pt3), Fb();
  };
};
var Wb = function() {
  function t() {
    t.done || (t.done = true, $0 = true, Z0 = false, T2.each(di, function(n) {
      n._dom_loaded();
    }));
  }
  function e() {
    try {
      rt3.documentElement.doScroll("left");
    } catch {
      setTimeout(e, 1);
      return;
    }
    t();
  }
  if (rt3.addEventListener)
    rt3.readyState === "complete" ? t() : rt3.addEventListener("DOMContentLoaded", t, false);
  else if (rt3.attachEvent) {
    rt3.attachEvent("onreadystatechange", t);
    var r = false;
    try {
      r = Dt3.frameElement === null;
    } catch {
    }
    rt3.documentElement.doScroll && r && e();
  }
  T2.register_event(Dt3, "load", t, true);
};
function Ub() {
  return Pu = Q02, Pt3 = new ce, jb(), Pt3.init(), Wb(), Pt3;
}
var zb = Ub();
var no = zb;
function Du() {
  return typeof window < "u" ? window.location.host.indexOf("discordsays.com") !== -1 : false;
}
var pd = false;
function Vb(t) {
  var r;
  if (pd)
    return;
  let e = "https://ws.joinplayroom.com";
  if ((r = process.env) != null && r.REACT_APP_SERVER) {
    const n = process.env.REACT_APP_SERVER.split("://");
    e = `${n[0] === "wss" ? "https" : "http"}://${n[1]}`;
  }
  t && (e = t), no.init("2647310162474a4f7ca66a277c543032", {
    debug: false,
    api_host: `${e}/__mix`
  }), pd = true;
}
Vb(Du() ? `${window.location.protocol}//${window.location.host}/.proxy/_ws` : null);
var ds = () => {
  var t;
  return typeof window < "u" && ((t = window == null ? undefined : window._PLAYROOM_CONFIG) == null ? undefined : t.sdkMode);
};
var mi = {
  identify: (t) => {
    try {
      ds() && no.identify(t);
    } catch (e) {
      console.log(e);
    }
  },
  alias: (t) => {
    try {
      ds() && no.alias(t);
    } catch (e) {
      console.log(e);
    }
  },
  track: (t, e) => {
    try {
      ds() && no.track(t, e);
    } catch (r) {
      console.log(r);
    }
  },
  people: {
    set: (t) => {
      try {
        ds() && no.people.set(t);
      } catch (e) {
        console.log(e);
      }
    }
  }
};
var da = {};
var qb = {
  get exports() {
    return da;
  },
  set exports(t) {
    da = t;
  }
};
var Cc = {};
var Hb = {
  get exports() {
    return Cc;
  },
  set exports(t) {
    Cc = t;
  }
};
(function() {
  var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", e = {
    rotl: function(r, n) {
      return r << n | r >>> 32 - n;
    },
    rotr: function(r, n) {
      return r << 32 - n | r >>> n;
    },
    endian: function(r) {
      if (r.constructor == Number)
        return e.rotl(r, 8) & 16711935 | e.rotl(r, 24) & 4278255360;
      for (var n = 0;n < r.length; n++)
        r[n] = e.endian(r[n]);
      return r;
    },
    randomBytes: function(r) {
      for (var n = [];r > 0; r--)
        n.push(Math.floor(Math.random() * 256));
      return n;
    },
    bytesToWords: function(r) {
      for (var n = [], i = 0, o = 0;i < r.length; i++, o += 8)
        n[o >>> 5] |= r[i] << 24 - o % 32;
      return n;
    },
    wordsToBytes: function(r) {
      for (var n = [], i = 0;i < r.length * 32; i += 8)
        n.push(r[i >>> 5] >>> 24 - i % 32 & 255);
      return n;
    },
    bytesToHex: function(r) {
      for (var n = [], i = 0;i < r.length; i++)
        n.push((r[i] >>> 4).toString(16)), n.push((r[i] & 15).toString(16));
      return n.join("");
    },
    hexToBytes: function(r) {
      for (var n = [], i = 0;i < r.length; i += 2)
        n.push(parseInt(r.substr(i, 2), 16));
      return n;
    },
    bytesToBase64: function(r) {
      for (var n = [], i = 0;i < r.length; i += 3)
        for (var o = r[i] << 16 | r[i + 1] << 8 | r[i + 2], s = 0;s < 4; s++)
          i * 8 + s * 6 <= r.length * 8 ? n.push(t.charAt(o >>> 6 * (3 - s) & 63)) : n.push("=");
      return n.join("");
    },
    base64ToBytes: function(r) {
      r = r.replace(/[^A-Z0-9+\/]/ig, "");
      for (var n = [], i = 0, o = 0;i < r.length; o = ++i % 4)
        o != 0 && n.push((t.indexOf(r.charAt(i - 1)) & Math.pow(2, -2 * o + 8) - 1) << o * 2 | t.indexOf(r.charAt(i)) >>> 6 - o * 2);
      return n;
    }
  };
  Hb.exports = e;
})();
var Tc = {
  utf8: {
    stringToBytes: function(t) {
      return Tc.bin.stringToBytes(unescape(encodeURIComponent(t)));
    },
    bytesToString: function(t) {
      return decodeURIComponent(escape(Tc.bin.bytesToString(t)));
    }
  },
  bin: {
    stringToBytes: function(t) {
      for (var e = [], r = 0;r < t.length; r++)
        e.push(t.charCodeAt(r) & 255);
      return e;
    },
    bytesToString: function(t) {
      for (var e = [], r = 0;r < t.length; r++)
        e.push(String.fromCharCode(t[r]));
      return e.join("");
    }
  }
};
var gd = Tc;
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
var Yb = function(t) {
  return t != null && (e1(t) || Kb(t) || !!t._isBuffer);
};
function e1(t) {
  return !!t.constructor && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
}
function Kb(t) {
  return typeof t.readFloatLE == "function" && typeof t.slice == "function" && e1(t.slice(0, 0));
}
(function() {
  var t = Cc, e = gd.utf8, r = Yb, n = gd.bin, i = function(o, s) {
    o.constructor == String ? s && s.encoding === "binary" ? o = n.stringToBytes(o) : o = e.stringToBytes(o) : r(o) ? o = Array.prototype.slice.call(o, 0) : !Array.isArray(o) && o.constructor !== Uint8Array && (o = o.toString());
    for (var a = t.bytesToWords(o), l = o.length * 8, c2 = 1732584193, u = -271733879, f2 = -1732584194, d = 271733878, h = 0;h < a.length; h++)
      a[h] = (a[h] << 8 | a[h] >>> 24) & 16711935 | (a[h] << 24 | a[h] >>> 8) & 4278255360;
    a[l >>> 5] |= 128 << l % 32, a[(l + 64 >>> 9 << 4) + 14] = l;
    for (var { _ff: g2, _gg: p, _hh: y4, _ii: b } = i, h = 0;h < a.length; h += 16) {
      var x = c2, S = u, O = f2, _ = d;
      c2 = g2(c2, u, f2, d, a[h + 0], 7, -680876936), d = g2(d, c2, u, f2, a[h + 1], 12, -389564586), f2 = g2(f2, d, c2, u, a[h + 2], 17, 606105819), u = g2(u, f2, d, c2, a[h + 3], 22, -1044525330), c2 = g2(c2, u, f2, d, a[h + 4], 7, -176418897), d = g2(d, c2, u, f2, a[h + 5], 12, 1200080426), f2 = g2(f2, d, c2, u, a[h + 6], 17, -1473231341), u = g2(u, f2, d, c2, a[h + 7], 22, -45705983), c2 = g2(c2, u, f2, d, a[h + 8], 7, 1770035416), d = g2(d, c2, u, f2, a[h + 9], 12, -1958414417), f2 = g2(f2, d, c2, u, a[h + 10], 17, -42063), u = g2(u, f2, d, c2, a[h + 11], 22, -1990404162), c2 = g2(c2, u, f2, d, a[h + 12], 7, 1804603682), d = g2(d, c2, u, f2, a[h + 13], 12, -40341101), f2 = g2(f2, d, c2, u, a[h + 14], 17, -1502002290), u = g2(u, f2, d, c2, a[h + 15], 22, 1236535329), c2 = p(c2, u, f2, d, a[h + 1], 5, -165796510), d = p(d, c2, u, f2, a[h + 6], 9, -1069501632), f2 = p(f2, d, c2, u, a[h + 11], 14, 643717713), u = p(u, f2, d, c2, a[h + 0], 20, -373897302), c2 = p(c2, u, f2, d, a[h + 5], 5, -701558691), d = p(d, c2, u, f2, a[h + 10], 9, 38016083), f2 = p(f2, d, c2, u, a[h + 15], 14, -660478335), u = p(u, f2, d, c2, a[h + 4], 20, -405537848), c2 = p(c2, u, f2, d, a[h + 9], 5, 568446438), d = p(d, c2, u, f2, a[h + 14], 9, -1019803690), f2 = p(f2, d, c2, u, a[h + 3], 14, -187363961), u = p(u, f2, d, c2, a[h + 8], 20, 1163531501), c2 = p(c2, u, f2, d, a[h + 13], 5, -1444681467), d = p(d, c2, u, f2, a[h + 2], 9, -51403784), f2 = p(f2, d, c2, u, a[h + 7], 14, 1735328473), u = p(u, f2, d, c2, a[h + 12], 20, -1926607734), c2 = y4(c2, u, f2, d, a[h + 5], 4, -378558), d = y4(d, c2, u, f2, a[h + 8], 11, -2022574463), f2 = y4(f2, d, c2, u, a[h + 11], 16, 1839030562), u = y4(u, f2, d, c2, a[h + 14], 23, -35309556), c2 = y4(c2, u, f2, d, a[h + 1], 4, -1530992060), d = y4(d, c2, u, f2, a[h + 4], 11, 1272893353), f2 = y4(f2, d, c2, u, a[h + 7], 16, -155497632), u = y4(u, f2, d, c2, a[h + 10], 23, -1094730640), c2 = y4(c2, u, f2, d, a[h + 13], 4, 681279174), d = y4(d, c2, u, f2, a[h + 0], 11, -358537222), f2 = y4(f2, d, c2, u, a[h + 3], 16, -722521979), u = y4(u, f2, d, c2, a[h + 6], 23, 76029189), c2 = y4(c2, u, f2, d, a[h + 9], 4, -640364487), d = y4(d, c2, u, f2, a[h + 12], 11, -421815835), f2 = y4(f2, d, c2, u, a[h + 15], 16, 530742520), u = y4(u, f2, d, c2, a[h + 2], 23, -995338651), c2 = b(c2, u, f2, d, a[h + 0], 6, -198630844), d = b(d, c2, u, f2, a[h + 7], 10, 1126891415), f2 = b(f2, d, c2, u, a[h + 14], 15, -1416354905), u = b(u, f2, d, c2, a[h + 5], 21, -57434055), c2 = b(c2, u, f2, d, a[h + 12], 6, 1700485571), d = b(d, c2, u, f2, a[h + 3], 10, -1894986606), f2 = b(f2, d, c2, u, a[h + 10], 15, -1051523), u = b(u, f2, d, c2, a[h + 1], 21, -2054922799), c2 = b(c2, u, f2, d, a[h + 8], 6, 1873313359), d = b(d, c2, u, f2, a[h + 15], 10, -30611744), f2 = b(f2, d, c2, u, a[h + 6], 15, -1560198380), u = b(u, f2, d, c2, a[h + 13], 21, 1309151649), c2 = b(c2, u, f2, d, a[h + 4], 6, -145523070), d = b(d, c2, u, f2, a[h + 11], 10, -1120210379), f2 = b(f2, d, c2, u, a[h + 2], 15, 718787259), u = b(u, f2, d, c2, a[h + 9], 21, -343485551), c2 = c2 + x >>> 0, u = u + S >>> 0, f2 = f2 + O >>> 0, d = d + _ >>> 0;
    }
    return t.endian([c2, u, f2, d]);
  };
  i._ff = function(o, s, a, l, c2, u, f2) {
    var d = o + (s & a | ~s & l) + (c2 >>> 0) + f2;
    return (d << u | d >>> 32 - u) + s;
  }, i._gg = function(o, s, a, l, c2, u, f2) {
    var d = o + (s & l | a & ~l) + (c2 >>> 0) + f2;
    return (d << u | d >>> 32 - u) + s;
  }, i._hh = function(o, s, a, l, c2, u, f2) {
    var d = o + (s ^ a ^ l) + (c2 >>> 0) + f2;
    return (d << u | d >>> 32 - u) + s;
  }, i._ii = function(o, s, a, l, c2, u, f2) {
    var d = o + (a ^ (s | ~l)) + (c2 >>> 0) + f2;
    return (d << u | d >>> 32 - u) + s;
  }, i._blocksize = 16, i._digestsize = 16, qb.exports = function(o, s) {
    if (o == null)
      throw new Error("Illegal argument " + o);
    var a = t.wordsToBytes(i(o, s));
    return s && s.asBytes ? a : s && s.asString ? n.bytesToString(a) : t.bytesToHex(a);
  };
})();
var Ln3 = {
  roomLimitExceed: {
    code: 4444,
    reason: "ROOM_LIMIT_EXCEEDED"
  },
  playerKicked: {
    code: 4999,
    reason: "PLAYER_KICKED"
  },
  unknown: {
    code: 0,
    reason: "UNKNOWN"
  }
};
function Xb(t, e) {
  e || (e = {}), typeof e == "function" && (e = { cmp: e });
  var r = typeof e.cycles == "boolean" ? e.cycles : false, n = e.cmp && function(o) {
    return function(s) {
      return function(a, l) {
        var c2 = { key: a, value: s[a] }, u = { key: l, value: s[l] };
        return o(c2, u);
      };
    };
  }(e.cmp), i = [];
  return function o(s) {
    if (s && s.toJSON && typeof s.toJSON == "function" && (s = s.toJSON()), s !== undefined) {
      if (typeof s == "number")
        return isFinite(s) ? "" + s : "null";
      if (typeof s != "object")
        return JSON.stringify(s);
      var a, l;
      if (Array.isArray(s)) {
        for (l = "[", a = 0;a < s.length; a++)
          a && (l += ","), l += o(s[a]) || "null";
        return l + "]";
      }
      if (s === null)
        return "null";
      if (i.indexOf(s) !== -1) {
        if (r)
          return JSON.stringify("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      }
      var c2 = i.push(s) - 1, u = Object.keys(s).sort(n && n(s));
      for (l = "", a = 0;a < u.length; a++) {
        var f2 = u[a], d = o(s[f2]);
        d && (l && (l += ","), l += JSON.stringify(f2) + ":" + d);
      }
      return i.splice(c2, 1), "{" + l + "}";
    }
  }(t);
}
function t1(t) {
  return Object.keys(t).forEach((e) => {
    t[e] && typeof t[e] == "object" ? t1(t[e]) : (t[e] === undefined || t[e] === null) && delete t[e];
  }), t;
}
function Jb(t, e) {
  return Object.keys(t).map(function(r) {
    return e + encodeURIComponent(r) + "=" + encodeURIComponent(t[r]);
  }).join("&");
}
function Qb(t) {
  const e = t != null && t.profile ? Jb(t.profile, "profile_") : "", r = t != null && t.reconnectGracePeriod ? `reconnectGracePeriod=${t.reconnectGracePeriod}` : "", n = t != null && t.maxPlayersPerRoom ? `maxPlayersPerRoom=${t.maxPlayersPerRoom}` : "", i = t != null && t.gameId ? `gameId=${t.gameId}` : "", o = sessionStorage.getItem("pr_dcd_jwt"), s = o ? `discord_jwt=${o}` : "";
  return [
    e,
    r,
    n,
    i,
    s
  ].filter(Boolean).join("&");
}
function Oc(t, e = true) {
  let r = "wss://ws.joinplayroom.com";
  return Du() && (r = `wss://${window.location.host}/.proxy/_ws`), t != null && t.websocketBaseUrl && (r = t == null ? undefined : t.websocketBaseUrl), {}.VITE_APP_SERVER && (r = {}.VITE_APP_SERVER), e ? r : r.replace("wss://", "https://").replace("ws://", "http://");
}

class Ul extends gu {
  constructor({
    isHost: e,
    roomId: r,
    isSpectator: n,
    letEveryoneWriteState: i = false,
    enableDeltaCompression: o = false,
    sdkOptions: s
  }) {
    super(), this.hostname = Oc(s), this.isHost = e, this.isSpectator = n, this.roomId = r, this.myId = yb(), this.renderServerId = null, this.lastSeenTimestamp = 0, this.lastUpdateOrderSeen = 0, this.lastUpdateSyncMessageSeen = undefined, this.enableDeltaCompression = o, this.sdkOptions = s, this.playerStates = {}, this.autoAdmitPlayers = true, this.waitingPlayerStates = {}, this.syncIntervalTime = p02.SyncIntervalTime, this.pendingDeletionPlayerIds = [], this.spectatorStates = {}, this.ignoreNextSync = false, this.bootDate = Date.now(), this.wsHeartbeatInterval = 0, this.iUpdatedStateAt = {}, this.requestSyncs = true, this.rpcIdWasCalled = {}, this.rpcCallbacks = {}, this.globalState = JSON.parse(JSON.stringify((s == null ? undefined : s.defaultStates) ?? {})), this.defaultGlobalState = JSON.parse(JSON.stringify((s == null ? undefined : s.defaultStates) ?? {})), this.globalStateReadTime = {}, this.letEveryoneWriteState = i, this.reconnectAttempts = 0, this.joinWebsocket(), mi.identify(F02());
  }
  isRenderServer() {
    return this.myId === this.renderServerId;
  }
  stateHash(e) {
    let r = JSON.stringify(e || this.getAllState());
    const n = ["defaultPlayersStates", "defaultGlobalState"];
    let i = t1(JSON.parse(r));
    return n.forEach((o) => {
      delete i[o];
    }), da(Xb(i));
  }
  getBootDate() {
    return this.bootDate;
  }
  getAllState() {
    var e = {
      ...this.globalState,
      defaultGlobalState: this.defaultGlobalState,
      defaultPlayersStates: {},
      __players: {}
    };
    return Object.keys(this.playerStates).forEach((r) => {
      e.__players[r] = this.playerStates[r].getState(), e.defaultPlayersStates[r] = this.playerStates[r].getDefaultState();
    }), Object.keys(this.waitingPlayerStates).length > 0 ? (e.waitingPlayers = [], Object.keys(this.waitingPlayerStates).forEach((r) => {
      e.waitingPlayers.push(this.waitingPlayerStates[r].id);
    })) : delete e.waitingPlayers, e;
  }
  broadcastGlobalState(e = false) {
    const r = this.getAllState();
    let n = { sync: r, o: this.stateHash(r) };
    e && (n.force = true), this.websocketSend(JSON.stringify(n));
  }
  joinWebsocket(e = false) {
    let r = new WebSocket(this.hostname + "/api/room/" + this.roomId + "/websocket/" + (this.myId || "new") + (this.isHost && !e ? "/host" : "") + (this.isSpectator ? "/spectator" : "") + (this.sdkOptions ? "?" + Qb(this.sdkOptions) : ""));
    r.addEventListener("open", (n) => {
      this.reconnectAttempts = 0, this.emit("connection_opened"), this.ws = r, this.wsHeartbeatInterval = setInterval(() => {
        if (this.isRenderServerOrHostIfNotCasting)
          this.websocketSend(JSON.stringify({ beat: Date.now() })), this.broadcastGlobalState();
        else if (this.requestSyncs) {
          if (this.ignoreNextSync) {
            this.ignoreNextSync = false;
            return;
          }
          const i = this.stateHash();
          this.enableDeltaCompression ? this.websocketSend(JSON.stringify({
            beat: Date.now(),
            syncO: i
          })) : this.websocketSend(JSON.stringify({ beat: Date.now() }));
        }
      }, this.syncIntervalTime);
    }), r.addEventListener("error", (n) => {
      throw new Error(n.error);
    }), r.onerror = (n) => {
      throw new Error(n.message + " " + (this.hostname + "/api/room/" + this.roomId + "/websocket/" + (this.myId || "new") + (this.isHost ? "/host" : "") + (this.isSpectator ? "/spectator" : "")));
    }, r.addEventListener("message", (n) => {
      var s;
      let i = JSON.parse(n.data);
      if (i.error)
        this.emit("error", { type: "websocket", error: i.error });
      else if (i.newId) {
        if (this.myId = i.newId, xt3.set("myId", i.newId), !this.playerStates[this.myId] && !this.isSpectator && (this.playerStates[this.myId] = this.createPlayerState(this.myId)), i.profile && !this.isSpectator) {
          var o = this.playerStates[this.myId].getState("profile") || {};
          this.playerStates[this.myId].setState("profile", {
            ...o,
            ...i.profile
          });
        }
        i.bootDate && (this.bootDate = i.bootDate), this.isHost ? (this.emit("before_initial_sync"), this.broadcastGlobalState(), this.once("sync", (a) => {
          this.emit("connected");
        })) : this.emit("connected");
      } else if (i.joined && this.isRenderServerOrHostIfNotCasting)
        if (this.autoAdmitPlayers) {
          if (!this.playerStates[i.joined]) {
            this.playerStates[i.joined] = this.createPlayerState(i.joined, false, i.proxyBy, i.profile);
            let a = this.getState("__pOrder") || [];
            a.includes(i.joined) || (a.push(i.joined), this.setState("__pOrder", a));
          }
          this.emitPlayerJoined(this.playerStates[i.joined]);
        } else
          this.pendingDeletionPlayerIds.includes(i.joined) && this.playerStates[i.joined] ? this.playerStates[i.joined].startWebrtc() : this.waitingPlayerStates[i.joined] = this.createPlayerState(i.joined), this.pendingDeletionPlayerIds.includes(i.joined) && (this.pendingDeletionPlayerIds = this.pendingDeletionPlayerIds.filter((a) => a !== i.joined));
      else if (i.renderServerUpdate)
        this.renderServerId !== i.renderServerUpdate && (this.renderServerId = i.renderServerUpdate, this.bootDate = i.bootDate, this.isRenderServer() ? (Object.keys(this.playerStates).forEach((a) => {
          this.playerStates[a].startWebrtc();
        }), Object.keys(this.spectatorStates).forEach((a) => {
          this.spectatorStates[a].startWebrtc();
        })) : this.playerStates[this.myId].startWebrtc());
      else if (i.hostUpdate)
        this.isHost = i.hostUpdate === this.myId, this.emit("host_updated", this.isHost), this.isHost && this.isRenderServerOrHostIfNotCasting ? Object.keys(this.playerStates).forEach((a) => {
          this.playerStates[a].startWebrtc();
        }) : this.isSpectator || this.playerStates[this.myId].startWebrtc();
      else if (i.hostUpdateFailed)
        this.emit("host_updated_failed", i.hostUpdateFailed);
      else if (i.spectator)
        this.spectatorStates[i.spectator] || (this.spectatorStates[i.spectator] = this.createPlayerState(i.spectator, true), this.emit("spectator_joined", this.spectatorStates[i.spectator]));
      else if (i.quit)
        this.playerStates[i.quit] && this.isRenderServerOrHostIfNotCasting && this.autoAdmitPlayers && this.playerStates[i.quit].disconnect(), this.playerStates[i.quit] && this.isRenderServerOrHostIfNotCasting && !this.autoAdmitPlayers && this.pendingDeletionPlayerIds.push(i.quit), this.waitingPlayerStates[i.quit] && this.waitingPlayerStates[i.quit].disconnect(), Ce("pquit", i.quit, this.renderServerId), this.renderServerId, i.quit;
      else if (i.signal)
        this.isRenderServerOrHostIfNotCasting && this.myId !== i.id && (this.playerStates[i.id] || this.spectatorStates[i.id]) ? (Ce("signal to host", i.signal, `from ${this.playerStates[i.id] ? "player" : ""}${this.spectatorStates[i.id] ? "spectator" : ""}`), this.playerStates[i.id] && this.playerStates[i.id].signal(i.signal), this.spectatorStates[i.id] && this.spectatorStates[i.id].signal(i.signal)) : !this.isRenderServerOrHostIfNotCasting && this.myId === i.for && (Ce("signal to client", i.signal), this.playerStates[this.myId] && this.playerStates[this.myId].signal(i.signal), this.spectatorStates[this.myId] && this.spectatorStates[this.myId].signal(i.signal));
      else if (i.pinput && this.isRenderServerOrHostIfNotCasting)
        this.passPlayerInput(i.id, i.pinput);
      else if (i.pong && this.isRenderServer())
        this.playerStates[i.id] && this.playerStates[i.id].handlePingResponse(i);
      else if (i.ping && !this.isRenderServer() && i.for === this.myId)
        this.websocketSend(JSON.stringify({
          pong: i.ping
        }));
      else if (i.pstate)
        this.setPlayerState(i);
      else if (i.gstate)
        this.setLocalStateFromServerGlobalState(i.gstate[0], i.gstate[1]);
      else if (i.sync) {
        if (this.emit("sync", i.sync), !this.isRenderServerOrHostIfNotCasting) {
          const { defaultGlobalState: a, ...l } = i.sync;
          this.setFullLocalState(l, i.o), this.setFullDefaultLocalState(a, i.o);
        }
        this.emit("post_sync", i.sync);
      } else if (i.dsync) {
        const a = j02.applyObjectPatch(this.getAllState(), i.dsync);
        this.emit("sync", a), this.emit("dsync", a), this.setFullLocalState(a, i.o), this.emit("post_dsync", a);
      } else
        i.kick ? this.myId === i.kick || this.isRenderServerOrHostIfNotCasting && ((s = this.playerStates[i.kick]) != null && s.isProxyPlayer()) && this.removeProxyPlayer(i.kick) : i.rpc ? this.rpcHandle(i, true) : i.rpcResp ? this.rpcResponseHandle(i, true) : i.default_gstate ? this.setLocalDefaultState(i.default_gstate[0], i.default_gstate[1]) : i.default_pstate ? this.setDefaultPlayerState(i) : i.timestamp > this.lastSeenTimestamp && (this.emit("message", { type: "reliable", data: i }), this.lastSeenTimestamp = i.timestamp);
    }), r.addEventListener("close", (n) => {
      const i = Object.values(Ln3).map((o) => o.code);
      Ce("WebSocket closed, reconnecting:", n.code, n.reason), clearInterval(this.wsHeartbeatInterval), n.code === 4000 ? (this.emit("permission_error"), this.disconnect(n.code)) : n.code === 4001 || n.code === 4002 ? this.disconnect(n.code) : n.reason === "PLAYER_KICKED" ? this.disconnect(n.code, n.reason) : this.wasDisconnectedManually ? (Ce("Websocket was closed manually, not reconnecting"), clearInterval(this.wsHeartbeatInterval)) : i.indexOf(n.code) === -1 && this.reconnectAttempts < 3 ? (clearInterval(this.wsHeartbeatInterval), this.reconnectAttempts++, setTimeout(() => {
        var s;
        const o = JSON.parse(JSON.stringify((s = this.playerStates[this.myId]) == null ? undefined : s.getState())) || {};
        this.joinWebsocket(true), this.isRenderServerOrHostIfNotCasting || this.once("post_dsync", (a) => {
          Object.keys(o).forEach((l) => {
            var c2;
            (c2 = this.playerStates[this.myId]) == null || c2.setState(l, o[l], true);
          });
        });
      }, this.isHost ? 1000 : 1500)) : this.disconnect(n.code);
    }), r.addEventListener("error", (n) => {
      Ce("WebSocket error, reconnecting:", n, typeof n), clearInterval(this.wsHeartbeatInterval);
    });
  }
  get isRenderServerOrHostIfNotCasting() {
    return !!(this.isRenderServer() || !this.getState("casting") && this.isHost);
  }
  setAutoAdmitPlayers(e) {
    this.isRenderServerOrHostIfNotCasting && this.autoAdmitPlayers !== e && (Ce("setAutoAdmitPlayers", e), !this.autoAdmitPlayers && e && (Object.keys(this.waitingPlayerStates).length > 0 && Object.keys(this.waitingPlayerStates).forEach((r) => {
      this.playerStates[r] = this.waitingPlayerStates[r], this.emitPlayerJoined(this.playerStates[r]);
    }), this.waitingPlayerStates = {}, this.pendingDeletionPlayerIds.forEach((r) => {
      this.playerStates[r] && this.playerStates[r].disconnect();
    }), this.pendingDeletionPlayerIds = []), this.autoAdmitPlayers = e);
  }
  addProxyPlayer() {
    if (this.isRenderServerOrHostIfNotCasting) {
      var e = ja(9);
      return this.broadcast({ joined: e }, true), this.playerStates[e] = this.createPlayerState(e, false, true), this.playerStates[e];
    }
  }
  removeProxyPlayer(e) {
    this.playerStates[e] && this.broadcast({ quit: e }, true);
  }
  kickPlayer(e, r) {
    this.broadcast({ kick: e }, true);
    const n = this.on("player_quit", (i) => {
      i === e && (n(), r());
    });
  }
  transferHost(e, r, n) {
    this.broadcast({ transfer: e }, true), this.once("host_updated", () => {
      r();
    }), this.once("host_updated_failed", (i) => {
      n(i);
    });
  }
  createPlayerState(e, r, n = false, i) {
    var a, l, c2;
    let o = JSON.parse(JSON.stringify(((a = this.sdkOptions) == null ? undefined : a.defaultPlayerStates) ?? {}));
    i && (o.profile = i);
    var s = new pb({
      websocketSend: (u) => this.websocketSend(u),
      id: e,
      myId: this.myId,
      isRenderServer: () => this.isRenderServer(),
      isRenderServerOrHostIfNotCasting: () => this.isRenderServerOrHostIfNotCasting,
      playerIsSpectator: r,
      playerIsProxy: n,
      broadcastUnreliable: this.broadcastUnreliable.bind(this),
      setPlayerState: this.setPlayerState.bind(this),
      getBootDate: this.getBootDate.bind(this),
      avatarList: (l = this.sdkOptions) == null ? undefined : l.avatars,
      kickPlayer: this.kickPlayer.bind(this),
      state: o,
      defaultPlayerState: JSON.parse(JSON.stringify(((c2 = this.sdkOptions) == null ? undefined : c2.defaultPlayerStates) ?? {}))
    });
    return (this.isRenderServerOrHostIfNotCasting || e === this.myId) && (Ce("startWebrtc::createPlayerState", e, this.isRenderServerOrHostIfNotCasting), s.startWebrtc()), s.on("quit", () => {
      Ce("pquit", s.id), delete this.playerStates[s.id], this.emit("players", this.playerStates), this.emit("player_quit", s.id), this.waitingPlayerStates[s.id] && delete this.waitingPlayerStates[s.id];
    }), s.on("global_state_unreliable", (u) => {
      this.setLocalState(u[0], u[1], true);
    }), s.on("rpc_call_unreliable", this.rpcHandle.bind(this)), s;
  }
  emitPlayerJoined(e) {
    bb(e, "profile").then(() => {
      this.emit("joined", e), this.emit("players", this.playerStates);
    });
  }
  broadcastUnreliable(e) {
    Object.keys(this.playerStates).forEach((r) => {
      if (r !== this.myId)
        try {
          Ce("broadcast unreliable", r, e), this.playerStates[r].send(e, false, true);
        } catch (n) {
          Ce(n);
        }
    });
  }
  websocketSend(e) {
    try {
      this.ws.send(e);
    } catch (r) {
      Ce(r);
    }
  }
  rpcHandle(e, r) {
    this.rpcIdWasCalled[e.rid] || (this.rpcIdWasCalled[e.rid] = true, this.emit("rpc", e, r));
  }
  rpcCall(e, r) {
    return this.ws && this.websocketSend(JSON.stringify(e)), new Promise((n, i) => {
      this.rpcCallbacks[e.rid] = {
        resolve: (o) => {
          r && r(o), n(o);
        },
        reject: i
      };
    });
  }
  rpcResponse(e) {
    this.ws && this.websocketSend(JSON.stringify(e));
  }
  rpcResponseHandle(e) {
    this.rpcCallbacks[e.rid] && (this.rpcCallbacks[e.rid].resolve(e.rpcResp), delete this.rpcCallbacks[e.rid]);
  }
  broadcast(e, r) {
    r ? this.ws && this.websocketSend(JSON.stringify(e)) : (Object.keys(this.spectatorStates).forEach((n) => {
      n !== this.myId && this.spectatorStates[n].send(e, r);
    }), Object.keys(this.playerStates).forEach((n) => {
      n !== this.myId && this.playerStates[n].send(e, r);
    }));
  }
  setPlayerState(e) {
    var r = false;
    this.playerStates[e.pstate] && (r = this.playerStates[e.pstate].setLocalState(e.d[0], e.d[1], e.o)), this.waitingPlayerStates[e.pstate] && (r = this.waitingPlayerStates[e.pstate].setLocalState(e.d[0], e.d[1], e.o)), r && (this.ignoreNextSync = true);
  }
  passPlayerInput(e, r) {
    this.playerStates[e] ? this.playerStates[e].handleInput(r, true) : this.waitingPlayerStates[e] && this.waitingPlayerStates[e].handleInput(r, true);
  }
  getState(e) {
    return e ? typeof this.globalState[e] == "object" ? JSON.parse(JSON.stringify(this.globalState[e])) : this.globalState[e] : this.globalState || {};
  }
  setState(e, r, n = true) {
    const i = typeof r == "object" ? JSON.parse(JSON.stringify(r)) : r, o = this.setLocalState(e, i);
    (this.isHost || this.isRenderServer() || this.letEveryoneWriteState) && o && (this.iUpdatedStateAt[e] = Date.now(), this.broadcast({ gstate: [e, i] }, n));
  }
  setLocalStateFromServerGlobalState(e, r) {
    switch (e) {
      case "round.timer": {
        const n = this.getState("round.timer"), i = r > n ? r : n;
        this.setLocalState(e, i);
        break;
      }
      default: {
        this.setLocalState(e, r);
        break;
      }
    }
  }
  setLocalState(e, r, n = false) {
    return JSON.stringify(this.globalState[e]) === JSON.stringify(r) ? false : (r === undefined ? delete this.globalState[e] : this.globalState[e] = r, n && (this.ignoreNextSync = true), this.emit("state", this.globalState, e), true);
  }
  setFullLocalState(e, r) {
    this.lastUpdateOrderSeen = r, this.lastUpdateSyncMessageSeen = JSON.parse(JSON.stringify(e)), this.isHost && (e.path = e.path || this.globalState.path);
    var n = e.__players || {};
    delete e.__players, Object.keys(e).forEach((i) => {
      (!this.iUpdatedStateAt[i] || this.iUpdatedStateAt[i] + this.syncIntervalTime < Date.now()) && this.setLocalState(i, e[i]);
    }), Object.keys(this.globalState).forEach((i) => {
      var o;
      (!this.iUpdatedStateAt[i] || this.iUpdatedStateAt[i] + this.syncIntervalTime < Date.now()) && !e[i] && e[i] !== 0 && (Ce("set default states for the globalState"), this.setLocalState(i, (o = this.defaultGlobalState) == null ? undefined : o[i]));
    }), Object.keys(n).forEach((i) => {
      var o;
      this.playerStates[i] || (this.playerStates[i] = this.createPlayerState(i), this.emitPlayerJoined(this.playerStates[i])), this.playerStates[i].setFullLocalState(n[i], r), (o = e == null ? undefined : e.defaultPlayersStates) != null && o[i] && this.playerStates[i].setFullDefaultLocalState(e.defaultPlayersStates[i], r);
    }), Object.keys(this.playerStates).forEach((i) => {
      i !== this.myId && !n[i] && (e.waitingPlayers || []).indexOf(i) === -1 && (Ce("player removed in state, disconnecting them", i), this.playerStates[i].disconnect());
    });
  }
  getDefaultState(e) {
    return e ? typeof this.defaultGlobalState[e] == "object" ? JSON.parse(JSON.stringify(this.defaultGlobalState[e])) : this.defaultGlobalState[e] : this.defaultGlobalState || {};
  }
  setDefaultState(e, r) {
    const n = typeof r == "object" ? JSON.parse(JSON.stringify(r)) : r, i = this.setLocalDefaultState(e, n);
    (this.isHost || this.isRenderServer() || this.letEveryoneWriteState) && i && this.broadcast({ default_gstate: [e, n] }, true);
  }
  setLocalDefaultState(e, r) {
    return JSON.stringify(this.defaultGlobalState[e]) === JSON.stringify(r) ? false : (r == null ? delete this.defaultGlobalState[e] : this.defaultGlobalState[e] = r, true);
  }
  setFullDefaultLocalState(e) {
    this.defaultGlobalState = {
      ...this.defaultGlobalState,
      ...e
    };
  }
  setDefaultPlayerState(e) {
    this.playerStates[e.default_pstate] && this.playerStates[e.default_pstate].setDefaultLocalState(e.d[0], e.d[1], e.o);
  }
  getHostname(e = true) {
    return Oc(this.sdkOptions, e);
  }
  disconnect(e, r) {
    Ce("disconnecting with eventCode:", e, r), r === "MANUAL_DISCONNECT" && (this.wasDisconnectedManually = true), this.emit("disconnected", { eventCode: e, reason: r }), Object.keys(this.playerStates).forEach((n) => {
      this.playerStates[n].disconnect({ eventCode: e });
    }), Object.keys(this.waitingPlayerStates).forEach((n) => {
      this.waitingPlayerStates[n].disconnect({ eventCode: e });
    }), this.ws && this.ws.close();
  }
}
function ha(t, e) {
  e || (e = "123456789ABCDEFGHIJKLMNPQRSTUVWXYZ");
  for (var r = "", n = t;n > 0; --n)
    r += e[Math.floor(Math.random() * e.length)];
  return r;
}
var Gb = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var Vi = {
  ROOMSTATE: "ROOMSTATE",
  GAMESTATE: "GAMESTATE",
  USERSTATE: "USERSTATE"
};
var Zb = {
  ROOMSTATE: "Room",
  GAMESTATE: "Game",
  USERSTATE: "User"
};
async function $b(t) {
  var e, r;
  if (t.t = Date.now(), t.timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone, t.localTime = (/* @__PURE__ */ new Date()).toLocaleTimeString([], {
    hour: "2-digit",
    minute: "2-digit",
    hour12: false
  }), t.weekday = Gb[(/* @__PURE__ */ new Date()).getDay()], typeof window < "u" && ((e = window == null ? undefined : window._PLAYROOM_CONFIG) != null && e.sdkMode)) {
    if (t.sdkMode = true, t.sdkVersion = (r = window == null ? undefined : window._PLAYROOM_CONFIG) == null ? undefined : r.sdkVersion, true)
      return Ce("analytics:", t);
    try {
      mi.track(`${Zb[t.type]}: ${t.event || ""}`, t);
    } catch (n) {
      console.error(n);
    }
  }
}
var ir;
function l3() {
  return ir;
}
class u3 extends gu {
  constructor(e = {}) {
    super(), this.connection = false, this.currentRoom = false, this.isConnected = false, this.singlePlayerMode = false, this.letEveryoneWriteState = false, this.sdkOptions = e;
  }
  createRoom(e, r = false, n = false) {
    this.letEveryoneWriteState = r, e || (e = this._generateRoomId()), e = e.toUpperCase(), this.connection = new Ul({
      isHost: true,
      roomId: e,
      letEveryoneWriteState: this.letEveryoneWriteState,
      enableDeltaCompression: n,
      sdkOptions: this.sdkOptions
    }), this.currentRoom = e, this.listenToEvents(), this.emit("connection_initiated");
  }
  isRenderServer() {
    if (this.connection)
      return this.connection.isRenderServer();
  }
  get isMultiplayerCastScreen() {
    return !!(!this.singlePlayerMode && this.isSpectator() && !this.isHost());
  }
  get isHost() {
    return this.connection ? this.connection.isHost : false;
  }
  get isSpectator() {
    return this.connection ? this.connection.isSpectator : false;
  }
  get isRenderServerOrHostIfNotCasting() {
    return !!(this.connection && this.connection.isRenderServerOrHostIfNotCasting);
  }
  listenToEvents() {
    this.connection.on("joined", (e) => {
      this.emit("joined", e), this.isRenderServerOrHostIfNotCasting && this.roomLog(Vi.ROOMSTATE, "player_joined", {
        playerId: e.id
      });
    }), this.connection.on("player_quit", (e) => {
      this.isRenderServerOrHostIfNotCasting && this.roomLog(Vi.ROOMSTATE, "player_quit", {
        playerId: e
      });
    }), this.connection.on("state", (e, r) => {
      this.emit("state", e, r);
    }), this.connection.on("host_updated", (e) => {
      e && (this.getState("uid") || (this.setState("uid", ja(7)), this.setState("id", this.currentRoom), this.setState("meta", {
        creatorUserId: this.connection.myId,
        creatorPermId: F02()
      })));
    }), this.connection.on("rpc", (e) => {
      this.emit("rpc", e);
    }), this.connection.on("connected", () => {
      this.isConnected = true, this.emit("connected"), this.isHost && (this.emit("room_created", { id: this.currentRoom }), this.roomLog(Vi.ROOMSTATE, "room_created", {
        host: this.connection.myId
      }));
    }), this.connection.on("reconnecting", () => {
      this.emit("reconnecting");
    }), this.connection.on("permission_error", () => {
      this.isHost ? this.createRoom() : (this.isConnected = false, this.emit("permission_error"));
    }), this.connection.on("host_left", () => {
      this.isConnected = false, this.emit("host_left");
    }), this.connection.on("disconnected", (e) => {
      this.isConnected = false, this.emit("disconnected", e);
    }), this.connection.on("players", (e) => {
      Object.keys(this.connection.playerStates).length > 0 && (this.singlePlayerMode = false), this.emit("players", e);
    }), this.connection.on("host_updated", (e) => {
      this.emit("host_updated", e);
    });
  }
  _waitforConnection() {
    return new Promise((e) => {
      this.isConnected ? e() : this.once("connected", e);
    });
  }
  on(e, r, n) {
    return e === "joined" && this._waitforConnection().then(() => {
      const i = this.getState("__pOrder") || [];
      Object.keys(this.connection.playerStates).sort((s, a) => {
        const l = i.indexOf(s), c2 = i.indexOf(a);
        return l === -1 && c2 === -1 ? 0 : l === -1 ? 1 : c2 === -1 ? -1 : l - c2;
      }).forEach((s) => {
        r(this.connection.playerStates[s]);
      });
    }), e === "players" && this._waitforConnection().then(() => {
      r(this.connection.playerStates);
    }), super.on(e, r, n);
  }
  once(e, r) {
    return e === "connection_initiated" && this.connection && r(), super.once(e, r);
  }
  setDeltaCompression(e) {
    this.connection.enableDeltaCompression = e;
  }
  joinRoom(e, r = false, n = false) {
    this.letEveryoneWriteState = r, e || (e = this._generateRoomId()), e = e.toUpperCase(), this.connection = new Ul({
      isHost: false,
      roomId: e,
      letEveryoneWriteState: this.letEveryoneWriteState,
      enableDeltaCompression: n,
      sdkOptions: this.sdkOptions
    }), this.currentRoom = e, this.listenToEvents(), this.emit("connection_initiated");
  }
  _generateRoomId() {
    var e;
    return (e = this.sdkOptions) != null && e.persistentMode ? `PER_${ha(26)}` : ha(4);
  }
  spectateRoom(e, r, n = false, i = false) {
    this.letEveryoneWriteState = n, e || (e = this._generateRoomId()), r && (this.singlePlayerMode = true), e = e.toUpperCase(), this.connection = new Ul({
      isSpectator: true,
      roomId: e,
      letEveryoneWriteState: this.letEveryoneWriteState,
      enableDeltaCompression: i,
      sdkOptions: this.sdkOptions
    }), this.currentRoom = e, this.listenToEvents(), this.emit("connection_initiated");
  }
  leaveRoom() {
    this.connection.disconnect(undefined, "MANUAL_DISCONNECT"), this.currentRoom = false, delete this.connection;
  }
  getState(e) {
    return this.connection ? e ? this.connection.getState(e) : this.connection.getState() : e === undefined ? {} : undefined;
  }
  getDefaultState(e) {
    return this.connection ? e ? this.connection.getDefaultState(e) : this.connection.getDefaultState() : e === undefined ? {} : undefined;
  }
  setState(e, r, n = true) {
    this.connection && (this.isSpectator && !this.isRenderServer() || this.connection.setState(e, r, n));
  }
  setDefaultState(e, r) {
    this.connection && (this.isSpectator && !this.isRenderServer() || this.connection.setDefaultState(e, r));
  }
  setRoundState(e, r, n = true) {
    this.connection && (this.isSpectator && !this.isRenderServer() || this.connection.setState(`round.${e}`, r, n));
  }
  getRoundState(e) {
    if (!this.connection)
      return {};
    if (e)
      return this.connection.getState(`round.${e}`);
    {
      let r = {};
      return Object.keys(this.connection.getState()).forEach((n) => {
        n.startsWith("round.") && (r[n.substring(6)] = this.connection.getState(n));
      }), r;
    }
  }
  resetRoundState() {
    Object.keys(this.connection.getState()).forEach((e) => {
      e.startsWith("round.") && this.connection.setState(e, undefined);
    }), Object.keys(this.connection.playerStates).forEach((e) => {
      this.connection.playerStates[e].resetRoundState();
    }), Object.keys(this.connection.spectatorStates).forEach((e) => {
      this.connection.spectatorStates[e].resetRoundState();
    });
  }
  addToWinLog(e, r) {
    let n = this.getState("winslog") || [];
    const i = Date.now();
    if (Ce("winnerPlayerId in addToWinLog:", r), typeof r == "object") {
      const o = r.map((s, a) => (this.gameLog("winner", { winnerId: s, gameId: e }), [e, s, i]));
      n = n.concat(o);
    } else
      this.gameLog("winner", { winnerId: r, gameId: e }), n.push([e, r, i]);
    Ce("currentLog (to be winslog): ", n), this.setState("winslog", n);
  }
  getMyPlayerState() {
    if (this.connection)
      return this.isSpectator ? this.connection.spectatorStates[this.connection.myId] : this.connection.playerStates[this.connection.myId];
  }
  addRenderStream(e) {
    if (!this.isRenderServer)
      return;
    const r = Object.values(this.connection.spectatorStates).filter((i) => i.id !== this.connection.myId);
    return Ce("addRenderStream", r), r.forEach((i) => i.peer.addStream(e)), this.connection.on("spectator_joined", (i) => {
      Ce("spectator_joined", i), i.once("webrtc_connected", () => {
        setTimeout(() => {
          Ce("adding stream"), i.peer.addStream(e);
        }, 5000);
      });
    });
  }
  removeRenderStream(e) {
    if (!this.isRenderServer)
      return;
    const r = Object.values(this.connection.spectatorStates).filter((n) => n.id !== this.connection.myId);
    Ce("removeRenderStream", r), r.forEach((n) => n.peer.removeStream(e));
  }
  getPlayers() {
    return this.connection ? this.singlePlayerMode ? this.connection.spectatorStates : this.connection.playerStates : {};
  }
  attachController(e) {
    this.detachControllerLegacy();
    var r = this.connection.playerStates[this.connection.myId];
    r && r.attachControllerLegacy(e);
  }
  detachControllerLegacy() {
    var e = this.connection.playerStates[this.connection.myId];
    e && e.detachControllerLegacy();
  }
  navigate(e, r) {
    if (this.connection && (this.isRenderServer() || this.isHost)) {
      var n = { pathname: e };
      r && (n.state = JSON.stringify(r)), this.setState("path", n), this.roomLog(Vi.ROOMSTATE, "navigate", n);
    }
  }
  async roomLog(e, r, n) {
    var i;
    if (this.connection && this.isRenderServerOrHostIfNotCasting) {
      const o = { ...n };
      o.type = e, o.event = r, o.roomId = this.currentRoom, o.roomUid = this.getState("uid"), this.getState("meta") && (n = { ...n, ...this.getState("meta") });
      const s = Object.keys(this.getPlayers());
      o.playersInRoom = s.length, this.getState("playlist") && (o.playlist = this.getState("playlist")), (i = this.sdkOptions) != null && i.gameId && (o.gameId = this.sdkOptions.gameId), await $b(o);
    }
  }
  async gameLog(e, r) {
    this.connection && this.isRenderServerOrHostIfNotCasting && (r = r || {}, await this.roomLog(Vi.GAMESTATE, e, r, true));
  }
  shareEditorConfigurationWithAllClients(e, r, n) {
    this.connection && this.connection.setState(e, r, n);
  }
  setSDKOptions(e) {
    this.sdkOptions = e;
  }
  _getPersistentRoomId() {
    var r, n, i;
    if ((r = this.sdkOptions) != null && r.discord) {
      var e = l3();
      return e ? `PER_DCRD_G${(n = this.sdkOptions) == null ? undefined : n.gameId}_${e.guildId || e.channelId}` : `PER_${(i = this.sdkOptions) == null ? undefined : i.gameId}_${this.currentRoom}`;
    }
    return this.currentRoom;
  }
  async setPersistentData(e, r) {
    if (!this.connection)
      return;
    const n = this.connection.getHostname(false) + "/api/room/" + this._getPersistentRoomId() + "/persistence_set", o = await fetch(n, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        key: e,
        value: r
      })
    });
    if (o.status !== 200)
      throw new Error("Failed to set persistent state");
    {
      const s = await o.json();
      return s.data ? s.data[0] : undefined;
    }
  }
  async getPersistentData(e) {
    if (!this.connection)
      return;
    const r = this.connection.getHostname(false) + "/api/room/" + this._getPersistentRoomId() + "/persistence_get", i = await fetch(r, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        key: e
      })
    });
    if (i.status !== 200)
      throw new Error("Failed to get persistent state");
    {
      const o = await i.json();
      return o.data ? o.data[0] : undefined;
    }
  }
  async insertPersistentData(e, r) {
    if (!this.connection)
      return;
    const n = this.connection.getHostname(false) + "/api/room/" + this._getPersistentRoomId() + "/persistence_insert", o = await fetch(n, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        key: e,
        value: r
      })
    });
    if (o.status !== 200)
      throw new Error("Failed to insert persistent state");
    return (await o.json()).index;
  }
}
var Ie = (() => {
  let t = null;
  const e = (r) => {
    var n;
    return t && !((n = t == null ? undefined : t.getState) != null && n.call(t, "__launched")) && r && t.setSDKOptions(r), t || (t = new u3(r)), t;
  };
  return e.reset = () => {
    t = null;
  }, e;
})();
var hs = {
  userSelect: "none",
  position: "fixed",
  transition: "opacity 0.3s 0.1s",
  willChange: "opacity",
  height: "70px",
  width: "95px",
  right: "0px",
  backgroundSize: "25px",
  backgroundPosition: "center",
  backgroundRepeat: "no-repeat",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  color: "#fff",
  fontSize: "15px",
  fontFamily: "sans-serif"
};
var ps = {
  position: "absolute",
  top: "calc(50% - 30px)",
  left: "calc(50% - 30px)",
  height: "60px",
  width: "60px",
  border: "2px solid #fff",
  borderRadius: "10px",
  boxSizing: "border-box",
  opacity: "0.25",
  willChange: "opacity"
};
var gs = [
  {
    element: { ...hs, bottom: "15px" },
    border: { ...ps }
  },
  {
    element: { ...hs, bottom: "calc(70px + 15px)" },
    border: { ...ps }
  },
  {
    element: { ...hs, bottom: "calc(70px * 2 + 15px)" },
    border: { ...ps }
  },
  {
    element: { ...hs, bottom: "calc(70px * 3 + 15px)" },
    border: { ...ps }
  }
];
var wt3 = {};
(function(t) {
  function e(P, z) {
    if (!P)
      throw z = z || "Assertion failed", typeof Error < "u" ? new Error(z) : z;
  }
  var r = false, n = 0, i = function() {
    if (r)
      return r = false, n;
    var P = 2 * Math.random() - 1, z = 2 * Math.random() - 1, U = P * P + z * z;
    if (U == 0 || U > 1)
      return i();
    var I = Math.sqrt(-2 * Math.log(U) / U);
    return n = z * I, r = true, P * I;
  }, o = function(P, z) {
    return Math.random() * (z - P) + P;
  }, s = function(P, z) {
    return Math.floor(Math.random() * (z - P) + P);
  }, a = function(P, z) {
    return P + i() * z;
  }, l = function(P) {
    if (typeof P > "u" || isNaN(P))
      return [];
    if (typeof ArrayBuffer > "u") {
      for (var z = new Array(P), U = 0;U < P; U++)
        z[U] = 0;
      return z;
    } else
      return new Float64Array(P);
  }, c2 = function(P, z) {
    this.n = P, this.d = z, this.w = l(P * z), this.dw = l(P * z);
  };
  c2.prototype = {
    get: function(P, z) {
      var U = this.d * P + z;
      return e(U >= 0 && U < this.w.length), this.w[U];
    },
    set: function(P, z, U) {
      var I = this.d * P + z;
      e(I >= 0 && I < this.w.length), this.w[I] = U;
    },
    setFrom: function(P) {
      for (var z = 0, U = P.length;z < U; z++)
        this.w[z] = P[z];
    },
    setColumn: function(P, z) {
      for (var U = 0, I = P.w.length;U < I; U++)
        this.w[this.d * U + z] = P.w[U];
    },
    toJSON: function() {
      var P = {};
      return P.n = this.n, P.d = this.d, P.w = this.w, P;
    },
    fromJSON: function(P) {
      this.n = P.n, this.d = P.d, this.w = l(this.n * this.d), this.dw = l(this.n * this.d);
      for (var z = 0, U = this.n * this.d;z < U; z++)
        this.w[z] = P.w[z];
    }
  };
  var u = function(P) {
    var z = new c2(P.n, P.d);
    return z.setFrom(P.w), z;
  }, f2 = function(P) {
    var z = {};
    for (var U in P)
      P.hasOwnProperty(U) && (z[U] = u(P[U]));
    return z;
  }, d = function(P, z) {
    for (var U = 0, I = P.n * P.d;U < I; U++)
      P.dw[U] !== 0 && (P.w[U] += -z * P.dw[U], P.dw[U] = 0);
  }, h = function(P, z) {
    for (var U in P)
      P.hasOwnProperty(U) && d(P[U], z);
  }, g2 = function(P) {
    var z = {};
    for (var U in P)
      P.hasOwnProperty(U) && (z[U] = P[U].toJSON());
    return z;
  }, p = function(P) {
    var z = {};
    for (var U in P)
      P.hasOwnProperty(U) && (z[U] = new c2(1, 1), z[U].fromJSON(P[U]));
    return z;
  }, y4 = function(P) {
    for (var z in P)
      if (P.hasOwnProperty(z)) {
        var U = P[z];
        O(U, 0);
      }
  }, b = function(P) {
    var z = 0;
    for (var U in P)
      if (P.hasOwnProperty(U)) {
        var I = P[U];
        z += I.dw.length;
      }
    var V = new c2(z, 1), te = 0;
    for (var U in P)
      if (P.hasOwnProperty(U))
        for (var I = P[U], X2 = 0, H = I.dw.length;X2 < H; X2++)
          V.w[te] = I.dw[X2], te++;
    return V;
  }, x = function(P, z, U, I) {
    var V = new c2(P, z);
    return S(V, U, I), V;
  }, S = function(P, z, U) {
    for (var I = 0, V = P.w.length;I < V; I++)
      P.w[I] = a(z, U);
  }, O = function(P, z) {
    for (var U = 0, I = P.dw.length;U < I; U++)
      P.dw[U] = z;
  }, _ = function(P) {
    typeof P > "u" && (P = true), this.needs_backprop = P, this.backprop = [];
  };
  _.prototype = {
    backward: function() {
      for (var P = this.backprop.length - 1;P >= 0; P--)
        this.backprop[P]();
    },
    rowPluck: function(P, z) {
      e(z >= 0 && z < P.n);
      for (var U = P.d, I = new c2(U, 1), V = 0, te = U;V < te; V++)
        I.w[V] = P.w[U * z + V];
      if (this.needs_backprop) {
        var X2 = function() {
          for (var H = 0, $2 = U;H < $2; H++)
            P.dw[U * z + H] += I.dw[H];
        };
        this.backprop.push(X2);
      }
      return I;
    },
    tanh: function(P) {
      for (var z = new c2(P.n, P.d), U = P.w.length, I = 0;I < U; I++)
        z.w[I] = Math.tanh(P.w[I]);
      if (this.needs_backprop) {
        var V = function() {
          for (var te = 0;te < U; te++) {
            var X2 = z.w[te];
            P.dw[te] += (1 - X2 * X2) * z.dw[te];
          }
        };
        this.backprop.push(V);
      }
      return z;
    },
    sigmoid: function(P) {
      for (var z = new c2(P.n, P.d), U = P.w.length, I = 0;I < U; I++)
        z.w[I] = G(P.w[I]);
      if (this.needs_backprop) {
        var V = function() {
          for (var te = 0;te < U; te++) {
            var X2 = z.w[te];
            P.dw[te] += X2 * (1 - X2) * z.dw[te];
          }
        };
        this.backprop.push(V);
      }
      return z;
    },
    relu: function(P) {
      for (var z = new c2(P.n, P.d), U = P.w.length, I = 0;I < U; I++)
        z.w[I] = Math.max(0, P.w[I]);
      if (this.needs_backprop) {
        var V = function() {
          for (var te = 0;te < U; te++)
            P.dw[te] += P.w[te] > 0 ? z.dw[te] : 0;
        };
        this.backprop.push(V);
      }
      return z;
    },
    mul: function(P, z) {
      e(P.d === z.n, "matmul dimensions misaligned");
      for (var U = P.n, I = z.d, V = new c2(U, I), te = 0;te < P.n; te++)
        for (var X2 = 0;X2 < z.d; X2++) {
          for (var H = 0, $2 = 0;$2 < P.d; $2++)
            H += P.w[P.d * te + $2] * z.w[z.d * $2 + X2];
          V.w[I * te + X2] = H;
        }
      if (this.needs_backprop) {
        var se = function() {
          for (var he = 0;he < P.n; he++)
            for (var pe = 0;pe < z.d; pe++)
              for (var me = 0;me < P.d; me++) {
                var B3 = V.dw[I * he + pe];
                P.dw[P.d * he + me] += z.w[z.d * me + pe] * B3, z.dw[z.d * me + pe] += P.w[P.d * he + me] * B3;
              }
        };
        this.backprop.push(se);
      }
      return V;
    },
    add: function(P, z) {
      e(P.w.length === z.w.length);
      for (var U = new c2(P.n, P.d), I = 0, V = P.w.length;I < V; I++)
        U.w[I] = P.w[I] + z.w[I];
      if (this.needs_backprop) {
        var te = function() {
          for (var X2 = 0, H = P.w.length;X2 < H; X2++)
            P.dw[X2] += U.dw[X2], z.dw[X2] += U.dw[X2];
        };
        this.backprop.push(te);
      }
      return U;
    },
    dot: function(P, z) {
      e(P.w.length === z.w.length);
      for (var U = new c2(1, 1), I = 0, V = 0, te = P.w.length;V < te; V++)
        I += P.w[V] * z.w[V];
      if (U.w[0] = I, this.needs_backprop) {
        var X2 = function() {
          for (var H = 0, $2 = P.w.length;H < $2; H++)
            P.dw[H] += z.w[H] * U.dw[0], z.dw[H] += P.w[H] * U.dw[0];
        };
        this.backprop.push(X2);
      }
      return U;
    },
    eltmul: function(P, z) {
      e(P.w.length === z.w.length);
      for (var U = new c2(P.n, P.d), I = 0, V = P.w.length;I < V; I++)
        U.w[I] = P.w[I] * z.w[I];
      if (this.needs_backprop) {
        var te = function() {
          for (var X2 = 0, H = P.w.length;X2 < H; X2++)
            P.dw[X2] += z.w[X2] * U.dw[X2], z.dw[X2] += P.w[X2] * U.dw[X2];
        };
        this.backprop.push(te);
      }
      return U;
    }
  };
  var L = function(P) {
    for (var z = new c2(P.n, P.d), U = -999999, I = 0, V = P.w.length;I < V; I++)
      P.w[I] > U && (U = P.w[I]);
    for (var te = 0, I = 0, V = P.w.length;I < V; I++)
      z.w[I] = Math.exp(P.w[I] - U), te += z.w[I];
    for (var I = 0, V = P.w.length;I < V; I++)
      z.w[I] /= te;
    return z;
  }, N4 = function() {
    this.decay_rate = 0.999, this.smooth_eps = 0.00000001, this.step_cache = {};
  };
  N4.prototype = {
    step: function(P, z, U, I) {
      var V = {}, te = 0, X2 = 0;
      for (var H in P)
        if (P.hasOwnProperty(H)) {
          var $2 = P[H];
          H in this.step_cache || (this.step_cache[H] = new c2($2.n, $2.d));
          for (var se = this.step_cache[H], he = 0, pe = $2.w.length;he < pe; he++) {
            var me = $2.dw[he];
            se.w[he] = se.w[he] * this.decay_rate + (1 - this.decay_rate) * me * me, me > I && (me = I, te++), me < -I && (me = -I, te++), X2++, $2.w[he] += -z * me / Math.sqrt(se.w[he] + this.smooth_eps) - U * $2.w[he], $2.dw[he] = 0;
          }
        }
      return V.ratio_clipped = te * 1 / X2, V;
    }
  };
  var j = function(P, z, U) {
    for (var I = {}, V = 0;V < z.length; V++) {
      var te = V === 0 ? P : z[V - 1], X2 = z[V];
      I["Wix" + V] = new x(X2, te, 0, 0.08), I["Wih" + V] = new x(X2, X2, 0, 0.08), I["bi" + V] = new c2(X2, 1), I["Wfx" + V] = new x(X2, te, 0, 0.08), I["Wfh" + V] = new x(X2, X2, 0, 0.08), I["bf" + V] = new c2(X2, 1), I["Wox" + V] = new x(X2, te, 0, 0.08), I["Woh" + V] = new x(X2, X2, 0, 0.08), I["bo" + V] = new c2(X2, 1), I["Wcx" + V] = new x(X2, te, 0, 0.08), I["Wch" + V] = new x(X2, X2, 0, 0.08), I["bc" + V] = new c2(X2, 1);
    }
    return I.Whd = new x(U, X2, 0, 0.08), I.bd = new c2(U, 1), I;
  }, W = function(P, z, U, I, V) {
    if (V == null || typeof V.h > "u")
      for (var te = [], X2 = [], H = 0;H < U.length; H++)
        te.push(new wt3.Mat(U[H], 1)), X2.push(new wt3.Mat(U[H], 1));
    else
      var { h: te, c: X2 } = V;
    for (var $2 = [], se = [], H = 0;H < U.length; H++) {
      var he = H === 0 ? I : $2[H - 1], pe = te[H], me = X2[H], B3 = P.mul(z["Wix" + H], he), q3 = P.mul(z["Wih" + H], pe), Z = P.sigmoid(P.add(P.add(B3, q3), z["bi" + H])), oe = P.mul(z["Wfx" + H], he), de = P.mul(z["Wfh" + H], pe), R4 = P.sigmoid(P.add(P.add(oe, de), z["bf" + H])), k = P.mul(z["Wox" + H], he), re = P.mul(z["Woh" + H], pe), ne = P.sigmoid(P.add(P.add(k, re), z["bo" + H])), Ae = P.mul(z["Wcx" + H], he), C = P.mul(z["Wch" + H], pe), v = P.tanh(P.add(P.add(Ae, C), z["bc" + H])), w2 = P.eltmul(R4, me), D = P.eltmul(Z, v), J3 = P.add(w2, D), ae = P.eltmul(ne, P.tanh(J3));
      $2.push(ae), se.push(J3);
    }
    var ue = P.add(P.mul(z.Whd, $2[$2.length - 1]), z.bd);
    return { h: $2, c: se, o: ue };
  }, G = function(P) {
    return 1 / (1 + Math.exp(-P));
  }, ee = function(P) {
    for (var z = P[0], U = 0, I = 1, V = P.length;I < V; I++) {
      var te = P[I];
      te > z && (U = I, z = te);
    }
    return U;
  }, fe = function(P) {
    for (var z = o(0, 1), U = 0, I = 0;; ) {
      if (U += P[I], U > z)
        return I;
      I++;
    }
    return P.length - 1;
  };
  t.assert = e, t.zeros = l, t.maxi = ee, t.samplei = fe, t.randi = s, t.randn = a, t.softmax = L, t.Mat = c2, t.RandMat = x, t.forwardLSTM = W, t.initLSTM = j, t.updateMat = d, t.updateNet = h, t.copyMat = u, t.copyNet = f2, t.netToJSON = g2, t.netFromJSON = p, t.netZeroGrads = y4, t.netFlattenGrads = b, t.Solver = N4, t.Graph = _;
})(wt3);
var l1 = {};
(function(t) {
  var e = function(u, f2, d) {
    return typeof u > "u" ? d : typeof u[f2] < "u" ? u[f2] : d;
  }, r = wt3.zeros, n = wt3.assert, i = wt3.randi;
  wt3.randf;
  var o = function(u, f2) {
    for (var d = 0, h = u.length;d < h; d++)
      u[d] = f2;
  }, s = function(u) {
    for (var f2 = Math.random(), d = 0, h = 0, g2 = u.length;h < g2; h++)
      if (d += u[h], d >= f2)
        return h;
    n(false, "wtf");
  }, a = function(u, f2) {
    this.V = null, this.P = null, this.env = u, this.gamma = e(f2, "gamma", 0.75), this.reset();
  };
  a.prototype = {
    reset: function() {
      this.ns = this.env.getNumStates(), this.na = this.env.getMaxNumActions(), this.V = r(this.ns), this.P = r(this.ns * this.na);
      for (var u = 0;u < this.ns; u++)
        for (var f2 = this.env.allowedActions(u), d = 0, h = f2.length;d < h; d++)
          this.P[f2[d] * this.ns + u] = 1 / f2.length;
    },
    act: function(u) {
      for (var f2 = this.env.allowedActions(u), d = [], h = 0, g2 = f2.length;h < g2; h++) {
        var p = f2[h], y4 = this.P[p * this.ns + u];
        d.push(y4);
      }
      var b = s(d);
      return f2[b];
    },
    learn: function() {
      self.evaluatePolicy(), self.updatePolicy();
    },
    evaluatePolicy: function() {
      for (var u = r(this.ns), f2 = 0;f2 < this.ns; f2++) {
        for (var d = 0, h = this.env.allowedActions(f2), g2 = 0, p = h.length;g2 < p; g2++) {
          var y4 = h[g2], b = this.P[y4 * this.ns + f2];
          if (b !== 0) {
            var x = this.env.nextStateDistribution(f2, y4), S = this.env.reward(f2, y4, x);
            d += b * (S + this.gamma * this.V[x]);
          }
        }
        u[f2] = d;
      }
      this.V = u;
    },
    updatePolicy: function() {
      for (var u = 0;u < this.ns; u++) {
        for (var f2 = this.env.allowedActions(u), d, h, g2 = [], p = 0, y4 = f2.length;p < y4; p++) {
          var b = f2[p], x = this.env.nextStateDistribution(u, b), S = this.env.reward(u, b, x), O = S + this.gamma * this.V[x];
          g2.push(O), p === 0 || O > d ? (d = O, h = 1) : O === d && (h += 1);
        }
        for (var p = 0, y4 = f2.length;p < y4; p++) {
          var b = f2[p];
          this.P[b * this.ns + u] = g2[p] === d ? 1 / h : 0;
        }
      }
    }
  };
  var l = function(u, f2) {
    this.update = e(f2, "update", "qlearn"), this.gamma = e(f2, "gamma", 0.75), this.epsilon = e(f2, "epsilon", 0.1), this.alpha = e(f2, "alpha", 0.01), this.smooth_policy_update = e(f2, "smooth_policy_update", false), this.beta = e(f2, "beta", 0.01), this.lambda = e(f2, "lambda", 0), this.replacing_traces = e(f2, "replacing_traces", true), this.q_init_val = e(f2, "q_init_val", 0), this.planN = e(f2, "planN", 0), this.Q = null, this.P = null, this.e = null, this.env_model_s = null, this.env_model_r = null, this.env = u, this.reset();
  };
  l.prototype = {
    reset: function() {
      this.ns = this.env.getNumStates(), this.na = this.env.getMaxNumActions(), this.Q = r(this.ns * this.na), this.q_init_val !== 0 && o(this.Q, this.q_init_val), this.P = r(this.ns * this.na), this.e = r(this.ns * this.na), this.env_model_s = r(this.ns * this.na), o(this.env_model_s, -1), this.env_model_r = r(this.ns * this.na), this.sa_seen = [], this.pq = r(this.ns * this.na);
      for (var u = 0;u < this.ns; u++)
        for (var f2 = this.env.allowedActions(u), d = 0, h = f2.length;d < h; d++)
          this.P[f2[d] * this.ns + u] = 1 / f2.length;
      this.r0 = null, this.s0 = null, this.s1 = null, this.a0 = null, this.a1 = null;
    },
    resetEpisode: function() {
    },
    act: function(u) {
      for (var f2 = this.env.allowedActions(u), d = [], h = 0, g2 = f2.length;h < g2; h++)
        d.push(this.P[f2[h] * this.ns + u]);
      if (Math.random() < this.epsilon) {
        var p = f2[i(0, f2.length)];
        this.explored = true;
      } else {
        var p = f2[s(d)];
        this.explored = false;
      }
      return this.s0 = this.s1, this.a0 = this.a1, this.s1 = u, this.a1 = p, p;
    },
    learn: function(u) {
      this.r0 != null && (this.learnFromTuple(this.s0, this.a0, this.r0, this.s1, this.a1, this.lambda), this.planN > 0 && (this.updateModel(this.s0, this.a0, this.r0, this.s1), this.plan())), this.r0 = u;
    },
    updateModel: function(u, f2, d, h) {
      var g2 = f2 * this.ns + u;
      this.env_model_s[g2] === -1 && this.sa_seen.push(f2 * this.ns + u), this.env_model_s[g2] = h, this.env_model_r[g2] = d;
    },
    plan: function() {
      for (var u = [], f2 = 0, d = this.sa_seen.length;f2 < d; f2++) {
        var h = this.sa_seen[f2], g2 = this.pq[h];
        g2 > 0.00001 && u.push({ sa: h, p: g2 });
      }
      u.sort(function(j, W) {
        return j.p < W.p ? 1 : -1;
      });
      for (var p = Math.min(this.planN, u.length), y4 = 0;y4 < p; y4++) {
        var b = u[y4].sa;
        this.pq[b] = 0;
        var x = b % this.ns, S = Math.floor(b / this.ns), O = this.env_model_r[b], _ = this.env_model_s[b], L = -1;
        if (this.update === "sarsa")
          var N4 = this.env.allowedActions(_), L = N4[i(0, N4.length)];
        this.learnFromTuple(x, S, O, _, L, 0);
      }
    },
    learnFromTuple: function(u, f2, d, h, g2, p) {
      var y4 = f2 * this.ns + u;
      if (this.update === "qlearn") {
        for (var b = this.env.allowedActions(h), x = 0, S = 0, O = b.length;S < O; S++) {
          var _ = b[S] * this.ns + h, L = this.Q[_];
          (S === 0 || L > x) && (x = L);
        }
        var N4 = d + this.gamma * x;
      } else if (this.update === "sarsa")
        var j = g2 * this.ns + h, N4 = d + this.gamma * this.Q[j];
      if (p > 0) {
        this.replacing_traces ? this.e[y4] = 1 : this.e[y4] += 1;
        for (var W = p * this.gamma, G = r(this.ns), ee = 0;ee < this.ns; ee++)
          for (var b = this.env.allowedActions(ee), S = 0;S < b.length; S++) {
            var fe = b[S], P = fe * this.ns + ee, z = this.e[P], U = this.alpha * z * (N4 - this.Q[P]);
            this.Q[P] += U, this.updatePriority(ee, fe, U), this.e[P] *= W;
            var I = Math.abs(U);
            I > G[ee] && (G[ee] = I);
          }
        for (var ee = 0;ee < this.ns; ee++)
          G[ee] > 0.00001 && this.updatePolicy(ee);
        this.explored && this.update === "qlearn" && (this.e = r(this.ns * this.na));
      } else {
        var U = this.alpha * (N4 - this.Q[y4]);
        this.Q[y4] += U, this.updatePriority(u, f2, U), this.updatePolicy(u);
      }
    },
    updatePriority: function(u, f2, d) {
      if (d = Math.abs(d), !(d < 0.00001) && this.planN !== 0)
        for (var h = 0;h < this.ns; h++)
          for (var g2 = 0;g2 < this.na; g2++) {
            var p = g2 * this.ns + h;
            this.env_model_s[p] === u && (this.pq[p] += d);
          }
    },
    updatePolicy: function(u) {
      for (var f2 = this.env.allowedActions(u), d, h, g2 = [], p = 0, y4 = f2.length;p < y4; p++) {
        var b = f2[p], x = this.Q[b * this.ns + u];
        g2.push(x), p === 0 || x > d ? (d = x, h = 1) : x === d && (h += 1);
      }
      for (var S = 0, p = 0, y4 = f2.length;p < y4; p++) {
        var b = f2[p], O = g2[p] === d ? 1 / h : 0, _ = b * this.ns + u;
        this.smooth_policy_update ? (this.P[_] += this.beta * (O - this.P[_]), S += this.P[_]) : this.P[_] = O;
      }
      if (this.smooth_policy_update)
        for (var p = 0, y4 = f2.length;p < y4; p++) {
          var b = f2[p];
          this.P[b * this.ns + u] /= S;
        }
    }
  };
  var c2 = function(u, f2) {
    this.gamma = e(f2, "gamma", 0.75), this.epsilon = e(f2, "epsilon", 0.1), this.alpha = e(f2, "alpha", 0.01), this.experience_add_every = e(f2, "experience_add_every", 25), this.experience_size = e(f2, "experience_size", 5000), this.learning_steps_per_iteration = e(f2, "learning_steps_per_iteration", 10), this.tderror_clamp = e(f2, "tderror_clamp", 1), this.num_hidden_units = e(f2, "num_hidden_units", 100), this.env = u, this.reset();
  };
  c2.prototype = {
    reset: function() {
      this.nh = this.num_hidden_units, this.ns = this.env.getNumStates(), this.na = this.env.getMaxNumActions(), this.net = {}, this.net.W1 = new wt3.RandMat(this.nh, this.ns, 0, 0.01), this.net.b1 = new wt3.Mat(this.nh, 1, 0, 0.01), this.net.W2 = new wt3.RandMat(this.na, this.nh, 0, 0.01), this.net.b2 = new wt3.Mat(this.na, 1, 0, 0.01), this.exp = [], this.expi = 0, this.t = 0, this.r0 = null, this.s0 = null, this.s1 = null, this.a0 = null, this.a1 = null, this.tderror = 0;
    },
    toJSON: function() {
      var u = {};
      return u.nh = this.nh, u.ns = this.ns, u.na = this.na, u.net = wt3.netToJSON(this.net), u;
    },
    fromJSON: function(u) {
      this.nh = u.nh, this.ns = u.ns, this.na = u.na, this.net = wt3.netFromJSON(u.net);
    },
    forwardQ: function(u, f2, d) {
      var h = new wt3.Graph(d), g2 = h.add(h.mul(u.W1, f2), u.b1), p = h.tanh(g2), y4 = h.add(h.mul(u.W2, p), u.b2);
      return this.lastG = h, y4;
    },
    act: function(u) {
      var f2 = new wt3.Mat(this.ns, 1);
      if (f2.setFrom(u), Math.random() < this.epsilon)
        var d = i(0, this.na);
      else
        var h = this.forwardQ(this.net, f2, false), d = wt3.maxi(h.w);
      return this.s0 = this.s1, this.a0 = this.a1, this.s1 = f2, this.a1 = d, d;
    },
    learn: function(u) {
      if (this.r0 != null && this.alpha > 0) {
        var f2 = this.learnFromTuple(this.s0, this.a0, this.r0, this.s1, this.a1);
        this.tderror = f2, this.t % this.experience_add_every === 0 && (this.exp[this.expi] = [this.s0, this.a0, this.r0, this.s1, this.a1], this.expi += 1, this.expi > this.experience_size && (this.expi = 0)), this.t += 1;
        for (var d = 0;d < this.learning_steps_per_iteration; d++) {
          var h = i(0, this.exp.length), g2 = this.exp[h];
          this.learnFromTuple(g2[0], g2[1], g2[2], g2[3], g2[4]);
        }
      }
      this.r0 = u;
    },
    learnFromTuple: function(u, f2, d, h, g2) {
      var p = this.forwardQ(this.net, h, false), y4 = d + this.gamma * p.w[wt3.maxi(p.w)], b = this.forwardQ(this.net, u, true), x = b.w[f2] - y4, S = this.tderror_clamp;
      return Math.abs(x) > S && (x > S && (x = S), x < -S && (x = -S)), b.dw[f2] = x, this.lastG.backward(), wt3.updateNet(this.net, this.alpha), x;
    }
  }, t.DPAgent = a, t.TDAgent = l, t.DQNAgent = c2;
})(l1);
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function Jo(t) {
  return t + 0.5 | 0;
}
var tn3 = (t, e, r) => Math.max(Math.min(t, r), e);
function io(t) {
  return tn3(Jo(t * 2.55), 0, 255);
}
function un3(t) {
  return tn3(Jo(t * 255), 0, 255);
}
function Nr(t) {
  return tn3(Jo(t / 2.55) / 100, 0, 1);
}
function bd(t) {
  return tn3(Jo(t * 100), 0, 100);
}
var $t3 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
var Rc = [..."0123456789ABCDEF"];
var C32 = (t) => Rc[t & 15];
var T32 = (t) => Rc[(t & 240) >> 4] + Rc[t & 15];
var ms = (t) => (t & 240) >> 4 === (t & 15);
var O32 = (t) => ms(t.r) && ms(t.g) && ms(t.b) && ms(t.a);
function I32(t) {
  var e = t.length, r;
  return t[0] === "#" && (e === 4 || e === 5 ? r = {
    r: 255 & $t3[t[1]] * 17,
    g: 255 & $t3[t[2]] * 17,
    b: 255 & $t3[t[3]] * 17,
    a: e === 5 ? $t3[t[4]] * 17 : 255
  } : (e === 7 || e === 9) && (r = {
    r: $t3[t[1]] << 4 | $t3[t[2]],
    g: $t3[t[3]] << 4 | $t3[t[4]],
    b: $t3[t[5]] << 4 | $t3[t[6]],
    a: e === 9 ? $t3[t[7]] << 4 | $t3[t[8]] : 255
  })), r;
}
var P32 = (t, e) => t < 255 ? e(t) : "";
function R32(t) {
  var e = O32(t) ? C32 : T32;
  return t ? "#" + e(t.r) + e(t.g) + e(t.b) + P32(t.a, e) : undefined;
}
var D32 = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function c1(t, e, r) {
  const n = e * Math.min(r, 1 - r), i = (o, s = (o + t / 30) % 12) => r - n * Math.max(Math.min(s - 3, 9 - s, 1), -1);
  return [i(0), i(8), i(4)];
}
function M3(t, e, r) {
  const n = (i, o = (i + t / 60) % 6) => r - r * e * Math.max(Math.min(o, 4 - o, 1), 0);
  return [n(5), n(3), n(1)];
}
function N32(t, e, r) {
  const n = c1(t, 1, 0.5);
  let i;
  for (e + r > 1 && (i = 1 / (e + r), e *= i, r *= i), i = 0;i < 3; i++)
    n[i] *= 1 - e - r, n[i] += e;
  return n;
}
function L3(t, e, r, n, i) {
  return t === i ? (e - r) / n + (e < r ? 6 : 0) : e === i ? (r - t) / n + 2 : (t - e) / n + 4;
}
function Nu(t) {
  const r = t.r / 255, n = t.g / 255, i = t.b / 255, o = Math.max(r, n, i), s = Math.min(r, n, i), a = (o + s) / 2;
  let l, c2, u;
  return o !== s && (u = o - s, c2 = a > 0.5 ? u / (2 - o - s) : u / (o + s), l = L3(r, n, i, u, o), l = l * 60 + 0.5), [l | 0, c2 || 0, a];
}
function Lu(t, e, r, n) {
  return (Array.isArray(e) ? t(e[0], e[1], e[2]) : t(e, r, n)).map(un3);
}
function Bu(t, e, r) {
  return Lu(c1, t, e, r);
}
function B3(t, e, r) {
  return Lu(N32, t, e, r);
}
function F3(t, e, r) {
  return Lu(M3, t, e, r);
}
function u12(t) {
  return (t % 360 + 360) % 360;
}
function j32(t) {
  const e = D32.exec(t);
  let r = 255, n;
  if (!e)
    return;
  e[5] !== n && (r = e[6] ? io(+e[5]) : un3(+e[5]));
  const i = u12(+e[2]), o = +e[3] / 100, s = +e[4] / 100;
  return e[1] === "hwb" ? n = B3(i, o, s) : e[1] === "hsv" ? n = F3(i, o, s) : n = Bu(i, o, s), {
    r: n[0],
    g: n[1],
    b: n[2],
    a: r
  };
}
function W3(t, e) {
  var r = Nu(t);
  r[0] = u12(r[0] + e), r = Bu(r), t.r = r[0], t.g = r[1], t.b = r[2];
}
function U3(t) {
  if (!t)
    return;
  const e = Nu(t), r = e[0], n = bd(e[1]), i = bd(e[2]);
  return t.a < 255 ? `hsla(${r}, ${n}%, ${i}%, ${Nr(t.a)})` : `hsl(${r}, ${n}%, ${i}%)`;
}
var vd = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
var Ad = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function z3() {
  const t = {}, e = Object.keys(Ad), r = Object.keys(vd);
  let n, i, o, s, a;
  for (n = 0;n < e.length; n++) {
    for (s = a = e[n], i = 0;i < r.length; i++)
      o = r[i], a = a.replace(o, vd[o]);
    o = parseInt(Ad[s], 16), t[a] = [o >> 16 & 255, o >> 8 & 255, o & 255];
  }
  return t;
}
var ys;
function V3(t) {
  ys || (ys = z3(), ys.transparent = [0, 0, 0, 0]);
  const e = ys[t.toLowerCase()];
  return e && {
    r: e[0],
    g: e[1],
    b: e[2],
    a: e.length === 4 ? e[3] : 255
  };
}
var q3 = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function H3(t) {
  const e = q3.exec(t);
  let r = 255, n, i, o;
  if (e) {
    if (e[7] !== n) {
      const s = +e[7];
      r = e[8] ? io(s) : tn3(s * 255, 0, 255);
    }
    return n = +e[1], i = +e[3], o = +e[5], n = 255 & (e[2] ? io(n) : tn3(n, 0, 255)), i = 255 & (e[4] ? io(i) : tn3(i, 0, 255)), o = 255 & (e[6] ? io(o) : tn3(o, 0, 255)), {
      r: n,
      g: i,
      b: o,
      a: r
    };
  }
}
function Y3(t) {
  return t && (t.a < 255 ? `rgba(${t.r}, ${t.g}, ${t.b}, ${Nr(t.a)})` : `rgb(${t.r}, ${t.g}, ${t.b})`);
}
var Vl = (t) => t <= 0.0031308 ? t * 12.92 : Math.pow(t, 0.4166666666666667) * 1.055 - 0.055;
var ei = (t) => t <= 0.04045 ? t / 12.92 : Math.pow((t + 0.055) / 1.055, 2.4);
function K3(t, e, r) {
  const n = ei(Nr(t.r)), i = ei(Nr(t.g)), o = ei(Nr(t.b));
  return {
    r: un3(Vl(n + r * (ei(Nr(e.r)) - n))),
    g: un3(Vl(i + r * (ei(Nr(e.g)) - i))),
    b: un3(Vl(o + r * (ei(Nr(e.b)) - o))),
    a: t.a + r * (e.a - t.a)
  };
}
function bs(t, e, r) {
  if (t) {
    let n = Nu(t);
    n[e] = Math.max(0, Math.min(n[e] + n[e] * r, e === 0 ? 360 : 1)), n = Bu(n), t.r = n[0], t.g = n[1], t.b = n[2];
  }
}
function f12(t, e) {
  return t && Object.assign(e || {}, t);
}
function wd(t) {
  var e = { r: 0, g: 0, b: 0, a: 255 };
  return Array.isArray(t) ? t.length >= 3 && (e = { r: t[0], g: t[1], b: t[2], a: 255 }, t.length > 3 && (e.a = un3(t[3]))) : (e = f12(t, { r: 0, g: 0, b: 0, a: 1 }), e.a = un3(e.a)), e;
}
function X3(t) {
  return t.charAt(0) === "r" ? H3(t) : j32(t);
}

class To {
  constructor(e) {
    if (e instanceof To)
      return e;
    const r = typeof e;
    let n;
    r === "object" ? n = wd(e) : r === "string" && (n = I32(e) || V3(e) || X3(e)), this._rgb = n, this._valid = !!n;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var e = f12(this._rgb);
    return e && (e.a = Nr(e.a)), e;
  }
  set rgb(e) {
    this._rgb = wd(e);
  }
  rgbString() {
    return this._valid ? Y3(this._rgb) : undefined;
  }
  hexString() {
    return this._valid ? R32(this._rgb) : undefined;
  }
  hslString() {
    return this._valid ? U3(this._rgb) : undefined;
  }
  mix(e, r) {
    if (e) {
      const n = this.rgb, i = e.rgb;
      let o;
      const s = r === o ? 0.5 : r, a = 2 * s - 1, l = n.a - i.a, c2 = ((a * l === -1 ? a : (a + l) / (1 + a * l)) + 1) / 2;
      o = 1 - c2, n.r = 255 & c2 * n.r + o * i.r + 0.5, n.g = 255 & c2 * n.g + o * i.g + 0.5, n.b = 255 & c2 * n.b + o * i.b + 0.5, n.a = s * n.a + (1 - s) * i.a, this.rgb = n;
    }
    return this;
  }
  interpolate(e, r) {
    return e && (this._rgb = K3(this._rgb, e._rgb, r)), this;
  }
  clone() {
    return new To(this.rgb);
  }
  alpha(e) {
    return this._rgb.a = un3(e), this;
  }
  clearer(e) {
    const r = this._rgb;
    return r.a *= 1 - e, this;
  }
  greyscale() {
    const e = this._rgb, r = Jo(e.r * 0.3 + e.g * 0.59 + e.b * 0.11);
    return e.r = e.g = e.b = r, this;
  }
  opaquer(e) {
    const r = this._rgb;
    return r.a *= 1 + e, this;
  }
  negate() {
    const e = this._rgb;
    return e.r = 255 - e.r, e.g = 255 - e.g, e.b = 255 - e.b, this;
  }
  lighten(e) {
    return bs(this._rgb, 2, e), this;
  }
  darken(e) {
    return bs(this._rgb, 2, -e), this;
  }
  saturate(e) {
    return bs(this._rgb, 1, e), this;
  }
  desaturate(e) {
    return bs(this._rgb, 1, -e), this;
  }
  rotate(e) {
    return W3(this._rgb, e), this;
  }
}
/*!
 * Chart.js v4.4.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
function Pr() {
}
var J3 = (() => {
  let t = 0;
  return () => t++;
})();
function We(t) {
  return t === null || typeof t > "u";
}
function it3(t) {
  if (Array.isArray && Array.isArray(t))
    return true;
  const e = Object.prototype.toString.call(t);
  return e.slice(0, 7) === "[object" && e.slice(-6) === "Array]";
}
function Le(t) {
  return t !== null && Object.prototype.toString.call(t) === "[object Object]";
}
function pt3(t) {
  return (typeof t == "number" || t instanceof Number) && isFinite(+t);
}
function Ht3(t, e) {
  return pt3(t) ? t : e;
}
function Oe(t, e) {
  return typeof t > "u" ? e : t;
}
var Q3 = (t, e) => typeof t == "string" && t.endsWith("%") ? parseFloat(t) / 100 : +t / e;
var d12 = (t, e) => typeof t == "string" && t.endsWith("%") ? parseFloat(t) / 100 * e : +t;
function nt3(t, e, r) {
  if (t && typeof t.call == "function")
    return t.apply(r, e);
}
function $e(t, e, r, n) {
  let i, o, s;
  if (it3(t))
    if (o = t.length, n)
      for (i = o - 1;i >= 0; i--)
        e.call(r, t[i], i);
    else
      for (i = 0;i < o; i++)
        e.call(r, t[i], i);
  else if (Le(t))
    for (s = Object.keys(t), o = s.length, i = 0;i < o; i++)
      e.call(r, t[s[i]], s[i]);
}
function ga(t, e) {
  let r, n, i, o;
  if (!t || !e || t.length !== e.length)
    return false;
  for (r = 0, n = t.length;r < n; ++r)
    if (i = t[r], o = e[r], i.datasetIndex !== o.datasetIndex || i.index !== o.index)
      return false;
  return true;
}
function ma(t) {
  if (it3(t))
    return t.map(ma);
  if (Le(t)) {
    const e = /* @__PURE__ */ Object.create(null), r = Object.keys(t), n = r.length;
    let i = 0;
    for (;i < n; ++i)
      e[r[i]] = ma(t[r[i]]);
    return e;
  }
  return t;
}
function h12(t) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(t) === -1;
}
function G3(t, e, r, n) {
  if (!h12(t))
    return;
  const i = e[t], o = r[t];
  Le(i) && Le(o) ? Oo(i, o, n) : e[t] = ma(o);
}
function Oo(t, e, r) {
  const n = it3(e) ? e : [
    e
  ], i = n.length;
  if (!Le(t))
    return t;
  r = r || {};
  const o = r.merger || G3;
  let s;
  for (let a = 0;a < i; ++a) {
    if (s = n[a], !Le(s))
      continue;
    const l = Object.keys(s);
    for (let c2 = 0, u = l.length;c2 < u; ++c2)
      o(l[c2], t, s, r);
  }
  return t;
}
function mo(t, e) {
  return Oo(t, e, {
    merger: Z3
  });
}
function Z3(t, e, r) {
  if (!h12(t))
    return;
  const n = e[t], i = r[t];
  Le(n) && Le(i) ? mo(n, i) : Object.prototype.hasOwnProperty.call(e, t) || (e[t] = ma(i));
}
var xd = {
  "": (t) => t,
  x: (t) => t.x,
  y: (t) => t.y
};
function $32(t) {
  const e = t.split("."), r = [];
  let n = "";
  for (const i of e)
    n += i, n.endsWith("\\") ? n = n.slice(0, -1) + "." : (r.push(n), n = "");
  return r;
}
function e2(t) {
  const e = $32(t);
  return (r) => {
    for (const n of e) {
      if (n === "")
        break;
      r = r && r[n];
    }
    return r;
  };
}
function pn3(t, e) {
  return (xd[e] || (xd[e] = e2(e)))(t);
}
function Fu(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
var Io = (t) => typeof t < "u";
var gn = (t) => typeof t == "function";
var _d = (t, e) => {
  if (t.size !== e.size)
    return false;
  for (const r of t)
    if (!e.has(r))
      return false;
  return true;
};
function t2(t) {
  return t.type === "mouseup" || t.type === "click" || t.type === "contextmenu";
}
var st3 = Math.PI;
var ot3 = 2 * st3;
var r2 = ot3 + st3;
var ya = Number.POSITIVE_INFINITY;
var n2 = st3 / 180;
var mt3 = st3 / 2;
var En3 = st3 / 4;
var Sd = st3 * 2 / 3;
var rn3 = Math.log10;
var Cr = Math.sign;
function yo(t, e, r) {
  return Math.abs(t - e) < r;
}
function Ed(t) {
  const e = Math.round(t);
  t = yo(t, e, t / 1000) ? e : t;
  const r = Math.pow(10, Math.floor(rn3(t))), n = t / r;
  return (n <= 1 ? 1 : n <= 2 ? 2 : n <= 5 ? 5 : 10) * r;
}
function i2(t) {
  const e = [], r = Math.sqrt(t);
  let n;
  for (n = 1;n < r; n++)
    t % n === 0 && (e.push(n), e.push(t / n));
  return r === (r | 0) && e.push(r), e.sort((i, o) => i - o).pop(), e;
}
function Ei(t) {
  return !isNaN(parseFloat(t)) && isFinite(t);
}
function o2(t, e) {
  const r = Math.round(t);
  return r - e <= t && r + e >= t;
}
function p1(t, e, r) {
  let n, i, o;
  for (n = 0, i = t.length;n < i; n++)
    o = t[n][r], isNaN(o) || (e.min = Math.min(e.min, o), e.max = Math.max(e.max, o));
}
function gr(t) {
  return t * (st3 / 180);
}
function ju(t) {
  return t * (180 / st3);
}
function kd(t) {
  if (!pt3(t))
    return;
  let e = 1, r = 0;
  for (;Math.round(t * e) / e !== t; )
    e *= 10, r++;
  return r;
}
function g12(t, e) {
  const r = e.x - t.x, n = e.y - t.y, i = Math.sqrt(r * r + n * n);
  let o = Math.atan2(n, r);
  return o < -0.5 * st3 && (o += ot3), {
    angle: o,
    distance: i
  };
}
function Dc(t, e) {
  return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
}
function s2(t, e) {
  return (t - e + r2) % ot3 - st3;
}
function Yt3(t) {
  return (t % ot3 + ot3) % ot3;
}
function Po(t, e, r, n) {
  const i = Yt3(t), o = Yt3(e), s = Yt3(r), a = Yt3(o - i), l = Yt3(s - i), c2 = Yt3(i - o), u = Yt3(i - s);
  return i === o || i === s || n && o === s || a > l && c2 < u;
}
function St3(t, e, r) {
  return Math.max(e, Math.min(r, t));
}
function a2(t) {
  return St3(t, -32768, 32767);
}
function Wr(t, e, r, n = 0.000001) {
  return t >= Math.min(e, r) - n && t <= Math.max(e, r) + n;
}
function Wu(t, e, r) {
  r = r || ((s) => t[s] < e);
  let n = t.length - 1, i = 0, o;
  for (;n - i > 1; )
    o = i + n >> 1, r(o) ? i = o : n = o;
  return {
    lo: i,
    hi: n
  };
}
var Ur = (t, e, r, n) => Wu(t, r, n ? (i) => {
  const o = t[i][e];
  return o < r || o === r && t[i + 1][e] === r;
} : (i) => t[i][e] < r);
var l2 = (t, e, r) => Wu(t, r, (n) => t[n][e] >= r);
function c2(t, e, r) {
  let n = 0, i = t.length;
  for (;n < i && t[n] < e; )
    n++;
  for (;i > n && t[i - 1] > r; )
    i--;
  return n > 0 || i < t.length ? t.slice(n, i) : t;
}
var m1 = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function u2(t, e) {
  if (t._chartjs) {
    t._chartjs.listeners.push(e);
    return;
  }
  Object.defineProperty(t, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        e
      ]
    }
  }), m1.forEach((r) => {
    const n = "_onData" + Fu(r), i = t[r];
    Object.defineProperty(t, r, {
      configurable: true,
      enumerable: false,
      value(...o) {
        const s = i.apply(this, o);
        return t._chartjs.listeners.forEach((a) => {
          typeof a[n] == "function" && a[n](...o);
        }), s;
      }
    });
  });
}
function Cd(t, e) {
  const r = t._chartjs;
  if (!r)
    return;
  const n = r.listeners, i = n.indexOf(e);
  i !== -1 && n.splice(i, 1), !(n.length > 0) && (m1.forEach((o) => {
    delete t[o];
  }), delete t._chartjs);
}
function y1(t) {
  const e = new Set(t);
  return e.size === t.length ? t : Array.from(e);
}
var b12 = function() {
  return typeof window > "u" ? function(t) {
    return t();
  } : window.requestAnimationFrame;
}();
function v1(t, e) {
  let r = [], n = false;
  return function(...i) {
    r = i, n || (n = true, b12.call(window, () => {
      n = false, t.apply(e, r);
    }));
  };
}
function f2(t, e) {
  let r;
  return function(...n) {
    return e ? (clearTimeout(r), r = setTimeout(t, e, n)) : t.apply(this, n), e;
  };
}
var Uu = (t) => t === "start" ? "left" : t === "end" ? "right" : "center";
var It3 = (t, e, r) => t === "start" ? e : t === "end" ? r : (e + r) / 2;
var d2 = (t, e, r, n) => t === (n ? "left" : "right") ? r : t === "center" ? (e + r) / 2 : e;
function A1(t, e, r) {
  const n = e.length;
  let i = 0, o = n;
  if (t._sorted) {
    const { iScale: s, _parsed: a } = t, l = s.axis, { min: c3, max: u, minDefined: f4, maxDefined: d } = s.getUserBounds();
    f4 && (i = St3(Math.min(Ur(a, l, c3).lo, r ? n : Ur(e, l, s.getPixelForValue(c3)).lo), 0, n - 1)), d ? o = St3(Math.max(Ur(a, s.axis, u, true).hi + 1, r ? 0 : Ur(e, l, s.getPixelForValue(u), true).hi + 1), i, n) - i : o = n - i;
  }
  return {
    start: i,
    count: o
  };
}
function w1(t) {
  const { xScale: e, yScale: r, _scaleRanges: n } = t, i = {
    xmin: e.min,
    xmax: e.max,
    ymin: r.min,
    ymax: r.max
  };
  if (!n)
    return t._scaleRanges = i, true;
  const o = n.xmin !== e.min || n.xmax !== e.max || n.ymin !== r.min || n.ymax !== r.max;
  return Object.assign(n, i), o;
}
var vs = (t) => t === 0 || t === 1;
var Td = (t, e, r) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * ot3 / r));
var Od = (t, e, r) => Math.pow(2, -10 * t) * Math.sin((t - e) * ot3 / r) + 1;
var bo = {
  linear: (t) => t,
  easeInQuad: (t) => t * t,
  easeOutQuad: (t) => -t * (t - 2),
  easeInOutQuad: (t) => (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
  easeInCubic: (t) => t * t * t,
  easeOutCubic: (t) => (t -= 1) * t * t + 1,
  easeInOutCubic: (t) => (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
  easeInQuart: (t) => t * t * t * t,
  easeOutQuart: (t) => -((t -= 1) * t * t * t - 1),
  easeInOutQuart: (t) => (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
  easeInQuint: (t) => t * t * t * t * t,
  easeOutQuint: (t) => (t -= 1) * t * t * t * t + 1,
  easeInOutQuint: (t) => (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
  easeInSine: (t) => -Math.cos(t * mt3) + 1,
  easeOutSine: (t) => Math.sin(t * mt3),
  easeInOutSine: (t) => -0.5 * (Math.cos(st3 * t) - 1),
  easeInExpo: (t) => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
  easeOutExpo: (t) => t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
  easeInOutExpo: (t) => vs(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
  easeInCirc: (t) => t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
  easeOutCirc: (t) => Math.sqrt(1 - (t -= 1) * t),
  easeInOutCirc: (t) => (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
  easeInElastic: (t) => vs(t) ? t : Td(t, 0.075, 0.3),
  easeOutElastic: (t) => vs(t) ? t : Od(t, 0.075, 0.3),
  easeInOutElastic(t) {
    return vs(t) ? t : t < 0.5 ? 0.5 * Td(t * 2, 0.1125, 0.45) : 0.5 + 0.5 * Od(t * 2 - 1, 0.1125, 0.45);
  },
  easeInBack(t) {
    return t * t * (2.70158 * t - 1.70158);
  },
  easeOutBack(t) {
    return (t -= 1) * t * (2.70158 * t + 1.70158) + 1;
  },
  easeInOutBack(t) {
    let e = 1.70158;
    return (t /= 0.5) < 1 ? 0.5 * (t * t * (((e *= 1.525) + 1) * t - e)) : 0.5 * ((t -= 2) * t * (((e *= 1.525) + 1) * t + e) + 2);
  },
  easeInBounce: (t) => 1 - bo.easeOutBounce(1 - t),
  easeOutBounce(t) {
    return t < 0.36363636363636365 ? 7.5625 * t * t : t < 0.7272727272727273 ? 7.5625 * (t -= 0.5454545454545454) * t + 0.75 : t < 0.9090909090909091 ? 7.5625 * (t -= 0.8181818181818182) * t + 0.9375 : 7.5625 * (t -= 0.9545454545454546) * t + 0.984375;
  },
  easeInOutBounce: (t) => t < 0.5 ? bo.easeInBounce(t * 2) * 0.5 : bo.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
function zu(t) {
  if (t && typeof t == "object") {
    const e = t.toString();
    return e === "[object CanvasPattern]" || e === "[object CanvasGradient]";
  }
  return false;
}
function Id(t) {
  return zu(t) ? t : new To(t);
}
function ql(t) {
  return zu(t) ? t : new To(t).saturate(0.5).darken(0.1).hexString();
}
var h2 = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
var p2 = [
  "color",
  "borderColor",
  "backgroundColor"
];
function g2(t) {
  t.set("animation", {
    delay: undefined,
    duration: 1000,
    easing: "easeOutQuart",
    fn: undefined,
    from: undefined,
    loop: undefined,
    to: undefined,
    type: undefined
  }), t.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (e) => e !== "onProgress" && e !== "onComplete" && e !== "fn"
  }), t.set("animations", {
    colors: {
      type: "color",
      properties: p2
    },
    numbers: {
      type: "number",
      properties: h2
    }
  }), t.describe("animations", {
    _fallback: "animation"
  }), t.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (e) => e | 0
        }
      }
    }
  });
}
function m2(t) {
  t.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
var Pd = /* @__PURE__ */ new Map;
function y22(t, e) {
  e = e || {};
  const r = t + JSON.stringify(e);
  let n = Pd.get(r);
  return n || (n = new Intl.NumberFormat(t, e), Pd.set(r, n)), n;
}
function Qo(t, e, r) {
  return y22(e, r).format(t);
}
var x1 = {
  values(t) {
    return it3(t) ? t : "" + t;
  },
  numeric(t, e, r) {
    if (t === 0)
      return "0";
    const n = this.chart.options.locale;
    let i, o = t;
    if (r.length > 1) {
      const c3 = Math.max(Math.abs(r[0].value), Math.abs(r[r.length - 1].value));
      (c3 < 0.0001 || c3 > 1000000000000000) && (i = "scientific"), o = b2(t, r);
    }
    const s = rn3(Math.abs(o)), a = isNaN(s) ? 1 : Math.max(Math.min(-1 * Math.floor(s), 20), 0), l = {
      notation: i,
      minimumFractionDigits: a,
      maximumFractionDigits: a
    };
    return Object.assign(l, this.options.ticks.format), Qo(t, n, l);
  },
  logarithmic(t, e, r) {
    if (t === 0)
      return "0";
    const n = r[e].significand || t / Math.pow(10, Math.floor(rn3(t)));
    return [
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(n) || e > 0.8 * r.length ? x1.numeric.call(this, t, e, r) : "";
  }
};
function b2(t, e) {
  let r = e.length > 3 ? e[2].value - e[1].value : e[1].value - e[0].value;
  return Math.abs(r) >= 1 && t !== Math.floor(t) && (r = t - Math.floor(t)), r;
}
var Ya = {
  formatters: x1
};
function v2(t) {
  t.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (e, r) => r.lineWidth,
      tickColor: (e, r) => r.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ya.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  }), t.route("scale.ticks", "color", "", "color"), t.route("scale.grid", "color", "", "borderColor"), t.route("scale.border", "color", "", "borderColor"), t.route("scale.title", "color", "", "color"), t.describe("scale", {
    _fallback: false,
    _scriptable: (e) => !e.startsWith("before") && !e.startsWith("after") && e !== "callback" && e !== "parser",
    _indexable: (e) => e !== "borderDash" && e !== "tickBorderDash" && e !== "dash"
  }), t.describe("scales", {
    _fallback: "scale"
  }), t.describe("scale.ticks", {
    _scriptable: (e) => e !== "backdropPadding" && e !== "callback",
    _indexable: (e) => e !== "backdropPadding"
  });
}
var Yn3 = /* @__PURE__ */ Object.create(null);
var Mc = /* @__PURE__ */ Object.create(null);
function vo(t, e) {
  if (!e)
    return t;
  const r = e.split(".");
  for (let n = 0, i = r.length;n < i; ++n) {
    const o = r[n];
    t = t[o] || (t[o] = /* @__PURE__ */ Object.create(null));
  }
  return t;
}
function Hl(t, e, r) {
  return typeof e == "string" ? Oo(vo(t, e), r) : Oo(vo(t, ""), e);
}

class A22 {
  constructor(e, r) {
    this.animation = undefined, this.backgroundColor = "rgba(0,0,0,0.1)", this.borderColor = "rgba(0,0,0,0.1)", this.color = "#666", this.datasets = {}, this.devicePixelRatio = (n) => n.chart.platform.getDevicePixelRatio(), this.elements = {}, this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ], this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    }, this.hover = {}, this.hoverBackgroundColor = (n, i) => ql(i.backgroundColor), this.hoverBorderColor = (n, i) => ql(i.borderColor), this.hoverColor = (n, i) => ql(i.color), this.indexAxis = "x", this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    }, this.maintainAspectRatio = true, this.onHover = null, this.onClick = null, this.parsing = true, this.plugins = {}, this.responsive = true, this.scale = undefined, this.scales = {}, this.showLine = true, this.drawActiveElementsOnTop = true, this.describe(e), this.apply(r);
  }
  set(e, r) {
    return Hl(this, e, r);
  }
  get(e) {
    return vo(this, e);
  }
  describe(e, r) {
    return Hl(Mc, e, r);
  }
  override(e, r) {
    return Hl(Yn3, e, r);
  }
  route(e, r, n, i) {
    const o = vo(this, e), s = vo(this, n), a = "_" + r;
    Object.defineProperties(o, {
      [a]: {
        value: o[r],
        writable: true
      },
      [r]: {
        enumerable: true,
        get() {
          const l = this[a], c3 = s[i];
          return Le(l) ? Object.assign({}, c3, l) : Oe(l, c3);
        },
        set(l) {
          this[a] = l;
        }
      }
    });
  }
  apply(e) {
    e.forEach((r) => r(this));
  }
}
var gt3 = /* @__PURE__ */ new A22({
  _scriptable: (t) => !t.startsWith("on"),
  _indexable: (t) => t !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  g2,
  m2,
  v2
]);
function w2(t) {
  return !t || We(t.size) || We(t.family) ? null : (t.style ? t.style + " " : "") + (t.weight ? t.weight + " " : "") + t.size + "px " + t.family;
}
function ba(t, e, r, n, i) {
  let o = e[i];
  return o || (o = e[i] = t.measureText(i).width, r.push(i)), o > n && (n = o), n;
}
function x2(t, e, r, n) {
  n = n || {};
  let i = n.data = n.data || {}, o = n.garbageCollect = n.garbageCollect || [];
  n.font !== e && (i = n.data = {}, o = n.garbageCollect = [], n.font = e), t.save(), t.font = e;
  let s = 0;
  const a = r.length;
  let l, c3, u, f4, d;
  for (l = 0;l < a; l++)
    if (f4 = r[l], f4 != null && !it3(f4))
      s = ba(t, i, o, s, f4);
    else if (it3(f4))
      for (c3 = 0, u = f4.length;c3 < u; c3++)
        d = f4[c3], d != null && !it3(d) && (s = ba(t, i, o, s, d));
  t.restore();
  const h = o.length / 2;
  if (h > r.length) {
    for (l = 0;l < h; l++)
      delete i[o[l]];
    o.splice(0, h);
  }
  return s;
}
function kn3(t, e, r) {
  const n = t.currentDevicePixelRatio, i = r !== 0 ? Math.max(r / 2, 0.5) : 0;
  return Math.round((e - i) * n) / n + i;
}
function Rd(t, e) {
  e = e || t.getContext("2d"), e.save(), e.resetTransform(), e.clearRect(0, 0, t.width, t.height), e.restore();
}
function Nc(t, e, r, n) {
  _12(t, e, r, n, null);
}
function _12(t, e, r, n, i) {
  let o, s, a, l, c3, u, f4, d;
  const { pointStyle: h, rotation: g3, radius: p } = e;
  let y4 = (g3 || 0) * n2;
  if (h && typeof h == "object" && (o = h.toString(), o === "[object HTMLImageElement]" || o === "[object HTMLCanvasElement]")) {
    t.save(), t.translate(r, n), t.rotate(y4), t.drawImage(h, -h.width / 2, -h.height / 2, h.width, h.height), t.restore();
    return;
  }
  if (!(isNaN(p) || p <= 0)) {
    switch (t.beginPath(), h) {
      default:
        i ? t.ellipse(r, n, i / 2, p, 0, 0, ot3) : t.arc(r, n, p, 0, ot3), t.closePath();
        break;
      case "triangle":
        u = i ? i / 2 : p, t.moveTo(r + Math.sin(y4) * u, n - Math.cos(y4) * p), y4 += Sd, t.lineTo(r + Math.sin(y4) * u, n - Math.cos(y4) * p), y4 += Sd, t.lineTo(r + Math.sin(y4) * u, n - Math.cos(y4) * p), t.closePath();
        break;
      case "rectRounded":
        c3 = p * 0.516, l = p - c3, s = Math.cos(y4 + En3) * l, f4 = Math.cos(y4 + En3) * (i ? i / 2 - c3 : l), a = Math.sin(y4 + En3) * l, d = Math.sin(y4 + En3) * (i ? i / 2 - c3 : l), t.arc(r - f4, n - a, c3, y4 - st3, y4 - mt3), t.arc(r + d, n - s, c3, y4 - mt3, y4), t.arc(r + f4, n + a, c3, y4, y4 + mt3), t.arc(r - d, n + s, c3, y4 + mt3, y4 + st3), t.closePath();
        break;
      case "rect":
        if (!g3) {
          l = Math.SQRT1_2 * p, u = i ? i / 2 : l, t.rect(r - u, n - l, 2 * u, 2 * l);
          break;
        }
        y4 += En3;
      case "rectRot":
        f4 = Math.cos(y4) * (i ? i / 2 : p), s = Math.cos(y4) * p, a = Math.sin(y4) * p, d = Math.sin(y4) * (i ? i / 2 : p), t.moveTo(r - f4, n - a), t.lineTo(r + d, n - s), t.lineTo(r + f4, n + a), t.lineTo(r - d, n + s), t.closePath();
        break;
      case "crossRot":
        y4 += En3;
      case "cross":
        f4 = Math.cos(y4) * (i ? i / 2 : p), s = Math.cos(y4) * p, a = Math.sin(y4) * p, d = Math.sin(y4) * (i ? i / 2 : p), t.moveTo(r - f4, n - a), t.lineTo(r + f4, n + a), t.moveTo(r + d, n - s), t.lineTo(r - d, n + s);
        break;
      case "star":
        f4 = Math.cos(y4) * (i ? i / 2 : p), s = Math.cos(y4) * p, a = Math.sin(y4) * p, d = Math.sin(y4) * (i ? i / 2 : p), t.moveTo(r - f4, n - a), t.lineTo(r + f4, n + a), t.moveTo(r + d, n - s), t.lineTo(r - d, n + s), y4 += En3, f4 = Math.cos(y4) * (i ? i / 2 : p), s = Math.cos(y4) * p, a = Math.sin(y4) * p, d = Math.sin(y4) * (i ? i / 2 : p), t.moveTo(r - f4, n - a), t.lineTo(r + f4, n + a), t.moveTo(r + d, n - s), t.lineTo(r - d, n + s);
        break;
      case "line":
        s = i ? i / 2 : Math.cos(y4) * p, a = Math.sin(y4) * p, t.moveTo(r - s, n - a), t.lineTo(r + s, n + a);
        break;
      case "dash":
        t.moveTo(r, n), t.lineTo(r + Math.cos(y4) * (i ? i / 2 : p), n + Math.sin(y4) * p);
        break;
      case false:
        t.closePath();
        break;
    }
    t.fill(), e.borderWidth > 0 && t.stroke();
  }
}
function zr(t, e, r) {
  return r = r || 0.5, !e || t && t.x > e.left - r && t.x < e.right + r && t.y > e.top - r && t.y < e.bottom + r;
}
function Ka(t, e) {
  t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();
}
function Xa(t) {
  t.restore();
}
function _2(t, e, r, n, i) {
  if (!e)
    return t.lineTo(r.x, r.y);
  if (i === "middle") {
    const o = (e.x + r.x) / 2;
    t.lineTo(o, e.y), t.lineTo(o, r.y);
  } else
    i === "after" != !!n ? t.lineTo(e.x, r.y) : t.lineTo(r.x, e.y);
  t.lineTo(r.x, r.y);
}
function S2(t, e, r, n) {
  if (!e)
    return t.lineTo(r.x, r.y);
  t.bezierCurveTo(n ? e.cp1x : e.cp2x, n ? e.cp1y : e.cp2y, n ? r.cp2x : r.cp1x, n ? r.cp2y : r.cp1y, r.x, r.y);
}
function E2(t, e) {
  e.translation && t.translate(e.translation[0], e.translation[1]), We(e.rotation) || t.rotate(e.rotation), e.color && (t.fillStyle = e.color), e.textAlign && (t.textAlign = e.textAlign), e.textBaseline && (t.textBaseline = e.textBaseline);
}
function k2(t, e, r, n, i) {
  if (i.strikethrough || i.underline) {
    const o = t.measureText(n), s = e - o.actualBoundingBoxLeft, a = e + o.actualBoundingBoxRight, l = r - o.actualBoundingBoxAscent, c3 = r + o.actualBoundingBoxDescent, u = i.strikethrough ? (l + c3) / 2 : c3;
    t.strokeStyle = t.fillStyle, t.beginPath(), t.lineWidth = i.decorationWidth || 2, t.moveTo(s, u), t.lineTo(a, u), t.stroke();
  }
}
function C2(t, e) {
  const r = t.fillStyle;
  t.fillStyle = e.color, t.fillRect(e.left, e.top, e.width, e.height), t.fillStyle = r;
}
function Kn3(t, e, r, n, i, o = {}) {
  const s = it3(e) ? e : [
    e
  ], a = o.strokeWidth > 0 && o.strokeColor !== "";
  let l, c3;
  for (t.save(), t.font = i.string, E2(t, o), l = 0;l < s.length; ++l)
    c3 = s[l], o.backdrop && C2(t, o.backdrop), a && (o.strokeColor && (t.strokeStyle = o.strokeColor), We(o.strokeWidth) || (t.lineWidth = o.strokeWidth), t.strokeText(c3, r, n, o.maxWidth)), t.fillText(c3, r, n, o.maxWidth), k2(t, r, n, c3, o), n += Number(i.lineHeight);
  t.restore();
}
function Ro(t, e) {
  const { x: r, y: n, w: i, h: o, radius: s } = e;
  t.arc(r + s.topLeft, n + s.topLeft, s.topLeft, 1.5 * st3, st3, true), t.lineTo(r, n + o - s.bottomLeft), t.arc(r + s.bottomLeft, n + o - s.bottomLeft, s.bottomLeft, st3, mt3, true), t.lineTo(r + i - s.bottomRight, n + o), t.arc(r + i - s.bottomRight, n + o - s.bottomRight, s.bottomRight, mt3, 0, true), t.lineTo(r + i, n + s.topRight), t.arc(r + i - s.topRight, n + s.topRight, s.topRight, 0, -mt3, true), t.lineTo(r + s.topLeft, n);
}
var T22 = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
var O2 = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function I2(t, e) {
  const r = ("" + t).match(T22);
  if (!r || r[1] === "normal")
    return e * 1.2;
  switch (t = +r[2], r[3]) {
    case "px":
      return t;
    case "%":
      t /= 100;
      break;
  }
  return e * t;
}
var P2 = (t) => +t || 0;
function Vu(t, e) {
  const r = {}, n = Le(e), i = n ? Object.keys(e) : e, o = Le(t) ? n ? (s) => Oe(t[s], t[e[s]]) : (s) => t[s] : () => t;
  for (const s of i)
    r[s] = P2(o(s));
  return r;
}
function S1(t) {
  return Vu(t, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function Fn3(t) {
  return Vu(t, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function Mt3(t) {
  const e = S1(t);
  return e.width = e.left + e.right, e.height = e.top + e.bottom, e;
}
function vt3(t, e) {
  t = t || {}, e = e || gt3.font;
  let r = Oe(t.size, e.size);
  typeof r == "string" && (r = parseInt(r, 10));
  let n = Oe(t.style, e.style);
  n && !("" + n).match(O2) && (console.warn('Invalid font style specified: "' + n + '"'), n = undefined);
  const i = {
    family: Oe(t.family, e.family),
    lineHeight: I2(Oe(t.lineHeight, e.lineHeight), r),
    size: r,
    style: n,
    weight: Oe(t.weight, e.weight),
    string: ""
  };
  return i.string = w2(i), i;
}
function oo(t, e, r, n) {
  let i = true, o, s, a;
  for (o = 0, s = t.length;o < s; ++o)
    if (a = t[o], a !== undefined && (e !== undefined && typeof a == "function" && (a = a(e), i = false), r !== undefined && it3(a) && (a = a[r % a.length], i = false), a !== undefined))
      return n && !i && (n.cacheable = false), a;
}
function R22(t, e, r) {
  const { min: n, max: i } = t, o = d12(e, (i - n) / 2), s = (a, l) => r && a === 0 ? 0 : a + l;
  return {
    min: s(n, -Math.abs(o)),
    max: s(i, o)
  };
}
function vn3(t, e) {
  return Object.assign(Object.create(t), e);
}
function qu(t, e = [
  ""
], r, n, i = () => t[0]) {
  const o = r || t;
  typeof n > "u" && (n = T1("_fallback", t));
  const s = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: t,
    _rootScopes: o,
    _fallback: n,
    _getTarget: i,
    override: (a) => qu([
      a,
      ...t
    ], e, o, n)
  };
  return new Proxy(s, {
    deleteProperty(a, l) {
      return delete a[l], delete a._keys, delete t[0][l], true;
    },
    get(a, l) {
      return k1(a, l, () => W2(l, e, t, a));
    },
    getOwnPropertyDescriptor(a, l) {
      return Reflect.getOwnPropertyDescriptor(a._scopes[0], l);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(t[0]);
    },
    has(a, l) {
      return Md(a).includes(l);
    },
    ownKeys(a) {
      return Md(a);
    },
    set(a, l, c3) {
      const u = a._storage || (a._storage = i());
      return a[l] = u[l] = c3, delete a._keys, true;
    }
  });
}
function ki(t, e, r, n) {
  const i = {
    _cacheable: false,
    _proxy: t,
    _context: e,
    _subProxy: r,
    _stack: /* @__PURE__ */ new Set,
    _descriptors: E12(t, n),
    setContext: (o) => ki(t, o, r, n),
    override: (o) => ki(t.override(o), e, r, n)
  };
  return new Proxy(i, {
    deleteProperty(o, s) {
      return delete o[s], delete t[s], true;
    },
    get(o, s, a) {
      return k1(o, s, () => M2(o, s, a));
    },
    getOwnPropertyDescriptor(o, s) {
      return o._descriptors.allKeys ? Reflect.has(t, s) ? {
        enumerable: true,
        configurable: true
      } : undefined : Reflect.getOwnPropertyDescriptor(t, s);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(t);
    },
    has(o, s) {
      return Reflect.has(t, s);
    },
    ownKeys() {
      return Reflect.ownKeys(t);
    },
    set(o, s, a) {
      return t[s] = a, delete o[s], true;
    }
  });
}
function E12(t, e = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable: r = e.scriptable, _indexable: n = e.indexable, _allKeys: i = e.allKeys } = t;
  return {
    allKeys: i,
    scriptable: r,
    indexable: n,
    isScriptable: gn(r) ? r : () => r,
    isIndexable: gn(n) ? n : () => n
  };
}
var D2 = (t, e) => t ? t + Fu(e) : e;
var Hu = (t, e) => Le(e) && t !== "adapters" && (Object.getPrototypeOf(e) === null || e.constructor === Object);
function k1(t, e, r) {
  if (Object.prototype.hasOwnProperty.call(t, e))
    return t[e];
  const n = r();
  return t[e] = n, n;
}
function M2(t, e, r) {
  const { _proxy: n, _context: i, _subProxy: o, _descriptors: s } = t;
  let a = n[e];
  return gn(a) && s.isScriptable(e) && (a = N22(e, a, t, r)), it3(a) && a.length && (a = L2(e, a, t, s.isIndexable)), Hu(e, a) && (a = ki(a, i, o && o[e], s)), a;
}
function N22(t, e, r, n) {
  const { _proxy: i, _context: o, _subProxy: s, _stack: a } = r;
  if (a.has(t))
    throw new Error("Recursion detected: " + Array.from(a).join("->") + "->" + t);
  a.add(t);
  let l = e(o, s || n);
  return a.delete(t), Hu(t, l) && (l = Yu(i._scopes, i, t, l)), l;
}
function L2(t, e, r, n) {
  const { _proxy: i, _context: o, _subProxy: s, _descriptors: a } = r;
  if (typeof o.index < "u" && n(t))
    return e[o.index % e.length];
  if (Le(e[0])) {
    const l = e, c3 = i._scopes.filter((u) => u !== l);
    e = [];
    for (const u of l) {
      const f4 = Yu(c3, i, t, u);
      e.push(ki(f4, o, s && s[t], a));
    }
  }
  return e;
}
function C1(t, e, r) {
  return gn(t) ? t(e, r) : t;
}
var B22 = (t, e) => t === true ? e : typeof t == "string" ? pn3(e, t) : undefined;
function F22(t, e, r, n, i) {
  for (const o of e) {
    const s = B22(r, o);
    if (s) {
      t.add(s);
      const a = C1(s._fallback, r, i);
      if (typeof a < "u" && a !== r && a !== n)
        return a;
    } else if (s === false && typeof n < "u" && r !== n)
      return null;
  }
  return false;
}
function Yu(t, e, r, n) {
  const i = e._rootScopes, o = C1(e._fallback, r, n), s = [
    ...t,
    ...i
  ], a = /* @__PURE__ */ new Set;
  a.add(n);
  let l = Dd(a, s, r, o || r, n);
  return l === null || typeof o < "u" && o !== r && (l = Dd(a, s, o, l, n), l === null) ? false : qu(Array.from(a), [
    ""
  ], i, o, () => j2(e, r, n));
}
function Dd(t, e, r, n, i) {
  for (;r; )
    r = F22(t, e, r, n, i);
  return r;
}
function j2(t, e, r) {
  const n = t._getTarget();
  e in n || (n[e] = {});
  const i = n[e];
  return it3(i) && Le(r) ? r : i || {};
}
function W2(t, e, r, n) {
  let i;
  for (const o of e)
    if (i = T1(D2(o, t), r), typeof i < "u")
      return Hu(t, i) ? Yu(r, n, t, i) : i;
}
function T1(t, e) {
  for (const r of e) {
    if (!r)
      continue;
    const n = r[t];
    if (typeof n < "u")
      return n;
  }
}
function Md(t) {
  let e = t._keys;
  return e || (e = t._keys = U2(t._scopes)), e;
}
function U2(t) {
  const e = /* @__PURE__ */ new Set;
  for (const r of t)
    for (const n of Object.keys(r).filter((i) => !i.startsWith("_")))
      e.add(n);
  return Array.from(e);
}
function O1(t, e, r, n) {
  const { iScale: i } = t, { key: o = "r" } = this._parsing, s = new Array(n);
  let a, l, c3, u;
  for (a = 0, l = n;a < l; ++a)
    c3 = a + r, u = e[c3], s[a] = {
      r: i.parse(pn3(u, o), c3)
    };
  return s;
}
var z2 = Number.EPSILON || 0.00000000000001;
var Ci = (t, e) => e < t.length && !t[e].skip && t[e];
var I1 = (t) => t === "x" ? "y" : "x";
function V2(t, e, r, n) {
  const i = t.skip ? e : t, o = e, s = r.skip ? e : r, a = Dc(o, i), l = Dc(s, o);
  let c3 = a / (a + l), u = l / (a + l);
  c3 = isNaN(c3) ? 0 : c3, u = isNaN(u) ? 0 : u;
  const f4 = n * c3, d = n * u;
  return {
    previous: {
      x: o.x - f4 * (s.x - i.x),
      y: o.y - f4 * (s.y - i.y)
    },
    next: {
      x: o.x + d * (s.x - i.x),
      y: o.y + d * (s.y - i.y)
    }
  };
}
function q22(t, e, r) {
  const n = t.length;
  let i, o, s, a, l, c3 = Ci(t, 0);
  for (let u = 0;u < n - 1; ++u)
    if (l = c3, c3 = Ci(t, u + 1), !(!l || !c3)) {
      if (yo(e[u], 0, z2)) {
        r[u] = r[u + 1] = 0;
        continue;
      }
      i = r[u] / e[u], o = r[u + 1] / e[u], a = Math.pow(i, 2) + Math.pow(o, 2), !(a <= 9) && (s = 3 / Math.sqrt(a), r[u] = i * s * e[u], r[u + 1] = o * s * e[u]);
    }
}
function H2(t, e, r = "x") {
  const n = I1(r), i = t.length;
  let o, s, a, l = Ci(t, 0);
  for (let c3 = 0;c3 < i; ++c3) {
    if (s = a, a = l, l = Ci(t, c3 + 1), !a)
      continue;
    const u = a[r], f4 = a[n];
    s && (o = (u - s[r]) / 3, a[`cp1${r}`] = u - o, a[`cp1${n}`] = f4 - o * e[c3]), l && (o = (l[r] - u) / 3, a[`cp2${r}`] = u + o, a[`cp2${n}`] = f4 + o * e[c3]);
  }
}
function Y2(t, e = "x") {
  const r = I1(e), n = t.length, i = Array(n).fill(0), o = Array(n);
  let s, a, l, c3 = Ci(t, 0);
  for (s = 0;s < n; ++s)
    if (a = l, l = c3, c3 = Ci(t, s + 1), !!l) {
      if (c3) {
        const u = c3[e] - l[e];
        i[s] = u !== 0 ? (c3[r] - l[r]) / u : 0;
      }
      o[s] = a ? c3 ? Cr(i[s - 1]) !== Cr(i[s]) ? 0 : (i[s - 1] + i[s]) / 2 : i[s - 1] : i[s];
    }
  q22(t, i, o), H2(t, o, e);
}
function As(t, e, r) {
  return Math.max(Math.min(t, r), e);
}
function K2(t, e) {
  let r, n, i, o, s, a = zr(t[0], e);
  for (r = 0, n = t.length;r < n; ++r)
    s = o, o = a, a = r < n - 1 && zr(t[r + 1], e), o && (i = t[r], s && (i.cp1x = As(i.cp1x, e.left, e.right), i.cp1y = As(i.cp1y, e.top, e.bottom)), a && (i.cp2x = As(i.cp2x, e.left, e.right), i.cp2y = As(i.cp2y, e.top, e.bottom)));
}
function X2(t, e, r, n, i) {
  let o, s, a, l;
  if (e.spanGaps && (t = t.filter((c3) => !c3.skip)), e.cubicInterpolationMode === "monotone")
    Y2(t, i);
  else {
    let c3 = n ? t[t.length - 1] : t[0];
    for (o = 0, s = t.length;o < s; ++o)
      a = t[o], l = V2(c3, a, t[Math.min(o + 1, s - (n ? 0 : 1)) % s], e.tension), a.cp1x = l.previous.x, a.cp1y = l.previous.y, a.cp2x = l.next.x, a.cp2y = l.next.y, c3 = a;
  }
  e.capBezierPoints && K2(t, r);
}
function P1() {
  return typeof window < "u" && typeof document < "u";
}
function Ku(t) {
  let e = t.parentNode;
  return e && e.toString() === "[object ShadowRoot]" && (e = e.host), e;
}
function va(t, e, r) {
  let n;
  return typeof t == "string" ? (n = parseInt(t, 10), t.indexOf("%") !== -1 && (n = n / 100 * e.parentNode[r])) : n = t, n;
}
var Ja = (t) => t.ownerDocument.defaultView.getComputedStyle(t, null);
function J22(t, e) {
  return Ja(t).getPropertyValue(e);
}
var Q22 = [
  "top",
  "right",
  "bottom",
  "left"
];
function jn3(t, e, r) {
  const n = {};
  r = r ? "-" + r : "";
  for (let i = 0;i < 4; i++) {
    const o = Q22[i];
    n[o] = parseFloat(t[e + "-" + o + r]) || 0;
  }
  return n.width = n.left + n.right, n.height = n.top + n.bottom, n;
}
var G2 = (t, e, r) => (t > 0 || e > 0) && (!r || !r.shadowRoot);
function Z2(t, e) {
  const r = t.touches, n = r && r.length ? r[0] : t, { offsetX: i, offsetY: o } = n;
  let s = false, a, l;
  if (G2(i, o, t.target))
    a = i, l = o;
  else {
    const c3 = e.getBoundingClientRect();
    a = n.clientX - c3.left, l = n.clientY - c3.top, s = true;
  }
  return {
    x: a,
    y: l,
    box: s
  };
}
function Pn3(t, e) {
  if ("native" in t)
    return t;
  const { canvas: r, currentDevicePixelRatio: n } = e, i = Ja(r), o = i.boxSizing === "border-box", s = jn3(i, "padding"), a = jn3(i, "border", "width"), { x: l, y: c3, box: u } = Z2(t, r), f4 = s.left + (u && a.left), d = s.top + (u && a.top);
  let { width: h, height: g3 } = e;
  return o && (h -= s.width + a.width, g3 -= s.height + a.height), {
    x: Math.round((l - f4) / h * r.width / n),
    y: Math.round((c3 - d) / g3 * r.height / n)
  };
}
function $2(t, e, r) {
  let n, i;
  if (e === undefined || r === undefined) {
    const o = Ku(t);
    if (!o)
      e = t.clientWidth, r = t.clientHeight;
    else {
      const s = o.getBoundingClientRect(), a = Ja(o), l = jn3(a, "border", "width"), c3 = jn3(a, "padding");
      e = s.width - c3.width - l.width, r = s.height - c3.height - l.height, n = va(a.maxWidth, o, "clientWidth"), i = va(a.maxHeight, o, "clientHeight");
    }
  }
  return {
    width: e,
    height: r,
    maxWidth: n || ya,
    maxHeight: i || ya
  };
}
var ws = (t) => Math.round(t * 10) / 10;
function ev(t, e, r, n) {
  const i = Ja(t), o = jn3(i, "margin"), s = va(i.maxWidth, t, "clientWidth") || ya, a = va(i.maxHeight, t, "clientHeight") || ya, l = $2(t, e, r);
  let { width: c3, height: u } = l;
  if (i.boxSizing === "content-box") {
    const d = jn3(i, "border", "width"), h = jn3(i, "padding");
    c3 -= h.width + d.width, u -= h.height + d.height;
  }
  return c3 = Math.max(0, c3 - o.width), u = Math.max(0, n ? c3 / n : u - o.height), c3 = ws(Math.min(c3, s, l.maxWidth)), u = ws(Math.min(u, a, l.maxHeight)), c3 && !u && (u = ws(c3 / 2)), (e !== undefined || r !== undefined) && n && l.height && u > l.height && (u = l.height, c3 = ws(Math.floor(u * n))), {
    width: c3,
    height: u
  };
}
function Nd(t, e, r) {
  const n = e || 1, i = Math.floor(t.height * n), o = Math.floor(t.width * n);
  t.height = Math.floor(t.height), t.width = Math.floor(t.width);
  const s = t.canvas;
  return s.style && (r || !s.style.height && !s.style.width) && (s.style.height = `${t.height}px`, s.style.width = `${t.width}px`), t.currentDevicePixelRatio !== n || s.height !== i || s.width !== o ? (t.currentDevicePixelRatio = n, s.height = i, s.width = o, t.ctx.setTransform(n, 0, 0, n, 0, 0), true) : false;
}
var tv = function() {
  let t = false;
  try {
    const e = {
      get passive() {
        return t = true, false;
      }
    };
    window.addEventListener("test", null, e), window.removeEventListener("test", null, e);
  } catch {
  }
  return t;
}();
function Ld(t, e) {
  const r = J22(t, e), n = r && r.match(/^(\d+)(\.\d+)?px$/);
  return n ? +n[1] : undefined;
}
function Rn3(t, e, r, n) {
  return {
    x: t.x + r * (e.x - t.x),
    y: t.y + r * (e.y - t.y)
  };
}
function rv(t, e, r, n) {
  return {
    x: t.x + r * (e.x - t.x),
    y: n === "middle" ? r < 0.5 ? t.y : e.y : n === "after" ? r < 1 ? t.y : e.y : r > 0 ? e.y : t.y
  };
}
function nv(t, e, r, n) {
  const i = {
    x: t.cp2x,
    y: t.cp2y
  }, o = {
    x: e.cp1x,
    y: e.cp1y
  }, s = Rn3(t, i, r), a = Rn3(i, o, r), l = Rn3(o, e, r), c3 = Rn3(s, a, r), u = Rn3(a, l, r);
  return Rn3(c3, u, r);
}
var iv = function(t, e) {
  return {
    x(r) {
      return t + t + e - r;
    },
    setWidth(r) {
      e = r;
    },
    textAlign(r) {
      return r === "center" ? r : r === "right" ? "left" : "right";
    },
    xPlus(r, n) {
      return r - n;
    },
    leftForLtr(r, n) {
      return r - n;
    }
  };
};
var ov = function() {
  return {
    x(t) {
      return t;
    },
    setWidth(t) {
    },
    textAlign(t) {
      return t;
    },
    xPlus(t, e) {
      return t + e;
    },
    leftForLtr(t, e) {
      return t;
    }
  };
};
function bi(t, e, r) {
  return t ? iv(e, r) : ov();
}
function R1(t, e) {
  let r, n;
  (e === "ltr" || e === "rtl") && (r = t.canvas.style, n = [
    r.getPropertyValue("direction"),
    r.getPropertyPriority("direction")
  ], r.setProperty("direction", e, "important"), t.prevTextDirection = n);
}
function D1(t, e) {
  e !== undefined && (delete t.prevTextDirection, t.canvas.style.setProperty("direction", e[0], e[1]));
}
function M1(t) {
  return t === "angle" ? {
    between: Po,
    compare: s2,
    normalize: Yt3
  } : {
    between: Wr,
    compare: (e, r) => e - r,
    normalize: (e) => e
  };
}
function Bd({ start: t, end: e, count: r, loop: n, style: i }) {
  return {
    start: t % r,
    end: e % r,
    loop: n && (e - t + 1) % r === 0,
    style: i
  };
}
function sv(t, e, r) {
  const { property: n, start: i, end: o } = r, { between: s, normalize: a } = M1(n), l = e.length;
  let { start: c3, end: u, loop: f4 } = t, d, h;
  if (f4) {
    for (c3 += l, u += l, d = 0, h = l;d < h && s(a(e[c3 % l][n]), i, o); ++d)
      c3--, u--;
    c3 %= l, u %= l;
  }
  return u < c3 && (u += l), {
    start: c3,
    end: u,
    loop: f4,
    style: t.style
  };
}
function N1(t, e, r) {
  if (!r)
    return [
      t
    ];
  const { property: n, start: i, end: o } = r, s = e.length, { compare: a, between: l, normalize: c3 } = M1(n), { start: u, end: f4, loop: d, style: h } = sv(t, e, r), g3 = [];
  let p = false, y4 = null, b, x, S;
  const O = () => l(i, S, b) && a(i, S) !== 0, _ = () => a(o, b) === 0 || l(o, S, b), L = () => p || O(), N4 = () => !p || _();
  for (let j = u, W = u;j <= f4; ++j)
    x = e[j % s], !x.skip && (b = c3(x[n]), b !== S && (p = l(b, i, o), y4 === null && L() && (y4 = a(b, i) === 0 ? j : W), y4 !== null && N4() && (g3.push(Bd({
      start: y4,
      end: j,
      loop: d,
      count: s,
      style: h
    })), y4 = null), W = j, S = b));
  return y4 !== null && g3.push(Bd({
    start: y4,
    end: f4,
    loop: d,
    count: s,
    style: h
  })), g3;
}
function L12(t, e) {
  const r = [], n = t.segments;
  for (let i = 0;i < n.length; i++) {
    const o = N1(n[i], t.points, e);
    o.length && r.push(...o);
  }
  return r;
}
function av(t, e, r, n) {
  let i = 0, o = e - 1;
  if (r && !n)
    for (;i < e && !t[i].skip; )
      i++;
  for (;i < e && t[i].skip; )
    i++;
  for (i %= e, r && (o += i);o > i && t[o % e].skip; )
    o--;
  return o %= e, {
    start: i,
    end: o
  };
}
function lv(t, e, r, n) {
  const i = t.length, o = [];
  let s = e, a = t[e], l;
  for (l = e + 1;l <= r; ++l) {
    const c3 = t[l % i];
    c3.skip || c3.stop ? a.skip || (n = false, o.push({
      start: e % i,
      end: (l - 1) % i,
      loop: n
    }), e = s = c3.stop ? l : null) : (s = l, a.skip && (e = l)), a = c3;
  }
  return s !== null && o.push({
    start: e % i,
    end: s % i,
    loop: n
  }), o;
}
function cv(t, e) {
  const r = t.points, n = t.options.spanGaps, i = r.length;
  if (!i)
    return [];
  const o = !!t._loop, { start: s, end: a } = av(r, i, o, n);
  if (n === true)
    return Fd(t, [
      {
        start: s,
        end: a,
        loop: o
      }
    ], r, e);
  const l = a < s ? a + i : a, c3 = !!t._fullLoop && s === 0 && a === i - 1;
  return Fd(t, lv(r, s, l, c3), r, e);
}
function Fd(t, e, r, n) {
  return !n || !n.setContext || !r ? e : uv(t, e, r, n);
}
function uv(t, e, r, n) {
  const i = t._chart.getContext(), o = jd(t.options), { _datasetIndex: s, options: { spanGaps: a } } = t, l = r.length, c3 = [];
  let u = o, f4 = e[0].start, d = f4;
  function h(g3, p, y4, b) {
    const x = a ? -1 : 1;
    if (g3 !== p) {
      for (g3 += l;r[g3 % l].skip; )
        g3 -= x;
      for (;r[p % l].skip; )
        p += x;
      g3 % l !== p % l && (c3.push({
        start: g3 % l,
        end: p % l,
        loop: y4,
        style: b
      }), u = b, f4 = p % l);
    }
  }
  for (const g3 of e) {
    f4 = a ? f4 : g3.start;
    let p = r[f4 % l], y4;
    for (d = f4 + 1;d <= g3.end; d++) {
      const b = r[d % l];
      y4 = jd(n.setContext(vn3(i, {
        type: "segment",
        p0: p,
        p1: b,
        p0DataIndex: (d - 1) % l,
        p1DataIndex: d % l,
        datasetIndex: s
      }))), fv(y4, u) && h(f4, d - 1, g3.loop, u), p = b, u = y4;
    }
    f4 < d - 1 && h(f4, d - 1, g3.loop, u);
  }
  return c3;
}
function jd(t) {
  return {
    backgroundColor: t.backgroundColor,
    borderCapStyle: t.borderCapStyle,
    borderDash: t.borderDash,
    borderDashOffset: t.borderDashOffset,
    borderJoinStyle: t.borderJoinStyle,
    borderWidth: t.borderWidth,
    borderColor: t.borderColor
  };
}
function fv(t, e) {
  if (!e)
    return false;
  const r = [], n = function(i, o) {
    return zu(o) ? (r.includes(o) || r.push(o), r.indexOf(o)) : o;
  };
  return JSON.stringify(t, n) !== JSON.stringify(e, n);
}
/*!
 * Chart.js v4.4.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */

class dv {
  constructor() {
    this._request = null, this._charts = /* @__PURE__ */ new Map, this._running = false, this._lastDate = undefined;
  }
  _notify(e, r, n, i) {
    const o = r.listeners[i], s = r.duration;
    o.forEach((a) => a({
      chart: e,
      initial: r.initial,
      numSteps: s,
      currentStep: Math.min(n - r.start, s)
    }));
  }
  _refresh() {
    this._request || (this._running = true, this._request = b12.call(window, () => {
      this._update(), this._request = null, this._running && this._refresh();
    }));
  }
  _update(e = Date.now()) {
    let r = 0;
    this._charts.forEach((n, i) => {
      if (!n.running || !n.items.length)
        return;
      const o = n.items;
      let s = o.length - 1, a = false, l;
      for (;s >= 0; --s)
        l = o[s], l._active ? (l._total > n.duration && (n.duration = l._total), l.tick(e), a = true) : (o[s] = o[o.length - 1], o.pop());
      a && (i.draw(), this._notify(i, n, e, "progress")), o.length || (n.running = false, this._notify(i, n, e, "complete"), n.initial = false), r += o.length;
    }), this._lastDate = e, r === 0 && (this._running = false);
  }
  _getAnims(e) {
    const r = this._charts;
    let n = r.get(e);
    return n || (n = {
      running: false,
      initial: true,
      items: [],
      listeners: {
        complete: [],
        progress: []
      }
    }, r.set(e, n)), n;
  }
  listen(e, r, n) {
    this._getAnims(e).listeners[r].push(n);
  }
  add(e, r) {
    !r || !r.length || this._getAnims(e).items.push(...r);
  }
  has(e) {
    return this._getAnims(e).items.length > 0;
  }
  start(e) {
    const r = this._charts.get(e);
    r && (r.running = true, r.start = Date.now(), r.duration = r.items.reduce((n, i) => Math.max(n, i._duration), 0), this._refresh());
  }
  running(e) {
    if (!this._running)
      return false;
    const r = this._charts.get(e);
    return !(!r || !r.running || !r.items.length);
  }
  stop(e) {
    const r = this._charts.get(e);
    if (!r || !r.items.length)
      return;
    const n = r.items;
    let i = n.length - 1;
    for (;i >= 0; --i)
      n[i].cancel();
    r.items = [], this._notify(e, r, Date.now(), "complete");
  }
  remove(e) {
    return this._charts.delete(e);
  }
}
var Dr = /* @__PURE__ */ new dv;
var Wd = "transparent";
var hv = {
  boolean(t, e, r) {
    return r > 0.5 ? e : t;
  },
  color(t, e, r) {
    const n = Id(t || Wd), i = n.valid && Id(e || Wd);
    return i && i.valid ? i.mix(n, r).hexString() : e;
  },
  number(t, e, r) {
    return t + (e - t) * r;
  }
};

class pv {
  constructor(e, r, n, i) {
    const o = r[n];
    i = oo([
      e.to,
      i,
      o,
      e.from
    ]);
    const s = oo([
      e.from,
      o,
      i
    ]);
    this._active = true, this._fn = e.fn || hv[e.type || typeof s], this._easing = bo[e.easing] || bo.linear, this._start = Math.floor(Date.now() + (e.delay || 0)), this._duration = this._total = Math.floor(e.duration), this._loop = !!e.loop, this._target = r, this._prop = n, this._from = s, this._to = i, this._promises = undefined;
  }
  active() {
    return this._active;
  }
  update(e, r, n) {
    if (this._active) {
      this._notify(false);
      const i = this._target[this._prop], o = n - this._start, s = this._duration - o;
      this._start = n, this._duration = Math.floor(Math.max(s, e.duration)), this._total += o, this._loop = !!e.loop, this._to = oo([
        e.to,
        r,
        i,
        e.from
      ]), this._from = oo([
        e.from,
        i,
        r
      ]);
    }
  }
  cancel() {
    this._active && (this.tick(Date.now()), this._active = false, this._notify(false));
  }
  tick(e) {
    const r = e - this._start, n = this._duration, i = this._prop, o = this._from, s = this._loop, a = this._to;
    let l;
    if (this._active = o !== a && (s || r < n), !this._active) {
      this._target[i] = a, this._notify(true);
      return;
    }
    if (r < 0) {
      this._target[i] = o;
      return;
    }
    l = r / n % 2, l = s && l > 1 ? 2 - l : l, l = this._easing(Math.min(1, Math.max(0, l))), this._target[i] = this._fn(o, a, l);
  }
  wait() {
    const e = this._promises || (this._promises = []);
    return new Promise((r, n) => {
      e.push({
        res: r,
        rej: n
      });
    });
  }
  _notify(e) {
    const r = e ? "res" : "rej", n = this._promises || [];
    for (let i = 0;i < n.length; i++)
      n[i][r]();
  }
}

class B12 {
  constructor(e, r) {
    this._chart = e, this._properties = /* @__PURE__ */ new Map, this.configure(r);
  }
  configure(e) {
    if (!Le(e))
      return;
    const r = Object.keys(gt3.animation), n = this._properties;
    Object.getOwnPropertyNames(e).forEach((i) => {
      const o = e[i];
      if (!Le(o))
        return;
      const s = {};
      for (const a of r)
        s[a] = o[a];
      (it3(o.properties) && o.properties || [
        i
      ]).forEach((a) => {
        (a === i || !n.has(a)) && n.set(a, s);
      });
    });
  }
  _animateOptions(e, r) {
    const n = r.options, i = mv(e, n);
    if (!i)
      return [];
    const o = this._createAnimations(i, n);
    return n.$shared && gv(e.options.$animations, n).then(() => {
      e.options = n;
    }, () => {
    }), o;
  }
  _createAnimations(e, r) {
    const n = this._properties, i = [], o = e.$animations || (e.$animations = {}), s = Object.keys(r), a = Date.now();
    let l;
    for (l = s.length - 1;l >= 0; --l) {
      const c3 = s[l];
      if (c3.charAt(0) === "$")
        continue;
      if (c3 === "options") {
        i.push(...this._animateOptions(e, r));
        continue;
      }
      const u = r[c3];
      let f4 = o[c3];
      const d = n.get(c3);
      if (f4)
        if (d && f4.active()) {
          f4.update(d, u, a);
          continue;
        } else
          f4.cancel();
      if (!d || !d.duration) {
        e[c3] = u;
        continue;
      }
      o[c3] = f4 = new pv(d, e, c3, u), i.push(f4);
    }
    return i;
  }
  update(e, r) {
    if (this._properties.size === 0) {
      Object.assign(e, r);
      return;
    }
    const n = this._createAnimations(e, r);
    if (n.length)
      return Dr.add(this._chart, n), true;
  }
}
function gv(t, e) {
  const r = [], n = Object.keys(e);
  for (let i = 0;i < n.length; i++) {
    const o = t[n[i]];
    o && o.active() && r.push(o.wait());
  }
  return Promise.all(r);
}
function mv(t, e) {
  if (!e)
    return;
  let r = t.options;
  if (!r) {
    t.options = e;
    return;
  }
  return r.$shared && (t.options = r = Object.assign({}, r, {
    $shared: false,
    $animations: {}
  })), r;
}
function Ud(t, e) {
  const r = t && t.options || {}, n = r.reverse, i = r.min === undefined ? e : 0, o = r.max === undefined ? e : 0;
  return {
    start: n ? o : i,
    end: n ? i : o
  };
}
function yv(t, e, r) {
  if (r === false)
    return false;
  const n = Ud(t, r), i = Ud(e, r);
  return {
    top: i.end,
    right: n.end,
    bottom: i.start,
    left: n.start
  };
}
function bv(t) {
  let e, r, n, i;
  return Le(t) ? (e = t.top, r = t.right, n = t.bottom, i = t.left) : e = r = n = i = t, {
    top: e,
    right: r,
    bottom: n,
    left: i,
    disabled: t === false
  };
}
function F1(t, e) {
  const r = [], n = t._getSortedDatasetMetas(e);
  let i, o;
  for (i = 0, o = n.length;i < o; ++i)
    r.push(n[i].index);
  return r;
}
function zd(t, e, r, n = {}) {
  const i = t.keys, o = n.mode === "single";
  let s, a, l, c3;
  if (e !== null) {
    for (s = 0, a = i.length;s < a; ++s) {
      if (l = +i[s], l === r) {
        if (n.all)
          continue;
        break;
      }
      c3 = t.values[l], pt3(c3) && (o || e === 0 || Cr(e) === Cr(c3)) && (e += c3);
    }
    return e;
  }
}
function vv(t) {
  const e = Object.keys(t), r = new Array(e.length);
  let n, i, o;
  for (n = 0, i = e.length;n < i; ++n)
    o = e[n], r[n] = {
      x: o,
      y: t[o]
    };
  return r;
}
function Vd(t, e) {
  const r = t && t.options.stacked;
  return r || r === undefined && e.stack !== undefined;
}
function Av(t, e, r) {
  return `${t.id}.${e.id}.${r.stack || r.type}`;
}
function wv(t) {
  const { min: e, max: r, minDefined: n, maxDefined: i } = t.getUserBounds();
  return {
    min: n ? e : Number.NEGATIVE_INFINITY,
    max: i ? r : Number.POSITIVE_INFINITY
  };
}
function xv(t, e, r) {
  const n = t[e] || (t[e] = {});
  return n[r] || (n[r] = {});
}
function qd(t, e, r, n) {
  for (const i of e.getMatchingVisibleMetas(n).reverse()) {
    const o = t[i.index];
    if (r && o > 0 || !r && o < 0)
      return i.index;
  }
  return null;
}
function Hd(t, e) {
  const { chart: r, _cachedMeta: n } = t, i = r._stacks || (r._stacks = {}), { iScale: o, vScale: s, index: a } = n, l = o.axis, c3 = s.axis, u = Av(o, s, n), f4 = e.length;
  let d;
  for (let h = 0;h < f4; ++h) {
    const g3 = e[h], { [l]: p, [c3]: y4 } = g3, b = g3._stacks || (g3._stacks = {});
    d = b[c3] = xv(i, u, p), d[a] = y4, d._top = qd(d, s, true, n.type), d._bottom = qd(d, s, false, n.type);
    const x = d._visualValues || (d._visualValues = {});
    x[a] = y4;
  }
}
function Yl(t, e) {
  const r = t.scales;
  return Object.keys(r).filter((n) => r[n].axis === e).shift();
}
function _v(t, e) {
  return vn3(t, {
    active: false,
    dataset: undefined,
    datasetIndex: e,
    index: e,
    mode: "default",
    type: "dataset"
  });
}
function Sv(t, e, r) {
  return vn3(t, {
    active: false,
    dataIndex: e,
    parsed: undefined,
    raw: undefined,
    element: r,
    index: e,
    mode: "default",
    type: "data"
  });
}
function Hi(t, e) {
  const r = t.controller.index, n = t.vScale && t.vScale.axis;
  if (n) {
    e = e || t._parsed;
    for (const i of e) {
      const o = i._stacks;
      if (!o || o[n] === undefined || o[n][r] === undefined)
        return;
      delete o[n][r], o[n]._visualValues !== undefined && o[n]._visualValues[r] !== undefined && delete o[n]._visualValues[r];
    }
  }
}
var Kl = (t) => t === "reset" || t === "none";
var Yd = (t, e) => e ? t : Object.assign({}, t);
var Ev = (t, e, r) => t && !e.hidden && e._stacked && {
  keys: F1(r, true),
  values: null
};

class mr {
  constructor(e, r) {
    this.chart = e, this._ctx = e.ctx, this.index = r, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = undefined, this._parsing = false, this._data = undefined, this._objectData = undefined, this._sharedOptions = undefined, this._drawStart = undefined, this._drawCount = undefined, this.enableOptionSharing = false, this.supportsDecimation = false, this.$context = undefined, this._syncList = [], this.datasetElementType = new.target.datasetElementType, this.dataElementType = new.target.dataElementType, this.initialize();
  }
  initialize() {
    const e = this._cachedMeta;
    this.configure(), this.linkScales(), e._stacked = Vd(e.vScale, e), this.addElements(), this.options.fill && !this.chart.isPluginEnabled("filler") && console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
  }
  updateIndex(e) {
    this.index !== e && Hi(this._cachedMeta), this.index = e;
  }
  linkScales() {
    const e = this.chart, r = this._cachedMeta, n = this.getDataset(), i = (f4, d, h, g3) => f4 === "x" ? d : f4 === "r" ? g3 : h, o = r.xAxisID = Oe(n.xAxisID, Yl(e, "x")), s = r.yAxisID = Oe(n.yAxisID, Yl(e, "y")), a = r.rAxisID = Oe(n.rAxisID, Yl(e, "r")), l = r.indexAxis, c3 = r.iAxisID = i(l, o, s, a), u = r.vAxisID = i(l, s, o, a);
    r.xScale = this.getScaleForId(o), r.yScale = this.getScaleForId(s), r.rScale = this.getScaleForId(a), r.iScale = this.getScaleForId(c3), r.vScale = this.getScaleForId(u);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(e) {
    return this.chart.scales[e];
  }
  _getOtherScale(e) {
    const r = this._cachedMeta;
    return e === r.iScale ? r.vScale : r.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const e = this._cachedMeta;
    this._data && Cd(this._data, this), e._stacked && Hi(e);
  }
  _dataCheck() {
    const e = this.getDataset(), r = e.data || (e.data = []), n = this._data;
    if (Le(r))
      this._data = vv(r);
    else if (n !== r) {
      if (n) {
        Cd(n, this);
        const i = this._cachedMeta;
        Hi(i), i._parsed = [];
      }
      r && Object.isExtensible(r) && u2(r, this), this._syncList = [], this._data = r;
    }
  }
  addElements() {
    const e = this._cachedMeta;
    this._dataCheck(), this.datasetElementType && (e.dataset = new this.datasetElementType);
  }
  buildOrUpdateElements(e) {
    const r = this._cachedMeta, n = this.getDataset();
    let i = false;
    this._dataCheck();
    const o = r._stacked;
    r._stacked = Vd(r.vScale, r), r.stack !== n.stack && (i = true, Hi(r), r.stack = n.stack), this._resyncElements(e), (i || o !== r._stacked) && Hd(this, r._parsed);
  }
  configure() {
    const e = this.chart.config, r = e.datasetScopeKeys(this._type), n = e.getOptionScopes(this.getDataset(), r, true);
    this.options = e.createResolver(n, this.getContext()), this._parsing = this.options.parsing, this._cachedDataOpts = {};
  }
  parse(e, r) {
    const { _cachedMeta: n, _data: i } = this, { iScale: o, _stacked: s } = n, a = o.axis;
    let l = e === 0 && r === i.length ? true : n._sorted, c3 = e > 0 && n._parsed[e - 1], u, f4, d;
    if (this._parsing === false)
      n._parsed = i, n._sorted = true, d = i;
    else {
      it3(i[e]) ? d = this.parseArrayData(n, i, e, r) : Le(i[e]) ? d = this.parseObjectData(n, i, e, r) : d = this.parsePrimitiveData(n, i, e, r);
      const h = () => f4[a] === null || c3 && f4[a] < c3[a];
      for (u = 0;u < r; ++u)
        n._parsed[u + e] = f4 = d[u], l && (h() && (l = false), c3 = f4);
      n._sorted = l;
    }
    s && Hd(this, d);
  }
  parsePrimitiveData(e, r, n, i) {
    const { iScale: o, vScale: s } = e, a = o.axis, l = s.axis, c3 = o.getLabels(), u = o === s, f4 = new Array(i);
    let d, h, g3;
    for (d = 0, h = i;d < h; ++d)
      g3 = d + n, f4[d] = {
        [a]: u || o.parse(c3[g3], g3),
        [l]: s.parse(r[g3], g3)
      };
    return f4;
  }
  parseArrayData(e, r, n, i) {
    const { xScale: o, yScale: s } = e, a = new Array(i);
    let l, c3, u, f4;
    for (l = 0, c3 = i;l < c3; ++l)
      u = l + n, f4 = r[u], a[l] = {
        x: o.parse(f4[0], u),
        y: s.parse(f4[1], u)
      };
    return a;
  }
  parseObjectData(e, r, n, i) {
    const { xScale: o, yScale: s } = e, { xAxisKey: a = "x", yAxisKey: l = "y" } = this._parsing, c3 = new Array(i);
    let u, f4, d, h;
    for (u = 0, f4 = i;u < f4; ++u)
      d = u + n, h = r[d], c3[u] = {
        x: o.parse(pn3(h, a), d),
        y: s.parse(pn3(h, l), d)
      };
    return c3;
  }
  getParsed(e) {
    return this._cachedMeta._parsed[e];
  }
  getDataElement(e) {
    return this._cachedMeta.data[e];
  }
  applyStack(e, r, n) {
    const i = this.chart, o = this._cachedMeta, s = r[e.axis], a = {
      keys: F1(i, true),
      values: r._stacks[e.axis]._visualValues
    };
    return zd(a, s, o.index, {
      mode: n
    });
  }
  updateRangeFromParsed(e, r, n, i) {
    const o = n[r.axis];
    let s = o === null ? NaN : o;
    const a = i && n._stacks[r.axis];
    i && a && (i.values = a, s = zd(i, o, this._cachedMeta.index)), e.min = Math.min(e.min, s), e.max = Math.max(e.max, s);
  }
  getMinMax(e, r) {
    const n = this._cachedMeta, i = n._parsed, o = n._sorted && e === n.iScale, s = i.length, a = this._getOtherScale(e), l = Ev(r, n, this.chart), c3 = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    }, { min: u, max: f4 } = wv(a);
    let d, h;
    function g3() {
      h = i[d];
      const p = h[a.axis];
      return !pt3(h[e.axis]) || u > p || f4 < p;
    }
    for (d = 0;d < s && !(!g3() && (this.updateRangeFromParsed(c3, e, h, l), o)); ++d)
      ;
    if (o) {
      for (d = s - 1;d >= 0; --d)
        if (!g3()) {
          this.updateRangeFromParsed(c3, e, h, l);
          break;
        }
    }
    return c3;
  }
  getAllParsedValues(e) {
    const r = this._cachedMeta._parsed, n = [];
    let i, o, s;
    for (i = 0, o = r.length;i < o; ++i)
      s = r[i][e.axis], pt3(s) && n.push(s);
    return n;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(e) {
    const r = this._cachedMeta, n = r.iScale, i = r.vScale, o = this.getParsed(e);
    return {
      label: n ? "" + n.getLabelForValue(o[n.axis]) : "",
      value: i ? "" + i.getLabelForValue(o[i.axis]) : ""
    };
  }
  _update(e) {
    const r = this._cachedMeta;
    this.update(e || "default"), r._clip = bv(Oe(this.options.clip, yv(r.xScale, r.yScale, this.getMaxOverflow())));
  }
  update(e) {
  }
  draw() {
    const e = this._ctx, r = this.chart, n = this._cachedMeta, i = n.data || [], o = r.chartArea, s = [], a = this._drawStart || 0, l = this._drawCount || i.length - a, c3 = this.options.drawActiveElementsOnTop;
    let u;
    for (n.dataset && n.dataset.draw(e, o, a, l), u = a;u < a + l; ++u) {
      const f4 = i[u];
      f4.hidden || (f4.active && c3 ? s.push(f4) : f4.draw(e, o));
    }
    for (u = 0;u < s.length; ++u)
      s[u].draw(e, o);
  }
  getStyle(e, r) {
    const n = r ? "active" : "default";
    return e === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(n) : this.resolveDataElementOptions(e || 0, n);
  }
  getContext(e, r, n) {
    const i = this.getDataset();
    let o;
    if (e >= 0 && e < this._cachedMeta.data.length) {
      const s = this._cachedMeta.data[e];
      o = s.$context || (s.$context = Sv(this.getContext(), e, s)), o.parsed = this.getParsed(e), o.raw = i.data[e], o.index = o.dataIndex = e;
    } else
      o = this.$context || (this.$context = _v(this.chart.getContext(), this.index)), o.dataset = i, o.index = o.datasetIndex = this.index;
    return o.active = !!r, o.mode = n, o;
  }
  resolveDatasetElementOptions(e) {
    return this._resolveElementOptions(this.datasetElementType.id, e);
  }
  resolveDataElementOptions(e, r) {
    return this._resolveElementOptions(this.dataElementType.id, r, e);
  }
  _resolveElementOptions(e, r = "default", n) {
    const i = r === "active", o = this._cachedDataOpts, s = e + "-" + r, a = o[s], l = this.enableOptionSharing && Io(n);
    if (a)
      return Yd(a, l);
    const c3 = this.chart.config, u = c3.datasetElementScopeKeys(this._type, e), f4 = i ? [
      `${e}Hover`,
      "hover",
      e,
      ""
    ] : [
      e,
      ""
    ], d = c3.getOptionScopes(this.getDataset(), u), h = Object.keys(gt3.elements[e]), g3 = () => this.getContext(n, i, r), p = c3.resolveNamedOptions(d, h, g3, f4);
    return p.$shared && (p.$shared = l, o[s] = Object.freeze(Yd(p, l))), p;
  }
  _resolveAnimations(e, r, n) {
    const i = this.chart, o = this._cachedDataOpts, s = `animation-${r}`, a = o[s];
    if (a)
      return a;
    let l;
    if (i.options.animation !== false) {
      const u = this.chart.config, f4 = u.datasetAnimationScopeKeys(this._type, r), d = u.getOptionScopes(this.getDataset(), f4);
      l = u.createResolver(d, this.getContext(e, n, r));
    }
    const c3 = new B12(i, l && l.animations);
    return l && l._cacheable && (o[s] = Object.freeze(c3)), c3;
  }
  getSharedOptions(e) {
    if (e.$shared)
      return this._sharedOptions || (this._sharedOptions = Object.assign({}, e));
  }
  includeOptions(e, r) {
    return !r || Kl(e) || this.chart._animationsDisabled;
  }
  _getSharedOptions(e, r) {
    const n = this.resolveDataElementOptions(e, r), i = this._sharedOptions, o = this.getSharedOptions(n), s = this.includeOptions(r, o) || o !== i;
    return this.updateSharedOptions(o, r, n), {
      sharedOptions: o,
      includeOptions: s
    };
  }
  updateElement(e, r, n, i) {
    Kl(i) ? Object.assign(e, n) : this._resolveAnimations(r, i).update(e, n);
  }
  updateSharedOptions(e, r, n) {
    e && !Kl(r) && this._resolveAnimations(undefined, r).update(e, n);
  }
  _setStyle(e, r, n, i) {
    e.active = i;
    const o = this.getStyle(r, i);
    this._resolveAnimations(r, n, i).update(e, {
      options: !i && this.getSharedOptions(o) || o
    });
  }
  removeHoverStyle(e, r, n) {
    this._setStyle(e, n, "active", false);
  }
  setHoverStyle(e, r, n) {
    this._setStyle(e, n, "active", true);
  }
  _removeDatasetHoverStyle() {
    const e = this._cachedMeta.dataset;
    e && this._setStyle(e, undefined, "active", false);
  }
  _setDatasetHoverStyle() {
    const e = this._cachedMeta.dataset;
    e && this._setStyle(e, undefined, "active", true);
  }
  _resyncElements(e) {
    const r = this._data, n = this._cachedMeta.data;
    for (const [a, l, c3] of this._syncList)
      this[a](l, c3);
    this._syncList = [];
    const i = n.length, o = r.length, s = Math.min(o, i);
    s && this.parse(0, s), o > i ? this._insertElements(i, o - i, e) : o < i && this._removeElements(o, i - o);
  }
  _insertElements(e, r, n = true) {
    const i = this._cachedMeta, o = i.data, s = e + r;
    let a;
    const l = (c3) => {
      for (c3.length += r, a = c3.length - 1;a >= s; a--)
        c3[a] = c3[a - r];
    };
    for (l(o), a = e;a < s; ++a)
      o[a] = new this.dataElementType;
    this._parsing && l(i._parsed), this.parse(e, r), n && this.updateElements(o, e, r, "reset");
  }
  updateElements(e, r, n, i) {
  }
  _removeElements(e, r) {
    const n = this._cachedMeta;
    if (this._parsing) {
      const i = n._parsed.splice(e, r);
      n._stacked && Hi(n, i);
    }
    n.data.splice(e, r);
  }
  _sync(e) {
    if (this._parsing)
      this._syncList.push(e);
    else {
      const [r, n, i] = e;
      this[r](n, i);
    }
    this.chart._dataChanges.push([
      this.index,
      ...e
    ]);
  }
  _onDataPush() {
    const e = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - e,
      e
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(e, r) {
    r && this._sync([
      "_removeElements",
      e,
      r
    ]);
    const n = arguments.length - 2;
    n && this._sync([
      "_insertElements",
      e,
      n
    ]);
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
ye(mr, "defaults", {}), ye(mr, "datasetElementType", null), ye(mr, "dataElementType", null);
function kv(t, e) {
  if (!t._cache.$bar) {
    const r = t.getMatchingVisibleMetas(e);
    let n = [];
    for (let i = 0, o = r.length;i < o; i++)
      n = n.concat(r[i].controller.getAllParsedValues(t));
    t._cache.$bar = y1(n.sort((i, o) => i - o));
  }
  return t._cache.$bar;
}
function Cv(t) {
  const e = t.iScale, r = kv(e, t.type);
  let n = e._length, i, o, s, a;
  const l = () => {
    s === 32767 || s === -32768 || (Io(a) && (n = Math.min(n, Math.abs(s - a) || n)), a = s);
  };
  for (i = 0, o = r.length;i < o; ++i)
    s = e.getPixelForValue(r[i]), l();
  for (a = undefined, i = 0, o = e.ticks.length;i < o; ++i)
    s = e.getPixelForTick(i), l();
  return n;
}
function Tv(t, e, r, n) {
  const i = r.barThickness;
  let o, s;
  return We(i) ? (o = e.min * r.categoryPercentage, s = r.barPercentage) : (o = i * n, s = 1), {
    chunk: o / n,
    ratio: s,
    start: e.pixels[t] - o / 2
  };
}
function Ov(t, e, r, n) {
  const i = e.pixels, o = i[t];
  let s = t > 0 ? i[t - 1] : null, a = t < i.length - 1 ? i[t + 1] : null;
  const l = r.categoryPercentage;
  s === null && (s = o - (a === null ? e.end - e.start : a - o)), a === null && (a = o + o - s);
  const c3 = o - (o - Math.min(s, a)) / 2 * l;
  return {
    chunk: Math.abs(a - s) / 2 * l / n,
    ratio: r.barPercentage,
    start: c3
  };
}
function Iv(t, e, r, n) {
  const i = r.parse(t[0], n), o = r.parse(t[1], n), s = Math.min(i, o), a = Math.max(i, o);
  let l = s, c3 = a;
  Math.abs(s) > Math.abs(a) && (l = a, c3 = s), e[r.axis] = c3, e._custom = {
    barStart: l,
    barEnd: c3,
    start: i,
    end: o,
    min: s,
    max: a
  };
}
function j12(t, e, r, n) {
  return it3(t) ? Iv(t, e, r, n) : e[r.axis] = r.parse(t, n), e;
}
function Kd(t, e, r, n) {
  const { iScale: i, vScale: o } = t, s = i.getLabels(), a = i === o, l = [];
  let c3, u, f4, d;
  for (c3 = r, u = r + n;c3 < u; ++c3)
    d = e[c3], f4 = {}, f4[i.axis] = a || i.parse(s[c3], c3), l.push(j12(d, f4, o, c3));
  return l;
}
function Xl(t) {
  return t && t.barStart !== undefined && t.barEnd !== undefined;
}
function Pv(t, e, r) {
  return t !== 0 ? Cr(t) : (e.isHorizontal() ? 1 : -1) * (e.min >= r ? 1 : -1);
}
function Rv(t) {
  let e, r, n, i, o;
  return t.horizontal ? (e = t.base > t.x, r = "left", n = "right") : (e = t.base < t.y, r = "bottom", n = "top"), e ? (i = "end", o = "start") : (i = "start", o = "end"), {
    start: r,
    end: n,
    reverse: e,
    top: i,
    bottom: o
  };
}
function Dv(t, e, r, n) {
  let i = e.borderSkipped;
  const o = {};
  if (!i) {
    t.borderSkipped = o;
    return;
  }
  if (i === true) {
    t.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start: s, end: a, reverse: l, top: c3, bottom: u } = Rv(t);
  i === "middle" && r && (t.enableBorderRadius = true, (r._top || 0) === n ? i = c3 : (r._bottom || 0) === n ? i = u : (o[Xd(u, s, a, l)] = true, i = c3)), o[Xd(i, s, a, l)] = true, t.borderSkipped = o;
}
function Xd(t, e, r, n) {
  return n ? (t = Mv(t, e, r), t = Jd(t, r, e)) : t = Jd(t, e, r), t;
}
function Mv(t, e, r) {
  return t === e ? r : t === r ? e : t;
}
function Jd(t, e, r) {
  return t === "start" ? e : t === "end" ? r : t;
}
function Nv(t, { inflateAmount: e }, r) {
  t.inflateAmount = e === "auto" ? r === 1 ? 0.33 : 0 : e;
}

class zs extends mr {
  parsePrimitiveData(e, r, n, i) {
    return Kd(e, r, n, i);
  }
  parseArrayData(e, r, n, i) {
    return Kd(e, r, n, i);
  }
  parseObjectData(e, r, n, i) {
    const { iScale: o, vScale: s } = e, { xAxisKey: a = "x", yAxisKey: l = "y" } = this._parsing, c3 = o.axis === "x" ? a : l, u = s.axis === "x" ? a : l, f4 = [];
    let d, h, g3, p;
    for (d = n, h = n + i;d < h; ++d)
      p = r[d], g3 = {}, g3[o.axis] = o.parse(pn3(p, c3), d), f4.push(j12(pn3(p, u), g3, s, d));
    return f4;
  }
  updateRangeFromParsed(e, r, n, i) {
    super.updateRangeFromParsed(e, r, n, i);
    const o = n._custom;
    o && r === this._cachedMeta.vScale && (e.min = Math.min(e.min, o.min), e.max = Math.max(e.max, o.max));
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(e) {
    const r = this._cachedMeta, { iScale: n, vScale: i } = r, o = this.getParsed(e), s = o._custom, a = Xl(s) ? "[" + s.start + ", " + s.end + "]" : "" + i.getLabelForValue(o[i.axis]);
    return {
      label: "" + n.getLabelForValue(o[n.axis]),
      value: a
    };
  }
  initialize() {
    this.enableOptionSharing = true, super.initialize();
    const e = this._cachedMeta;
    e.stack = this.getDataset().stack;
  }
  update(e) {
    const r = this._cachedMeta;
    this.updateElements(r.data, 0, r.data.length, e);
  }
  updateElements(e, r, n, i) {
    const o = i === "reset", { index: s, _cachedMeta: { vScale: a } } = this, l = a.getBasePixel(), c3 = a.isHorizontal(), u = this._getRuler(), { sharedOptions: f4, includeOptions: d } = this._getSharedOptions(r, i);
    for (let h = r;h < r + n; h++) {
      const g3 = this.getParsed(h), p = o || We(g3[a.axis]) ? {
        base: l,
        head: l
      } : this._calculateBarValuePixels(h), y4 = this._calculateBarIndexPixels(h, u), b = (g3._stacks || {})[a.axis], x = {
        horizontal: c3,
        base: p.base,
        enableBorderRadius: !b || Xl(g3._custom) || s === b._top || s === b._bottom,
        x: c3 ? p.head : y4.center,
        y: c3 ? y4.center : p.head,
        height: c3 ? y4.size : Math.abs(p.size),
        width: c3 ? Math.abs(p.size) : y4.size
      };
      d && (x.options = f4 || this.resolveDataElementOptions(h, e[h].active ? "active" : i));
      const S = x.options || e[h].options;
      Dv(x, S, b, s), Nv(x, S, u.ratio), this.updateElement(e[h], h, x, i);
    }
  }
  _getStacks(e, r) {
    const { iScale: n } = this._cachedMeta, i = n.getMatchingVisibleMetas(this._type).filter((l) => l.controller.options.grouped), o = n.options.stacked, s = [], a = (l) => {
      const c3 = l.controller.getParsed(r), u = c3 && c3[l.vScale.axis];
      if (We(u) || isNaN(u))
        return true;
    };
    for (const l of i)
      if (!(r !== undefined && a(l)) && ((o === false || s.indexOf(l.stack) === -1 || o === undefined && l.stack === undefined) && s.push(l.stack), l.index === e))
        break;
    return s.length || s.push(undefined), s;
  }
  _getStackCount(e) {
    return this._getStacks(undefined, e).length;
  }
  _getStackIndex(e, r, n) {
    const i = this._getStacks(e, n), o = r !== undefined ? i.indexOf(r) : -1;
    return o === -1 ? i.length - 1 : o;
  }
  _getRuler() {
    const e = this.options, r = this._cachedMeta, n = r.iScale, i = [];
    let o, s;
    for (o = 0, s = r.data.length;o < s; ++o)
      i.push(n.getPixelForValue(this.getParsed(o)[n.axis], o));
    const a = e.barThickness;
    return {
      min: a || Cv(r),
      pixels: i,
      start: n._startPixel,
      end: n._endPixel,
      stackCount: this._getStackCount(),
      scale: n,
      grouped: e.grouped,
      ratio: a ? 1 : e.categoryPercentage * e.barPercentage
    };
  }
  _calculateBarValuePixels(e) {
    const { _cachedMeta: { vScale: r, _stacked: n, index: i }, options: { base: o, minBarLength: s } } = this, a = o || 0, l = this.getParsed(e), c3 = l._custom, u = Xl(c3);
    let f4 = l[r.axis], d = 0, h = n ? this.applyStack(r, l, n) : f4, g3, p;
    h !== f4 && (d = h - f4, h = f4), u && (f4 = c3.barStart, h = c3.barEnd - c3.barStart, f4 !== 0 && Cr(f4) !== Cr(c3.barEnd) && (d = 0), d += f4);
    const y4 = !We(o) && !u ? o : d;
    let b = r.getPixelForValue(y4);
    if (this.chart.getDataVisibility(e) ? g3 = r.getPixelForValue(d + h) : g3 = b, p = g3 - b, Math.abs(p) < s) {
      p = Pv(p, r, a) * s, f4 === a && (b -= p / 2);
      const x = r.getPixelForDecimal(0), S = r.getPixelForDecimal(1), O = Math.min(x, S), _ = Math.max(x, S);
      b = Math.max(Math.min(b, _), O), g3 = b + p, n && !u && (l._stacks[r.axis]._visualValues[i] = r.getValueForPixel(g3) - r.getValueForPixel(b));
    }
    if (b === r.getPixelForValue(a)) {
      const x = Cr(p) * r.getLineWidthForValue(a) / 2;
      b += x, p -= x;
    }
    return {
      size: p,
      base: b,
      head: g3,
      center: g3 + p / 2
    };
  }
  _calculateBarIndexPixels(e, r) {
    const n = r.scale, i = this.options, o = i.skipNull, s = Oe(i.maxBarThickness, Infinity);
    let a, l;
    if (r.grouped) {
      const c3 = o ? this._getStackCount(e) : r.stackCount, u = i.barThickness === "flex" ? Ov(e, r, i, c3) : Tv(e, r, i, c3), f4 = this._getStackIndex(this.index, this._cachedMeta.stack, o ? e : undefined);
      a = u.start + u.chunk * f4 + u.chunk / 2, l = Math.min(s, u.chunk * u.ratio);
    } else
      a = n.getPixelForValue(this.getParsed(e)[n.axis], e), l = Math.min(s, r.min * r.ratio);
    return {
      base: a - l / 2,
      head: a + l / 2,
      center: a,
      size: l
    };
  }
  draw() {
    const e = this._cachedMeta, r = e.vScale, n = e.data, i = n.length;
    let o = 0;
    for (;o < i; ++o)
      this.getParsed(o)[r.axis] !== null && n[o].draw(this._ctx);
  }
}
ye(zs, "id", "bar"), ye(zs, "defaults", {
  datasetElementType: false,
  dataElementType: "bar",
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "base",
        "width",
        "height"
      ]
    }
  }
}), ye(zs, "overrides", {
  scales: {
    _index_: {
      type: "category",
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: "linear",
      beginAtZero: true
    }
  }
});

class Vs extends mr {
  initialize() {
    this.enableOptionSharing = true, super.initialize();
  }
  parsePrimitiveData(e, r, n, i) {
    const o = super.parsePrimitiveData(e, r, n, i);
    for (let s = 0;s < o.length; s++)
      o[s]._custom = this.resolveDataElementOptions(s + n).radius;
    return o;
  }
  parseArrayData(e, r, n, i) {
    const o = super.parseArrayData(e, r, n, i);
    for (let s = 0;s < o.length; s++) {
      const a = r[n + s];
      o[s]._custom = Oe(a[2], this.resolveDataElementOptions(s + n).radius);
    }
    return o;
  }
  parseObjectData(e, r, n, i) {
    const o = super.parseObjectData(e, r, n, i);
    for (let s = 0;s < o.length; s++) {
      const a = r[n + s];
      o[s]._custom = Oe(a && a.r && +a.r, this.resolveDataElementOptions(s + n).radius);
    }
    return o;
  }
  getMaxOverflow() {
    const e = this._cachedMeta.data;
    let r = 0;
    for (let n = e.length - 1;n >= 0; --n)
      r = Math.max(r, e[n].size(this.resolveDataElementOptions(n)) / 2);
    return r > 0 && r;
  }
  getLabelAndValue(e) {
    const r = this._cachedMeta, n = this.chart.data.labels || [], { xScale: i, yScale: o } = r, s = this.getParsed(e), a = i.getLabelForValue(s.x), l = o.getLabelForValue(s.y), c3 = s._custom;
    return {
      label: n[e] || "",
      value: "(" + a + ", " + l + (c3 ? ", " + c3 : "") + ")"
    };
  }
  update(e) {
    const r = this._cachedMeta.data;
    this.updateElements(r, 0, r.length, e);
  }
  updateElements(e, r, n, i) {
    const o = i === "reset", { iScale: s, vScale: a } = this._cachedMeta, { sharedOptions: l, includeOptions: c3 } = this._getSharedOptions(r, i), u = s.axis, f4 = a.axis;
    for (let d = r;d < r + n; d++) {
      const h = e[d], g3 = !o && this.getParsed(d), p = {}, y4 = p[u] = o ? s.getPixelForDecimal(0.5) : s.getPixelForValue(g3[u]), b = p[f4] = o ? a.getBasePixel() : a.getPixelForValue(g3[f4]);
      p.skip = isNaN(y4) || isNaN(b), c3 && (p.options = l || this.resolveDataElementOptions(d, h.active ? "active" : i), o && (p.options.radius = 0)), this.updateElement(h, d, p, i);
    }
  }
  resolveDataElementOptions(e, r) {
    const n = this.getParsed(e);
    let i = super.resolveDataElementOptions(e, r);
    i.$shared && (i = Object.assign({}, i, {
      $shared: false
    }));
    const o = i.radius;
    return r !== "active" && (i.radius = 0), i.radius += Oe(n && n._custom, o), i;
  }
}
ye(Vs, "id", "bubble"), ye(Vs, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "borderWidth",
        "radius"
      ]
    }
  }
}), ye(Vs, "overrides", {
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
function Lv(t, e, r) {
  let n = 1, i = 1, o = 0, s = 0;
  if (e < ot3) {
    const a = t, l = a + e, c3 = Math.cos(a), u = Math.sin(a), f4 = Math.cos(l), d = Math.sin(l), h = (S, O, _) => Po(S, a, l, true) ? 1 : Math.max(O, O * r, _, _ * r), g3 = (S, O, _) => Po(S, a, l, true) ? -1 : Math.min(O, O * r, _, _ * r), p = h(0, c3, f4), y4 = h(mt3, u, d), b = g3(st3, c3, f4), x = g3(st3 + mt3, u, d);
    n = (p - b) / 2, i = (y4 - x) / 2, o = -(p + b) / 2, s = -(y4 + x) / 2;
  }
  return {
    ratioX: n,
    ratioY: i,
    offsetX: o,
    offsetY: s
  };
}

class Bn3 extends mr {
  constructor(e, r) {
    super(e, r), this.enableOptionSharing = true, this.innerRadius = undefined, this.outerRadius = undefined, this.offsetX = undefined, this.offsetY = undefined;
  }
  linkScales() {
  }
  parse(e, r) {
    const n = this.getDataset().data, i = this._cachedMeta;
    if (this._parsing === false)
      i._parsed = n;
    else {
      let o = (l) => +n[l];
      if (Le(n[e])) {
        const { key: l = "value" } = this._parsing;
        o = (c3) => +pn3(n[c3], l);
      }
      let s, a;
      for (s = e, a = e + r;s < a; ++s)
        i._parsed[s] = o(s);
    }
  }
  _getRotation() {
    return gr(this.options.rotation - 90);
  }
  _getCircumference() {
    return gr(this.options.circumference);
  }
  _getRotationExtents() {
    let e = ot3, r = -ot3;
    for (let n = 0;n < this.chart.data.datasets.length; ++n)
      if (this.chart.isDatasetVisible(n) && this.chart.getDatasetMeta(n).type === this._type) {
        const i = this.chart.getDatasetMeta(n).controller, o = i._getRotation(), s = i._getCircumference();
        e = Math.min(e, o), r = Math.max(r, o + s);
      }
    return {
      rotation: e,
      circumference: r - e
    };
  }
  update(e) {
    const r = this.chart, { chartArea: n } = r, i = this._cachedMeta, o = i.data, s = this.getMaxBorderWidth() + this.getMaxOffset(o) + this.options.spacing, a = Math.max((Math.min(n.width, n.height) - s) / 2, 0), l = Math.min(Q3(this.options.cutout, a), 1), c3 = this._getRingWeight(this.index), { circumference: u, rotation: f4 } = this._getRotationExtents(), { ratioX: d, ratioY: h, offsetX: g3, offsetY: p } = Lv(f4, u, l), y4 = (n.width - s) / d, b = (n.height - s) / h, x = Math.max(Math.min(y4, b) / 2, 0), S = d12(this.options.radius, x), O = Math.max(S * l, 0), _ = (S - O) / this._getVisibleDatasetWeightTotal();
    this.offsetX = g3 * S, this.offsetY = p * S, i.total = this.calculateTotal(), this.outerRadius = S - _ * this._getRingWeightOffset(this.index), this.innerRadius = Math.max(this.outerRadius - _ * c3, 0), this.updateElements(o, 0, o.length, e);
  }
  _circumference(e, r) {
    const n = this.options, i = this._cachedMeta, o = this._getCircumference();
    return r && n.animation.animateRotate || !this.chart.getDataVisibility(e) || i._parsed[e] === null || i.data[e].hidden ? 0 : this.calculateCircumference(i._parsed[e] * o / ot3);
  }
  updateElements(e, r, n, i) {
    const o = i === "reset", s = this.chart, a = s.chartArea, c3 = s.options.animation, u = (a.left + a.right) / 2, f4 = (a.top + a.bottom) / 2, d = o && c3.animateScale, h = d ? 0 : this.innerRadius, g3 = d ? 0 : this.outerRadius, { sharedOptions: p, includeOptions: y4 } = this._getSharedOptions(r, i);
    let b = this._getRotation(), x;
    for (x = 0;x < r; ++x)
      b += this._circumference(x, o);
    for (x = r;x < r + n; ++x) {
      const S = this._circumference(x, o), O = e[x], _ = {
        x: u + this.offsetX,
        y: f4 + this.offsetY,
        startAngle: b,
        endAngle: b + S,
        circumference: S,
        outerRadius: g3,
        innerRadius: h
      };
      y4 && (_.options = p || this.resolveDataElementOptions(x, O.active ? "active" : i)), b += S, this.updateElement(O, x, _, i);
    }
  }
  calculateTotal() {
    const e = this._cachedMeta, r = e.data;
    let n = 0, i;
    for (i = 0;i < r.length; i++) {
      const o = e._parsed[i];
      o !== null && !isNaN(o) && this.chart.getDataVisibility(i) && !r[i].hidden && (n += Math.abs(o));
    }
    return n;
  }
  calculateCircumference(e) {
    const r = this._cachedMeta.total;
    return r > 0 && !isNaN(e) ? ot3 * (Math.abs(e) / r) : 0;
  }
  getLabelAndValue(e) {
    const r = this._cachedMeta, n = this.chart, i = n.data.labels || [], o = Qo(r._parsed[e], n.options.locale);
    return {
      label: i[e] || "",
      value: o
    };
  }
  getMaxBorderWidth(e) {
    let r = 0;
    const n = this.chart;
    let i, o, s, a, l;
    if (!e) {
      for (i = 0, o = n.data.datasets.length;i < o; ++i)
        if (n.isDatasetVisible(i)) {
          s = n.getDatasetMeta(i), e = s.data, a = s.controller;
          break;
        }
    }
    if (!e)
      return 0;
    for (i = 0, o = e.length;i < o; ++i)
      l = a.resolveDataElementOptions(i), l.borderAlign !== "inner" && (r = Math.max(r, l.borderWidth || 0, l.hoverBorderWidth || 0));
    return r;
  }
  getMaxOffset(e) {
    let r = 0;
    for (let n = 0, i = e.length;n < i; ++n) {
      const o = this.resolveDataElementOptions(n);
      r = Math.max(r, o.offset || 0, o.hoverOffset || 0);
    }
    return r;
  }
  _getRingWeightOffset(e) {
    let r = 0;
    for (let n = 0;n < e; ++n)
      this.chart.isDatasetVisible(n) && (r += this._getRingWeight(n));
    return r;
  }
  _getRingWeight(e) {
    return Math.max(Oe(this.chart.data.datasets[e].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
ye(Bn3, "id", "doughnut"), ye(Bn3, "defaults", {
  datasetElementType: false,
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "circumference",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "startAngle",
        "x",
        "y",
        "offset",
        "borderWidth",
        "spacing"
      ]
    }
  },
  cutout: "50%",
  rotation: 0,
  circumference: 360,
  radius: "100%",
  spacing: 0,
  indexAxis: "r"
}), ye(Bn3, "descriptors", {
  _scriptable: (e) => e !== "spacing",
  _indexable: (e) => e !== "spacing" && !e.startsWith("borderDash") && !e.startsWith("hoverBorderDash")
}), ye(Bn3, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(e) {
          const r = e.data;
          if (r.labels.length && r.datasets.length) {
            const { labels: { pointStyle: n, color: i } } = e.legend.options;
            return r.labels.map((o, s) => {
              const l = e.getDatasetMeta(0).controller.getStyle(s);
              return {
                text: o,
                fillStyle: l.backgroundColor,
                strokeStyle: l.borderColor,
                fontColor: i,
                lineWidth: l.borderWidth,
                pointStyle: n,
                hidden: !e.getDataVisibility(s),
                index: s
              };
            });
          }
          return [];
        }
      },
      onClick(e, r, n) {
        n.chart.toggleDataVisibility(r.index), n.chart.update();
      }
    }
  }
});

class qs extends mr {
  initialize() {
    this.enableOptionSharing = true, this.supportsDecimation = true, super.initialize();
  }
  update(e) {
    const r = this._cachedMeta, { dataset: n, data: i = [], _dataset: o } = r, s = this.chart._animationsDisabled;
    let { start: a, count: l } = A1(r, i, s);
    this._drawStart = a, this._drawCount = l, w1(r) && (a = 0, l = i.length), n._chart = this.chart, n._datasetIndex = this.index, n._decimated = !!o._decimated, n.points = i;
    const c3 = this.resolveDatasetElementOptions(e);
    this.options.showLine || (c3.borderWidth = 0), c3.segment = this.options.segment, this.updateElement(n, undefined, {
      animated: !s,
      options: c3
    }, e), this.updateElements(i, a, l, e);
  }
  updateElements(e, r, n, i) {
    const o = i === "reset", { iScale: s, vScale: a, _stacked: l, _dataset: c3 } = this._cachedMeta, { sharedOptions: u, includeOptions: f4 } = this._getSharedOptions(r, i), d = s.axis, h = a.axis, { spanGaps: g3, segment: p } = this.options, y4 = Ei(g3) ? g3 : Number.POSITIVE_INFINITY, b = this.chart._animationsDisabled || o || i === "none", x = r + n, S = e.length;
    let O = r > 0 && this.getParsed(r - 1);
    for (let _ = 0;_ < S; ++_) {
      const L = e[_], N4 = b ? L : {};
      if (_ < r || _ >= x) {
        N4.skip = true;
        continue;
      }
      const j = this.getParsed(_), W = We(j[h]), G = N4[d] = s.getPixelForValue(j[d], _), ee = N4[h] = o || W ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, j, l) : j[h], _);
      N4.skip = isNaN(G) || isNaN(ee) || W, N4.stop = _ > 0 && Math.abs(j[d] - O[d]) > y4, p && (N4.parsed = j, N4.raw = c3.data[_]), f4 && (N4.options = u || this.resolveDataElementOptions(_, L.active ? "active" : i)), b || this.updateElement(L, _, N4, i), O = j;
    }
  }
  getMaxOverflow() {
    const e = this._cachedMeta, r = e.dataset, n = r.options && r.options.borderWidth || 0, i = e.data || [];
    if (!i.length)
      return n;
    const o = i[0].size(this.resolveDataElementOptions(0)), s = i[i.length - 1].size(this.resolveDataElementOptions(i.length - 1));
    return Math.max(n, o, s) / 2;
  }
  draw() {
    const e = this._cachedMeta;
    e.dataset.updateControlPoints(this.chart.chartArea, e.iScale.axis), super.draw();
  }
}
ye(qs, "id", "line"), ye(qs, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  showLine: true,
  spanGaps: false
}), ye(qs, "overrides", {
  scales: {
    _index_: {
      type: "category"
    },
    _value_: {
      type: "linear"
    }
  }
});

class Ao extends mr {
  constructor(e, r) {
    super(e, r), this.innerRadius = undefined, this.outerRadius = undefined;
  }
  getLabelAndValue(e) {
    const r = this._cachedMeta, n = this.chart, i = n.data.labels || [], o = Qo(r._parsed[e].r, n.options.locale);
    return {
      label: i[e] || "",
      value: o
    };
  }
  parseObjectData(e, r, n, i) {
    return O1.bind(this)(e, r, n, i);
  }
  update(e) {
    const r = this._cachedMeta.data;
    this._updateRadius(), this.updateElements(r, 0, r.length, e);
  }
  getMinMax() {
    const e = this._cachedMeta, r = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    return e.data.forEach((n, i) => {
      const o = this.getParsed(i).r;
      !isNaN(o) && this.chart.getDataVisibility(i) && (o < r.min && (r.min = o), o > r.max && (r.max = o));
    }), r;
  }
  _updateRadius() {
    const e = this.chart, r = e.chartArea, n = e.options, i = Math.min(r.right - r.left, r.bottom - r.top), o = Math.max(i / 2, 0), s = Math.max(n.cutoutPercentage ? o / 100 * n.cutoutPercentage : 1, 0), a = (o - s) / e.getVisibleDatasetCount();
    this.outerRadius = o - a * this.index, this.innerRadius = this.outerRadius - a;
  }
  updateElements(e, r, n, i) {
    const o = i === "reset", s = this.chart, l = s.options.animation, c3 = this._cachedMeta.rScale, u = c3.xCenter, f4 = c3.yCenter, d = c3.getIndexAngle(0) - 0.5 * st3;
    let h = d, g3;
    const p = 360 / this.countVisibleElements();
    for (g3 = 0;g3 < r; ++g3)
      h += this._computeAngle(g3, i, p);
    for (g3 = r;g3 < r + n; g3++) {
      const y4 = e[g3];
      let b = h, x = h + this._computeAngle(g3, i, p), S = s.getDataVisibility(g3) ? c3.getDistanceFromCenterForValue(this.getParsed(g3).r) : 0;
      h = x, o && (l.animateScale && (S = 0), l.animateRotate && (b = x = d));
      const O = {
        x: u,
        y: f4,
        innerRadius: 0,
        outerRadius: S,
        startAngle: b,
        endAngle: x,
        options: this.resolveDataElementOptions(g3, y4.active ? "active" : i)
      };
      this.updateElement(y4, g3, O, i);
    }
  }
  countVisibleElements() {
    const e = this._cachedMeta;
    let r = 0;
    return e.data.forEach((n, i) => {
      !isNaN(this.getParsed(i).r) && this.chart.getDataVisibility(i) && r++;
    }), r;
  }
  _computeAngle(e, r, n) {
    return this.chart.getDataVisibility(e) ? gr(this.resolveDataElementOptions(e, r).angle || n) : 0;
  }
}
ye(Ao, "id", "polarArea"), ye(Ao, "defaults", {
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius"
      ]
    }
  },
  indexAxis: "r",
  startAngle: 0
}), ye(Ao, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(e) {
          const r = e.data;
          if (r.labels.length && r.datasets.length) {
            const { labels: { pointStyle: n, color: i } } = e.legend.options;
            return r.labels.map((o, s) => {
              const l = e.getDatasetMeta(0).controller.getStyle(s);
              return {
                text: o,
                fillStyle: l.backgroundColor,
                strokeStyle: l.borderColor,
                fontColor: i,
                lineWidth: l.borderWidth,
                pointStyle: n,
                hidden: !e.getDataVisibility(s),
                index: s
              };
            });
          }
          return [];
        }
      },
      onClick(e, r, n) {
        n.chart.toggleDataVisibility(r.index), n.chart.update();
      }
    }
  },
  scales: {
    r: {
      type: "radialLinear",
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
});

class Lc extends Bn3 {
}
ye(Lc, "id", "pie"), ye(Lc, "defaults", {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: "100%"
});

class Hs extends mr {
  getLabelAndValue(e) {
    const r = this._cachedMeta.vScale, n = this.getParsed(e);
    return {
      label: r.getLabels()[e],
      value: "" + r.getLabelForValue(n[r.axis])
    };
  }
  parseObjectData(e, r, n, i) {
    return O1.bind(this)(e, r, n, i);
  }
  update(e) {
    const r = this._cachedMeta, n = r.dataset, i = r.data || [], o = r.iScale.getLabels();
    if (n.points = i, e !== "resize") {
      const s = this.resolveDatasetElementOptions(e);
      this.options.showLine || (s.borderWidth = 0);
      const a = {
        _loop: true,
        _fullLoop: o.length === i.length,
        options: s
      };
      this.updateElement(n, undefined, a, e);
    }
    this.updateElements(i, 0, i.length, e);
  }
  updateElements(e, r, n, i) {
    const o = this._cachedMeta.rScale, s = i === "reset";
    for (let a = r;a < r + n; a++) {
      const l = e[a], c3 = this.resolveDataElementOptions(a, l.active ? "active" : i), u = o.getPointPositionForValue(a, this.getParsed(a).r), f4 = s ? o.xCenter : u.x, d = s ? o.yCenter : u.y, h = {
        x: f4,
        y: d,
        angle: u.angle,
        skip: isNaN(f4) || isNaN(d),
        options: c3
      };
      this.updateElement(l, a, h, i);
    }
  }
}
ye(Hs, "id", "radar"), ye(Hs, "defaults", {
  datasetElementType: "line",
  dataElementType: "point",
  indexAxis: "r",
  showLine: true,
  elements: {
    line: {
      fill: "start"
    }
  }
}), ye(Hs, "overrides", {
  aspectRatio: 1,
  scales: {
    r: {
      type: "radialLinear"
    }
  }
});

class Ys extends mr {
  getLabelAndValue(e) {
    const r = this._cachedMeta, n = this.chart.data.labels || [], { xScale: i, yScale: o } = r, s = this.getParsed(e), a = i.getLabelForValue(s.x), l = o.getLabelForValue(s.y);
    return {
      label: n[e] || "",
      value: "(" + a + ", " + l + ")"
    };
  }
  update(e) {
    const r = this._cachedMeta, { data: n = [] } = r, i = this.chart._animationsDisabled;
    let { start: o, count: s } = A1(r, n, i);
    if (this._drawStart = o, this._drawCount = s, w1(r) && (o = 0, s = n.length), this.options.showLine) {
      this.datasetElementType || this.addElements();
      const { dataset: a, _dataset: l } = r;
      a._chart = this.chart, a._datasetIndex = this.index, a._decimated = !!l._decimated, a.points = n;
      const c3 = this.resolveDatasetElementOptions(e);
      c3.segment = this.options.segment, this.updateElement(a, undefined, {
        animated: !i,
        options: c3
      }, e);
    } else
      this.datasetElementType && (delete r.dataset, this.datasetElementType = false);
    this.updateElements(n, o, s, e);
  }
  addElements() {
    const { showLine: e } = this.options;
    !this.datasetElementType && e && (this.datasetElementType = this.chart.registry.getElement("line")), super.addElements();
  }
  updateElements(e, r, n, i) {
    const o = i === "reset", { iScale: s, vScale: a, _stacked: l, _dataset: c3 } = this._cachedMeta, u = this.resolveDataElementOptions(r, i), f4 = this.getSharedOptions(u), d = this.includeOptions(i, f4), h = s.axis, g3 = a.axis, { spanGaps: p, segment: y4 } = this.options, b = Ei(p) ? p : Number.POSITIVE_INFINITY, x = this.chart._animationsDisabled || o || i === "none";
    let S = r > 0 && this.getParsed(r - 1);
    for (let O = r;O < r + n; ++O) {
      const _ = e[O], L = this.getParsed(O), N4 = x ? _ : {}, j = We(L[g3]), W = N4[h] = s.getPixelForValue(L[h], O), G = N4[g3] = o || j ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, L, l) : L[g3], O);
      N4.skip = isNaN(W) || isNaN(G) || j, N4.stop = O > 0 && Math.abs(L[h] - S[h]) > b, y4 && (N4.parsed = L, N4.raw = c3.data[O]), d && (N4.options = f4 || this.resolveDataElementOptions(O, _.active ? "active" : i)), x || this.updateElement(_, O, N4, i), S = L;
    }
    this.updateSharedOptions(f4, i, u);
  }
  getMaxOverflow() {
    const e = this._cachedMeta, r = e.data || [];
    if (!this.options.showLine) {
      let a = 0;
      for (let l = r.length - 1;l >= 0; --l)
        a = Math.max(a, r[l].size(this.resolveDataElementOptions(l)) / 2);
      return a > 0 && a;
    }
    const n = e.dataset, i = n.options && n.options.borderWidth || 0;
    if (!r.length)
      return i;
    const o = r[0].size(this.resolveDataElementOptions(0)), s = r[r.length - 1].size(this.resolveDataElementOptions(r.length - 1));
    return Math.max(i, o, s) / 2;
  }
}
ye(Ys, "id", "scatter"), ye(Ys, "defaults", {
  datasetElementType: false,
  dataElementType: "point",
  showLine: false,
  fill: false
}), ye(Ys, "overrides", {
  interaction: {
    mode: "point"
  },
  scales: {
    x: {
      type: "linear"
    },
    y: {
      type: "linear"
    }
  }
});
var Bv = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BarController: zs,
  BubbleController: Vs,
  DoughnutController: Bn3,
  LineController: qs,
  PieController: Lc,
  PolarAreaController: Ao,
  RadarController: Hs,
  ScatterController: Ys
});
function Cn3() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}

class Xu {
  constructor(e) {
    ye(this, "options");
    this.options = e || {};
  }
  static override(e) {
    Object.assign(Xu.prototype, e);
  }
  init() {
  }
  formats() {
    return Cn3();
  }
  parse() {
    return Cn3();
  }
  format() {
    return Cn3();
  }
  add() {
    return Cn3();
  }
  diff() {
    return Cn3();
  }
  startOf() {
    return Cn3();
  }
  endOf() {
    return Cn3();
  }
}
var Fv = {
  _date: Xu
};
function jv(t, e, r, n) {
  const { controller: i, data: o, _sorted: s } = t, a = i._cachedMeta.iScale;
  if (a && e === a.axis && e !== "r" && s && o.length) {
    const l = a._reversePixels ? l2 : Ur;
    if (n) {
      if (i._sharedOptions) {
        const c3 = o[0], u = typeof c3.getRange == "function" && c3.getRange(e);
        if (u) {
          const f4 = l(o, e, r - u), d = l(o, e, r + u);
          return {
            lo: f4.lo,
            hi: d.hi
          };
        }
      }
    } else
      return l(o, e, r);
  }
  return {
    lo: 0,
    hi: o.length - 1
  };
}
function Go(t, e, r, n, i) {
  const o = t.getSortedVisibleDatasetMetas(), s = r[e];
  for (let a = 0, l = o.length;a < l; ++a) {
    const { index: c3, data: u } = o[a], { lo: f4, hi: d } = jv(o[a], e, s, i);
    for (let h = f4;h <= d; ++h) {
      const g3 = u[h];
      g3.skip || n(g3, c3, h);
    }
  }
}
function Wv(t) {
  const e = t.indexOf("x") !== -1, r = t.indexOf("y") !== -1;
  return function(n, i) {
    const o = e ? Math.abs(n.x - i.x) : 0, s = r ? Math.abs(n.y - i.y) : 0;
    return Math.sqrt(Math.pow(o, 2) + Math.pow(s, 2));
  };
}
function Jl(t, e, r, n, i) {
  const o = [];
  return !i && !t.isPointInArea(e) || Go(t, r, e, function(a, l, c3) {
    !i && !zr(a, t.chartArea, 0) || a.inRange(e.x, e.y, n) && o.push({
      element: a,
      datasetIndex: l,
      index: c3
    });
  }, true), o;
}
function Uv(t, e, r, n) {
  let i = [];
  function o(s, a, l) {
    const { startAngle: c3, endAngle: u } = s.getProps([
      "startAngle",
      "endAngle"
    ], n), { angle: f4 } = g12(s, {
      x: e.x,
      y: e.y
    });
    Po(f4, c3, u) && i.push({
      element: s,
      datasetIndex: a,
      index: l
    });
  }
  return Go(t, r, e, o), i;
}
function zv(t, e, r, n, i, o) {
  let s = [];
  const a = Wv(r);
  let l = Number.POSITIVE_INFINITY;
  function c3(u, f4, d) {
    const h = u.inRange(e.x, e.y, i);
    if (n && !h)
      return;
    const g3 = u.getCenterPoint(i);
    if (!(!!o || t.isPointInArea(g3)) && !h)
      return;
    const y4 = a(e, g3);
    y4 < l ? (s = [
      {
        element: u,
        datasetIndex: f4,
        index: d
      }
    ], l = y4) : y4 === l && s.push({
      element: u,
      datasetIndex: f4,
      index: d
    });
  }
  return Go(t, r, e, c3), s;
}
function Ql(t, e, r, n, i, o) {
  return !o && !t.isPointInArea(e) ? [] : r === "r" && !n ? Uv(t, e, r, i) : zv(t, e, r, n, i, o);
}
function Qd(t, e, r, n, i) {
  const o = [], s = r === "x" ? "inXRange" : "inYRange";
  let a = false;
  return Go(t, r, e, (l, c3, u) => {
    l[s](e[r], i) && (o.push({
      element: l,
      datasetIndex: c3,
      index: u
    }), a = a || l.inRange(e.x, e.y, i));
  }), n && !a ? [] : o;
}
var Vv = {
  evaluateInteractionItems: Go,
  modes: {
    index(t, e, r, n) {
      const i = Pn3(e, t), o = r.axis || "x", s = r.includeInvisible || false, a = r.intersect ? Jl(t, i, o, n, s) : Ql(t, i, o, false, n, s), l = [];
      return a.length ? (t.getSortedVisibleDatasetMetas().forEach((c3) => {
        const u = a[0].index, f4 = c3.data[u];
        f4 && !f4.skip && l.push({
          element: f4,
          datasetIndex: c3.index,
          index: u
        });
      }), l) : [];
    },
    dataset(t, e, r, n) {
      const i = Pn3(e, t), o = r.axis || "xy", s = r.includeInvisible || false;
      let a = r.intersect ? Jl(t, i, o, n, s) : Ql(t, i, o, false, n, s);
      if (a.length > 0) {
        const l = a[0].datasetIndex, c3 = t.getDatasetMeta(l).data;
        a = [];
        for (let u = 0;u < c3.length; ++u)
          a.push({
            element: c3[u],
            datasetIndex: l,
            index: u
          });
      }
      return a;
    },
    point(t, e, r, n) {
      const i = Pn3(e, t), o = r.axis || "xy", s = r.includeInvisible || false;
      return Jl(t, i, o, n, s);
    },
    nearest(t, e, r, n) {
      const i = Pn3(e, t), o = r.axis || "xy", s = r.includeInvisible || false;
      return Ql(t, i, o, r.intersect, n, s);
    },
    x(t, e, r, n) {
      const i = Pn3(e, t);
      return Qd(t, i, "x", r.intersect, n);
    },
    y(t, e, r, n) {
      const i = Pn3(e, t);
      return Qd(t, i, "y", r.intersect, n);
    }
  }
};
var W1 = [
  "left",
  "top",
  "right",
  "bottom"
];
function Yi(t, e) {
  return t.filter((r) => r.pos === e);
}
function Gd(t, e) {
  return t.filter((r) => W1.indexOf(r.pos) === -1 && r.box.axis === e);
}
function Ki(t, e) {
  return t.sort((r, n) => {
    const i = e ? n : r, o = e ? r : n;
    return i.weight === o.weight ? i.index - o.index : i.weight - o.weight;
  });
}
function qv(t) {
  const e = [];
  let r, n, i, o, s, a;
  for (r = 0, n = (t || []).length;r < n; ++r)
    i = t[r], { position: o, options: { stack: s, stackWeight: a = 1 } } = i, e.push({
      index: r,
      box: i,
      pos: o,
      horizontal: i.isHorizontal(),
      weight: i.weight,
      stack: s && o + s,
      stackWeight: a
    });
  return e;
}
function Hv(t) {
  const e = {};
  for (const r of t) {
    const { stack: n, pos: i, stackWeight: o } = r;
    if (!n || !W1.includes(i))
      continue;
    const s = e[n] || (e[n] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    s.count++, s.weight += o;
  }
  return e;
}
function Yv(t, e) {
  const r = Hv(t), { vBoxMaxWidth: n, hBoxMaxHeight: i } = e;
  let o, s, a;
  for (o = 0, s = t.length;o < s; ++o) {
    a = t[o];
    const { fullSize: l } = a.box, c3 = r[a.stack], u = c3 && a.stackWeight / c3.weight;
    a.horizontal ? (a.width = u ? u * n : l && e.availableWidth, a.height = i) : (a.width = n, a.height = u ? u * i : l && e.availableHeight);
  }
  return r;
}
function Kv(t) {
  const e = qv(t), r = Ki(e.filter((c3) => c3.box.fullSize), true), n = Ki(Yi(e, "left"), true), i = Ki(Yi(e, "right")), o = Ki(Yi(e, "top"), true), s = Ki(Yi(e, "bottom")), a = Gd(e, "x"), l = Gd(e, "y");
  return {
    fullSize: r,
    leftAndTop: n.concat(o),
    rightAndBottom: i.concat(l).concat(s).concat(a),
    chartArea: Yi(e, "chartArea"),
    vertical: n.concat(i).concat(l),
    horizontal: o.concat(s).concat(a)
  };
}
function Zd(t, e, r, n) {
  return Math.max(t[r], e[r]) + Math.max(t[n], e[n]);
}
function U12(t, e) {
  t.top = Math.max(t.top, e.top), t.left = Math.max(t.left, e.left), t.bottom = Math.max(t.bottom, e.bottom), t.right = Math.max(t.right, e.right);
}
function Xv(t, e, r, n) {
  const { pos: i, box: o } = r, s = t.maxPadding;
  if (!Le(i)) {
    r.size && (t[i] -= r.size);
    const f4 = n[r.stack] || {
      size: 0,
      count: 1
    };
    f4.size = Math.max(f4.size, r.horizontal ? o.height : o.width), r.size = f4.size / f4.count, t[i] += r.size;
  }
  o.getPadding && U12(s, o.getPadding());
  const a = Math.max(0, e.outerWidth - Zd(s, t, "left", "right")), l = Math.max(0, e.outerHeight - Zd(s, t, "top", "bottom")), c3 = a !== t.w, u = l !== t.h;
  return t.w = a, t.h = l, r.horizontal ? {
    same: c3,
    other: u
  } : {
    same: u,
    other: c3
  };
}
function Jv(t) {
  const e = t.maxPadding;
  function r(n) {
    const i = Math.max(e[n] - t[n], 0);
    return t[n] += i, i;
  }
  t.y += r("top"), t.x += r("left"), r("right"), r("bottom");
}
function Qv(t, e) {
  const r = e.maxPadding;
  function n(i) {
    const o = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    return i.forEach((s) => {
      o[s] = Math.max(e[s], r[s]);
    }), o;
  }
  return n(t ? [
    "left",
    "right"
  ] : [
    "top",
    "bottom"
  ]);
}
function so(t, e, r, n) {
  const i = [];
  let o, s, a, l, c3, u;
  for (o = 0, s = t.length, c3 = 0;o < s; ++o) {
    a = t[o], l = a.box, l.update(a.width || e.w, a.height || e.h, Qv(a.horizontal, e));
    const { same: f4, other: d } = Xv(e, r, a, n);
    c3 |= f4 && i.length, u = u || d, l.fullSize || i.push(a);
  }
  return c3 && so(i, e, r, n) || u;
}
function xs(t, e, r, n, i) {
  t.top = r, t.left = e, t.right = e + n, t.bottom = r + i, t.width = n, t.height = i;
}
function $d(t, e, r, n) {
  const i = r.padding;
  let { x: o, y: s } = e;
  for (const a of t) {
    const l = a.box, c3 = n[a.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    }, u = a.stackWeight / c3.weight || 1;
    if (a.horizontal) {
      const f4 = e.w * u, d = c3.size || l.height;
      Io(c3.start) && (s = c3.start), l.fullSize ? xs(l, i.left, s, r.outerWidth - i.right - i.left, d) : xs(l, e.left + c3.placed, s, f4, d), c3.start = s, c3.placed += f4, s = l.bottom;
    } else {
      const f4 = e.h * u, d = c3.size || l.width;
      Io(c3.start) && (o = c3.start), l.fullSize ? xs(l, o, i.top, d, r.outerHeight - i.bottom - i.top) : xs(l, o, e.top + c3.placed, d, f4), c3.start = o, c3.placed += f4, o = l.right;
    }
  }
  e.x = o, e.y = s;
}
var Rt3 = {
  addBox(t, e) {
    t.boxes || (t.boxes = []), e.fullSize = e.fullSize || false, e.position = e.position || "top", e.weight = e.weight || 0, e._layers = e._layers || function() {
      return [
        {
          z: 0,
          draw(r) {
            e.draw(r);
          }
        }
      ];
    }, t.boxes.push(e);
  },
  removeBox(t, e) {
    const r = t.boxes ? t.boxes.indexOf(e) : -1;
    r !== -1 && t.boxes.splice(r, 1);
  },
  configure(t, e, r) {
    e.fullSize = r.fullSize, e.position = r.position, e.weight = r.weight;
  },
  update(t, e, r, n) {
    if (!t)
      return;
    const i = Mt3(t.options.layout.padding), o = Math.max(e - i.width, 0), s = Math.max(r - i.height, 0), a = Kv(t.boxes), l = a.vertical, c3 = a.horizontal;
    $e(t.boxes, (p) => {
      typeof p.beforeLayout == "function" && p.beforeLayout();
    });
    const u = l.reduce((p, y4) => y4.box.options && y4.box.options.display === false ? p : p + 1, 0) || 1, f4 = Object.freeze({
      outerWidth: e,
      outerHeight: r,
      padding: i,
      availableWidth: o,
      availableHeight: s,
      vBoxMaxWidth: o / 2 / u,
      hBoxMaxHeight: s / 2
    }), d = Object.assign({}, i);
    U12(d, Mt3(n));
    const h = Object.assign({
      maxPadding: d,
      w: o,
      h: s,
      x: i.left,
      y: i.top
    }, i), g3 = Yv(l.concat(c3), f4);
    so(a.fullSize, h, f4, g3), so(l, h, f4, g3), so(c3, h, f4, g3) && so(l, h, f4, g3), Jv(h), $d(a.leftAndTop, h, f4, g3), h.x += h.w, h.y += h.h, $d(a.rightAndBottom, h, f4, g3), t.chartArea = {
      left: h.left,
      top: h.top,
      right: h.left + h.w,
      bottom: h.top + h.h,
      height: h.h,
      width: h.w
    }, $e(a.chartArea, (p) => {
      const y4 = p.box;
      Object.assign(y4, t.chartArea), y4.update(h.w, h.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};

class z1 {
  acquireContext(e, r) {
  }
  releaseContext(e) {
    return false;
  }
  addEventListener(e, r, n) {
  }
  removeEventListener(e, r, n) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(e, r, n, i) {
    return r = Math.max(0, r || e.width), n = n || e.height, {
      width: r,
      height: Math.max(0, i ? Math.floor(r / i) : n)
    };
  }
  isAttached(e) {
    return true;
  }
  updateConfig(e) {
  }
}

class Gv extends z1 {
  acquireContext(e) {
    return e && e.getContext && e.getContext("2d") || null;
  }
  updateConfig(e) {
    e.options.animation = false;
  }
}
var Ks = "$chartjs";
var Zv = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
var eh = (t) => t === null || t === "";
function $v(t, e) {
  const r = t.style, n = t.getAttribute("height"), i = t.getAttribute("width");
  if (t[Ks] = {
    initial: {
      height: n,
      width: i,
      style: {
        display: r.display,
        height: r.height,
        width: r.width
      }
    }
  }, r.display = r.display || "block", r.boxSizing = r.boxSizing || "border-box", eh(i)) {
    const o = Ld(t, "width");
    o !== undefined && (t.width = o);
  }
  if (eh(n))
    if (t.style.height === "")
      t.height = t.width / (e || 2);
    else {
      const o = Ld(t, "height");
      o !== undefined && (t.height = o);
    }
  return t;
}
var V12 = tv ? {
  passive: true
} : false;
function e6(t, e, r) {
  t.addEventListener(e, r, V12);
}
function t6(t, e, r) {
  t.canvas.removeEventListener(e, r, V12);
}
function r6(t, e) {
  const r = Zv[t.type] || t.type, { x: n, y: i } = Pn3(t, e);
  return {
    type: r,
    chart: e,
    native: t,
    x: n !== undefined ? n : null,
    y: i !== undefined ? i : null
  };
}
function Aa(t, e) {
  for (const r of t)
    if (r === e || r.contains(e))
      return true;
}
function n6(t, e, r) {
  const n = t.canvas, i = new MutationObserver((o) => {
    let s = false;
    for (const a of o)
      s = s || Aa(a.addedNodes, n), s = s && !Aa(a.removedNodes, n);
    s && r();
  });
  return i.observe(document, {
    childList: true,
    subtree: true
  }), i;
}
function i6(t, e, r) {
  const n = t.canvas, i = new MutationObserver((o) => {
    let s = false;
    for (const a of o)
      s = s || Aa(a.removedNodes, n), s = s && !Aa(a.addedNodes, n);
    s && r();
  });
  return i.observe(document, {
    childList: true,
    subtree: true
  }), i;
}
var Do = /* @__PURE__ */ new Map;
var th = 0;
function q1() {
  const t = window.devicePixelRatio;
  t !== th && (th = t, Do.forEach((e, r) => {
    r.currentDevicePixelRatio !== t && e();
  }));
}
function o6(t, e) {
  Do.size || window.addEventListener("resize", q1), Do.set(t, e);
}
function s6(t) {
  Do.delete(t), Do.size || window.removeEventListener("resize", q1);
}
function a6(t, e, r) {
  const n = t.canvas, i = n && Ku(n);
  if (!i)
    return;
  const o = v1((a, l) => {
    const c3 = i.clientWidth;
    r(a, l), c3 < i.clientWidth && r();
  }, window), s = new ResizeObserver((a) => {
    const l = a[0], c3 = l.contentRect.width, u = l.contentRect.height;
    c3 === 0 && u === 0 || o(c3, u);
  });
  return s.observe(i), o6(t, o), s;
}
function Gl(t, e, r) {
  r && r.disconnect(), e === "resize" && s6(t);
}
function l6(t, e, r) {
  const n = t.canvas, i = v1((o) => {
    t.ctx !== null && r(r6(o, t));
  }, t);
  return e6(n, e, i), i;
}

class c6 extends z1 {
  acquireContext(e, r) {
    const n = e && e.getContext && e.getContext("2d");
    return n && n.canvas === e ? ($v(e, r), n) : null;
  }
  releaseContext(e) {
    const r = e.canvas;
    if (!r[Ks])
      return false;
    const n = r[Ks].initial;
    [
      "height",
      "width"
    ].forEach((o) => {
      const s = n[o];
      We(s) ? r.removeAttribute(o) : r.setAttribute(o, s);
    });
    const i = n.style || {};
    return Object.keys(i).forEach((o) => {
      r.style[o] = i[o];
    }), r.width = r.width, delete r[Ks], true;
  }
  addEventListener(e, r, n) {
    this.removeEventListener(e, r);
    const i = e.$proxies || (e.$proxies = {}), s = {
      attach: n6,
      detach: i6,
      resize: a6
    }[r] || l6;
    i[r] = s(e, r, n);
  }
  removeEventListener(e, r) {
    const n = e.$proxies || (e.$proxies = {}), i = n[r];
    if (!i)
      return;
    ({
      attach: Gl,
      detach: Gl,
      resize: Gl
    }[r] || t6)(e, r, i), n[r] = undefined;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(e, r, n, i) {
    return ev(e, r, n, i);
  }
  isAttached(e) {
    const r = Ku(e);
    return !!(r && r.isConnected);
  }
}
function u6(t) {
  return !P1() || typeof OffscreenCanvas < "u" && t instanceof OffscreenCanvas ? Gv : c6;
}
var js;
var Jr = (js = class {
  constructor() {
    ye(this, "x");
    ye(this, "y");
    ye(this, "active", false);
    ye(this, "options");
    ye(this, "$animations");
  }
  tooltipPosition(e) {
    const { x: r, y: n } = this.getProps([
      "x",
      "y"
    ], e);
    return {
      x: r,
      y: n
    };
  }
  hasValue() {
    return Ei(this.x) && Ei(this.y);
  }
  getProps(e, r) {
    const n = this.$animations;
    if (!r || !n)
      return this;
    const i = {};
    return e.forEach((o) => {
      i[o] = n[o] && n[o].active() ? n[o]._to : this[o];
    }), i;
  }
}, ye(js, "defaults", {}), ye(js, "defaultRoutes"), js);
function f6(t, e) {
  const r = t.options.ticks, n = d6(t), i = Math.min(r.maxTicksLimit || n, n), o = r.major.enabled ? p6(e) : [], s = o.length, a = o[0], l = o[s - 1], c3 = [];
  if (s > i)
    return g6(e, c3, o, s / i), c3;
  const u = h6(o, e, i);
  if (s > 0) {
    let f4, d;
    const h = s > 1 ? Math.round((l - a) / (s - 1)) : null;
    for (_s(e, c3, u, We(h) ? 0 : a - h, a), f4 = 0, d = s - 1;f4 < d; f4++)
      _s(e, c3, u, o[f4], o[f4 + 1]);
    return _s(e, c3, u, l, We(h) ? e.length : l + h), c3;
  }
  return _s(e, c3, u), c3;
}
function d6(t) {
  const e = t.options.offset, r = t._tickSize(), n = t._length / r + (e ? 0 : 1), i = t._maxLength / r;
  return Math.floor(Math.min(n, i));
}
function h6(t, e, r) {
  const n = m6(t), i = e.length / r;
  if (!n)
    return Math.max(i, 1);
  const o = i2(n);
  for (let s = 0, a = o.length - 1;s < a; s++) {
    const l = o[s];
    if (l > i)
      return l;
  }
  return Math.max(i, 1);
}
function p6(t) {
  const e = [];
  let r, n;
  for (r = 0, n = t.length;r < n; r++)
    t[r].major && e.push(r);
  return e;
}
function g6(t, e, r, n) {
  let i = 0, o = r[0], s;
  for (n = Math.ceil(n), s = 0;s < t.length; s++)
    s === o && (e.push(t[s]), i++, o = r[i * n]);
}
function _s(t, e, r, n, i) {
  const o = Oe(n, 0), s = Math.min(Oe(i, t.length), t.length);
  let a = 0, l, c3, u;
  for (r = Math.ceil(r), i && (l = i - n, r = l / Math.floor(l / r)), u = o;u < 0; )
    a++, u = Math.round(o + a * r);
  for (c3 = Math.max(o, 0);c3 < s; c3++)
    c3 === u && (e.push(t[c3]), a++, u = Math.round(o + a * r));
}
function m6(t) {
  const e = t.length;
  let r, n;
  if (e < 2)
    return false;
  for (n = t[0], r = 1;r < e; ++r)
    if (t[r] - t[r - 1] !== n)
      return false;
  return n;
}
var y6 = (t) => t === "left" ? "right" : t === "right" ? "left" : t;
var rh = (t, e, r) => e === "top" || e === "left" ? t[e] + r : t[e] - r;
var nh = (t, e) => Math.min(e || t, t);
function ih(t, e) {
  const r = [], n = t.length / e, i = t.length;
  let o = 0;
  for (;o < i; o += n)
    r.push(t[Math.floor(o)]);
  return r;
}
function b6(t, e, r) {
  const n = t.ticks.length, i = Math.min(e, n - 1), o = t._startPixel, s = t._endPixel, a = 0.000001;
  let l = t.getPixelForTick(i), c3;
  if (!(r && (n === 1 ? c3 = Math.max(l - o, s - l) : e === 0 ? c3 = (t.getPixelForTick(1) - l) / 2 : c3 = (l - t.getPixelForTick(i - 1)) / 2, l += i < e ? c3 : -c3, l < o - a || l > s + a)))
    return l;
}
function v6(t, e) {
  $e(t, (r) => {
    const n = r.gc, i = n.length / 2;
    let o;
    if (i > e) {
      for (o = 0;o < i; ++o)
        delete r.data[n[o]];
      n.splice(0, i);
    }
  });
}
function Xi(t) {
  return t.drawTicks ? t.tickLength : 0;
}
function oh(t, e) {
  if (!t.display)
    return 0;
  const r = vt3(t.font, e), n = Mt3(t.padding);
  return (it3(t.text) ? t.text.length : 1) * r.lineHeight + n.height;
}
function A6(t, e) {
  return vn3(t, {
    scale: e,
    type: "scale"
  });
}
function w6(t, e, r) {
  return vn3(t, {
    tick: r,
    index: e,
    type: "tick"
  });
}
function x6(t, e, r) {
  let n = Uu(t);
  return (r && e !== "right" || !r && e === "right") && (n = y6(n)), n;
}
function _6(t, e, r, n) {
  const { top: i, left: o, bottom: s, right: a, chart: l } = t, { chartArea: c3, scales: u } = l;
  let f4 = 0, d, h, g3;
  const p = s - i, y4 = a - o;
  if (t.isHorizontal()) {
    if (h = It3(n, o, a), Le(r)) {
      const b = Object.keys(r)[0], x = r[b];
      g3 = u[b].getPixelForValue(x) + p - e;
    } else
      r === "center" ? g3 = (c3.bottom + c3.top) / 2 + p - e : g3 = rh(t, r, e);
    d = a - o;
  } else {
    if (Le(r)) {
      const b = Object.keys(r)[0], x = r[b];
      h = u[b].getPixelForValue(x) - y4 + e;
    } else
      r === "center" ? h = (c3.left + c3.right) / 2 - y4 + e : h = rh(t, r, e);
    g3 = It3(n, s, i), f4 = r === "left" ? -mt3 : mt3;
  }
  return {
    titleX: h,
    titleY: g3,
    maxWidth: d,
    rotation: f4
  };
}

class Zn3 extends Jr {
  constructor(e) {
    super(), this.id = e.id, this.type = e.type, this.options = undefined, this.ctx = e.ctx, this.chart = e.chart, this.top = undefined, this.bottom = undefined, this.left = undefined, this.right = undefined, this.width = undefined, this.height = undefined, this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, this.maxWidth = undefined, this.maxHeight = undefined, this.paddingTop = undefined, this.paddingBottom = undefined, this.paddingLeft = undefined, this.paddingRight = undefined, this.axis = undefined, this.labelRotation = undefined, this.min = undefined, this.max = undefined, this._range = undefined, this.ticks = [], this._gridLineItems = null, this._labelItems = null, this._labelSizes = null, this._length = 0, this._maxLength = 0, this._longestTextCache = {}, this._startPixel = undefined, this._endPixel = undefined, this._reversePixels = false, this._userMax = undefined, this._userMin = undefined, this._suggestedMax = undefined, this._suggestedMin = undefined, this._ticksLength = 0, this._borderValue = 0, this._cache = {}, this._dataLimitsCached = false, this.$context = undefined;
  }
  init(e) {
    this.options = e.setContext(this.getContext()), this.axis = e.axis, this._userMin = this.parse(e.min), this._userMax = this.parse(e.max), this._suggestedMin = this.parse(e.suggestedMin), this._suggestedMax = this.parse(e.suggestedMax);
  }
  parse(e, r) {
    return e;
  }
  getUserBounds() {
    let { _userMin: e, _userMax: r, _suggestedMin: n, _suggestedMax: i } = this;
    return e = Ht3(e, Number.POSITIVE_INFINITY), r = Ht3(r, Number.NEGATIVE_INFINITY), n = Ht3(n, Number.POSITIVE_INFINITY), i = Ht3(i, Number.NEGATIVE_INFINITY), {
      min: Ht3(e, n),
      max: Ht3(r, i),
      minDefined: pt3(e),
      maxDefined: pt3(r)
    };
  }
  getMinMax(e) {
    let { min: r, max: n, minDefined: i, maxDefined: o } = this.getUserBounds(), s;
    if (i && o)
      return {
        min: r,
        max: n
      };
    const a = this.getMatchingVisibleMetas();
    for (let l = 0, c3 = a.length;l < c3; ++l)
      s = a[l].controller.getMinMax(this, e), i || (r = Math.min(r, s.min)), o || (n = Math.max(n, s.max));
    return r = o && r > n ? n : r, n = i && r > n ? r : n, {
      min: Ht3(r, Ht3(n, r)),
      max: Ht3(n, Ht3(r, n))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const e = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? e.xLabels : e.yLabels) || e.labels || [];
  }
  getLabelItems(e = this.chart.chartArea) {
    return this._labelItems || (this._labelItems = this._computeLabelItems(e));
  }
  beforeLayout() {
    this._cache = {}, this._dataLimitsCached = false;
  }
  beforeUpdate() {
    nt3(this.options.beforeUpdate, [
      this
    ]);
  }
  update(e, r, n) {
    const { beginAtZero: i, grace: o, ticks: s } = this.options, a = s.sampleSize;
    this.beforeUpdate(), this.maxWidth = e, this.maxHeight = r, this._margins = n = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, n), this.ticks = null, this._labelSizes = null, this._gridLineItems = null, this._labelItems = null, this.beforeSetDimensions(), this.setDimensions(), this.afterSetDimensions(), this._maxLength = this.isHorizontal() ? this.width + n.left + n.right : this.height + n.top + n.bottom, this._dataLimitsCached || (this.beforeDataLimits(), this.determineDataLimits(), this.afterDataLimits(), this._range = R22(this, o, i), this._dataLimitsCached = true), this.beforeBuildTicks(), this.ticks = this.buildTicks() || [], this.afterBuildTicks();
    const l = a < this.ticks.length;
    this._convertTicksToLabels(l ? ih(this.ticks, a) : this.ticks), this.configure(), this.beforeCalculateLabelRotation(), this.calculateLabelRotation(), this.afterCalculateLabelRotation(), s.display && (s.autoSkip || s.source === "auto") && (this.ticks = f6(this, this.ticks), this._labelSizes = null, this.afterAutoSkip()), l && this._convertTicksToLabels(this.ticks), this.beforeFit(), this.fit(), this.afterFit(), this.afterUpdate();
  }
  configure() {
    let e = this.options.reverse, r, n;
    this.isHorizontal() ? (r = this.left, n = this.right) : (r = this.top, n = this.bottom, e = !e), this._startPixel = r, this._endPixel = n, this._reversePixels = e, this._length = n - r, this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    nt3(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    nt3(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    this.isHorizontal() ? (this.width = this.maxWidth, this.left = 0, this.right = this.width) : (this.height = this.maxHeight, this.top = 0, this.bottom = this.height), this.paddingLeft = 0, this.paddingTop = 0, this.paddingRight = 0, this.paddingBottom = 0;
  }
  afterSetDimensions() {
    nt3(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(e) {
    this.chart.notifyPlugins(e, this.getContext()), nt3(this.options[e], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    nt3(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(e) {
    const r = this.options.ticks;
    let n, i, o;
    for (n = 0, i = e.length;n < i; n++)
      o = e[n], o.label = nt3(r.callback, [
        o.value,
        n,
        e
      ], this);
  }
  afterTickToLabelConversion() {
    nt3(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    nt3(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const e = this.options, r = e.ticks, n = nh(this.ticks.length, e.ticks.maxTicksLimit), i = r.minRotation || 0, o = r.maxRotation;
    let s = i, a, l, c3;
    if (!this._isVisible() || !r.display || i >= o || n <= 1 || !this.isHorizontal()) {
      this.labelRotation = i;
      return;
    }
    const u = this._getLabelSizes(), f4 = u.widest.width, d = u.highest.height, h = St3(this.chart.width - f4, 0, this.maxWidth);
    a = e.offset ? this.maxWidth / n : h / (n - 1), f4 + 6 > a && (a = h / (n - (e.offset ? 0.5 : 1)), l = this.maxHeight - Xi(e.grid) - r.padding - oh(e.title, this.chart.options.font), c3 = Math.sqrt(f4 * f4 + d * d), s = ju(Math.min(Math.asin(St3((u.highest.height + 6) / a, -1, 1)), Math.asin(St3(l / c3, -1, 1)) - Math.asin(St3(d / c3, -1, 1)))), s = Math.max(i, Math.min(o, s))), this.labelRotation = s;
  }
  afterCalculateLabelRotation() {
    nt3(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    nt3(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const e = {
      width: 0,
      height: 0
    }, { chart: r, options: { ticks: n, title: i, grid: o } } = this, s = this._isVisible(), a = this.isHorizontal();
    if (s) {
      const l = oh(i, r.options.font);
      if (a ? (e.width = this.maxWidth, e.height = Xi(o) + l) : (e.height = this.maxHeight, e.width = Xi(o) + l), n.display && this.ticks.length) {
        const { first: c3, last: u, widest: f4, highest: d } = this._getLabelSizes(), h = n.padding * 2, g3 = gr(this.labelRotation), p = Math.cos(g3), y4 = Math.sin(g3);
        if (a) {
          const b = n.mirror ? 0 : y4 * f4.width + p * d.height;
          e.height = Math.min(this.maxHeight, e.height + b + h);
        } else {
          const b = n.mirror ? 0 : p * f4.width + y4 * d.height;
          e.width = Math.min(this.maxWidth, e.width + b + h);
        }
        this._calculatePadding(c3, u, y4, p);
      }
    }
    this._handleMargins(), a ? (this.width = this._length = r.width - this._margins.left - this._margins.right, this.height = e.height) : (this.width = e.width, this.height = this._length = r.height - this._margins.top - this._margins.bottom);
  }
  _calculatePadding(e, r, n, i) {
    const { ticks: { align: o, padding: s }, position: a } = this.options, l = this.labelRotation !== 0, c3 = a !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const u = this.getPixelForTick(0) - this.left, f4 = this.right - this.getPixelForTick(this.ticks.length - 1);
      let d = 0, h = 0;
      l ? c3 ? (d = i * e.width, h = n * r.height) : (d = n * e.height, h = i * r.width) : o === "start" ? h = r.width : o === "end" ? d = e.width : o !== "inner" && (d = e.width / 2, h = r.width / 2), this.paddingLeft = Math.max((d - u + s) * this.width / (this.width - u), 0), this.paddingRight = Math.max((h - f4 + s) * this.width / (this.width - f4), 0);
    } else {
      let u = r.height / 2, f4 = e.height / 2;
      o === "start" ? (u = 0, f4 = e.height) : o === "end" && (u = r.height, f4 = 0), this.paddingTop = u + s, this.paddingBottom = f4 + s;
    }
  }
  _handleMargins() {
    this._margins && (this._margins.left = Math.max(this.paddingLeft, this._margins.left), this._margins.top = Math.max(this.paddingTop, this._margins.top), this._margins.right = Math.max(this.paddingRight, this._margins.right), this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom));
  }
  afterFit() {
    nt3(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis: e, position: r } = this.options;
    return r === "top" || r === "bottom" || e === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(e) {
    this.beforeTickToLabelConversion(), this.generateTickLabels(e);
    let r, n;
    for (r = 0, n = e.length;r < n; r++)
      We(e[r].label) && (e.splice(r, 1), n--, r--);
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let e = this._labelSizes;
    if (!e) {
      const r = this.options.ticks.sampleSize;
      let n = this.ticks;
      r < n.length && (n = ih(n, r)), this._labelSizes = e = this._computeLabelSizes(n, n.length, this.options.ticks.maxTicksLimit);
    }
    return e;
  }
  _computeLabelSizes(e, r, n) {
    const { ctx: i, _longestTextCache: o } = this, s = [], a = [], l = Math.floor(r / nh(r, n));
    let c3 = 0, u = 0, f4, d, h, g3, p, y4, b, x, S, O, _;
    for (f4 = 0;f4 < r; f4 += l) {
      if (g3 = e[f4].label, p = this._resolveTickFontOptions(f4), i.font = y4 = p.string, b = o[y4] = o[y4] || {
        data: {},
        gc: []
      }, x = p.lineHeight, S = O = 0, !We(g3) && !it3(g3))
        S = ba(i, b.data, b.gc, S, g3), O = x;
      else if (it3(g3))
        for (d = 0, h = g3.length;d < h; ++d)
          _ = g3[d], !We(_) && !it3(_) && (S = ba(i, b.data, b.gc, S, _), O += x);
      s.push(S), a.push(O), c3 = Math.max(S, c3), u = Math.max(O, u);
    }
    v6(o, r);
    const L = s.indexOf(c3), N4 = a.indexOf(u), j = (W) => ({
      width: s[W] || 0,
      height: a[W] || 0
    });
    return {
      first: j(0),
      last: j(r - 1),
      widest: j(L),
      highest: j(N4),
      widths: s,
      heights: a
    };
  }
  getLabelForValue(e) {
    return e;
  }
  getPixelForValue(e, r) {
    return NaN;
  }
  getValueForPixel(e) {
  }
  getPixelForTick(e) {
    const r = this.ticks;
    return e < 0 || e > r.length - 1 ? null : this.getPixelForValue(r[e].value);
  }
  getPixelForDecimal(e) {
    this._reversePixels && (e = 1 - e);
    const r = this._startPixel + e * this._length;
    return a2(this._alignToPixels ? kn3(this.chart, r, 0) : r);
  }
  getDecimalForPixel(e) {
    const r = (e - this._startPixel) / this._length;
    return this._reversePixels ? 1 - r : r;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min: e, max: r } = this;
    return e < 0 && r < 0 ? r : e > 0 && r > 0 ? e : 0;
  }
  getContext(e) {
    const r = this.ticks || [];
    if (e >= 0 && e < r.length) {
      const n = r[e];
      return n.$context || (n.$context = w6(this.getContext(), e, n));
    }
    return this.$context || (this.$context = A6(this.chart.getContext(), this));
  }
  _tickSize() {
    const e = this.options.ticks, r = gr(this.labelRotation), n = Math.abs(Math.cos(r)), i = Math.abs(Math.sin(r)), o = this._getLabelSizes(), s = e.autoSkipPadding || 0, a = o ? o.widest.width + s : 0, l = o ? o.highest.height + s : 0;
    return this.isHorizontal() ? l * n > a * i ? a / n : l / i : l * i < a * n ? l / n : a / i;
  }
  _isVisible() {
    const e = this.options.display;
    return e !== "auto" ? !!e : this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(e) {
    const r = this.axis, n = this.chart, i = this.options, { grid: o, position: s, border: a } = i, l = o.offset, c3 = this.isHorizontal(), f4 = this.ticks.length + (l ? 1 : 0), d = Xi(o), h = [], g3 = a.setContext(this.getContext()), p = g3.display ? g3.width : 0, y4 = p / 2, b = function(I) {
      return kn3(n, I, p);
    };
    let x, S, O, _, L, N4, j, W, G, ee, fe, P;
    if (s === "top")
      x = b(this.bottom), N4 = this.bottom - d, W = x - y4, ee = b(e.top) + y4, P = e.bottom;
    else if (s === "bottom")
      x = b(this.top), ee = e.top, P = b(e.bottom) - y4, N4 = x + y4, W = this.top + d;
    else if (s === "left")
      x = b(this.right), L = this.right - d, j = x - y4, G = b(e.left) + y4, fe = e.right;
    else if (s === "right")
      x = b(this.left), G = e.left, fe = b(e.right) - y4, L = x + y4, j = this.left + d;
    else if (r === "x") {
      if (s === "center")
        x = b((e.top + e.bottom) / 2 + 0.5);
      else if (Le(s)) {
        const I = Object.keys(s)[0], V = s[I];
        x = b(this.chart.scales[I].getPixelForValue(V));
      }
      ee = e.top, P = e.bottom, N4 = x + y4, W = N4 + d;
    } else if (r === "y") {
      if (s === "center")
        x = b((e.left + e.right) / 2);
      else if (Le(s)) {
        const I = Object.keys(s)[0], V = s[I];
        x = b(this.chart.scales[I].getPixelForValue(V));
      }
      L = x - y4, j = L - d, G = e.left, fe = e.right;
    }
    const z = Oe(i.ticks.maxTicksLimit, f4), U = Math.max(1, Math.ceil(f4 / z));
    for (S = 0;S < f4; S += U) {
      const I = this.getContext(S), V = o.setContext(I), te = a.setContext(I), X4 = V.lineWidth, H = V.color, $4 = te.dash || [], se = te.dashOffset, he = V.tickWidth, pe = V.tickColor, me = V.tickBorderDash || [], B4 = V.tickBorderDashOffset;
      O = b6(this, S, l), O !== undefined && (_ = kn3(n, O, X4), c3 ? L = j = G = fe = _ : N4 = W = ee = P = _, h.push({
        tx1: L,
        ty1: N4,
        tx2: j,
        ty2: W,
        x1: G,
        y1: ee,
        x2: fe,
        y2: P,
        width: X4,
        color: H,
        borderDash: $4,
        borderDashOffset: se,
        tickWidth: he,
        tickColor: pe,
        tickBorderDash: me,
        tickBorderDashOffset: B4
      }));
    }
    return this._ticksLength = f4, this._borderValue = x, h;
  }
  _computeLabelItems(e) {
    const r = this.axis, n = this.options, { position: i, ticks: o } = n, s = this.isHorizontal(), a = this.ticks, { align: l, crossAlign: c3, padding: u, mirror: f4 } = o, d = Xi(n.grid), h = d + u, g3 = f4 ? -u : h, p = -gr(this.labelRotation), y4 = [];
    let b, x, S, O, _, L, N4, j, W, G, ee, fe, P = "middle";
    if (i === "top")
      L = this.bottom - g3, N4 = this._getXAxisLabelAlignment();
    else if (i === "bottom")
      L = this.top + g3, N4 = this._getXAxisLabelAlignment();
    else if (i === "left") {
      const U = this._getYAxisLabelAlignment(d);
      N4 = U.textAlign, _ = U.x;
    } else if (i === "right") {
      const U = this._getYAxisLabelAlignment(d);
      N4 = U.textAlign, _ = U.x;
    } else if (r === "x") {
      if (i === "center")
        L = (e.top + e.bottom) / 2 + h;
      else if (Le(i)) {
        const U = Object.keys(i)[0], I = i[U];
        L = this.chart.scales[U].getPixelForValue(I) + h;
      }
      N4 = this._getXAxisLabelAlignment();
    } else if (r === "y") {
      if (i === "center")
        _ = (e.left + e.right) / 2 - h;
      else if (Le(i)) {
        const U = Object.keys(i)[0], I = i[U];
        _ = this.chart.scales[U].getPixelForValue(I);
      }
      N4 = this._getYAxisLabelAlignment(d).textAlign;
    }
    r === "y" && (l === "start" ? P = "top" : l === "end" && (P = "bottom"));
    const z = this._getLabelSizes();
    for (b = 0, x = a.length;b < x; ++b) {
      S = a[b], O = S.label;
      const U = o.setContext(this.getContext(b));
      j = this.getPixelForTick(b) + o.labelOffset, W = this._resolveTickFontOptions(b), G = W.lineHeight, ee = it3(O) ? O.length : 1;
      const I = ee / 2, V = U.color, te = U.textStrokeColor, X4 = U.textStrokeWidth;
      let H = N4;
      s ? (_ = j, N4 === "inner" && (b === x - 1 ? H = this.options.reverse ? "left" : "right" : b === 0 ? H = this.options.reverse ? "right" : "left" : H = "center"), i === "top" ? c3 === "near" || p !== 0 ? fe = -ee * G + G / 2 : c3 === "center" ? fe = -z.highest.height / 2 - I * G + G : fe = -z.highest.height + G / 2 : c3 === "near" || p !== 0 ? fe = G / 2 : c3 === "center" ? fe = z.highest.height / 2 - I * G : fe = z.highest.height - ee * G, f4 && (fe *= -1), p !== 0 && !U.showLabelBackdrop && (_ += G / 2 * Math.sin(p))) : (L = j, fe = (1 - ee) * G / 2);
      let $4;
      if (U.showLabelBackdrop) {
        const se = Mt3(U.backdropPadding), he = z.heights[b], pe = z.widths[b];
        let me = fe - se.top, B4 = 0 - se.left;
        switch (P) {
          case "middle":
            me -= he / 2;
            break;
          case "bottom":
            me -= he;
            break;
        }
        switch (N4) {
          case "center":
            B4 -= pe / 2;
            break;
          case "right":
            B4 -= pe;
            break;
        }
        $4 = {
          left: B4,
          top: me,
          width: pe + se.width,
          height: he + se.height,
          color: U.backdropColor
        };
      }
      y4.push({
        label: O,
        font: W,
        textOffset: fe,
        options: {
          rotation: p,
          color: V,
          strokeColor: te,
          strokeWidth: X4,
          textAlign: H,
          textBaseline: P,
          translation: [
            _,
            L
          ],
          backdrop: $4
        }
      });
    }
    return y4;
  }
  _getXAxisLabelAlignment() {
    const { position: e, ticks: r } = this.options;
    if (-gr(this.labelRotation))
      return e === "top" ? "left" : "right";
    let i = "center";
    return r.align === "start" ? i = "left" : r.align === "end" ? i = "right" : r.align === "inner" && (i = "inner"), i;
  }
  _getYAxisLabelAlignment(e) {
    const { position: r, ticks: { crossAlign: n, mirror: i, padding: o } } = this.options, s = this._getLabelSizes(), a = e + o, l = s.widest.width;
    let c3, u;
    return r === "left" ? i ? (u = this.right + o, n === "near" ? c3 = "left" : n === "center" ? (c3 = "center", u += l / 2) : (c3 = "right", u += l)) : (u = this.right - a, n === "near" ? c3 = "right" : n === "center" ? (c3 = "center", u -= l / 2) : (c3 = "left", u = this.left)) : r === "right" ? i ? (u = this.left + o, n === "near" ? c3 = "right" : n === "center" ? (c3 = "center", u -= l / 2) : (c3 = "left", u -= l)) : (u = this.left + a, n === "near" ? c3 = "left" : n === "center" ? (c3 = "center", u += l / 2) : (c3 = "right", u = this.right)) : c3 = "right", {
      textAlign: c3,
      x: u
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror)
      return;
    const e = this.chart, r = this.options.position;
    if (r === "left" || r === "right")
      return {
        top: 0,
        left: this.left,
        bottom: e.height,
        right: this.right
      };
    if (r === "top" || r === "bottom")
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: e.width
      };
  }
  drawBackground() {
    const { ctx: e, options: { backgroundColor: r }, left: n, top: i, width: o, height: s } = this;
    r && (e.save(), e.fillStyle = r, e.fillRect(n, i, o, s), e.restore());
  }
  getLineWidthForValue(e) {
    const r = this.options.grid;
    if (!this._isVisible() || !r.display)
      return 0;
    const i = this.ticks.findIndex((o) => o.value === e);
    return i >= 0 ? r.setContext(this.getContext(i)).lineWidth : 0;
  }
  drawGrid(e) {
    const r = this.options.grid, n = this.ctx, i = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(e));
    let o, s;
    const a = (l, c3, u) => {
      !u.width || !u.color || (n.save(), n.lineWidth = u.width, n.strokeStyle = u.color, n.setLineDash(u.borderDash || []), n.lineDashOffset = u.borderDashOffset, n.beginPath(), n.moveTo(l.x, l.y), n.lineTo(c3.x, c3.y), n.stroke(), n.restore());
    };
    if (r.display)
      for (o = 0, s = i.length;o < s; ++o) {
        const l = i[o];
        r.drawOnChartArea && a({
          x: l.x1,
          y: l.y1
        }, {
          x: l.x2,
          y: l.y2
        }, l), r.drawTicks && a({
          x: l.tx1,
          y: l.ty1
        }, {
          x: l.tx2,
          y: l.ty2
        }, {
          color: l.tickColor,
          width: l.tickWidth,
          borderDash: l.tickBorderDash,
          borderDashOffset: l.tickBorderDashOffset
        });
      }
  }
  drawBorder() {
    const { chart: e, ctx: r, options: { border: n, grid: i } } = this, o = n.setContext(this.getContext()), s = n.display ? o.width : 0;
    if (!s)
      return;
    const a = i.setContext(this.getContext(0)).lineWidth, l = this._borderValue;
    let c3, u, f4, d;
    this.isHorizontal() ? (c3 = kn3(e, this.left, s) - s / 2, u = kn3(e, this.right, a) + a / 2, f4 = d = l) : (f4 = kn3(e, this.top, s) - s / 2, d = kn3(e, this.bottom, a) + a / 2, c3 = u = l), r.save(), r.lineWidth = o.width, r.strokeStyle = o.color, r.beginPath(), r.moveTo(c3, f4), r.lineTo(u, d), r.stroke(), r.restore();
  }
  drawLabels(e) {
    if (!this.options.ticks.display)
      return;
    const n = this.ctx, i = this._computeLabelArea();
    i && Ka(n, i);
    const o = this.getLabelItems(e);
    for (const s of o) {
      const { options: a, font: l, label: c3, textOffset: u } = s;
      Kn3(n, c3, 0, u, l, a);
    }
    i && Xa(n);
  }
  drawTitle() {
    const { ctx: e, options: { position: r, title: n, reverse: i } } = this;
    if (!n.display)
      return;
    const o = vt3(n.font), s = Mt3(n.padding), a = n.align;
    let l = o.lineHeight / 2;
    r === "bottom" || r === "center" || Le(r) ? (l += s.bottom, it3(n.text) && (l += o.lineHeight * (n.text.length - 1))) : l += s.top;
    const { titleX: c3, titleY: u, maxWidth: f4, rotation: d } = _6(this, l, r, a);
    Kn3(e, n.text, 0, 0, o, {
      color: n.color,
      maxWidth: f4,
      rotation: d,
      textAlign: x6(a, r, i),
      textBaseline: "middle",
      translation: [
        c3,
        u
      ]
    });
  }
  draw(e) {
    this._isVisible() && (this.drawBackground(), this.drawGrid(e), this.drawBorder(), this.drawTitle(), this.drawLabels(e));
  }
  _layers() {
    const e = this.options, r = e.ticks && e.ticks.z || 0, n = Oe(e.grid && e.grid.z, -1), i = Oe(e.border && e.border.z, 0);
    return !this._isVisible() || this.draw !== Zn3.prototype.draw ? [
      {
        z: r,
        draw: (o) => {
          this.draw(o);
        }
      }
    ] : [
      {
        z: n,
        draw: (o) => {
          this.drawBackground(), this.drawGrid(o), this.drawTitle();
        }
      },
      {
        z: i,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: r,
        draw: (o) => {
          this.drawLabels(o);
        }
      }
    ];
  }
  getMatchingVisibleMetas(e) {
    const r = this.chart.getSortedVisibleDatasetMetas(), n = this.axis + "AxisID", i = [];
    let o, s;
    for (o = 0, s = r.length;o < s; ++o) {
      const a = r[o];
      a[n] === this.id && (!e || a.type === e) && i.push(a);
    }
    return i;
  }
  _resolveTickFontOptions(e) {
    const r = this.options.ticks.setContext(this.getContext(e));
    return vt3(r.font);
  }
  _maxDigits() {
    const e = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / e;
  }
}

class Ss {
  constructor(e, r, n) {
    this.type = e, this.scope = r, this.override = n, this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(e) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, e.prototype);
  }
  register(e) {
    const r = Object.getPrototypeOf(e);
    let n;
    k6(r) && (n = this.register(r));
    const i = this.items, o = e.id, s = this.scope + "." + o;
    if (!o)
      throw new Error("class does not have id: " + e);
    return o in i || (i[o] = e, S6(e, s, n), this.override && gt3.override(e.id, e.overrides)), s;
  }
  get(e) {
    return this.items[e];
  }
  unregister(e) {
    const r = this.items, n = e.id, i = this.scope;
    n in r && delete r[n], i && n in gt3[i] && (delete gt3[i][n], this.override && delete Yn3[n]);
  }
}
function S6(t, e, r) {
  const n = Oo(/* @__PURE__ */ Object.create(null), [
    r ? gt3.get(r) : {},
    gt3.get(e),
    t.defaults
  ]);
  gt3.set(e, n), t.defaultRoutes && E6(e, t.defaultRoutes), t.descriptors && gt3.describe(e, t.descriptors);
}
function E6(t, e) {
  Object.keys(e).forEach((r) => {
    const n = r.split("."), i = n.pop(), o = [
      t
    ].concat(n).join("."), s = e[r].split("."), a = s.pop(), l = s.join(".");
    gt3.route(o, i, l, a);
  });
}
function k6(t) {
  return "id" in t && "defaults" in t;
}

class C6 {
  constructor() {
    this.controllers = new Ss(mr, "datasets", true), this.elements = new Ss(Jr, "elements"), this.plugins = new Ss(Object, "plugins"), this.scales = new Ss(Zn3, "scales"), this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...e) {
    this._each("register", e);
  }
  remove(...e) {
    this._each("unregister", e);
  }
  addControllers(...e) {
    this._each("register", e, this.controllers);
  }
  addElements(...e) {
    this._each("register", e, this.elements);
  }
  addPlugins(...e) {
    this._each("register", e, this.plugins);
  }
  addScales(...e) {
    this._each("register", e, this.scales);
  }
  getController(e) {
    return this._get(e, this.controllers, "controller");
  }
  getElement(e) {
    return this._get(e, this.elements, "element");
  }
  getPlugin(e) {
    return this._get(e, this.plugins, "plugin");
  }
  getScale(e) {
    return this._get(e, this.scales, "scale");
  }
  removeControllers(...e) {
    this._each("unregister", e, this.controllers);
  }
  removeElements(...e) {
    this._each("unregister", e, this.elements);
  }
  removePlugins(...e) {
    this._each("unregister", e, this.plugins);
  }
  removeScales(...e) {
    this._each("unregister", e, this.scales);
  }
  _each(e, r, n) {
    [
      ...r
    ].forEach((i) => {
      const o = n || this._getRegistryForType(i);
      n || o.isForType(i) || o === this.plugins && i.id ? this._exec(e, o, i) : $e(i, (s) => {
        const a = n || this._getRegistryForType(s);
        this._exec(e, a, s);
      });
    });
  }
  _exec(e, r, n) {
    const i = Fu(e);
    nt3(n["before" + i], [], n), r[e](n), nt3(n["after" + i], [], n);
  }
  _getRegistryForType(e) {
    for (let r = 0;r < this._typedRegistries.length; r++) {
      const n = this._typedRegistries[r];
      if (n.isForType(e))
        return n;
    }
    return this.plugins;
  }
  _get(e, r, n) {
    const i = r.get(e);
    if (i === undefined)
      throw new Error('"' + e + '" is not a registered ' + n + ".");
    return i;
  }
}
var Ar = /* @__PURE__ */ new C6;

class T6 {
  constructor() {
    this._init = [];
  }
  notify(e, r, n, i) {
    r === "beforeInit" && (this._init = this._createDescriptors(e, true), this._notify(this._init, e, "install"));
    const o = i ? this._descriptors(e).filter(i) : this._descriptors(e), s = this._notify(o, e, r, n);
    return r === "afterDestroy" && (this._notify(o, e, "stop"), this._notify(this._init, e, "uninstall")), s;
  }
  _notify(e, r, n, i) {
    i = i || {};
    for (const o of e) {
      const s = o.plugin, a = s[n], l = [
        r,
        i,
        o.options
      ];
      if (nt3(a, l, s) === false && i.cancelable)
        return false;
    }
    return true;
  }
  invalidate() {
    We(this._cache) || (this._oldCache = this._cache, this._cache = undefined);
  }
  _descriptors(e) {
    if (this._cache)
      return this._cache;
    const r = this._cache = this._createDescriptors(e);
    return this._notifyStateChanges(e), r;
  }
  _createDescriptors(e, r) {
    const n = e && e.config, i = Oe(n.options && n.options.plugins, {}), o = O6(n);
    return i === false && !r ? [] : P6(e, o, i, r);
  }
  _notifyStateChanges(e) {
    const r = this._oldCache || [], n = this._cache, i = (o, s) => o.filter((a) => !s.some((l) => a.plugin.id === l.plugin.id));
    this._notify(i(r, n), e, "stop"), this._notify(i(n, r), e, "start");
  }
}
function O6(t) {
  const e = {}, r = [], n = Object.keys(Ar.plugins.items);
  for (let o = 0;o < n.length; o++)
    r.push(Ar.getPlugin(n[o]));
  const i = t.plugins || [];
  for (let o = 0;o < i.length; o++) {
    const s = i[o];
    r.indexOf(s) === -1 && (r.push(s), e[s.id] = true);
  }
  return {
    plugins: r,
    localIds: e
  };
}
function I6(t, e) {
  return !e && t === false ? null : t === true ? {} : t;
}
function P6(t, { plugins: e, localIds: r }, n, i) {
  const o = [], s = t.getContext();
  for (const a of e) {
    const l = a.id, c3 = I6(n[l], i);
    c3 !== null && o.push({
      plugin: a,
      options: R6(t.config, {
        plugin: a,
        local: r[l]
      }, c3, s)
    });
  }
  return o;
}
function R6(t, { plugin: e, local: r }, n, i) {
  const o = t.pluginScopeKeys(e), s = t.getOptionScopes(n, o);
  return r && e.defaults && s.push(e.defaults), t.createResolver(s, i, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function Bc(t, e) {
  const r = gt3.datasets[t] || {};
  return ((e.datasets || {})[t] || {}).indexAxis || e.indexAxis || r.indexAxis || "x";
}
function D6(t, e) {
  let r = t;
  return t === "_index_" ? r = e : t === "_value_" && (r = e === "x" ? "y" : "x"), r;
}
function M6(t, e) {
  return t === e ? "_index_" : "_value_";
}
function sh(t) {
  if (t === "x" || t === "y" || t === "r")
    return t;
}
function N6(t) {
  if (t === "top" || t === "bottom")
    return "x";
  if (t === "left" || t === "right")
    return "y";
}
function Fc(t, ...e) {
  if (sh(t))
    return t;
  for (const r of e) {
    const n = r.axis || N6(r.position) || t.length > 1 && sh(t[0].toLowerCase());
    if (n)
      return n;
  }
  throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`);
}
function ah(t, e, r) {
  if (r[e + "AxisID"] === t)
    return {
      axis: e
    };
}
function L6(t, e) {
  if (e.data && e.data.datasets) {
    const r = e.data.datasets.filter((n) => n.xAxisID === t || n.yAxisID === t);
    if (r.length)
      return ah(t, "x", r[0]) || ah(t, "y", r[0]);
  }
  return {};
}
function B6(t, e) {
  const r = Yn3[t.type] || {
    scales: {}
  }, n = e.scales || {}, i = Bc(t.type, e), o = /* @__PURE__ */ Object.create(null);
  return Object.keys(n).forEach((s) => {
    const a = n[s];
    if (!Le(a))
      return console.error(`Invalid scale configuration for scale: ${s}`);
    if (a._proxy)
      return console.warn(`Ignoring resolver passed as options for scale: ${s}`);
    const l = Fc(s, a, L6(s, t), gt3.scales[a.type]), c3 = M6(l, i), u = r.scales || {};
    o[s] = mo(/* @__PURE__ */ Object.create(null), [
      {
        axis: l
      },
      a,
      u[l],
      u[c3]
    ]);
  }), t.data.datasets.forEach((s) => {
    const a = s.type || t.type, l = s.indexAxis || Bc(a, e), u = (Yn3[a] || {}).scales || {};
    Object.keys(u).forEach((f4) => {
      const d = D6(f4, l), h = s[d + "AxisID"] || d;
      o[h] = o[h] || /* @__PURE__ */ Object.create(null), mo(o[h], [
        {
          axis: d
        },
        n[h],
        u[f4]
      ]);
    });
  }), Object.keys(o).forEach((s) => {
    const a = o[s];
    mo(a, [
      gt3.scales[a.type],
      gt3.scale
    ]);
  }), o;
}
function H12(t) {
  const e = t.options || (t.options = {});
  e.plugins = Oe(e.plugins, {}), e.scales = B6(t, e);
}
function Y12(t) {
  return t = t || {}, t.datasets = t.datasets || [], t.labels = t.labels || [], t;
}
function F6(t) {
  return t = t || {}, t.data = Y12(t.data), H12(t), t;
}
var lh = /* @__PURE__ */ new Map;
var K12 = /* @__PURE__ */ new Set;
function Es(t, e) {
  let r = lh.get(t);
  return r || (r = e(), lh.set(t, r), K12.add(r)), r;
}
var Ji = (t, e, r) => {
  const n = pn3(e, r);
  n !== undefined && t.add(n);
};

class j6 {
  constructor(e) {
    this._config = F6(e), this._scopeCache = /* @__PURE__ */ new Map, this._resolverCache = /* @__PURE__ */ new Map;
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(e) {
    this._config.type = e;
  }
  get data() {
    return this._config.data;
  }
  set data(e) {
    this._config.data = Y12(e);
  }
  get options() {
    return this._config.options;
  }
  set options(e) {
    this._config.options = e;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const e = this._config;
    this.clearCache(), H12(e);
  }
  clearCache() {
    this._scopeCache.clear(), this._resolverCache.clear();
  }
  datasetScopeKeys(e) {
    return Es(e, () => [
      [
        `datasets.${e}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(e, r) {
    return Es(`${e}.transition.${r}`, () => [
      [
        `datasets.${e}.transitions.${r}`,
        `transitions.${r}`
      ],
      [
        `datasets.${e}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(e, r) {
    return Es(`${e}-${r}`, () => [
      [
        `datasets.${e}.elements.${r}`,
        `datasets.${e}`,
        `elements.${r}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(e) {
    const r = e.id, n = this.type;
    return Es(`${n}-plugin-${r}`, () => [
      [
        `plugins.${r}`,
        ...e.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(e, r) {
    const n = this._scopeCache;
    let i = n.get(e);
    return (!i || r) && (i = /* @__PURE__ */ new Map, n.set(e, i)), i;
  }
  getOptionScopes(e, r, n) {
    const { options: i, type: o } = this, s = this._cachedScopes(e, n), a = s.get(r);
    if (a)
      return a;
    const l = /* @__PURE__ */ new Set;
    r.forEach((u) => {
      e && (l.add(e), u.forEach((f4) => Ji(l, e, f4))), u.forEach((f4) => Ji(l, i, f4)), u.forEach((f4) => Ji(l, Yn3[o] || {}, f4)), u.forEach((f4) => Ji(l, gt3, f4)), u.forEach((f4) => Ji(l, Mc, f4));
    });
    const c3 = Array.from(l);
    return c3.length === 0 && c3.push(/* @__PURE__ */ Object.create(null)), K12.has(r) && s.set(r, c3), c3;
  }
  chartOptionScopes() {
    const { options: e, type: r } = this;
    return [
      e,
      Yn3[r] || {},
      gt3.datasets[r] || {},
      {
        type: r
      },
      gt3,
      Mc
    ];
  }
  resolveNamedOptions(e, r, n, i = [
    ""
  ]) {
    const o = {
      $shared: true
    }, { resolver: s, subPrefixes: a } = ch(this._resolverCache, e, i);
    let l = s;
    if (U6(s, r)) {
      o.$shared = false, n = gn(n) ? n() : n;
      const c3 = this.createResolver(e, n, a);
      l = ki(s, n, c3);
    }
    for (const c3 of r)
      o[c3] = l[c3];
    return o;
  }
  createResolver(e, r, n = [
    ""
  ], i) {
    const { resolver: o } = ch(this._resolverCache, e, n);
    return Le(r) ? ki(o, r, undefined, i) : o;
  }
}
function ch(t, e, r) {
  let n = t.get(e);
  n || (n = /* @__PURE__ */ new Map, t.set(e, n));
  const i = r.join();
  let o = n.get(i);
  return o || (o = {
    resolver: qu(e, r),
    subPrefixes: r.filter((a) => !a.toLowerCase().includes("hover"))
  }, n.set(i, o)), o;
}
var W6 = (t) => Le(t) && Object.getOwnPropertyNames(t).reduce((e, r) => e || gn(t[r]), false);
function U6(t, e) {
  const { isScriptable: r, isIndexable: n } = E12(t);
  for (const i of e) {
    const o = r(i), s = n(i), a = (s || o) && t[i];
    if (o && (gn(a) || W6(a)) || s && it3(a))
      return true;
  }
  return false;
}
var z6 = "4.4.0";
var V6 = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function uh(t, e) {
  return t === "top" || t === "bottom" || V6.indexOf(t) === -1 && e === "x";
}
function fh(t, e) {
  return function(r, n) {
    return r[t] === n[t] ? r[e] - n[e] : r[t] - n[t];
  };
}
function dh(t) {
  const e = t.chart, r = e.options.animation;
  e.notifyPlugins("afterRender"), nt3(r && r.onComplete, [
    t
  ], e);
}
function q6(t) {
  const e = t.chart, r = e.options.animation;
  nt3(r && r.onProgress, [
    t
  ], e);
}
function X1(t) {
  return P1() && typeof t == "string" ? t = document.getElementById(t) : t && t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t;
}
var Xs = {};
var hh = (t) => {
  const e = X1(t);
  return Object.values(Xs).filter((r) => r.canvas === e).pop();
};
function H6(t, e, r) {
  const n = Object.keys(t);
  for (const i of n) {
    const o = +i;
    if (o >= e) {
      const s = t[i];
      delete t[i], (r > 0 || o > e) && (t[o + r] = s);
    }
  }
}
function Y6(t, e, r, n) {
  return !r || t.type === "mouseout" ? null : n ? e : t;
}
function ks(t, e, r) {
  return t.options.clip ? t[r] : e[r];
}
function K6(t, e) {
  const { xScale: r, yScale: n } = t;
  return r && n ? {
    left: ks(r, e, "left"),
    right: ks(r, e, "right"),
    top: ks(n, e, "top"),
    bottom: ks(n, e, "bottom")
  } : e;
}

class Lr {
  static register(...e) {
    Ar.add(...e), ph();
  }
  static unregister(...e) {
    Ar.remove(...e), ph();
  }
  constructor(e, r) {
    const n = this.config = new j6(r), i = X1(e), o = hh(i);
    if (o)
      throw new Error("Canvas is already in use. Chart with ID '" + o.id + "' must be destroyed before the canvas with ID '" + o.canvas.id + "' can be reused.");
    const s = n.createResolver(n.chartOptionScopes(), this.getContext());
    this.platform = new (n.platform || u6(i)), this.platform.updateConfig(n);
    const a = this.platform.acquireContext(i, s.aspectRatio), l = a && a.canvas, c3 = l && l.height, u = l && l.width;
    if (this.id = J3(), this.ctx = a, this.canvas = l, this.width = u, this.height = c3, this._options = s, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = undefined, this.boxes = [], this.currentDevicePixelRatio = undefined, this.chartArea = undefined, this._active = [], this._lastEvent = undefined, this._listeners = {}, this._responsiveListeners = undefined, this._sortedMetasets = [], this.scales = {}, this._plugins = new T6, this.$proxies = {}, this._hiddenIndices = {}, this.attached = false, this._animationsDisabled = undefined, this.$context = undefined, this._doResize = f2((f4) => this.update(f4), s.resizeDelay || 0), this._dataChanges = [], Xs[this.id] = this, !a || !l) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    Dr.listen(this, "complete", dh), Dr.listen(this, "progress", q6), this._initialize(), this.attached && this.update();
  }
  get aspectRatio() {
    const { options: { aspectRatio: e, maintainAspectRatio: r }, width: n, height: i, _aspectRatio: o } = this;
    return We(e) ? r && o ? o : i ? n / i : null : e;
  }
  get data() {
    return this.config.data;
  }
  set data(e) {
    this.config.data = e;
  }
  get options() {
    return this._options;
  }
  set options(e) {
    this.config.options = e;
  }
  get registry() {
    return Ar;
  }
  _initialize() {
    return this.notifyPlugins("beforeInit"), this.options.responsive ? this.resize() : Nd(this, this.options.devicePixelRatio), this.bindEvents(), this.notifyPlugins("afterInit"), this;
  }
  clear() {
    return Rd(this.canvas, this.ctx), this;
  }
  stop() {
    return Dr.stop(this), this;
  }
  resize(e, r) {
    Dr.running(this) ? this._resizeBeforeDraw = {
      width: e,
      height: r
    } : this._resize(e, r);
  }
  _resize(e, r) {
    const n = this.options, i = this.canvas, o = n.maintainAspectRatio && this.aspectRatio, s = this.platform.getMaximumSize(i, e, r, o), a = n.devicePixelRatio || this.platform.getDevicePixelRatio(), l = this.width ? "resize" : "attach";
    this.width = s.width, this.height = s.height, this._aspectRatio = this.aspectRatio, Nd(this, a, true) && (this.notifyPlugins("resize", {
      size: s
    }), nt3(n.onResize, [
      this,
      s
    ], this), this.attached && this._doResize(l) && this.render());
  }
  ensureScalesHaveIDs() {
    const r = this.options.scales || {};
    $e(r, (n, i) => {
      n.id = i;
    });
  }
  buildOrUpdateScales() {
    const e = this.options, r = e.scales, n = this.scales, i = Object.keys(n).reduce((s, a) => (s[a] = false, s), {});
    let o = [];
    r && (o = o.concat(Object.keys(r).map((s) => {
      const a = r[s], l = Fc(s, a), c3 = l === "r", u = l === "x";
      return {
        options: a,
        dposition: c3 ? "chartArea" : u ? "bottom" : "left",
        dtype: c3 ? "radialLinear" : u ? "category" : "linear"
      };
    }))), $e(o, (s) => {
      const a = s.options, l = a.id, c3 = Fc(l, a), u = Oe(a.type, s.dtype);
      (a.position === undefined || uh(a.position, c3) !== uh(s.dposition)) && (a.position = s.dposition), i[l] = true;
      let f4 = null;
      if (l in n && n[l].type === u)
        f4 = n[l];
      else {
        const d = Ar.getScale(u);
        f4 = new d({
          id: l,
          type: u,
          ctx: this.ctx,
          chart: this
        }), n[f4.id] = f4;
      }
      f4.init(a, e);
    }), $e(i, (s, a) => {
      s || delete n[a];
    }), $e(n, (s) => {
      Rt3.configure(this, s, s.options), Rt3.addBox(this, s);
    });
  }
  _updateMetasets() {
    const e = this._metasets, r = this.data.datasets.length, n = e.length;
    if (e.sort((i, o) => i.index - o.index), n > r) {
      for (let i = r;i < n; ++i)
        this._destroyDatasetMeta(i);
      e.splice(r, n - r);
    }
    this._sortedMetasets = e.slice(0).sort(fh("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: e, data: { datasets: r } } = this;
    e.length > r.length && delete this._stacks, e.forEach((n, i) => {
      r.filter((o) => o === n._dataset).length === 0 && this._destroyDatasetMeta(i);
    });
  }
  buildOrUpdateControllers() {
    const e = [], r = this.data.datasets;
    let n, i;
    for (this._removeUnreferencedMetasets(), n = 0, i = r.length;n < i; n++) {
      const o = r[n];
      let s = this.getDatasetMeta(n);
      const a = o.type || this.config.type;
      if (s.type && s.type !== a && (this._destroyDatasetMeta(n), s = this.getDatasetMeta(n)), s.type = a, s.indexAxis = o.indexAxis || Bc(a, this.options), s.order = o.order || 0, s.index = n, s.label = "" + o.label, s.visible = this.isDatasetVisible(n), s.controller)
        s.controller.updateIndex(n), s.controller.linkScales();
      else {
        const l = Ar.getController(a), { datasetElementType: c3, dataElementType: u } = gt3.datasets[a];
        Object.assign(l, {
          dataElementType: Ar.getElement(u),
          datasetElementType: c3 && Ar.getElement(c3)
        }), s.controller = new l(this, n), e.push(s.controller);
      }
    }
    return this._updateMetasets(), e;
  }
  _resetElements() {
    $e(this.data.datasets, (e, r) => {
      this.getDatasetMeta(r).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements(), this.notifyPlugins("reset");
  }
  update(e) {
    const r = this.config;
    r.update();
    const n = this._options = r.createResolver(r.chartOptionScopes(), this.getContext()), i = this._animationsDisabled = !n.animation;
    if (this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), this.notifyPlugins("beforeUpdate", {
      mode: e,
      cancelable: true
    }) === false)
      return;
    const o = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let s = 0;
    for (let c3 = 0, u = this.data.datasets.length;c3 < u; c3++) {
      const { controller: f4 } = this.getDatasetMeta(c3), d = !i && o.indexOf(f4) === -1;
      f4.buildOrUpdateElements(d), s = Math.max(+f4.getMaxOverflow(), s);
    }
    s = this._minPadding = n.layout.autoPadding ? s : 0, this._updateLayout(s), i || $e(o, (c3) => {
      c3.reset();
    }), this._updateDatasets(e), this.notifyPlugins("afterUpdate", {
      mode: e
    }), this._layers.sort(fh("z", "_idx"));
    const { _active: a, _lastEvent: l } = this;
    l ? this._eventHandler(l, true) : a.length && this._updateHoverStyles(a, a, true), this.render();
  }
  _updateScales() {
    $e(this.scales, (e) => {
      Rt3.removeBox(this, e);
    }), this.ensureScalesHaveIDs(), this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const e = this.options, r = new Set(Object.keys(this._listeners)), n = new Set(e.events);
    (!_d(r, n) || !!this._responsiveListeners !== e.responsive) && (this.unbindEvents(), this.bindEvents());
  }
  _updateHiddenIndices() {
    const { _hiddenIndices: e } = this, r = this._getUniformDataChanges() || [];
    for (const { method: n, start: i, count: o } of r) {
      const s = n === "_removeElements" ? -o : o;
      H6(e, i, s);
    }
  }
  _getUniformDataChanges() {
    const e = this._dataChanges;
    if (!e || !e.length)
      return;
    this._dataChanges = [];
    const r = this.data.datasets.length, n = (o) => new Set(e.filter((s) => s[0] === o).map((s, a) => a + "," + s.splice(1).join(","))), i = n(0);
    for (let o = 1;o < r; o++)
      if (!_d(i, n(o)))
        return;
    return Array.from(i).map((o) => o.split(",")).map((o) => ({
      method: o[1],
      start: +o[2],
      count: +o[3]
    }));
  }
  _updateLayout(e) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false)
      return;
    Rt3.update(this, this.width, this.height, e);
    const r = this.chartArea, n = r.width <= 0 || r.height <= 0;
    this._layers = [], $e(this.boxes, (i) => {
      n && i.position === "chartArea" || (i.configure && i.configure(), this._layers.push(...i._layers()));
    }, this), this._layers.forEach((i, o) => {
      i._idx = o;
    }), this.notifyPlugins("afterLayout");
  }
  _updateDatasets(e) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode: e,
      cancelable: true
    }) !== false) {
      for (let r = 0, n = this.data.datasets.length;r < n; ++r)
        this.getDatasetMeta(r).controller.configure();
      for (let r = 0, n = this.data.datasets.length;r < n; ++r)
        this._updateDataset(r, gn(e) ? e({
          datasetIndex: r
        }) : e);
      this.notifyPlugins("afterDatasetsUpdate", {
        mode: e
      });
    }
  }
  _updateDataset(e, r) {
    const n = this.getDatasetMeta(e), i = {
      meta: n,
      index: e,
      mode: r,
      cancelable: true
    };
    this.notifyPlugins("beforeDatasetUpdate", i) !== false && (n.controller._update(r), i.cancelable = false, this.notifyPlugins("afterDatasetUpdate", i));
  }
  render() {
    this.notifyPlugins("beforeRender", {
      cancelable: true
    }) !== false && (Dr.has(this) ? this.attached && !Dr.running(this) && Dr.start(this) : (this.draw(), dh({
      chart: this
    })));
  }
  draw() {
    let e;
    if (this._resizeBeforeDraw) {
      const { width: n, height: i } = this._resizeBeforeDraw;
      this._resize(n, i), this._resizeBeforeDraw = null;
    }
    if (this.clear(), this.width <= 0 || this.height <= 0 || this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false)
      return;
    const r = this._layers;
    for (e = 0;e < r.length && r[e].z <= 0; ++e)
      r[e].draw(this.chartArea);
    for (this._drawDatasets();e < r.length; ++e)
      r[e].draw(this.chartArea);
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(e) {
    const r = this._sortedMetasets, n = [];
    let i, o;
    for (i = 0, o = r.length;i < o; ++i) {
      const s = r[i];
      (!e || s.visible) && n.push(s);
    }
    return n;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false)
      return;
    const e = this.getSortedVisibleDatasetMetas();
    for (let r = e.length - 1;r >= 0; --r)
      this._drawDataset(e[r]);
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(e) {
    const r = this.ctx, n = e._clip, i = !n.disabled, o = K6(e, this.chartArea), s = {
      meta: e,
      index: e.index,
      cancelable: true
    };
    this.notifyPlugins("beforeDatasetDraw", s) !== false && (i && Ka(r, {
      left: n.left === false ? 0 : o.left - n.left,
      right: n.right === false ? this.width : o.right + n.right,
      top: n.top === false ? 0 : o.top - n.top,
      bottom: n.bottom === false ? this.height : o.bottom + n.bottom
    }), e.controller.draw(), i && Xa(r), s.cancelable = false, this.notifyPlugins("afterDatasetDraw", s));
  }
  isPointInArea(e) {
    return zr(e, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e, r, n, i) {
    const o = Vv.modes[r];
    return typeof o == "function" ? o(this, e, n, i) : [];
  }
  getDatasetMeta(e) {
    const r = this.data.datasets[e], n = this._metasets;
    let i = n.filter((o) => o && o._dataset === r).pop();
    return i || (i = {
      type: null,
      data: [],
      dataset: null,
      controller: null,
      hidden: null,
      xAxisID: null,
      yAxisID: null,
      order: r && r.order || 0,
      index: e,
      _dataset: r,
      _parsed: [],
      _sorted: false
    }, n.push(i)), i;
  }
  getContext() {
    return this.$context || (this.$context = vn3(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(e) {
    const r = this.data.datasets[e];
    if (!r)
      return false;
    const n = this.getDatasetMeta(e);
    return typeof n.hidden == "boolean" ? !n.hidden : !r.hidden;
  }
  setDatasetVisibility(e, r) {
    const n = this.getDatasetMeta(e);
    n.hidden = !r;
  }
  toggleDataVisibility(e) {
    this._hiddenIndices[e] = !this._hiddenIndices[e];
  }
  getDataVisibility(e) {
    return !this._hiddenIndices[e];
  }
  _updateVisibility(e, r, n) {
    const i = n ? "show" : "hide", o = this.getDatasetMeta(e), s = o.controller._resolveAnimations(undefined, i);
    Io(r) ? (o.data[r].hidden = !n, this.update()) : (this.setDatasetVisibility(e, n), s.update(o, {
      visible: n
    }), this.update((a) => a.datasetIndex === e ? i : undefined));
  }
  hide(e, r) {
    this._updateVisibility(e, r, false);
  }
  show(e, r) {
    this._updateVisibility(e, r, true);
  }
  _destroyDatasetMeta(e) {
    const r = this._metasets[e];
    r && r.controller && r.controller._destroy(), delete this._metasets[e];
  }
  _stop() {
    let e, r;
    for (this.stop(), Dr.remove(this), e = 0, r = this.data.datasets.length;e < r; ++e)
      this._destroyDatasetMeta(e);
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas: e, ctx: r } = this;
    this._stop(), this.config.clearCache(), e && (this.unbindEvents(), Rd(e, r), this.platform.releaseContext(r), this.canvas = null, this.ctx = null), delete Xs[this.id], this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...e) {
    return this.canvas.toDataURL(...e);
  }
  bindEvents() {
    this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = true;
  }
  bindUserEvents() {
    const e = this._listeners, r = this.platform, n = (o, s) => {
      r.addEventListener(this, o, s), e[o] = s;
    }, i = (o, s, a) => {
      o.offsetX = s, o.offsetY = a, this._eventHandler(o);
    };
    $e(this.options.events, (o) => n(o, i));
  }
  bindResponsiveEvents() {
    this._responsiveListeners || (this._responsiveListeners = {});
    const e = this._responsiveListeners, r = this.platform, n = (l, c3) => {
      r.addEventListener(this, l, c3), e[l] = c3;
    }, i = (l, c3) => {
      e[l] && (r.removeEventListener(this, l, c3), delete e[l]);
    }, o = (l, c3) => {
      this.canvas && this.resize(l, c3);
    };
    let s;
    const a = () => {
      i("attach", a), this.attached = true, this.resize(), n("resize", o), n("detach", s);
    };
    s = () => {
      this.attached = false, i("resize", o), this._stop(), this._resize(0, 0), n("attach", a);
    }, r.isAttached(this.canvas) ? a() : s();
  }
  unbindEvents() {
    $e(this._listeners, (e, r) => {
      this.platform.removeEventListener(this, r, e);
    }), this._listeners = {}, $e(this._responsiveListeners, (e, r) => {
      this.platform.removeEventListener(this, r, e);
    }), this._responsiveListeners = undefined;
  }
  updateHoverStyle(e, r, n) {
    const i = n ? "set" : "remove";
    let o, s, a, l;
    for (r === "dataset" && (o = this.getDatasetMeta(e[0].datasetIndex), o.controller["_" + i + "DatasetHoverStyle"]()), a = 0, l = e.length;a < l; ++a) {
      s = e[a];
      const c3 = s && this.getDatasetMeta(s.datasetIndex).controller;
      c3 && c3[i + "HoverStyle"](s.element, s.datasetIndex, s.index);
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(e) {
    const r = this._active || [], n = e.map(({ datasetIndex: o, index: s }) => {
      const a = this.getDatasetMeta(o);
      if (!a)
        throw new Error("No dataset found at index " + o);
      return {
        datasetIndex: o,
        element: a.data[s],
        index: s
      };
    });
    !ga(n, r) && (this._active = n, this._lastEvent = null, this._updateHoverStyles(n, r));
  }
  notifyPlugins(e, r, n) {
    return this._plugins.notify(this, e, r, n);
  }
  isPluginEnabled(e) {
    return this._plugins._cache.filter((r) => r.plugin.id === e).length === 1;
  }
  _updateHoverStyles(e, r, n) {
    const i = this.options.hover, o = (l, c3) => l.filter((u) => !c3.some((f4) => u.datasetIndex === f4.datasetIndex && u.index === f4.index)), s = o(r, e), a = n ? e : o(e, r);
    s.length && this.updateHoverStyle(s, i.mode, false), a.length && i.mode && this.updateHoverStyle(a, i.mode, true);
  }
  _eventHandler(e, r) {
    const n = {
      event: e,
      replay: r,
      cancelable: true,
      inChartArea: this.isPointInArea(e)
    }, i = (s) => (s.options.events || this.options.events).includes(e.native.type);
    if (this.notifyPlugins("beforeEvent", n, i) === false)
      return;
    const o = this._handleEvent(e, r, n.inChartArea);
    return n.cancelable = false, this.notifyPlugins("afterEvent", n, i), (o || n.changed) && this.render(), this;
  }
  _handleEvent(e, r, n) {
    const { _active: i = [], options: o } = this, s = r, a = this._getActiveElements(e, i, n, s), l = t2(e), c3 = Y6(e, this._lastEvent, n, l);
    n && (this._lastEvent = null, nt3(o.onHover, [
      e,
      a,
      this
    ], this), l && nt3(o.onClick, [
      e,
      a,
      this
    ], this));
    const u = !ga(a, i);
    return (u || r) && (this._active = a, this._updateHoverStyles(a, i, r)), this._lastEvent = c3, u;
  }
  _getActiveElements(e, r, n, i) {
    if (e.type === "mouseout")
      return [];
    if (!n)
      return r;
    const o = this.options.hover;
    return this.getElementsAtEventForMode(e, o.mode, o, i);
  }
}
ye(Lr, "defaults", gt3), ye(Lr, "instances", Xs), ye(Lr, "overrides", Yn3), ye(Lr, "registry", Ar), ye(Lr, "version", z6), ye(Lr, "getChart", hh);
function ph() {
  return $e(Lr.instances, (t) => t._plugins.invalidate());
}
function X6(t, e, r) {
  const { startAngle: n, pixelMargin: i, x: o, y: s, outerRadius: a, innerRadius: l } = e;
  let c3 = i / a;
  t.beginPath(), t.arc(o, s, a, n - c3, r + c3), l > i ? (c3 = i / l, t.arc(o, s, l, r + c3, n - c3, true)) : t.arc(o, s, i, r + mt3, n - mt3), t.closePath(), t.clip();
}
function J6(t) {
  return Vu(t, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function Q6(t, e, r, n) {
  const i = J6(t.options.borderRadius), o = (r - e) / 2, s = Math.min(o, n * e / 2), a = (l) => {
    const c3 = (r - Math.min(o, l)) * n / 2;
    return St3(l, 0, Math.min(o, c3));
  };
  return {
    outerStart: a(i.outerStart),
    outerEnd: a(i.outerEnd),
    innerStart: St3(i.innerStart, 0, s),
    innerEnd: St3(i.innerEnd, 0, s)
  };
}
function ti(t, e, r, n) {
  return {
    x: r + t * Math.cos(e),
    y: n + t * Math.sin(e)
  };
}
function wa(t, e, r, n, i, o) {
  const { x: s, y: a, startAngle: l, pixelMargin: c3, innerRadius: u } = e, f4 = Math.max(e.outerRadius + n + r - c3, 0), d = u > 0 ? u + n + r + c3 : 0;
  let h = 0;
  const g3 = i - l;
  if (n) {
    const U = u > 0 ? u - n : 0, I = f4 > 0 ? f4 - n : 0, V = (U + I) / 2, te = V !== 0 ? g3 * V / (V + n) : g3;
    h = (g3 - te) / 2;
  }
  const p = Math.max(0.001, g3 * f4 - r / st3) / f4, y4 = (g3 - p) / 2, b = l + y4 + h, x = i - y4 - h, { outerStart: S, outerEnd: O, innerStart: _, innerEnd: L } = Q6(e, d, f4, x - b), N4 = f4 - S, j = f4 - O, W = b + S / N4, G = x - O / j, ee = d + _, fe = d + L, P = b + _ / ee, z = x - L / fe;
  if (t.beginPath(), o) {
    const U = (W + G) / 2;
    if (t.arc(s, a, f4, W, U), t.arc(s, a, f4, U, G), O > 0) {
      const X4 = ti(j, G, s, a);
      t.arc(X4.x, X4.y, O, G, x + mt3);
    }
    const I = ti(fe, x, s, a);
    if (t.lineTo(I.x, I.y), L > 0) {
      const X4 = ti(fe, z, s, a);
      t.arc(X4.x, X4.y, L, x + mt3, z + Math.PI);
    }
    const V = (x - L / d + (b + _ / d)) / 2;
    if (t.arc(s, a, d, x - L / d, V, true), t.arc(s, a, d, V, b + _ / d, true), _ > 0) {
      const X4 = ti(ee, P, s, a);
      t.arc(X4.x, X4.y, _, P + Math.PI, b - mt3);
    }
    const te = ti(N4, b, s, a);
    if (t.lineTo(te.x, te.y), S > 0) {
      const X4 = ti(N4, W, s, a);
      t.arc(X4.x, X4.y, S, b - mt3, W);
    }
  } else {
    t.moveTo(s, a);
    const U = Math.cos(W) * f4 + s, I = Math.sin(W) * f4 + a;
    t.lineTo(U, I);
    const V = Math.cos(G) * f4 + s, te = Math.sin(G) * f4 + a;
    t.lineTo(V, te);
  }
  t.closePath();
}
function G6(t, e, r, n, i) {
  const { fullCircles: o, startAngle: s, circumference: a } = e;
  let l = e.endAngle;
  if (o) {
    wa(t, e, r, n, l, i);
    for (let c3 = 0;c3 < o; ++c3)
      t.fill();
    isNaN(a) || (l = s + (a % ot3 || ot3));
  }
  return wa(t, e, r, n, l, i), t.fill(), l;
}
function Z6(t, e, r, n, i) {
  const { fullCircles: o, startAngle: s, circumference: a, options: l } = e, { borderWidth: c3, borderJoinStyle: u, borderDash: f4, borderDashOffset: d } = l, h = l.borderAlign === "inner";
  if (!c3)
    return;
  t.setLineDash(f4 || []), t.lineDashOffset = d, h ? (t.lineWidth = c3 * 2, t.lineJoin = u || "round") : (t.lineWidth = c3, t.lineJoin = u || "bevel");
  let g3 = e.endAngle;
  if (o) {
    wa(t, e, r, n, g3, i);
    for (let p = 0;p < o; ++p)
      t.stroke();
    isNaN(a) || (g3 = s + (a % ot3 || ot3));
  }
  h && X6(t, e, g3), o || (wa(t, e, r, n, g3, i), t.stroke());
}

class ao extends Jr {
  constructor(r) {
    super();
    ye(this, "circumference");
    ye(this, "endAngle");
    ye(this, "fullCircles");
    ye(this, "innerRadius");
    ye(this, "outerRadius");
    ye(this, "pixelMargin");
    ye(this, "startAngle");
    this.options = undefined, this.circumference = undefined, this.startAngle = undefined, this.endAngle = undefined, this.innerRadius = undefined, this.outerRadius = undefined, this.pixelMargin = 0, this.fullCircles = 0, r && Object.assign(this, r);
  }
  inRange(r, n, i) {
    const o = this.getProps([
      "x",
      "y"
    ], i), { angle: s, distance: a } = g12(o, {
      x: r,
      y: n
    }), { startAngle: l, endAngle: c3, innerRadius: u, outerRadius: f4, circumference: d } = this.getProps([
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], i), h = (this.options.spacing + this.options.borderWidth) / 2, p = Oe(d, c3 - l) >= ot3 || Po(s, l, c3), y4 = Wr(a, u + h, f4 + h);
    return p && y4;
  }
  getCenterPoint(r) {
    const { x: n, y: i, startAngle: o, endAngle: s, innerRadius: a, outerRadius: l } = this.getProps([
      "x",
      "y",
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius"
    ], r), { offset: c3, spacing: u } = this.options, f4 = (o + s) / 2, d = (a + l + u + c3) / 2;
    return {
      x: n + Math.cos(f4) * d,
      y: i + Math.sin(f4) * d
    };
  }
  tooltipPosition(r) {
    return this.getCenterPoint(r);
  }
  draw(r) {
    const { options: n, circumference: i } = this, o = (n.offset || 0) / 4, s = (n.spacing || 0) / 2, a = n.circular;
    if (this.pixelMargin = n.borderAlign === "inner" ? 0.33 : 0, this.fullCircles = i > ot3 ? Math.floor(i / ot3) : 0, i === 0 || this.innerRadius < 0 || this.outerRadius < 0)
      return;
    r.save();
    const l = (this.startAngle + this.endAngle) / 2;
    r.translate(Math.cos(l) * o, Math.sin(l) * o);
    const c3 = 1 - Math.sin(Math.min(st3, i || 0)), u = o * c3;
    r.fillStyle = n.backgroundColor, r.strokeStyle = n.borderColor, G6(r, this, u, s, a), Z6(r, this, u, s, a), r.restore();
  }
}
ye(ao, "id", "arc"), ye(ao, "defaults", {
  borderAlign: "center",
  borderColor: "#fff",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: undefined,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: undefined,
  circular: true
}), ye(ao, "defaultRoutes", {
  backgroundColor: "backgroundColor"
}), ye(ao, "descriptors", {
  _scriptable: true,
  _indexable: (r) => r !== "borderDash"
});
function J12(t, e, r = e) {
  t.lineCap = Oe(r.borderCapStyle, e.borderCapStyle), t.setLineDash(Oe(r.borderDash, e.borderDash)), t.lineDashOffset = Oe(r.borderDashOffset, e.borderDashOffset), t.lineJoin = Oe(r.borderJoinStyle, e.borderJoinStyle), t.lineWidth = Oe(r.borderWidth, e.borderWidth), t.strokeStyle = Oe(r.borderColor, e.borderColor);
}
function $6(t, e, r) {
  t.lineTo(r.x, r.y);
}
function eA(t) {
  return t.stepped ? _2 : t.tension || t.cubicInterpolationMode === "monotone" ? S2 : $6;
}
function Q1(t, e, r = {}) {
  const n = t.length, { start: i = 0, end: o = n - 1 } = r, { start: s, end: a } = e, l = Math.max(i, s), c3 = Math.min(o, a), u = i < s && o < s || i > a && o > a;
  return {
    count: n,
    start: l,
    loop: e.loop,
    ilen: c3 < l && !u ? n + c3 - l : c3 - l
  };
}
function tA(t, e, r, n) {
  const { points: i, options: o } = e, { count: s, start: a, loop: l, ilen: c3 } = Q1(i, r, n), u = eA(o);
  let { move: f4 = true, reverse: d } = n || {}, h, g3, p;
  for (h = 0;h <= c3; ++h)
    g3 = i[(a + (d ? c3 - h : h)) % s], !g3.skip && (f4 ? (t.moveTo(g3.x, g3.y), f4 = false) : u(t, p, g3, d, o.stepped), p = g3);
  return l && (g3 = i[(a + (d ? c3 : 0)) % s], u(t, p, g3, d, o.stepped)), !!l;
}
function rA(t, e, r, n) {
  const i = e.points, { count: o, start: s, ilen: a } = Q1(i, r, n), { move: l = true, reverse: c3 } = n || {};
  let u = 0, f4 = 0, d, h, g3, p, y4, b;
  const x = (O) => (s + (c3 ? a - O : O)) % o, S = () => {
    p !== y4 && (t.lineTo(u, y4), t.lineTo(u, p), t.lineTo(u, b));
  };
  for (l && (h = i[x(0)], t.moveTo(h.x, h.y)), d = 0;d <= a; ++d) {
    if (h = i[x(d)], h.skip)
      continue;
    const { x: O, y: _ } = h, L = O | 0;
    L === g3 ? (_ < p ? p = _ : _ > y4 && (y4 = _), u = (f4 * u + O) / ++f4) : (S(), t.lineTo(O, _), g3 = L, f4 = 0, p = y4 = _), b = _;
  }
  S();
}
function jc(t) {
  const e = t.options, r = e.borderDash && e.borderDash.length;
  return !t._decimated && !t._loop && !e.tension && e.cubicInterpolationMode !== "monotone" && !e.stepped && !r ? rA : tA;
}
function nA(t) {
  return t.stepped ? rv : t.tension || t.cubicInterpolationMode === "monotone" ? nv : Rn3;
}
function iA(t, e, r, n) {
  let i = e._path;
  i || (i = e._path = new Path2D, e.path(i, r, n) && i.closePath()), J12(t, e.options), t.stroke(i);
}
function oA(t, e, r, n) {
  const { segments: i, options: o } = e, s = jc(e);
  for (const a of i)
    J12(t, o, a.style), t.beginPath(), s(t, e, a, {
      start: r,
      end: r + n - 1
    }) && t.closePath(), t.stroke();
}
var sA = typeof Path2D == "function";
function aA(t, e, r, n) {
  sA && !e.options.segment ? iA(t, e, r, n) : oA(t, e, r, n);
}

class nn extends Jr {
  constructor(e) {
    super(), this.animated = true, this.options = undefined, this._chart = undefined, this._loop = undefined, this._fullLoop = undefined, this._path = undefined, this._points = undefined, this._segments = undefined, this._decimated = false, this._pointsUpdated = false, this._datasetIndex = undefined, e && Object.assign(this, e);
  }
  updateControlPoints(e, r) {
    const n = this.options;
    if ((n.tension || n.cubicInterpolationMode === "monotone") && !n.stepped && !this._pointsUpdated) {
      const i = n.spanGaps ? this._loop : this._fullLoop;
      X2(this._points, n, e, i, r), this._pointsUpdated = true;
    }
  }
  set points(e) {
    this._points = e, delete this._segments, delete this._path, this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = cv(this, this.options.segment));
  }
  first() {
    const e = this.segments, r = this.points;
    return e.length && r[e[0].start];
  }
  last() {
    const e = this.segments, r = this.points, n = e.length;
    return n && r[e[n - 1].end];
  }
  interpolate(e, r) {
    const n = this.options, i = e[r], o = this.points, s = L12(this, {
      property: r,
      start: i,
      end: i
    });
    if (!s.length)
      return;
    const a = [], l = nA(n);
    let c3, u;
    for (c3 = 0, u = s.length;c3 < u; ++c3) {
      const { start: f4, end: d } = s[c3], h = o[f4], g3 = o[d];
      if (h === g3) {
        a.push(h);
        continue;
      }
      const p = Math.abs((i - h[r]) / (g3[r] - h[r])), y4 = l(h, g3, p, n.stepped);
      y4[r] = e[r], a.push(y4);
    }
    return a.length === 1 ? a[0] : a;
  }
  pathSegment(e, r, n) {
    return jc(this)(e, this, r, n);
  }
  path(e, r, n) {
    const i = this.segments, o = jc(this);
    let s = this._loop;
    r = r || 0, n = n || this.points.length - r;
    for (const a of i)
      s &= o(e, this, a, {
        start: r,
        end: r + n - 1
      });
    return !!s;
  }
  draw(e, r, n, i) {
    const o = this.options || {};
    (this.points || []).length && o.borderWidth && (e.save(), aA(e, this, n, i), e.restore()), this.animated && (this._pointsUpdated = false, this._path = undefined);
  }
}
ye(nn, "id", "line"), ye(nn, "defaults", {
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: "default",
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0
}), ye(nn, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
}), ye(nn, "descriptors", {
  _scriptable: true,
  _indexable: (e) => e !== "borderDash" && e !== "fill"
});
function gh(t, e, r, n) {
  const i = t.options, { [r]: o } = t.getProps([
    r
  ], n);
  return Math.abs(e - o) < i.radius + i.hitRadius;
}

class Js extends Jr {
  constructor(r) {
    super();
    ye(this, "parsed");
    ye(this, "skip");
    ye(this, "stop");
    this.options = undefined, this.parsed = undefined, this.skip = undefined, this.stop = undefined, r && Object.assign(this, r);
  }
  inRange(r, n, i) {
    const o = this.options, { x: s, y: a } = this.getProps([
      "x",
      "y"
    ], i);
    return Math.pow(r - s, 2) + Math.pow(n - a, 2) < Math.pow(o.hitRadius + o.radius, 2);
  }
  inXRange(r, n) {
    return gh(this, r, "x", n);
  }
  inYRange(r, n) {
    return gh(this, r, "y", n);
  }
  getCenterPoint(r) {
    const { x: n, y: i } = this.getProps([
      "x",
      "y"
    ], r);
    return {
      x: n,
      y: i
    };
  }
  size(r) {
    r = r || this.options || {};
    let n = r.radius || 0;
    n = Math.max(n, n && r.hoverRadius || 0);
    const i = n && r.borderWidth || 0;
    return (n + i) * 2;
  }
  draw(r, n) {
    const i = this.options;
    this.skip || i.radius < 0.1 || !zr(this, n, this.size(i) / 2) || (r.strokeStyle = i.borderColor, r.lineWidth = i.borderWidth, r.fillStyle = i.backgroundColor, Nc(r, i, this.x, this.y));
  }
  getRange() {
    const r = this.options || {};
    return r.radius + r.hitRadius;
  }
}
ye(Js, "id", "point"), ye(Js, "defaults", {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
}), ye(Js, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
function G12(t, e) {
  const { x: r, y: n, base: i, width: o, height: s } = t.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], e);
  let a, l, c3, u, f4;
  return t.horizontal ? (f4 = s / 2, a = Math.min(r, i), l = Math.max(r, i), c3 = n - f4, u = n + f4) : (f4 = o / 2, a = r - f4, l = r + f4, c3 = Math.min(n, i), u = Math.max(n, i)), {
    left: a,
    top: c3,
    right: l,
    bottom: u
  };
}
function on3(t, e, r, n) {
  return t ? 0 : St3(e, r, n);
}
function lA(t, e, r) {
  const n = t.options.borderWidth, i = t.borderSkipped, o = S1(n);
  return {
    t: on3(i.top, o.top, 0, r),
    r: on3(i.right, o.right, 0, e),
    b: on3(i.bottom, o.bottom, 0, r),
    l: on3(i.left, o.left, 0, e)
  };
}
function cA(t, e, r) {
  const { enableBorderRadius: n } = t.getProps([
    "enableBorderRadius"
  ]), i = t.options.borderRadius, o = Fn3(i), s = Math.min(e, r), a = t.borderSkipped, l = n || Le(i);
  return {
    topLeft: on3(!l || a.top || a.left, o.topLeft, 0, s),
    topRight: on3(!l || a.top || a.right, o.topRight, 0, s),
    bottomLeft: on3(!l || a.bottom || a.left, o.bottomLeft, 0, s),
    bottomRight: on3(!l || a.bottom || a.right, o.bottomRight, 0, s)
  };
}
function uA(t) {
  const e = G12(t), r = e.right - e.left, n = e.bottom - e.top, i = lA(t, r / 2, n / 2), o = cA(t, r / 2, n / 2);
  return {
    outer: {
      x: e.left,
      y: e.top,
      w: r,
      h: n,
      radius: o
    },
    inner: {
      x: e.left + i.l,
      y: e.top + i.t,
      w: r - i.l - i.r,
      h: n - i.t - i.b,
      radius: {
        topLeft: Math.max(0, o.topLeft - Math.max(i.t, i.l)),
        topRight: Math.max(0, o.topRight - Math.max(i.t, i.r)),
        bottomLeft: Math.max(0, o.bottomLeft - Math.max(i.b, i.l)),
        bottomRight: Math.max(0, o.bottomRight - Math.max(i.b, i.r))
      }
    }
  };
}
function Zl(t, e, r, n) {
  const i = e === null, o = r === null, a = t && !(i && o) && G12(t, n);
  return a && (i || Wr(e, a.left, a.right)) && (o || Wr(r, a.top, a.bottom));
}
function fA(t) {
  return t.topLeft || t.topRight || t.bottomLeft || t.bottomRight;
}
function dA(t, e) {
  t.rect(e.x, e.y, e.w, e.h);
}
function $l(t, e, r = {}) {
  const n = t.x !== r.x ? -e : 0, i = t.y !== r.y ? -e : 0, o = (t.x + t.w !== r.x + r.w ? e : 0) - n, s = (t.y + t.h !== r.y + r.h ? e : 0) - i;
  return {
    x: t.x + n,
    y: t.y + i,
    w: t.w + o,
    h: t.h + s,
    radius: t.radius
  };
}

class Qs extends Jr {
  constructor(e) {
    super(), this.options = undefined, this.horizontal = undefined, this.base = undefined, this.width = undefined, this.height = undefined, this.inflateAmount = undefined, e && Object.assign(this, e);
  }
  draw(e) {
    const { inflateAmount: r, options: { borderColor: n, backgroundColor: i } } = this, { inner: o, outer: s } = uA(this), a = fA(s.radius) ? Ro : dA;
    e.save(), (s.w !== o.w || s.h !== o.h) && (e.beginPath(), a(e, $l(s, r, o)), e.clip(), a(e, $l(o, -r, s)), e.fillStyle = n, e.fill("evenodd")), e.beginPath(), a(e, $l(o, r)), e.fillStyle = i, e.fill(), e.restore();
  }
  inRange(e, r, n) {
    return Zl(this, e, r, n);
  }
  inXRange(e, r) {
    return Zl(this, e, null, r);
  }
  inYRange(e, r) {
    return Zl(this, null, e, r);
  }
  getCenterPoint(e) {
    const { x: r, y: n, base: i, horizontal: o } = this.getProps([
      "x",
      "y",
      "base",
      "horizontal"
    ], e);
    return {
      x: o ? (r + i) / 2 : r,
      y: o ? n : (n + i) / 2
    };
  }
  getRange(e) {
    return e === "x" ? this.width / 2 : this.height / 2;
  }
}
ye(Qs, "id", "bar"), ye(Qs, "defaults", {
  borderSkipped: "start",
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: "auto",
  pointStyle: undefined
}), ye(Qs, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
var hA = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcElement: ao,
  BarElement: Qs,
  LineElement: nn,
  PointElement: Js
});
var Wc = [
  "rgb(54, 162, 235)",
  "rgb(255, 99, 132)",
  "rgb(255, 159, 64)",
  "rgb(255, 205, 86)",
  "rgb(75, 192, 192)",
  "rgb(153, 102, 255)",
  "rgb(201, 203, 207)"
];
var mh = /* @__PURE__ */ Wc.map((t) => t.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function Z12(t) {
  return Wc[t % Wc.length];
}
function $1(t) {
  return mh[t % mh.length];
}
function pA(t, e) {
  return t.borderColor = Z12(e), t.backgroundColor = $1(e), ++e;
}
function gA(t, e) {
  return t.backgroundColor = t.data.map(() => Z12(e++)), e;
}
function mA(t, e) {
  return t.backgroundColor = t.data.map(() => $1(e++)), e;
}
function yA(t) {
  let e = 0;
  return (r, n) => {
    const i = t.getDatasetMeta(n).controller;
    i instanceof Bn3 ? e = gA(r, e) : i instanceof Ao ? e = mA(r, e) : i && (e = pA(r, e));
  };
}
function yh(t) {
  let e;
  for (e in t)
    if (t[e].borderColor || t[e].backgroundColor)
      return true;
  return false;
}
function bA(t) {
  return t && (t.borderColor || t.backgroundColor);
}
var vA = {
  id: "colors",
  defaults: {
    enabled: true,
    forceOverride: false
  },
  beforeLayout(t, e, r) {
    if (!r.enabled)
      return;
    const { data: { datasets: n }, options: i } = t.config, { elements: o } = i;
    if (!r.forceOverride && (yh(n) || bA(i) || o && yh(o)))
      return;
    const s = yA(t);
    n.forEach(s);
  }
};
function AA(t, e, r, n, i) {
  const o = i.samples || n;
  if (o >= r)
    return t.slice(e, e + r);
  const s = [], a = (r - 2) / (o - 2);
  let l = 0;
  const c3 = e + r - 1;
  let u = e, f4, d, h, g3, p;
  for (s[l++] = t[u], f4 = 0;f4 < o - 2; f4++) {
    let y4 = 0, b = 0, x;
    const S = Math.floor((f4 + 1) * a) + 1 + e, O = Math.min(Math.floor((f4 + 2) * a) + 1, r) + e, _ = O - S;
    for (x = S;x < O; x++)
      y4 += t[x].x, b += t[x].y;
    y4 /= _, b /= _;
    const L = Math.floor(f4 * a) + 1 + e, N4 = Math.min(Math.floor((f4 + 1) * a) + 1, r) + e, { x: j, y: W } = t[u];
    for (h = g3 = -1, x = L;x < N4; x++)
      g3 = 0.5 * Math.abs((j - y4) * (t[x].y - W) - (j - t[x].x) * (b - W)), g3 > h && (h = g3, d = t[x], p = x);
    s[l++] = d, u = p;
  }
  return s[l++] = t[c3], s;
}
function wA(t, e, r, n) {
  let i = 0, o = 0, s, a, l, c3, u, f4, d, h, g3, p;
  const y4 = [], b = e + r - 1, x = t[e].x, O = t[b].x - x;
  for (s = e;s < e + r; ++s) {
    a = t[s], l = (a.x - x) / O * n, c3 = a.y;
    const _ = l | 0;
    if (_ === u)
      c3 < g3 ? (g3 = c3, f4 = s) : c3 > p && (p = c3, d = s), i = (o * i + a.x) / ++o;
    else {
      const L = s - 1;
      if (!We(f4) && !We(d)) {
        const N4 = Math.min(f4, d), j = Math.max(f4, d);
        N4 !== h && N4 !== L && y4.push({
          ...t[N4],
          x: i
        }), j !== h && j !== L && y4.push({
          ...t[j],
          x: i
        });
      }
      s > 0 && L !== h && y4.push(t[L]), y4.push(a), u = _, o = 0, g3 = p = c3, f4 = d = h = s;
    }
  }
  return y4;
}
function eg(t) {
  if (t._decimated) {
    const e = t._data;
    delete t._decimated, delete t._data, Object.defineProperty(t, "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: e
    });
  }
}
function bh(t) {
  t.data.datasets.forEach((e) => {
    eg(e);
  });
}
function xA(t, e) {
  const r = e.length;
  let n = 0, i;
  const { iScale: o } = t, { min: s, max: a, minDefined: l, maxDefined: c3 } = o.getUserBounds();
  return l && (n = St3(Ur(e, o.axis, s).lo, 0, r - 1)), c3 ? i = St3(Ur(e, o.axis, a).hi + 1, n, r) - n : i = r - n, {
    start: n,
    count: i
  };
}
var _A = {
  id: "decimation",
  defaults: {
    algorithm: "min-max",
    enabled: false
  },
  beforeElementsUpdate: (t, e, r) => {
    if (!r.enabled) {
      bh(t);
      return;
    }
    const n = t.width;
    t.data.datasets.forEach((i, o) => {
      const { _data: s, indexAxis: a } = i, l = t.getDatasetMeta(o), c3 = s || i.data;
      if (oo([
        a,
        t.options.indexAxis
      ]) === "y" || !l.controller.supportsDecimation)
        return;
      const u = t.scales[l.xAxisID];
      if (u.type !== "linear" && u.type !== "time" || t.options.parsing)
        return;
      let { start: f4, count: d } = xA(l, c3);
      const h = r.threshold || 4 * n;
      if (d <= h) {
        eg(i);
        return;
      }
      We(s) && (i._data = c3, delete i.data, Object.defineProperty(i, "data", {
        configurable: true,
        enumerable: true,
        get: function() {
          return this._decimated;
        },
        set: function(p) {
          this._data = p;
        }
      }));
      let g3;
      switch (r.algorithm) {
        case "lttb":
          g3 = AA(c3, f4, d, n, r);
          break;
        case "min-max":
          g3 = wA(c3, f4, d, n);
          break;
        default:
          throw new Error(`Unsupported decimation algorithm '${r.algorithm}'`);
      }
      i._decimated = g3;
    });
  },
  destroy(t) {
    bh(t);
  }
};
function SA(t, e, r) {
  const { segments: n, points: i } = t, o = e.points, s = [];
  for (const a of n) {
    let { start: l, end: c3 } = a;
    c3 = Ju(l, c3, i);
    const u = Uc(r, i[l], i[c3], a.loop);
    if (!e.segments) {
      s.push({
        source: a,
        target: u,
        start: i[l],
        end: i[c3]
      });
      continue;
    }
    const f4 = L12(e, u);
    for (const d of f4) {
      const h = Uc(r, o[d.start], o[d.end], d.loop), g3 = N1(a, i, h);
      for (const p of g3)
        s.push({
          source: p,
          target: d,
          start: {
            [r]: vh(u, h, "start", Math.max)
          },
          end: {
            [r]: vh(u, h, "end", Math.min)
          }
        });
    }
  }
  return s;
}
function Uc(t, e, r, n) {
  if (n)
    return;
  let i = e[t], o = r[t];
  return t === "angle" && (i = Yt3(i), o = Yt3(o)), {
    property: t,
    start: i,
    end: o
  };
}
function EA(t, e) {
  const { x: r = null, y: n = null } = t || {}, i = e.points, o = [];
  return e.segments.forEach(({ start: s, end: a }) => {
    a = Ju(s, a, i);
    const l = i[s], c3 = i[a];
    n !== null ? (o.push({
      x: l.x,
      y: n
    }), o.push({
      x: c3.x,
      y: n
    })) : r !== null && (o.push({
      x: r,
      y: l.y
    }), o.push({
      x: r,
      y: c3.y
    }));
  }), o;
}
function Ju(t, e, r) {
  for (;e > t; e--) {
    const n = r[e];
    if (!isNaN(n.x) && !isNaN(n.y))
      break;
  }
  return e;
}
function vh(t, e, r, n) {
  return t && e ? n(t[r], e[r]) : t ? t[r] : e ? e[r] : 0;
}
function tg(t, e) {
  let r = [], n = false;
  return it3(t) ? (n = true, r = t) : r = EA(t, e), r.length ? new nn({
    points: r,
    options: {
      tension: 0
    },
    _loop: n,
    _fullLoop: n
  }) : null;
}
function Ah(t) {
  return t && t.fill !== false;
}
function kA(t, e, r) {
  let i = t[e].fill;
  const o = [
    e
  ];
  let s;
  if (!r)
    return i;
  for (;i !== false && o.indexOf(i) === -1; ) {
    if (!pt3(i))
      return i;
    if (s = t[i], !s)
      return false;
    if (s.visible)
      return i;
    o.push(i), i = s.fill;
  }
  return false;
}
function CA(t, e, r) {
  const n = PA(t);
  if (Le(n))
    return isNaN(n.value) ? false : n;
  let i = parseFloat(n);
  return pt3(i) && Math.floor(i) === i ? TA(n[0], e, i, r) : [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(n) >= 0 && n;
}
function TA(t, e, r, n) {
  return (t === "-" || t === "+") && (r = e + r), r === e || r < 0 || r >= n ? false : r;
}
function OA(t, e) {
  let r = null;
  return t === "start" ? r = e.bottom : t === "end" ? r = e.top : Le(t) ? r = e.getPixelForValue(t.value) : e.getBasePixel && (r = e.getBasePixel()), r;
}
function IA(t, e, r) {
  let n;
  return t === "start" ? n = r : t === "end" ? n = e.options.reverse ? e.min : e.max : Le(t) ? n = t.value : n = e.getBaseValue(), n;
}
function PA(t) {
  const e = t.options, r = e.fill;
  let n = Oe(r && r.target, r);
  return n === undefined && (n = !!e.backgroundColor), n === false || n === null ? false : n === true ? "origin" : n;
}
function RA(t) {
  const { scale: e, index: r, line: n } = t, i = [], o = n.segments, s = n.points, a = DA(e, r);
  a.push(tg({
    x: null,
    y: e.bottom
  }, n));
  for (let l = 0;l < o.length; l++) {
    const c3 = o[l];
    for (let u = c3.start;u <= c3.end; u++)
      MA(i, s[u], a);
  }
  return new nn({
    points: i,
    options: {}
  });
}
function DA(t, e) {
  const r = [], n = t.getMatchingVisibleMetas("line");
  for (let i = 0;i < n.length; i++) {
    const o = n[i];
    if (o.index === e)
      break;
    o.hidden || r.unshift(o.dataset);
  }
  return r;
}
function MA(t, e, r) {
  const n = [];
  for (let i = 0;i < r.length; i++) {
    const o = r[i], { first: s, last: a, point: l } = NA(o, e, "x");
    if (!(!l || s && a)) {
      if (s)
        n.unshift(l);
      else if (t.push(l), !a)
        break;
    }
  }
  t.push(...n);
}
function NA(t, e, r) {
  const n = t.interpolate(e, r);
  if (!n)
    return {};
  const i = n[r], o = t.segments, s = t.points;
  let a = false, l = false;
  for (let c3 = 0;c3 < o.length; c3++) {
    const u = o[c3], f4 = s[u.start][r], d = s[u.end][r];
    if (Wr(i, f4, d)) {
      a = i === f4, l = i === d;
      break;
    }
  }
  return {
    first: a,
    last: l,
    point: n
  };
}

class rg {
  constructor(e) {
    this.x = e.x, this.y = e.y, this.radius = e.radius;
  }
  pathSegment(e, r, n) {
    const { x: i, y: o, radius: s } = this;
    return r = r || {
      start: 0,
      end: ot3
    }, e.arc(i, o, s, r.end, r.start, true), !n.bounds;
  }
  interpolate(e) {
    const { x: r, y: n, radius: i } = this, o = e.angle;
    return {
      x: r + Math.cos(o) * i,
      y: n + Math.sin(o) * i,
      angle: o
    };
  }
}
function LA(t) {
  const { chart: e, fill: r, line: n } = t;
  if (pt3(r))
    return BA(e, r);
  if (r === "stack")
    return RA(t);
  if (r === "shape")
    return true;
  const i = FA(t);
  return i instanceof rg ? i : tg(i, n);
}
function BA(t, e) {
  const r = t.getDatasetMeta(e);
  return r && t.isDatasetVisible(e) ? r.dataset : null;
}
function FA(t) {
  return (t.scale || {}).getPointPositionForValue ? WA(t) : jA(t);
}
function jA(t) {
  const { scale: e = {}, fill: r } = t, n = OA(r, e);
  if (pt3(n)) {
    const i = e.isHorizontal();
    return {
      x: i ? n : null,
      y: i ? null : n
    };
  }
  return null;
}
function WA(t) {
  const { scale: e, fill: r } = t, n = e.options, i = e.getLabels().length, o = n.reverse ? e.max : e.min, s = IA(r, e, o), a = [];
  if (n.grid.circular) {
    const l = e.getPointPositionForValue(0, o);
    return new rg({
      x: l.x,
      y: l.y,
      radius: e.getDistanceFromCenterForValue(s)
    });
  }
  for (let l = 0;l < i; ++l)
    a.push(e.getPointPositionForValue(l, s));
  return a;
}
function ec(t, e, r) {
  const n = LA(e), { line: i, scale: o, axis: s } = e, a = i.options, l = a.fill, c3 = a.backgroundColor, { above: u = c3, below: f4 = c3 } = l || {};
  n && i.points.length && (Ka(t, r), UA(t, {
    line: i,
    target: n,
    above: u,
    below: f4,
    area: r,
    scale: o,
    axis: s
  }), Xa(t));
}
function UA(t, e) {
  const { line: r, target: n, above: i, below: o, area: s, scale: a } = e, l = r._loop ? "angle" : e.axis;
  t.save(), l === "x" && o !== i && (wh(t, n, s.top), xh(t, {
    line: r,
    target: n,
    color: i,
    scale: a,
    property: l
  }), t.restore(), t.save(), wh(t, n, s.bottom)), xh(t, {
    line: r,
    target: n,
    color: o,
    scale: a,
    property: l
  }), t.restore();
}
function wh(t, e, r) {
  const { segments: n, points: i } = e;
  let o = true, s = false;
  t.beginPath();
  for (const a of n) {
    const { start: l, end: c3 } = a, u = i[l], f4 = i[Ju(l, c3, i)];
    o ? (t.moveTo(u.x, u.y), o = false) : (t.lineTo(u.x, r), t.lineTo(u.x, u.y)), s = !!e.pathSegment(t, a, {
      move: s
    }), s ? t.closePath() : t.lineTo(f4.x, r);
  }
  t.lineTo(e.first().x, r), t.closePath(), t.clip();
}
function xh(t, e) {
  const { line: r, target: n, property: i, color: o, scale: s } = e, a = SA(r, n, i);
  for (const { source: l, target: c3, start: u, end: f4 } of a) {
    const { style: { backgroundColor: d = o } = {} } = l, h = n !== true;
    t.save(), t.fillStyle = d, zA(t, s, h && Uc(i, u, f4)), t.beginPath();
    const g3 = !!r.pathSegment(t, l);
    let p;
    if (h) {
      g3 ? t.closePath() : _h(t, n, f4, i);
      const y4 = !!n.pathSegment(t, c3, {
        move: g3,
        reverse: true
      });
      p = g3 && y4, p || _h(t, n, u, i);
    }
    t.closePath(), t.fill(p ? "evenodd" : "nonzero"), t.restore();
  }
}
function zA(t, e, r) {
  const { top: n, bottom: i } = e.chart.chartArea, { property: o, start: s, end: a } = r || {};
  o === "x" && (t.beginPath(), t.rect(s, n, a - s, i - n), t.clip());
}
function _h(t, e, r, n) {
  const i = e.interpolate(r, n);
  i && t.lineTo(i.x, i.y);
}
var VA = {
  id: "filler",
  afterDatasetsUpdate(t, e, r) {
    const n = (t.data.datasets || []).length, i = [];
    let o, s, a, l;
    for (s = 0;s < n; ++s)
      o = t.getDatasetMeta(s), a = o.dataset, l = null, a && a.options && a instanceof nn && (l = {
        visible: t.isDatasetVisible(s),
        index: s,
        fill: CA(a, s, n),
        chart: t,
        axis: o.controller.options.indexAxis,
        scale: o.vScale,
        line: a
      }), o.$filler = l, i.push(l);
    for (s = 0;s < n; ++s)
      l = i[s], !(!l || l.fill === false) && (l.fill = kA(i, s, r.propagate));
  },
  beforeDraw(t, e, r) {
    const n = r.drawTime === "beforeDraw", i = t.getSortedVisibleDatasetMetas(), o = t.chartArea;
    for (let s = i.length - 1;s >= 0; --s) {
      const a = i[s].$filler;
      a && (a.line.updateControlPoints(o, a.axis), n && a.fill && ec(t.ctx, a, o));
    }
  },
  beforeDatasetsDraw(t, e, r) {
    if (r.drawTime !== "beforeDatasetsDraw")
      return;
    const n = t.getSortedVisibleDatasetMetas();
    for (let i = n.length - 1;i >= 0; --i) {
      const o = n[i].$filler;
      Ah(o) && ec(t.ctx, o, t.chartArea);
    }
  },
  beforeDatasetDraw(t, e, r) {
    const n = e.meta.$filler;
    !Ah(n) || r.drawTime !== "beforeDatasetDraw" || ec(t.ctx, n, t.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
var Sh = (t, e) => {
  let { boxHeight: r = e, boxWidth: n = e } = t;
  return t.usePointStyle && (r = Math.min(r, e), n = t.pointStyleWidth || Math.min(n, e)), {
    boxWidth: n,
    boxHeight: r,
    itemHeight: Math.max(e, r)
  };
};
var qA = (t, e) => t !== null && e !== null && t.datasetIndex === e.datasetIndex && t.index === e.index;

class Eh extends Jr {
  constructor(e) {
    super(), this._added = false, this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = false, this.chart = e.chart, this.options = e.options, this.ctx = e.ctx, this.legendItems = undefined, this.columnSizes = undefined, this.lineWidths = undefined, this.maxHeight = undefined, this.maxWidth = undefined, this.top = undefined, this.bottom = undefined, this.left = undefined, this.right = undefined, this.height = undefined, this.width = undefined, this._margins = undefined, this.position = undefined, this.weight = undefined, this.fullSize = undefined;
  }
  update(e, r, n) {
    this.maxWidth = e, this.maxHeight = r, this._margins = n, this.setDimensions(), this.buildLabels(), this.fit();
  }
  setDimensions() {
    this.isHorizontal() ? (this.width = this.maxWidth, this.left = this._margins.left, this.right = this.width) : (this.height = this.maxHeight, this.top = this._margins.top, this.bottom = this.height);
  }
  buildLabels() {
    const e = this.options.labels || {};
    let r = nt3(e.generateLabels, [
      this.chart
    ], this) || [];
    e.filter && (r = r.filter((n) => e.filter(n, this.chart.data))), e.sort && (r = r.sort((n, i) => e.sort(n, i, this.chart.data))), this.options.reverse && r.reverse(), this.legendItems = r;
  }
  fit() {
    const { options: e, ctx: r } = this;
    if (!e.display) {
      this.width = this.height = 0;
      return;
    }
    const n = e.labels, i = vt3(n.font), o = i.size, s = this._computeTitleHeight(), { boxWidth: a, itemHeight: l } = Sh(n, o);
    let c3, u;
    r.font = i.string, this.isHorizontal() ? (c3 = this.maxWidth, u = this._fitRows(s, o, a, l) + 10) : (u = this.maxHeight, c3 = this._fitCols(s, i, a, l) + 10), this.width = Math.min(c3, e.maxWidth || this.maxWidth), this.height = Math.min(u, e.maxHeight || this.maxHeight);
  }
  _fitRows(e, r, n, i) {
    const { ctx: o, maxWidth: s, options: { labels: { padding: a } } } = this, l = this.legendHitBoxes = [], c3 = this.lineWidths = [
      0
    ], u = i + a;
    let f4 = e;
    o.textAlign = "left", o.textBaseline = "middle";
    let d = -1, h = -u;
    return this.legendItems.forEach((g3, p) => {
      const y4 = n + r / 2 + o.measureText(g3.text).width;
      (p === 0 || c3[c3.length - 1] + y4 + 2 * a > s) && (f4 += u, c3[c3.length - (p > 0 ? 0 : 1)] = 0, h += u, d++), l[p] = {
        left: 0,
        top: h,
        row: d,
        width: y4,
        height: i
      }, c3[c3.length - 1] += y4 + a;
    }), f4;
  }
  _fitCols(e, r, n, i) {
    const { ctx: o, maxHeight: s, options: { labels: { padding: a } } } = this, l = this.legendHitBoxes = [], c3 = this.columnSizes = [], u = s - e;
    let f4 = a, d = 0, h = 0, g3 = 0, p = 0;
    return this.legendItems.forEach((y4, b) => {
      const { itemWidth: x, itemHeight: S } = HA(n, r, o, y4, i);
      b > 0 && h + S + 2 * a > u && (f4 += d + a, c3.push({
        width: d,
        height: h
      }), g3 += d + a, p++, d = h = 0), l[b] = {
        left: g3,
        top: h,
        col: p,
        width: x,
        height: S
      }, d = Math.max(d, x), h += S + a;
    }), f4 += d, c3.push({
      width: d,
      height: h
    }), f4;
  }
  adjustHitBoxes() {
    if (!this.options.display)
      return;
    const e = this._computeTitleHeight(), { legendHitBoxes: r, options: { align: n, labels: { padding: i }, rtl: o } } = this, s = bi(o, this.left, this.width);
    if (this.isHorizontal()) {
      let a = 0, l = It3(n, this.left + i, this.right - this.lineWidths[a]);
      for (const c3 of r)
        a !== c3.row && (a = c3.row, l = It3(n, this.left + i, this.right - this.lineWidths[a])), c3.top += this.top + e + i, c3.left = s.leftForLtr(s.x(l), c3.width), l += c3.width + i;
    } else {
      let a = 0, l = It3(n, this.top + e + i, this.bottom - this.columnSizes[a].height);
      for (const c3 of r)
        c3.col !== a && (a = c3.col, l = It3(n, this.top + e + i, this.bottom - this.columnSizes[a].height)), c3.top = l, c3.left += this.left + i, c3.left = s.leftForLtr(s.x(c3.left), c3.width), l += c3.height + i;
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const e = this.ctx;
      Ka(e, this), this._draw(), Xa(e);
    }
  }
  _draw() {
    const { options: e, columnSizes: r, lineWidths: n, ctx: i } = this, { align: o, labels: s } = e, a = gt3.color, l = bi(e.rtl, this.left, this.width), c3 = vt3(s.font), { padding: u } = s, f4 = c3.size, d = f4 / 2;
    let h;
    this.drawTitle(), i.textAlign = l.textAlign("left"), i.textBaseline = "middle", i.lineWidth = 0.5, i.font = c3.string;
    const { boxWidth: g3, boxHeight: p, itemHeight: y4 } = Sh(s, f4), b = function(L, N4, j) {
      if (isNaN(g3) || g3 <= 0 || isNaN(p) || p < 0)
        return;
      i.save();
      const W = Oe(j.lineWidth, 1);
      if (i.fillStyle = Oe(j.fillStyle, a), i.lineCap = Oe(j.lineCap, "butt"), i.lineDashOffset = Oe(j.lineDashOffset, 0), i.lineJoin = Oe(j.lineJoin, "miter"), i.lineWidth = W, i.strokeStyle = Oe(j.strokeStyle, a), i.setLineDash(Oe(j.lineDash, [])), s.usePointStyle) {
        const G = {
          radius: p * Math.SQRT2 / 2,
          pointStyle: j.pointStyle,
          rotation: j.rotation,
          borderWidth: W
        }, ee = l.xPlus(L, g3 / 2), fe = N4 + d;
        _12(i, G, ee, fe, s.pointStyleWidth && g3);
      } else {
        const G = N4 + Math.max((f4 - p) / 2, 0), ee = l.leftForLtr(L, g3), fe = Fn3(j.borderRadius);
        i.beginPath(), Object.values(fe).some((P) => P !== 0) ? Ro(i, {
          x: ee,
          y: G,
          w: g3,
          h: p,
          radius: fe
        }) : i.rect(ee, G, g3, p), i.fill(), W !== 0 && i.stroke();
      }
      i.restore();
    }, x = function(L, N4, j) {
      Kn3(i, j.text, L, N4 + y4 / 2, c3, {
        strikethrough: j.hidden,
        textAlign: l.textAlign(j.textAlign)
      });
    }, S = this.isHorizontal(), O = this._computeTitleHeight();
    S ? h = {
      x: It3(o, this.left + u, this.right - n[0]),
      y: this.top + u + O,
      line: 0
    } : h = {
      x: this.left + u,
      y: It3(o, this.top + O + u, this.bottom - r[0].height),
      line: 0
    }, R1(this.ctx, e.textDirection);
    const _ = y4 + u;
    this.legendItems.forEach((L, N4) => {
      i.strokeStyle = L.fontColor, i.fillStyle = L.fontColor;
      const j = i.measureText(L.text).width, W = l.textAlign(L.textAlign || (L.textAlign = s.textAlign)), G = g3 + d + j;
      let { x: ee, y: fe } = h;
      l.setWidth(this.width), S ? N4 > 0 && ee + G + u > this.right && (fe = h.y += _, h.line++, ee = h.x = It3(o, this.left + u, this.right - n[h.line])) : N4 > 0 && fe + _ > this.bottom && (ee = h.x = ee + r[h.line].width + u, h.line++, fe = h.y = It3(o, this.top + O + u, this.bottom - r[h.line].height));
      const P = l.x(ee);
      if (b(P, fe, L), ee = d2(W, ee + g3 + d, S ? ee + G : this.right, e.rtl), x(l.x(ee), fe, L), S)
        h.x += G + u;
      else if (typeof L.text != "string") {
        const z = c3.lineHeight;
        h.y += ng(L, z) + u;
      } else
        h.y += _;
    }), D1(this.ctx, e.textDirection);
  }
  drawTitle() {
    const e = this.options, r = e.title, n = vt3(r.font), i = Mt3(r.padding);
    if (!r.display)
      return;
    const o = bi(e.rtl, this.left, this.width), s = this.ctx, a = r.position, l = n.size / 2, c3 = i.top + l;
    let u, f4 = this.left, d = this.width;
    if (this.isHorizontal())
      d = Math.max(...this.lineWidths), u = this.top + c3, f4 = It3(e.align, f4, this.right - d);
    else {
      const g3 = this.columnSizes.reduce((p, y4) => Math.max(p, y4.height), 0);
      u = c3 + It3(e.align, this.top, this.bottom - g3 - e.labels.padding - this._computeTitleHeight());
    }
    const h = It3(a, f4, f4 + d);
    s.textAlign = o.textAlign(Uu(a)), s.textBaseline = "middle", s.strokeStyle = r.color, s.fillStyle = r.color, s.font = n.string, Kn3(s, r.text, h, u, n);
  }
  _computeTitleHeight() {
    const e = this.options.title, r = vt3(e.font), n = Mt3(e.padding);
    return e.display ? r.lineHeight + n.height : 0;
  }
  _getLegendItemAt(e, r) {
    let n, i, o;
    if (Wr(e, this.left, this.right) && Wr(r, this.top, this.bottom)) {
      for (o = this.legendHitBoxes, n = 0;n < o.length; ++n)
        if (i = o[n], Wr(e, i.left, i.left + i.width) && Wr(r, i.top, i.top + i.height))
          return this.legendItems[n];
    }
    return null;
  }
  handleEvent(e) {
    const r = this.options;
    if (!XA(e.type, r))
      return;
    const n = this._getLegendItemAt(e.x, e.y);
    if (e.type === "mousemove" || e.type === "mouseout") {
      const i = this._hoveredItem, o = qA(i, n);
      i && !o && nt3(r.onLeave, [
        e,
        i,
        this
      ], this), this._hoveredItem = n, n && !o && nt3(r.onHover, [
        e,
        n,
        this
      ], this);
    } else
      n && nt3(r.onClick, [
        e,
        n,
        this
      ], this);
  }
}
function HA(t, e, r, n, i) {
  const o = YA(n, t, e, r), s = KA(i, n, e.lineHeight);
  return {
    itemWidth: o,
    itemHeight: s
  };
}
function YA(t, e, r, n) {
  let i = t.text;
  return i && typeof i != "string" && (i = i.reduce((o, s) => o.length > s.length ? o : s)), e + r.size / 2 + n.measureText(i).width;
}
function KA(t, e, r) {
  let n = t;
  return typeof e.text != "string" && (n = ng(e, r)), n;
}
function ng(t, e) {
  const r = t.text ? t.text.length : 0;
  return e * r;
}
function XA(t, e) {
  return !!((t === "mousemove" || t === "mouseout") && (e.onHover || e.onLeave) || e.onClick && (t === "click" || t === "mouseup"));
}
var JA = {
  id: "legend",
  _element: Eh,
  start(t, e, r) {
    const n = t.legend = new Eh({
      ctx: t.ctx,
      options: r,
      chart: t
    });
    Rt3.configure(t, n, r), Rt3.addBox(t, n);
  },
  stop(t) {
    Rt3.removeBox(t, t.legend), delete t.legend;
  },
  beforeUpdate(t, e, r) {
    const n = t.legend;
    Rt3.configure(t, n, r), n.options = r;
  },
  afterUpdate(t) {
    const e = t.legend;
    e.buildLabels(), e.adjustHitBoxes();
  },
  afterEvent(t, e) {
    e.replay || t.legend.handleEvent(e.event);
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1000,
    onClick(t, e, r) {
      const n = e.datasetIndex, i = r.chart;
      i.isDatasetVisible(n) ? (i.hide(n), e.hidden = true) : (i.show(n), e.hidden = false);
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (t) => t.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(t) {
        const e = t.data.datasets, { labels: { usePointStyle: r, pointStyle: n, textAlign: i, color: o, useBorderRadius: s, borderRadius: a } } = t.legend.options;
        return t._getSortedDatasetMetas().map((l) => {
          const c3 = l.controller.getStyle(r ? 0 : undefined), u = Mt3(c3.borderWidth);
          return {
            text: e[l.index].label,
            fillStyle: c3.backgroundColor,
            fontColor: o,
            hidden: !l.visible,
            lineCap: c3.borderCapStyle,
            lineDash: c3.borderDash,
            lineDashOffset: c3.borderDashOffset,
            lineJoin: c3.borderJoinStyle,
            lineWidth: (u.width + u.height) / 4,
            strokeStyle: c3.borderColor,
            pointStyle: n || c3.pointStyle,
            rotation: c3.rotation,
            textAlign: i || c3.textAlign,
            borderRadius: s && (a || c3.borderRadius),
            datasetIndex: l.index
          };
        }, this);
      }
    },
    title: {
      color: (t) => t.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (t) => !t.startsWith("on"),
    labels: {
      _scriptable: (t) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(t)
    }
  }
};

class Qu extends Jr {
  constructor(e) {
    super(), this.chart = e.chart, this.options = e.options, this.ctx = e.ctx, this._padding = undefined, this.top = undefined, this.bottom = undefined, this.left = undefined, this.right = undefined, this.width = undefined, this.height = undefined, this.position = undefined, this.weight = undefined, this.fullSize = undefined;
  }
  update(e, r) {
    const n = this.options;
    if (this.left = 0, this.top = 0, !n.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = e, this.height = this.bottom = r;
    const i = it3(n.text) ? n.text.length : 1;
    this._padding = Mt3(n.padding);
    const o = i * vt3(n.font).lineHeight + this._padding.height;
    this.isHorizontal() ? this.height = o : this.width = o;
  }
  isHorizontal() {
    const e = this.options.position;
    return e === "top" || e === "bottom";
  }
  _drawArgs(e) {
    const { top: r, left: n, bottom: i, right: o, options: s } = this, a = s.align;
    let l = 0, c3, u, f4;
    return this.isHorizontal() ? (u = It3(a, n, o), f4 = r + e, c3 = o - n) : (s.position === "left" ? (u = n + e, f4 = It3(a, i, r), l = st3 * -0.5) : (u = o - e, f4 = It3(a, r, i), l = st3 * 0.5), c3 = i - r), {
      titleX: u,
      titleY: f4,
      maxWidth: c3,
      rotation: l
    };
  }
  draw() {
    const e = this.ctx, r = this.options;
    if (!r.display)
      return;
    const n = vt3(r.font), o = n.lineHeight / 2 + this._padding.top, { titleX: s, titleY: a, maxWidth: l, rotation: c3 } = this._drawArgs(o);
    Kn3(e, r.text, 0, 0, n, {
      color: r.color,
      maxWidth: l,
      rotation: c3,
      textAlign: Uu(r.align),
      textBaseline: "middle",
      translation: [
        s,
        a
      ]
    });
  }
}
function QA(t, e) {
  const r = new Qu({
    ctx: t.ctx,
    options: e,
    chart: t
  });
  Rt3.configure(t, r, e), Rt3.addBox(t, r), t.titleBlock = r;
}
var GA = {
  id: "title",
  _element: Qu,
  start(t, e, r) {
    QA(t, r);
  },
  stop(t) {
    const e = t.titleBlock;
    Rt3.removeBox(t, e), delete t.titleBlock;
  },
  beforeUpdate(t, e, r) {
    const n = t.titleBlock;
    Rt3.configure(t, n, r), n.options = r;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2000
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
var Cs = /* @__PURE__ */ new WeakMap;
var ZA = {
  id: "subtitle",
  start(t, e, r) {
    const n = new Qu({
      ctx: t.ctx,
      options: r,
      chart: t
    });
    Rt3.configure(t, n, r), Rt3.addBox(t, n), Cs.set(t, n);
  },
  stop(t) {
    Rt3.removeBox(t, Cs.get(t)), Cs.delete(t);
  },
  beforeUpdate(t, e, r) {
    const n = Cs.get(t);
    Rt3.configure(t, n, r), n.options = r;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "normal"
    },
    fullSize: true,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
var lo = {
  average(t) {
    if (!t.length)
      return false;
    let e, r, n = 0, i = 0, o = 0;
    for (e = 0, r = t.length;e < r; ++e) {
      const s = t[e].element;
      if (s && s.hasValue()) {
        const a = s.tooltipPosition();
        n += a.x, i += a.y, ++o;
      }
    }
    return {
      x: n / o,
      y: i / o
    };
  },
  nearest(t, e) {
    if (!t.length)
      return false;
    let { x: r, y: n } = e, i = Number.POSITIVE_INFINITY, o, s, a;
    for (o = 0, s = t.length;o < s; ++o) {
      const l = t[o].element;
      if (l && l.hasValue()) {
        const c3 = l.getCenterPoint(), u = Dc(e, c3);
        u < i && (i = u, a = l);
      }
    }
    if (a) {
      const l = a.tooltipPosition();
      r = l.x, n = l.y;
    }
    return {
      x: r,
      y: n
    };
  }
};
function vr(t, e) {
  return e && (it3(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;
}
function Mr(t) {
  return (typeof t == "string" || t instanceof String) && t.indexOf(`
`) > -1 ? t.split(`
`) : t;
}
function $A(t, e) {
  const { element: r, datasetIndex: n, index: i } = e, o = t.getDatasetMeta(n).controller, { label: s, value: a } = o.getLabelAndValue(i);
  return {
    chart: t,
    label: s,
    parsed: o.getParsed(i),
    raw: t.data.datasets[n].data[i],
    formattedValue: a,
    dataset: o.getDataset(),
    dataIndex: i,
    datasetIndex: n,
    element: r
  };
}
function kh(t, e) {
  const r = t.chart.ctx, { body: n, footer: i, title: o } = t, { boxWidth: s, boxHeight: a } = e, l = vt3(e.bodyFont), c3 = vt3(e.titleFont), u = vt3(e.footerFont), f4 = o.length, d = i.length, h = n.length, g3 = Mt3(e.padding);
  let p = g3.height, y4 = 0, b = n.reduce((O, _) => O + _.before.length + _.lines.length + _.after.length, 0);
  if (b += t.beforeBody.length + t.afterBody.length, f4 && (p += f4 * c3.lineHeight + (f4 - 1) * e.titleSpacing + e.titleMarginBottom), b) {
    const O = e.displayColors ? Math.max(a, l.lineHeight) : l.lineHeight;
    p += h * O + (b - h) * l.lineHeight + (b - 1) * e.bodySpacing;
  }
  d && (p += e.footerMarginTop + d * u.lineHeight + (d - 1) * e.footerSpacing);
  let x = 0;
  const S = function(O) {
    y4 = Math.max(y4, r.measureText(O).width + x);
  };
  return r.save(), r.font = c3.string, $e(t.title, S), r.font = l.string, $e(t.beforeBody.concat(t.afterBody), S), x = e.displayColors ? s + 2 + e.boxPadding : 0, $e(n, (O) => {
    $e(O.before, S), $e(O.lines, S), $e(O.after, S);
  }), x = 0, r.font = u.string, $e(t.footer, S), r.restore(), y4 += g3.width, {
    width: y4,
    height: p
  };
}
function e5(t, e) {
  const { y: r, height: n } = e;
  return r < n / 2 ? "top" : r > t.height - n / 2 ? "bottom" : "center";
}
function t5(t, e, r, n) {
  const { x: i, width: o } = n, s = r.caretSize + r.caretPadding;
  if (t === "left" && i + o + s > e.width || t === "right" && i - o - s < 0)
    return true;
}
function r5(t, e, r, n) {
  const { x: i, width: o } = r, { width: s, chartArea: { left: a, right: l } } = t;
  let c3 = "center";
  return n === "center" ? c3 = i <= (a + l) / 2 ? "left" : "right" : i <= o / 2 ? c3 = "left" : i >= s - o / 2 && (c3 = "right"), t5(c3, t, e, r) && (c3 = "center"), c3;
}
function Ch(t, e, r) {
  const n = r.yAlign || e.yAlign || e5(t, r);
  return {
    xAlign: r.xAlign || e.xAlign || r5(t, e, r, n),
    yAlign: n
  };
}
function n5(t, e) {
  let { x: r, width: n } = t;
  return e === "right" ? r -= n : e === "center" && (r -= n / 2), r;
}
function i5(t, e, r) {
  let { y: n, height: i } = t;
  return e === "top" ? n += r : e === "bottom" ? n -= i + r : n -= i / 2, n;
}
function Th(t, e, r, n) {
  const { caretSize: i, caretPadding: o, cornerRadius: s } = t, { xAlign: a, yAlign: l } = r, c3 = i + o, { topLeft: u, topRight: f4, bottomLeft: d, bottomRight: h } = Fn3(s);
  let g3 = n5(e, a);
  const p = i5(e, l, c3);
  return l === "center" ? a === "left" ? g3 += c3 : a === "right" && (g3 -= c3) : a === "left" ? g3 -= Math.max(u, d) + i : a === "right" && (g3 += Math.max(f4, h) + i), {
    x: St3(g3, 0, n.width - e.width),
    y: St3(p, 0, n.height - e.height)
  };
}
function Ts(t, e, r) {
  const n = Mt3(r.padding);
  return e === "center" ? t.x + t.width / 2 : e === "right" ? t.x + t.width - n.right : t.x + n.left;
}
function Oh(t) {
  return vr([], Mr(t));
}
function o5(t, e, r) {
  return vn3(t, {
    tooltip: e,
    tooltipItems: r,
    type: "tooltip"
  });
}
function Ih(t, e) {
  const r = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;
  return r ? t.override(r) : t;
}
var ig = {
  beforeTitle: Pr,
  title(t) {
    if (t.length > 0) {
      const e = t[0], r = e.chart.data.labels, n = r ? r.length : 0;
      if (this && this.options && this.options.mode === "dataset")
        return e.dataset.label || "";
      if (e.label)
        return e.label;
      if (n > 0 && e.dataIndex < n)
        return r[e.dataIndex];
    }
    return "";
  },
  afterTitle: Pr,
  beforeBody: Pr,
  beforeLabel: Pr,
  label(t) {
    if (this && this.options && this.options.mode === "dataset")
      return t.label + ": " + t.formattedValue || t.formattedValue;
    let e = t.dataset.label || "";
    e && (e += ": ");
    const r = t.formattedValue;
    return We(r) || (e += r), e;
  },
  labelColor(t) {
    const r = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);
    return {
      borderColor: r.borderColor,
      backgroundColor: r.backgroundColor,
      borderWidth: r.borderWidth,
      borderDash: r.borderDash,
      borderDashOffset: r.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(t) {
    const r = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);
    return {
      pointStyle: r.pointStyle,
      rotation: r.rotation
    };
  },
  afterLabel: Pr,
  afterBody: Pr,
  beforeFooter: Pr,
  footer: Pr,
  afterFooter: Pr
};
function Bt3(t, e, r, n) {
  const i = t[e].call(r, n);
  return typeof i > "u" ? ig[e].call(r, n) : i;
}
var xc;
var Ph = (xc = class extends Jr {
  constructor(e) {
    super(), this.opacity = 0, this._active = [], this._eventPosition = undefined, this._size = undefined, this._cachedAnimations = undefined, this._tooltipItems = [], this.$animations = undefined, this.$context = undefined, this.chart = e.chart, this.options = e.options, this.dataPoints = undefined, this.title = undefined, this.beforeBody = undefined, this.body = undefined, this.afterBody = undefined, this.footer = undefined, this.xAlign = undefined, this.yAlign = undefined, this.x = undefined, this.y = undefined, this.height = undefined, this.width = undefined, this.caretX = undefined, this.caretY = undefined, this.labelColors = undefined, this.labelPointStyles = undefined, this.labelTextColors = undefined;
  }
  initialize(e) {
    this.options = e, this._cachedAnimations = undefined, this.$context = undefined;
  }
  _resolveAnimations() {
    const e = this._cachedAnimations;
    if (e)
      return e;
    const r = this.chart, n = this.options.setContext(this.getContext()), i = n.enabled && r.options.animation && n.animations, o = new B12(this.chart, i);
    return i._cacheable && (this._cachedAnimations = Object.freeze(o)), o;
  }
  getContext() {
    return this.$context || (this.$context = o5(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(e, r) {
    const { callbacks: n } = r, i = Bt3(n, "beforeTitle", this, e), o = Bt3(n, "title", this, e), s = Bt3(n, "afterTitle", this, e);
    let a = [];
    return a = vr(a, Mr(i)), a = vr(a, Mr(o)), a = vr(a, Mr(s)), a;
  }
  getBeforeBody(e, r) {
    return Oh(Bt3(r.callbacks, "beforeBody", this, e));
  }
  getBody(e, r) {
    const { callbacks: n } = r, i = [];
    return $e(e, (o) => {
      const s = {
        before: [],
        lines: [],
        after: []
      }, a = Ih(n, o);
      vr(s.before, Mr(Bt3(a, "beforeLabel", this, o))), vr(s.lines, Bt3(a, "label", this, o)), vr(s.after, Mr(Bt3(a, "afterLabel", this, o))), i.push(s);
    }), i;
  }
  getAfterBody(e, r) {
    return Oh(Bt3(r.callbacks, "afterBody", this, e));
  }
  getFooter(e, r) {
    const { callbacks: n } = r, i = Bt3(n, "beforeFooter", this, e), o = Bt3(n, "footer", this, e), s = Bt3(n, "afterFooter", this, e);
    let a = [];
    return a = vr(a, Mr(i)), a = vr(a, Mr(o)), a = vr(a, Mr(s)), a;
  }
  _createItems(e) {
    const r = this._active, n = this.chart.data, i = [], o = [], s = [];
    let a = [], l, c3;
    for (l = 0, c3 = r.length;l < c3; ++l)
      a.push($A(this.chart, r[l]));
    return e.filter && (a = a.filter((u, f4, d) => e.filter(u, f4, d, n))), e.itemSort && (a = a.sort((u, f4) => e.itemSort(u, f4, n))), $e(a, (u) => {
      const f4 = Ih(e.callbacks, u);
      i.push(Bt3(f4, "labelColor", this, u)), o.push(Bt3(f4, "labelPointStyle", this, u)), s.push(Bt3(f4, "labelTextColor", this, u));
    }), this.labelColors = i, this.labelPointStyles = o, this.labelTextColors = s, this.dataPoints = a, a;
  }
  update(e, r) {
    const n = this.options.setContext(this.getContext()), i = this._active;
    let o, s = [];
    if (!i.length)
      this.opacity !== 0 && (o = {
        opacity: 0
      });
    else {
      const a = lo[n.position].call(this, i, this._eventPosition);
      s = this._createItems(n), this.title = this.getTitle(s, n), this.beforeBody = this.getBeforeBody(s, n), this.body = this.getBody(s, n), this.afterBody = this.getAfterBody(s, n), this.footer = this.getFooter(s, n);
      const l = this._size = kh(this, n), c3 = Object.assign({}, a, l), u = Ch(this.chart, n, c3), f4 = Th(n, c3, u, this.chart);
      this.xAlign = u.xAlign, this.yAlign = u.yAlign, o = {
        opacity: 1,
        x: f4.x,
        y: f4.y,
        width: l.width,
        height: l.height,
        caretX: a.x,
        caretY: a.y
      };
    }
    this._tooltipItems = s, this.$context = undefined, o && this._resolveAnimations().update(this, o), e && n.external && n.external.call(this, {
      chart: this.chart,
      tooltip: this,
      replay: r
    });
  }
  drawCaret(e, r, n, i) {
    const o = this.getCaretPosition(e, n, i);
    r.lineTo(o.x1, o.y1), r.lineTo(o.x2, o.y2), r.lineTo(o.x3, o.y3);
  }
  getCaretPosition(e, r, n) {
    const { xAlign: i, yAlign: o } = this, { caretSize: s, cornerRadius: a } = n, { topLeft: l, topRight: c3, bottomLeft: u, bottomRight: f4 } = Fn3(a), { x: d, y: h } = e, { width: g3, height: p } = r;
    let y4, b, x, S, O, _;
    return o === "center" ? (O = h + p / 2, i === "left" ? (y4 = d, b = y4 - s, S = O + s, _ = O - s) : (y4 = d + g3, b = y4 + s, S = O - s, _ = O + s), x = y4) : (i === "left" ? b = d + Math.max(l, u) + s : i === "right" ? b = d + g3 - Math.max(c3, f4) - s : b = this.caretX, o === "top" ? (S = h, O = S - s, y4 = b - s, x = b + s) : (S = h + p, O = S + s, y4 = b + s, x = b - s), _ = S), {
      x1: y4,
      x2: b,
      x3: x,
      y1: S,
      y2: O,
      y3: _
    };
  }
  drawTitle(e, r, n) {
    const i = this.title, o = i.length;
    let s, a, l;
    if (o) {
      const c3 = bi(n.rtl, this.x, this.width);
      for (e.x = Ts(this, n.titleAlign, n), r.textAlign = c3.textAlign(n.titleAlign), r.textBaseline = "middle", s = vt3(n.titleFont), a = n.titleSpacing, r.fillStyle = n.titleColor, r.font = s.string, l = 0;l < o; ++l)
        r.fillText(i[l], c3.x(e.x), e.y + s.lineHeight / 2), e.y += s.lineHeight + a, l + 1 === o && (e.y += n.titleMarginBottom - a);
    }
  }
  _drawColorBox(e, r, n, i, o) {
    const s = this.labelColors[n], a = this.labelPointStyles[n], { boxHeight: l, boxWidth: c3 } = o, u = vt3(o.bodyFont), f4 = Ts(this, "left", o), d = i.x(f4), h = l < u.lineHeight ? (u.lineHeight - l) / 2 : 0, g3 = r.y + h;
    if (o.usePointStyle) {
      const p = {
        radius: Math.min(c3, l) / 2,
        pointStyle: a.pointStyle,
        rotation: a.rotation,
        borderWidth: 1
      }, y4 = i.leftForLtr(d, c3) + c3 / 2, b = g3 + l / 2;
      e.strokeStyle = o.multiKeyBackground, e.fillStyle = o.multiKeyBackground, Nc(e, p, y4, b), e.strokeStyle = s.borderColor, e.fillStyle = s.backgroundColor, Nc(e, p, y4, b);
    } else {
      e.lineWidth = Le(s.borderWidth) ? Math.max(...Object.values(s.borderWidth)) : s.borderWidth || 1, e.strokeStyle = s.borderColor, e.setLineDash(s.borderDash || []), e.lineDashOffset = s.borderDashOffset || 0;
      const p = i.leftForLtr(d, c3), y4 = i.leftForLtr(i.xPlus(d, 1), c3 - 2), b = Fn3(s.borderRadius);
      Object.values(b).some((x) => x !== 0) ? (e.beginPath(), e.fillStyle = o.multiKeyBackground, Ro(e, {
        x: p,
        y: g3,
        w: c3,
        h: l,
        radius: b
      }), e.fill(), e.stroke(), e.fillStyle = s.backgroundColor, e.beginPath(), Ro(e, {
        x: y4,
        y: g3 + 1,
        w: c3 - 2,
        h: l - 2,
        radius: b
      }), e.fill()) : (e.fillStyle = o.multiKeyBackground, e.fillRect(p, g3, c3, l), e.strokeRect(p, g3, c3, l), e.fillStyle = s.backgroundColor, e.fillRect(y4, g3 + 1, c3 - 2, l - 2));
    }
    e.fillStyle = this.labelTextColors[n];
  }
  drawBody(e, r, n) {
    const { body: i } = this, { bodySpacing: o, bodyAlign: s, displayColors: a, boxHeight: l, boxWidth: c3, boxPadding: u } = n, f4 = vt3(n.bodyFont);
    let d = f4.lineHeight, h = 0;
    const g3 = bi(n.rtl, this.x, this.width), p = function(j) {
      r.fillText(j, g3.x(e.x + h), e.y + d / 2), e.y += d + o;
    }, y4 = g3.textAlign(s);
    let b, x, S, O, _, L, N4;
    for (r.textAlign = s, r.textBaseline = "middle", r.font = f4.string, e.x = Ts(this, y4, n), r.fillStyle = n.bodyColor, $e(this.beforeBody, p), h = a && y4 !== "right" ? s === "center" ? c3 / 2 + u : c3 + 2 + u : 0, O = 0, L = i.length;O < L; ++O) {
      for (b = i[O], x = this.labelTextColors[O], r.fillStyle = x, $e(b.before, p), S = b.lines, a && S.length && (this._drawColorBox(r, e, O, g3, n), d = Math.max(f4.lineHeight, l)), _ = 0, N4 = S.length;_ < N4; ++_)
        p(S[_]), d = f4.lineHeight;
      $e(b.after, p);
    }
    h = 0, d = f4.lineHeight, $e(this.afterBody, p), e.y -= o;
  }
  drawFooter(e, r, n) {
    const i = this.footer, o = i.length;
    let s, a;
    if (o) {
      const l = bi(n.rtl, this.x, this.width);
      for (e.x = Ts(this, n.footerAlign, n), e.y += n.footerMarginTop, r.textAlign = l.textAlign(n.footerAlign), r.textBaseline = "middle", s = vt3(n.footerFont), r.fillStyle = n.footerColor, r.font = s.string, a = 0;a < o; ++a)
        r.fillText(i[a], l.x(e.x), e.y + s.lineHeight / 2), e.y += s.lineHeight + n.footerSpacing;
    }
  }
  drawBackground(e, r, n, i) {
    const { xAlign: o, yAlign: s } = this, { x: a, y: l } = e, { width: c3, height: u } = n, { topLeft: f4, topRight: d, bottomLeft: h, bottomRight: g3 } = Fn3(i.cornerRadius);
    r.fillStyle = i.backgroundColor, r.strokeStyle = i.borderColor, r.lineWidth = i.borderWidth, r.beginPath(), r.moveTo(a + f4, l), s === "top" && this.drawCaret(e, r, n, i), r.lineTo(a + c3 - d, l), r.quadraticCurveTo(a + c3, l, a + c3, l + d), s === "center" && o === "right" && this.drawCaret(e, r, n, i), r.lineTo(a + c3, l + u - g3), r.quadraticCurveTo(a + c3, l + u, a + c3 - g3, l + u), s === "bottom" && this.drawCaret(e, r, n, i), r.lineTo(a + h, l + u), r.quadraticCurveTo(a, l + u, a, l + u - h), s === "center" && o === "left" && this.drawCaret(e, r, n, i), r.lineTo(a, l + f4), r.quadraticCurveTo(a, l, a + f4, l), r.closePath(), r.fill(), i.borderWidth > 0 && r.stroke();
  }
  _updateAnimationTarget(e) {
    const r = this.chart, n = this.$animations, i = n && n.x, o = n && n.y;
    if (i || o) {
      const s = lo[e.position].call(this, this._active, this._eventPosition);
      if (!s)
        return;
      const a = this._size = kh(this, e), l = Object.assign({}, s, this._size), c3 = Ch(r, e, l), u = Th(e, l, c3, r);
      (i._to !== u.x || o._to !== u.y) && (this.xAlign = c3.xAlign, this.yAlign = c3.yAlign, this.width = a.width, this.height = a.height, this.caretX = s.x, this.caretY = s.y, this._resolveAnimations().update(this, u));
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(e) {
    const r = this.options.setContext(this.getContext());
    let n = this.opacity;
    if (!n)
      return;
    this._updateAnimationTarget(r);
    const i = {
      width: this.width,
      height: this.height
    }, o = {
      x: this.x,
      y: this.y
    };
    n = Math.abs(n) < 0.001 ? 0 : n;
    const s = Mt3(r.padding), a = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    r.enabled && a && (e.save(), e.globalAlpha = n, this.drawBackground(o, e, i, r), R1(e, r.textDirection), o.y += s.top, this.drawTitle(o, e, r), this.drawBody(o, e, r), this.drawFooter(o, e, r), D1(e, r.textDirection), e.restore());
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(e, r) {
    const n = this._active, i = e.map(({ datasetIndex: a, index: l }) => {
      const c3 = this.chart.getDatasetMeta(a);
      if (!c3)
        throw new Error("Cannot find a dataset at index " + a);
      return {
        datasetIndex: a,
        element: c3.data[l],
        index: l
      };
    }), o = !ga(n, i), s = this._positionChanged(i, r);
    (o || s) && (this._active = i, this._eventPosition = r, this._ignoreReplayEvents = true, this.update(true));
  }
  handleEvent(e, r, n = true) {
    if (r && this._ignoreReplayEvents)
      return false;
    this._ignoreReplayEvents = false;
    const i = this.options, o = this._active || [], s = this._getActiveElements(e, o, r, n), a = this._positionChanged(s, e), l = r || !ga(s, o) || a;
    return l && (this._active = s, (i.enabled || i.external) && (this._eventPosition = {
      x: e.x,
      y: e.y
    }, this.update(true, r))), l;
  }
  _getActiveElements(e, r, n, i) {
    const o = this.options;
    if (e.type === "mouseout")
      return [];
    if (!i)
      return r;
    const s = this.chart.getElementsAtEventForMode(e, o.mode, o, n);
    return o.reverse && s.reverse(), s;
  }
  _positionChanged(e, r) {
    const { caretX: n, caretY: i, options: o } = this, s = lo[o.position].call(this, e, r);
    return s !== false && (n !== s.x || i !== s.y);
  }
}, ye(xc, "positioners", lo), xc);
var s5 = {
  id: "tooltip",
  _element: Ph,
  positioners: lo,
  afterInit(t, e, r) {
    r && (t.tooltip = new Ph({
      chart: t,
      options: r
    }));
  },
  beforeUpdate(t, e, r) {
    t.tooltip && t.tooltip.initialize(r);
  },
  reset(t, e, r) {
    t.tooltip && t.tooltip.initialize(r);
  },
  afterDraw(t) {
    const e = t.tooltip;
    if (e && e._willRender()) {
      const r = {
        tooltip: e
      };
      if (t.notifyPlugins("beforeTooltipDraw", {
        ...r,
        cancelable: true
      }) === false)
        return;
      e.draw(t.ctx), t.notifyPlugins("afterTooltipDraw", r);
    }
  },
  afterEvent(t, e) {
    if (t.tooltip) {
      const r = e.replay;
      t.tooltip.handleEvent(e.event, r, e.inChartArea) && (e.changed = true);
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (t, e) => e.bodyFont.size,
    boxWidth: (t, e) => e.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: ig
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (t) => t !== "filter" && t !== "itemSort" && t !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
var a5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Colors: vA,
  Decimation: _A,
  Filler: VA,
  Legend: JA,
  SubTitle: ZA,
  Title: GA,
  Tooltip: s5
});
var l5 = (t, e, r, n) => (typeof e == "string" ? (r = t.push(e) - 1, n.unshift({
  index: r,
  label: e
})) : isNaN(e) && (r = null), r);
function c5(t, e, r, n) {
  const i = t.indexOf(e);
  if (i === -1)
    return l5(t, e, r, n);
  const o = t.lastIndexOf(e);
  return i !== o ? r : i;
}
var u5 = (t, e) => t === null ? null : St3(Math.round(t), 0, e);
function Rh(t) {
  const e = this.getLabels();
  return t >= 0 && t < e.length ? e[t] : t;
}

class zc extends Zn3 {
  constructor(e) {
    super(e), this._startValue = undefined, this._valueRange = 0, this._addedLabels = [];
  }
  init(e) {
    const r = this._addedLabels;
    if (r.length) {
      const n = this.getLabels();
      for (const { index: i, label: o } of r)
        n[i] === o && n.splice(i, 1);
      this._addedLabels = [];
    }
    super.init(e);
  }
  parse(e, r) {
    if (We(e))
      return null;
    const n = this.getLabels();
    return r = isFinite(r) && n[r] === e ? r : c5(n, e, Oe(r, e), this._addedLabels), u5(r, n.length - 1);
  }
  determineDataLimits() {
    const { minDefined: e, maxDefined: r } = this.getUserBounds();
    let { min: n, max: i } = this.getMinMax(true);
    this.options.bounds === "ticks" && (e || (n = 0), r || (i = this.getLabels().length - 1)), this.min = n, this.max = i;
  }
  buildTicks() {
    const e = this.min, r = this.max, n = this.options.offset, i = [];
    let o = this.getLabels();
    o = e === 0 && r === o.length - 1 ? o : o.slice(e, r + 1), this._valueRange = Math.max(o.length - (n ? 0 : 1), 1), this._startValue = this.min - (n ? 0.5 : 0);
    for (let s = e;s <= r; s++)
      i.push({
        value: s
      });
    return i;
  }
  getLabelForValue(e) {
    return Rh.call(this, e);
  }
  configure() {
    super.configure(), this.isHorizontal() || (this._reversePixels = !this._reversePixels);
  }
  getPixelForValue(e) {
    return typeof e != "number" && (e = this.parse(e)), e === null ? NaN : this.getPixelForDecimal((e - this._startValue) / this._valueRange);
  }
  getPixelForTick(e) {
    const r = this.ticks;
    return e < 0 || e > r.length - 1 ? null : this.getPixelForValue(r[e].value);
  }
  getValueForPixel(e) {
    return Math.round(this._startValue + this.getDecimalForPixel(e) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
ye(zc, "id", "category"), ye(zc, "defaults", {
  ticks: {
    callback: Rh
  }
});
function f5(t, e) {
  const r = [], { bounds: i, step: o, min: s, max: a, precision: l, count: c3, maxTicks: u, maxDigits: f4, includeBounds: d } = t, h = o || 1, g3 = u - 1, { min: p, max: y4 } = e, b = !We(s), x = !We(a), S = !We(c3), O = (y4 - p) / (f4 + 1);
  let _ = Ed((y4 - p) / g3 / h) * h, L, N4, j, W;
  if (_ < 0.00000000000001 && !b && !x)
    return [
      {
        value: p
      },
      {
        value: y4
      }
    ];
  W = Math.ceil(y4 / _) - Math.floor(p / _), W > g3 && (_ = Ed(W * _ / g3 / h) * h), We(l) || (L = Math.pow(10, l), _ = Math.ceil(_ * L) / L), i === "ticks" ? (N4 = Math.floor(p / _) * _, j = Math.ceil(y4 / _) * _) : (N4 = p, j = y4), b && x && o && o2((a - s) / o, _ / 1000) ? (W = Math.round(Math.min((a - s) / _, u)), _ = (a - s) / W, N4 = s, j = a) : S ? (N4 = b ? s : N4, j = x ? a : j, W = c3 - 1, _ = (j - N4) / W) : (W = (j - N4) / _, yo(W, Math.round(W), _ / 1000) ? W = Math.round(W) : W = Math.ceil(W));
  const G = Math.max(kd(_), kd(N4));
  L = Math.pow(10, We(l) ? G : l), N4 = Math.round(N4 * L) / L, j = Math.round(j * L) / L;
  let ee = 0;
  for (b && (d && N4 !== s ? (r.push({
    value: s
  }), N4 < s && ee++, yo(Math.round((N4 + ee * _) * L) / L, s, Dh(s, O, t)) && ee++) : N4 < s && ee++);ee < W; ++ee) {
    const fe = Math.round((N4 + ee * _) * L) / L;
    if (x && fe > a)
      break;
    r.push({
      value: fe
    });
  }
  return x && d && j !== a ? r.length && yo(r[r.length - 1].value, a, Dh(a, O, t)) ? r[r.length - 1].value = a : r.push({
    value: a
  }) : (!x || j === a) && r.push({
    value: j
  }), r;
}
function Dh(t, e, { horizontal: r, minRotation: n }) {
  const i = gr(n), o = (r ? Math.sin(i) : Math.cos(i)) || 0.001, s = 0.75 * e * ("" + t).length;
  return Math.min(e / o, s);
}

class xa extends Zn3 {
  constructor(e) {
    super(e), this.start = undefined, this.end = undefined, this._startValue = undefined, this._endValue = undefined, this._valueRange = 0;
  }
  parse(e, r) {
    return We(e) || (typeof e == "number" || e instanceof Number) && !isFinite(+e) ? null : +e;
  }
  handleTickRangeOptions() {
    const { beginAtZero: e } = this.options, { minDefined: r, maxDefined: n } = this.getUserBounds();
    let { min: i, max: o } = this;
    const s = (l) => i = r ? i : l, a = (l) => o = n ? o : l;
    if (e) {
      const l = Cr(i), c3 = Cr(o);
      l < 0 && c3 < 0 ? a(0) : l > 0 && c3 > 0 && s(0);
    }
    if (i === o) {
      let l = o === 0 ? 1 : Math.abs(o * 0.05);
      a(o + l), e || s(i - l);
    }
    this.min = i, this.max = o;
  }
  getTickLimit() {
    const e = this.options.ticks;
    let { maxTicksLimit: r, stepSize: n } = e, i;
    return n ? (i = Math.ceil(this.max / n) - Math.floor(this.min / n) + 1, i > 1000 && (console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${i} ticks. Limiting to 1000.`), i = 1000)) : (i = this.computeTickLimit(), r = r || 11), r && (i = Math.min(r, i)), i;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const e = this.options, r = e.ticks;
    let n = this.getTickLimit();
    n = Math.max(2, n);
    const i = {
      maxTicks: n,
      bounds: e.bounds,
      min: e.min,
      max: e.max,
      precision: r.precision,
      step: r.stepSize,
      count: r.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: r.minRotation || 0,
      includeBounds: r.includeBounds !== false
    }, o = this._range || this, s = f5(i, o);
    return e.bounds === "ticks" && p1(s, this, "value"), e.reverse ? (s.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), s;
  }
  configure() {
    const e = this.ticks;
    let r = this.min, n = this.max;
    if (super.configure(), this.options.offset && e.length) {
      const i = (n - r) / Math.max(e.length - 1, 1) / 2;
      r -= i, n += i;
    }
    this._startValue = r, this._endValue = n, this._valueRange = n - r;
  }
  getLabelForValue(e) {
    return Qo(e, this.chart.options.locale, this.options.ticks.format);
  }
}

class Vc extends xa {
  determineDataLimits() {
    const { min: e, max: r } = this.getMinMax(true);
    this.min = pt3(e) ? e : 0, this.max = pt3(r) ? r : 1, this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const e = this.isHorizontal(), r = e ? this.width : this.height, n = gr(this.options.ticks.minRotation), i = (e ? Math.sin(n) : Math.cos(n)) || 0.001, o = this._resolveTickFontOptions(0);
    return Math.ceil(r / Math.min(40, o.lineHeight / i));
  }
  getPixelForValue(e) {
    return e === null ? NaN : this.getPixelForDecimal((e - this._startValue) / this._valueRange);
  }
  getValueForPixel(e) {
    return this._startValue + this.getDecimalForPixel(e) * this._valueRange;
  }
}
ye(Vc, "id", "linear"), ye(Vc, "defaults", {
  ticks: {
    callback: Ya.formatters.numeric
  }
});
var Mo = (t) => Math.floor(rn3(t));
var Tn3 = (t, e) => Math.pow(10, Mo(t) + e);
function Mh(t) {
  return t / Math.pow(10, Mo(t)) === 1;
}
function Nh(t, e, r) {
  const n = Math.pow(10, r), i = Math.floor(t / n);
  return Math.ceil(e / n) - i;
}
function d5(t, e) {
  const r = e - t;
  let n = Mo(r);
  for (;Nh(t, e, n) > 10; )
    n++;
  for (;Nh(t, e, n) < 10; )
    n--;
  return Math.min(n, Mo(t));
}
function h5(t, { min: e, max: r }) {
  e = Ht3(t.min, e);
  const n = [], i = Mo(e);
  let o = d5(e, r), s = o < 0 ? Math.pow(10, Math.abs(o)) : 1;
  const a = Math.pow(10, o), l = i > o ? Math.pow(10, i) : 0, c3 = Math.round((e - l) * s) / s, u = Math.floor((e - l) / a / 10) * a * 10;
  let f4 = Math.floor((c3 - u) / Math.pow(10, o)), d = Ht3(t.min, Math.round((l + u + f4 * Math.pow(10, o)) * s) / s);
  for (;d < r; )
    n.push({
      value: d,
      major: Mh(d),
      significand: f4
    }), f4 >= 10 ? f4 = f4 < 15 ? 15 : 20 : f4++, f4 >= 20 && (o++, f4 = 2, s = o >= 0 ? 1 : s), d = Math.round((l + u + f4 * Math.pow(10, o)) * s) / s;
  const h = Ht3(t.max, d);
  return n.push({
    value: h,
    major: Mh(h),
    significand: f4
  }), n;
}

class qc extends Zn3 {
  constructor(e) {
    super(e), this.start = undefined, this.end = undefined, this._startValue = undefined, this._valueRange = 0;
  }
  parse(e, r) {
    const n = xa.prototype.parse.apply(this, [
      e,
      r
    ]);
    if (n === 0) {
      this._zero = true;
      return;
    }
    return pt3(n) && n > 0 ? n : null;
  }
  determineDataLimits() {
    const { min: e, max: r } = this.getMinMax(true);
    this.min = pt3(e) ? Math.max(0, e) : null, this.max = pt3(r) ? Math.max(0, r) : null, this.options.beginAtZero && (this._zero = true), this._zero && this.min !== this._suggestedMin && !pt3(this._userMin) && (this.min = e === Tn3(this.min, 0) ? Tn3(this.min, -1) : Tn3(this.min, 0)), this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined: e, maxDefined: r } = this.getUserBounds();
    let n = this.min, i = this.max;
    const o = (a) => n = e ? n : a, s = (a) => i = r ? i : a;
    n === i && (n <= 0 ? (o(1), s(10)) : (o(Tn3(n, -1)), s(Tn3(i, 1)))), n <= 0 && o(Tn3(i, -1)), i <= 0 && s(Tn3(n, 1)), this.min = n, this.max = i;
  }
  buildTicks() {
    const e = this.options, r = {
      min: this._userMin,
      max: this._userMax
    }, n = h5(r, this);
    return e.bounds === "ticks" && p1(n, this, "value"), e.reverse ? (n.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), n;
  }
  getLabelForValue(e) {
    return e === undefined ? "0" : Qo(e, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const e = this.min;
    super.configure(), this._startValue = rn3(e), this._valueRange = rn3(this.max) - rn3(e);
  }
  getPixelForValue(e) {
    return (e === undefined || e === 0) && (e = this.min), e === null || isNaN(e) ? NaN : this.getPixelForDecimal(e === this.min ? 0 : (rn3(e) - this._startValue) / this._valueRange);
  }
  getValueForPixel(e) {
    const r = this.getDecimalForPixel(e);
    return Math.pow(10, this._startValue + r * this._valueRange);
  }
}
ye(qc, "id", "logarithmic"), ye(qc, "defaults", {
  ticks: {
    callback: Ya.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
});
function Hc(t) {
  const e = t.ticks;
  if (e.display && t.display) {
    const r = Mt3(e.backdropPadding);
    return Oe(e.font && e.font.size, gt3.font.size) + r.height;
  }
  return 0;
}
function p5(t, e, r) {
  return r = it3(r) ? r : [
    r
  ], {
    w: x2(t, e.string, r),
    h: r.length * e.lineHeight
  };
}
function Lh(t, e, r, n, i) {
  return t === n || t === i ? {
    start: e - r / 2,
    end: e + r / 2
  } : t < n || t > i ? {
    start: e - r,
    end: e
  } : {
    start: e,
    end: e + r
  };
}
function g5(t) {
  const e = {
    l: t.left + t._padding.left,
    r: t.right - t._padding.right,
    t: t.top + t._padding.top,
    b: t.bottom - t._padding.bottom
  }, r = Object.assign({}, e), n = [], i = [], o = t._pointLabels.length, s = t.options.pointLabels, a = s.centerPointLabels ? st3 / o : 0;
  for (let l = 0;l < o; l++) {
    const c3 = s.setContext(t.getPointLabelContext(l));
    i[l] = c3.padding;
    const u = t.getPointPosition(l, t.drawingArea + i[l], a), f4 = vt3(c3.font), d = p5(t.ctx, f4, t._pointLabels[l]);
    n[l] = d;
    const h = Yt3(t.getIndexAngle(l) + a), g3 = Math.round(ju(h)), p = Lh(g3, u.x, d.w, 0, 180), y4 = Lh(g3, u.y, d.h, 90, 270);
    m5(r, e, h, p, y4);
  }
  t.setCenterPoint(e.l - r.l, r.r - e.r, e.t - r.t, r.b - e.b), t._pointLabelItems = v5(t, n, i);
}
function m5(t, e, r, n, i) {
  const o = Math.abs(Math.sin(r)), s = Math.abs(Math.cos(r));
  let a = 0, l = 0;
  n.start < e.l ? (a = (e.l - n.start) / o, t.l = Math.min(t.l, e.l - a)) : n.end > e.r && (a = (n.end - e.r) / o, t.r = Math.max(t.r, e.r + a)), i.start < e.t ? (l = (e.t - i.start) / s, t.t = Math.min(t.t, e.t - l)) : i.end > e.b && (l = (i.end - e.b) / s, t.b = Math.max(t.b, e.b + l));
}
function y5(t, e, r) {
  const n = t.drawingArea, { extra: i, additionalAngle: o, padding: s, size: a } = r, l = t.getPointPosition(e, n + i + s, o), c3 = Math.round(ju(Yt3(l.angle + mt3))), u = x52(l.y, a.h, c3), f4 = A5(c3), d = w5(l.x, a.w, f4);
  return {
    visible: true,
    x: l.x,
    y: u,
    textAlign: f4,
    left: d,
    top: u,
    right: d + a.w,
    bottom: u + a.h
  };
}
function b5(t, e) {
  if (!e)
    return true;
  const { left: r, top: n, right: i, bottom: o } = t;
  return !(zr({
    x: r,
    y: n
  }, e) || zr({
    x: r,
    y: o
  }, e) || zr({
    x: i,
    y: n
  }, e) || zr({
    x: i,
    y: o
  }, e));
}
function v5(t, e, r) {
  const n = [], i = t._pointLabels.length, o = t.options, { centerPointLabels: s, display: a } = o.pointLabels, l = {
    extra: Hc(o) / 2,
    additionalAngle: s ? st3 / i : 0
  };
  let c3;
  for (let u = 0;u < i; u++) {
    l.padding = r[u], l.size = e[u];
    const f4 = y5(t, u, l);
    n.push(f4), a === "auto" && (f4.visible = b5(f4, c3), f4.visible && (c3 = f4));
  }
  return n;
}
function A5(t) {
  return t === 0 || t === 180 ? "center" : t < 180 ? "left" : "right";
}
function w5(t, e, r) {
  return r === "right" ? t -= e : r === "center" && (t -= e / 2), t;
}
function x52(t, e, r) {
  return r === 90 || r === 270 ? t -= e / 2 : (r > 270 || r < 90) && (t -= e), t;
}
function _5(t, e, r) {
  const { left: n, top: i, right: o, bottom: s } = r, { backdropColor: a } = e;
  if (!We(a)) {
    const l = Fn3(e.borderRadius), c3 = Mt3(e.backdropPadding);
    t.fillStyle = a;
    const u = n - c3.left, f4 = i - c3.top, d = o - n + c3.width, h = s - i + c3.height;
    Object.values(l).some((g3) => g3 !== 0) ? (t.beginPath(), Ro(t, {
      x: u,
      y: f4,
      w: d,
      h,
      radius: l
    }), t.fill()) : t.fillRect(u, f4, d, h);
  }
}
function S5(t, e) {
  const { ctx: r, options: { pointLabels: n } } = t;
  for (let i = e - 1;i >= 0; i--) {
    const o = t._pointLabelItems[i];
    if (!o.visible)
      continue;
    const s = n.setContext(t.getPointLabelContext(i));
    _5(r, s, o);
    const a = vt3(s.font), { x: l, y: c3, textAlign: u } = o;
    Kn3(r, t._pointLabels[i], l, c3 + a.lineHeight / 2, a, {
      color: s.color,
      textAlign: u,
      textBaseline: "middle"
    });
  }
}
function og(t, e, r, n) {
  const { ctx: i } = t;
  if (r)
    i.arc(t.xCenter, t.yCenter, e, 0, ot3);
  else {
    let o = t.getPointPosition(0, e);
    i.moveTo(o.x, o.y);
    for (let s = 1;s < n; s++)
      o = t.getPointPosition(s, e), i.lineTo(o.x, o.y);
  }
}
function E5(t, e, r, n, i) {
  const o = t.ctx, s = e.circular, { color: a, lineWidth: l } = e;
  !s && !n || !a || !l || r < 0 || (o.save(), o.strokeStyle = a, o.lineWidth = l, o.setLineDash(i.dash), o.lineDashOffset = i.dashOffset, o.beginPath(), og(t, r, s, n), o.closePath(), o.stroke(), o.restore());
}
function k5(t, e, r) {
  return vn3(t, {
    label: r,
    index: e,
    type: "pointLabel"
  });
}

class co extends xa {
  constructor(e) {
    super(e), this.xCenter = undefined, this.yCenter = undefined, this.drawingArea = undefined, this._pointLabels = [], this._pointLabelItems = [];
  }
  setDimensions() {
    const e = this._padding = Mt3(Hc(this.options) / 2), r = this.width = this.maxWidth - e.width, n = this.height = this.maxHeight - e.height;
    this.xCenter = Math.floor(this.left + r / 2 + e.left), this.yCenter = Math.floor(this.top + n / 2 + e.top), this.drawingArea = Math.floor(Math.min(r, n) / 2);
  }
  determineDataLimits() {
    const { min: e, max: r } = this.getMinMax(false);
    this.min = pt3(e) && !isNaN(e) ? e : 0, this.max = pt3(r) && !isNaN(r) ? r : 0, this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / Hc(this.options));
  }
  generateTickLabels(e) {
    xa.prototype.generateTickLabels.call(this, e), this._pointLabels = this.getLabels().map((r, n) => {
      const i = nt3(this.options.pointLabels.callback, [
        r,
        n
      ], this);
      return i || i === 0 ? i : "";
    }).filter((r, n) => this.chart.getDataVisibility(n));
  }
  fit() {
    const e = this.options;
    e.display && e.pointLabels.display ? g5(this) : this.setCenterPoint(0, 0, 0, 0);
  }
  setCenterPoint(e, r, n, i) {
    this.xCenter += Math.floor((e - r) / 2), this.yCenter += Math.floor((n - i) / 2), this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(e, r, n, i));
  }
  getIndexAngle(e) {
    const r = ot3 / (this._pointLabels.length || 1), n = this.options.startAngle || 0;
    return Yt3(e * r + gr(n));
  }
  getDistanceFromCenterForValue(e) {
    if (We(e))
      return NaN;
    const r = this.drawingArea / (this.max - this.min);
    return this.options.reverse ? (this.max - e) * r : (e - this.min) * r;
  }
  getValueForDistanceFromCenter(e) {
    if (We(e))
      return NaN;
    const r = e / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - r : this.min + r;
  }
  getPointLabelContext(e) {
    const r = this._pointLabels || [];
    if (e >= 0 && e < r.length) {
      const n = r[e];
      return k5(this.getContext(), e, n);
    }
  }
  getPointPosition(e, r, n = 0) {
    const i = this.getIndexAngle(e) - mt3 + n;
    return {
      x: Math.cos(i) * r + this.xCenter,
      y: Math.sin(i) * r + this.yCenter,
      angle: i
    };
  }
  getPointPositionForValue(e, r) {
    return this.getPointPosition(e, this.getDistanceFromCenterForValue(r));
  }
  getBasePosition(e) {
    return this.getPointPositionForValue(e || 0, this.getBaseValue());
  }
  getPointLabelPosition(e) {
    const { left: r, top: n, right: i, bottom: o } = this._pointLabelItems[e];
    return {
      left: r,
      top: n,
      right: i,
      bottom: o
    };
  }
  drawBackground() {
    const { backgroundColor: e, grid: { circular: r } } = this.options;
    if (e) {
      const n = this.ctx;
      n.save(), n.beginPath(), og(this, this.getDistanceFromCenterForValue(this._endValue), r, this._pointLabels.length), n.closePath(), n.fillStyle = e, n.fill(), n.restore();
    }
  }
  drawGrid() {
    const e = this.ctx, r = this.options, { angleLines: n, grid: i, border: o } = r, s = this._pointLabels.length;
    let a, l, c3;
    if (r.pointLabels.display && S5(this, s), i.display && this.ticks.forEach((u, f4) => {
      if (f4 !== 0) {
        l = this.getDistanceFromCenterForValue(u.value);
        const d = this.getContext(f4), h = i.setContext(d), g3 = o.setContext(d);
        E5(this, h, l, s, g3);
      }
    }), n.display) {
      for (e.save(), a = s - 1;a >= 0; a--) {
        const u = n.setContext(this.getPointLabelContext(a)), { color: f4, lineWidth: d } = u;
        !d || !f4 || (e.lineWidth = d, e.strokeStyle = f4, e.setLineDash(u.borderDash), e.lineDashOffset = u.borderDashOffset, l = this.getDistanceFromCenterForValue(r.ticks.reverse ? this.min : this.max), c3 = this.getPointPosition(a, l), e.beginPath(), e.moveTo(this.xCenter, this.yCenter), e.lineTo(c3.x, c3.y), e.stroke());
      }
      e.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const e = this.ctx, r = this.options, n = r.ticks;
    if (!n.display)
      return;
    const i = this.getIndexAngle(0);
    let o, s;
    e.save(), e.translate(this.xCenter, this.yCenter), e.rotate(i), e.textAlign = "center", e.textBaseline = "middle", this.ticks.forEach((a, l) => {
      if (l === 0 && !r.reverse)
        return;
      const c3 = n.setContext(this.getContext(l)), u = vt3(c3.font);
      if (o = this.getDistanceFromCenterForValue(this.ticks[l].value), c3.showLabelBackdrop) {
        e.font = u.string, s = e.measureText(a.label).width, e.fillStyle = c3.backdropColor;
        const f4 = Mt3(c3.backdropPadding);
        e.fillRect(-s / 2 - f4.left, -o - u.size / 2 - f4.top, s + f4.width, u.size + f4.height);
      }
      Kn3(e, a.label, 0, -o, u, {
        color: c3.color,
        strokeColor: c3.textStrokeColor,
        strokeWidth: c3.textStrokeWidth
      });
    }), e.restore();
  }
  drawTitle() {
  }
}
ye(co, "id", "radialLinear"), ye(co, "defaults", {
  display: true,
  animate: true,
  position: "chartArea",
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ya.formatters.numeric
  },
  pointLabels: {
    backdropColor: undefined,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(e) {
      return e;
    },
    padding: 5,
    centerPointLabels: false
  }
}), ye(co, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
}), ye(co, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});
var Qa = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1000
  },
  second: {
    common: true,
    size: 1000,
    steps: 60
  },
  minute: {
    common: true,
    size: 60000,
    steps: 60
  },
  hour: {
    common: true,
    size: 3600000,
    steps: 24
  },
  day: {
    common: true,
    size: 86400000,
    steps: 30
  },
  week: {
    common: false,
    size: 604800000,
    steps: 4
  },
  month: {
    common: true,
    size: 2628000000,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884000000,
    steps: 4
  },
  year: {
    common: true,
    size: 31540000000
  }
};
var jt3 = /* @__PURE__ */ Object.keys(Qa);
function Bh(t, e) {
  return t - e;
}
function Fh(t, e) {
  if (We(e))
    return null;
  const r = t._adapter, { parser: n, round: i, isoWeekday: o } = t._parseOpts;
  let s = e;
  return typeof n == "function" && (s = n(s)), pt3(s) || (s = typeof n == "string" ? r.parse(s, n) : r.parse(s)), s === null ? null : (i && (s = i === "week" && (Ei(o) || o === true) ? r.startOf(s, "isoWeek", o) : r.startOf(s, i)), +s);
}
function jh(t, e, r, n) {
  const i = jt3.length;
  for (let o = jt3.indexOf(t);o < i - 1; ++o) {
    const s = Qa[jt3[o]], a = s.steps ? s.steps : Number.MAX_SAFE_INTEGER;
    if (s.common && Math.ceil((r - e) / (a * s.size)) <= n)
      return jt3[o];
  }
  return jt3[i - 1];
}
function C5(t, e, r, n, i) {
  for (let o = jt3.length - 1;o >= jt3.indexOf(r); o--) {
    const s = jt3[o];
    if (Qa[s].common && t._adapter.diff(i, n, s) >= e - 1)
      return s;
  }
  return jt3[r ? jt3.indexOf(r) : 0];
}
function T5(t) {
  for (let e = jt3.indexOf(t) + 1, r = jt3.length;e < r; ++e)
    if (Qa[jt3[e]].common)
      return jt3[e];
}
function Wh(t, e, r) {
  if (!r)
    t[e] = true;
  else if (r.length) {
    const { lo: n, hi: i } = Wu(r, e), o = r[n] >= e ? r[n] : r[i];
    t[o] = true;
  }
}
function O5(t, e, r, n) {
  const i = t._adapter, o = +i.startOf(e[0].value, n), s = e[e.length - 1].value;
  let a, l;
  for (a = o;a <= s; a = +i.add(a, 1, n))
    l = r[a], l >= 0 && (e[l].major = true);
  return e;
}
function Uh(t, e, r) {
  const n = [], i = {}, o = e.length;
  let s, a;
  for (s = 0;s < o; ++s)
    a = e[s], i[a] = s, n.push({
      value: a,
      major: false
    });
  return o === 0 || !r ? n : O5(t, n, i, r);
}

class No extends Zn3 {
  constructor(e) {
    super(e), this._cache = {
      data: [],
      labels: [],
      all: []
    }, this._unit = "day", this._majorUnit = undefined, this._offsets = {}, this._normalized = false, this._parseOpts = undefined;
  }
  init(e, r = {}) {
    const n = e.time || (e.time = {}), i = this._adapter = new Fv._date(e.adapters.date);
    i.init(r), mo(n.displayFormats, i.formats()), this._parseOpts = {
      parser: n.parser,
      round: n.round,
      isoWeekday: n.isoWeekday
    }, super.init(e), this._normalized = r.normalized;
  }
  parse(e, r) {
    return e === undefined ? null : Fh(this, e);
  }
  beforeLayout() {
    super.beforeLayout(), this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const e = this.options, r = this._adapter, n = e.time.unit || "day";
    let { min: i, max: o, minDefined: s, maxDefined: a } = this.getUserBounds();
    function l(c3) {
      !s && !isNaN(c3.min) && (i = Math.min(i, c3.min)), !a && !isNaN(c3.max) && (o = Math.max(o, c3.max));
    }
    (!s || !a) && (l(this._getLabelBounds()), (e.bounds !== "ticks" || e.ticks.source !== "labels") && l(this.getMinMax(false))), i = pt3(i) && !isNaN(i) ? i : +r.startOf(Date.now(), n), o = pt3(o) && !isNaN(o) ? o : +r.endOf(Date.now(), n) + 1, this.min = Math.min(i, o - 1), this.max = Math.max(i + 1, o);
  }
  _getLabelBounds() {
    const e = this.getLabelTimestamps();
    let { POSITIVE_INFINITY: r, NEGATIVE_INFINITY: n } = Number;
    return e.length && (r = e[0], n = e[e.length - 1]), {
      min: r,
      max: n
    };
  }
  buildTicks() {
    const e = this.options, r = e.time, n = e.ticks, i = n.source === "labels" ? this.getLabelTimestamps() : this._generate();
    e.bounds === "ticks" && i.length && (this.min = this._userMin || i[0], this.max = this._userMax || i[i.length - 1]);
    const o = this.min, s = this.max, a = c2(i, o, s);
    return this._unit = r.unit || (n.autoSkip ? jh(r.minUnit, this.min, this.max, this._getLabelCapacity(o)) : C5(this, a.length, r.minUnit, this.min, this.max)), this._majorUnit = !n.major.enabled || this._unit === "year" ? undefined : T5(this._unit), this.initOffsets(i), e.reverse && a.reverse(), Uh(this, a, this._majorUnit);
  }
  afterAutoSkip() {
    this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map((e) => +e.value));
  }
  initOffsets(e = []) {
    let r = 0, n = 0, i, o;
    this.options.offset && e.length && (i = this.getDecimalForValue(e[0]), e.length === 1 ? r = 1 - i : r = (this.getDecimalForValue(e[1]) - i) / 2, o = this.getDecimalForValue(e[e.length - 1]), e.length === 1 ? n = o : n = (o - this.getDecimalForValue(e[e.length - 2])) / 2);
    const s = e.length < 3 ? 0.5 : 0.25;
    r = St3(r, 0, s), n = St3(n, 0, s), this._offsets = {
      start: r,
      end: n,
      factor: 1 / (r + 1 + n)
    };
  }
  _generate() {
    const e = this._adapter, r = this.min, n = this.max, i = this.options, o = i.time, s = o.unit || jh(o.minUnit, r, n, this._getLabelCapacity(r)), a = Oe(i.ticks.stepSize, 1), l = s === "week" ? o.isoWeekday : false, c3 = Ei(l) || l === true, u = {};
    let f4 = r, d, h;
    if (c3 && (f4 = +e.startOf(f4, "isoWeek", l)), f4 = +e.startOf(f4, c3 ? "day" : s), e.diff(n, r, s) > 1e5 * a)
      throw new Error(r + " and " + n + " are too far apart with stepSize of " + a + " " + s);
    const g3 = i.ticks.source === "data" && this.getDataTimestamps();
    for (d = f4, h = 0;d < n; d = +e.add(d, a, s), h++)
      Wh(u, d, g3);
    return (d === n || i.bounds === "ticks" || h === 1) && Wh(u, d, g3), Object.keys(u).sort(Bh).map((p) => +p);
  }
  getLabelForValue(e) {
    const r = this._adapter, n = this.options.time;
    return n.tooltipFormat ? r.format(e, n.tooltipFormat) : r.format(e, n.displayFormats.datetime);
  }
  format(e, r) {
    const i = this.options.time.displayFormats, o = this._unit, s = r || i[o];
    return this._adapter.format(e, s);
  }
  _tickFormatFunction(e, r, n, i) {
    const o = this.options, s = o.ticks.callback;
    if (s)
      return nt3(s, [
        e,
        r,
        n
      ], this);
    const a = o.time.displayFormats, l = this._unit, c3 = this._majorUnit, u = l && a[l], f4 = c3 && a[c3], d = n[r], h = c3 && f4 && d && d.major;
    return this._adapter.format(e, i || (h ? f4 : u));
  }
  generateTickLabels(e) {
    let r, n, i;
    for (r = 0, n = e.length;r < n; ++r)
      i = e[r], i.label = this._tickFormatFunction(i.value, r, e);
  }
  getDecimalForValue(e) {
    return e === null ? NaN : (e - this.min) / (this.max - this.min);
  }
  getPixelForValue(e) {
    const r = this._offsets, n = this.getDecimalForValue(e);
    return this.getPixelForDecimal((r.start + n) * r.factor);
  }
  getValueForPixel(e) {
    const r = this._offsets, n = this.getDecimalForPixel(e) / r.factor - r.end;
    return this.min + n * (this.max - this.min);
  }
  _getLabelSize(e) {
    const r = this.options.ticks, n = this.ctx.measureText(e).width, i = gr(this.isHorizontal() ? r.maxRotation : r.minRotation), o = Math.cos(i), s = Math.sin(i), a = this._resolveTickFontOptions(0).size;
    return {
      w: n * o + a * s,
      h: n * s + a * o
    };
  }
  _getLabelCapacity(e) {
    const r = this.options.time, n = r.displayFormats, i = n[r.unit] || n.millisecond, o = this._tickFormatFunction(e, 0, Uh(this, [
      e
    ], this._majorUnit), i), s = this._getLabelSize(o), a = Math.floor(this.isHorizontal() ? this.width / s.w : this.height / s.h) - 1;
    return a > 0 ? a : 1;
  }
  getDataTimestamps() {
    let e = this._cache.data || [], r, n;
    if (e.length)
      return e;
    const i = this.getMatchingVisibleMetas();
    if (this._normalized && i.length)
      return this._cache.data = i[0].controller.getAllParsedValues(this);
    for (r = 0, n = i.length;r < n; ++r)
      e = e.concat(i[r].controller.getAllParsedValues(this));
    return this._cache.data = this.normalize(e);
  }
  getLabelTimestamps() {
    const e = this._cache.labels || [];
    let r, n;
    if (e.length)
      return e;
    const i = this.getLabels();
    for (r = 0, n = i.length;r < n; ++r)
      e.push(Fh(this, i[r]));
    return this._cache.labels = this._normalized ? e : this.normalize(e);
  }
  normalize(e) {
    return y1(e.sort(Bh));
  }
}
ye(No, "id", "time"), ye(No, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function Os(t, e, r) {
  let n = 0, i = t.length - 1, o, s, a, l;
  r ? (e >= t[n].pos && e <= t[i].pos && ({ lo: n, hi: i } = Ur(t, "pos", e)), { pos: o, time: a } = t[n], { pos: s, time: l } = t[i]) : (e >= t[n].time && e <= t[i].time && ({ lo: n, hi: i } = Ur(t, "time", e)), { time: o, pos: a } = t[n], { time: s, pos: l } = t[i]);
  const c3 = s - o;
  return c3 ? a + (l - a) * (e - o) / c3 : a;
}

class Yc extends No {
  constructor(e) {
    super(e), this._table = [], this._minPos = undefined, this._tableRange = undefined;
  }
  initOffsets() {
    const e = this._getTimestampsForTable(), r = this._table = this.buildLookupTable(e);
    this._minPos = Os(r, this.min), this._tableRange = Os(r, this.max) - this._minPos, super.initOffsets(e);
  }
  buildLookupTable(e) {
    const { min: r, max: n } = this, i = [], o = [];
    let s, a, l, c3, u;
    for (s = 0, a = e.length;s < a; ++s)
      c3 = e[s], c3 >= r && c3 <= n && i.push(c3);
    if (i.length < 2)
      return [
        {
          time: r,
          pos: 0
        },
        {
          time: n,
          pos: 1
        }
      ];
    for (s = 0, a = i.length;s < a; ++s)
      u = i[s + 1], l = i[s - 1], c3 = i[s], Math.round((u + l) / 2) !== c3 && o.push({
        time: c3,
        pos: s / (a - 1)
      });
    return o;
  }
  _generate() {
    const e = this.min, r = this.max;
    let n = super.getDataTimestamps();
    return (!n.includes(e) || !n.length) && n.splice(0, 0, e), (!n.includes(r) || n.length === 1) && n.push(r), n.sort((i, o) => i - o);
  }
  _getTimestampsForTable() {
    let e = this._cache.all || [];
    if (e.length)
      return e;
    const r = this.getDataTimestamps(), n = this.getLabelTimestamps();
    return r.length && n.length ? e = this.normalize(r.concat(n)) : e = r.length ? r : n, e = this._cache.all = e, e;
  }
  getDecimalForValue(e) {
    return (Os(this._table, e) - this._minPos) / this._tableRange;
  }
  getValueForPixel(e) {
    const r = this._offsets, n = this.getDecimalForPixel(e) / r.factor - r.end;
    return Os(this._table, n * this._tableRange + this._minPos, true);
  }
}
ye(Yc, "id", "timeseries"), ye(Yc, "defaults", No.defaults);
var I5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  CategoryScale: zc,
  LinearScale: Vc,
  LogarithmicScale: qc,
  RadialLinearScale: co,
  TimeScale: No,
  TimeSeriesScale: Yc
});
var P5 = [
  Bv,
  hA,
  a5,
  I5
];
Lr.register(...P5);
var j5 = "playroomkit";
var W5 = "0.0.87";
var U5 = "https://joinplayroom.com";
var z5 = "./multiplayer.mjs";
var V5 = "./types.d.ts";
var q5 = "./bin/cli.js";
var H5 = [
  "multiplayer.umd.js",
  "multiplayer.full.umd.js",
  "multiplayer.mjs",
  "style.css",
  "types.d.ts",
  "bin"
];
var Y5 = {};
var K5 = {
  react: ">=17.0.2 <= 18",
  "react-dom": ">=17.0.2 <= 18"
};
var X5 = {
  "@discord/embedded-app-sdk": ">=1.0.0"
};
var Gu = {
  name: j5,
  version: W5,
  homepage: U5,
  main: z5,
  types: V5,
  bin: q5,
  files: H5,
  dependencies: Y5,
  peerDependencies: K5,
  optionalDependencies: X5
};
var $5 = typeof window < "u" && /(android)/i.test(navigator.userAgent);
var ew = function() {
  if (typeof window > "u")
    return false;
  var t = function() {
    var i = new Audio;
    return i.volume = 0.5, i.volume === 1;
  }, e = /iPhone|iPod/.test(navigator.userAgent), r = navigator.userAgent.includes("Macintosh"), n = navigator.maxTouchPoints >= 1;
  return e || r && (n || t());
}();
var Jc = {};
var tw = {
  get exports() {
    return Jc;
  },
  set exports(t) {
    Jc = t;
  }
};
var nc = {};
var Yh;
function nw() {
  return Yh || (Yh = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
    var t = import_react.default, e = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function r(S) {
      {
        for (var O = arguments.length, _ = new Array(O > 1 ? O - 1 : 0), L = 1;L < O; L++)
          _[L - 1] = arguments[L];
        n("error", S, _);
      }
    }
    function n(S, O, _) {
      {
        var L = e.ReactDebugCurrentFrame, N4 = L.getStackAddendum();
        N4 !== "" && (O += "%s", _ = _.concat([N4]));
        var j = _.map(function(W) {
          return String(W);
        });
        j.unshift("Warning: " + O), Function.prototype.apply.call(console[S], console, j);
      }
    }
    function i(S, O) {
      return S === O && (S !== 0 || 1 / S === 1 / O) || S !== S && O !== O;
    }
    var o = typeof Object.is == "function" ? Object.is : i, s = t.useState, a = t.useEffect, l = t.useLayoutEffect, c3 = t.useDebugValue, u = false, f4 = false;
    function d(S, O, _) {
      u || t.startTransition !== undefined && (u = true, r("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var L = O();
      if (!f4) {
        var N4 = O();
        o(L, N4) || (r("The result of getSnapshot should be cached to avoid an infinite loop"), f4 = true);
      }
      var j = s({
        inst: {
          value: L,
          getSnapshot: O
        }
      }), W = j[0].inst, G = j[1];
      return l(function() {
        W.value = L, W.getSnapshot = O, h(W) && G({
          inst: W
        });
      }, [S, L, O]), a(function() {
        h(W) && G({
          inst: W
        });
        var ee = function() {
          h(W) && G({
            inst: W
          });
        };
        return S(ee);
      }, [S]), c3(L), L;
    }
    function h(S) {
      var { getSnapshot: O, value: _ } = S;
      try {
        var L = O();
        return !o(_, L);
      } catch {
        return true;
      }
    }
    function g3(S, O, _) {
      return O();
    }
    var p = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", y4 = !p, b = y4 ? g3 : d, x = t.useSyncExternalStore !== undefined ? t.useSyncExternalStore : b;
    nc.useSyncExternalStore = x, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
  }()), nc;
}
(function(t) {
  t.exports = nw();
})(tw);
var sn = () => {
};
var Ft3 = sn();
var ic = Object;
var ze = (t) => t === Ft3;
var Vr = (t) => typeof t == "function";
var mn3 = (t, e) => ({
  ...t,
  ...e
});
var iw = (t) => Vr(t.then);
var Is = /* @__PURE__ */ new WeakMap;
var ow = 0;
var Lo = (t) => {
  const e = typeof t, r = t && t.constructor, n = r == Date;
  let i, o;
  if (ic(t) === t && !n && r != RegExp) {
    if (i = Is.get(t), i)
      return i;
    if (i = ++ow + "~", Is.set(t, i), r == Array) {
      for (i = "@", o = 0;o < t.length; o++)
        i += Lo(t[o]) + ",";
      Is.set(t, i);
    }
    if (r == ic) {
      i = "#";
      const s = ic.keys(t).sort();
      for (;!ze(o = s.pop()); )
        ze(t[o]) || (i += o + ":" + Lo(t[o]) + ",");
      Is.set(t, i);
    }
  } else
    i = n ? t.toJSON() : e == "symbol" ? t.toString() : e == "string" ? JSON.stringify(t) : "" + t;
  return i;
};
var Fr = /* @__PURE__ */ new WeakMap;
var oc = {};
var Ps = {};
var $u = "undefined";
var Ga = typeof window != $u;
var Qc = typeof document != $u;
var sw = () => Ga && typeof window.requestAnimationFrame != $u;
var dg = (t, e) => {
  const r = Fr.get(t);
  return [
    () => !ze(e) && t.get(e) || oc,
    (n) => {
      if (!ze(e)) {
        const i = t.get(e);
        e in Ps || (Ps[e] = i), r[5](e, mn3(i, n), i || oc);
      }
    },
    r[6],
    () => !ze(e) && (e in Ps) ? Ps[e] : !ze(e) && t.get(e) || oc
  ];
};
var Gc = true;
var aw = () => Gc;
var [Zc, $c] = Ga && window.addEventListener ? [
  window.addEventListener.bind(window),
  window.removeEventListener.bind(window)
] : [
  sn,
  sn
];
var lw = () => {
  const t = Qc && document.visibilityState;
  return ze(t) || t !== "hidden";
};
var cw = (t) => (Qc && document.addEventListener("visibilitychange", t), Zc("focus", t), () => {
  Qc && document.removeEventListener("visibilitychange", t), $c("focus", t);
});
var uw = (t) => {
  const e = () => {
    Gc = true, t();
  }, r = () => {
    Gc = false;
  };
  return Zc("online", e), Zc("offline", r), () => {
    $c("online", e), $c("offline", r);
  };
};
var fw = {
  isOnline: aw,
  isVisible: lw
};
var dw = {
  initFocus: cw,
  initReconnect: uw
};
var Kh = !import_react.default.useId;
var Bo = !Ga || "Deno" in window;
var hw = (t) => sw() ? window.requestAnimationFrame(t) : setTimeout(t, 1);
var sc = Bo ? import_react.useEffect : import_react.useLayoutEffect;
var ac = typeof navigator < "u" && navigator.connection;
var Xh = !Bo && ac && ([
  "slow-2g",
  "2g"
].includes(ac.effectiveType) || ac.saveData);
var ef = (t) => {
  if (Vr(t))
    try {
      t = t();
    } catch {
      t = "";
    }
  const e = t;
  return t = typeof t == "string" ? t : (Array.isArray(t) ? t.length : t) ? Lo(t) : "", [
    t,
    e
  ];
};
var pw = 0;
var eu = () => ++pw;
var hg = 0;
var pg = 1;
var gg = 2;
var gw = 3;
var Gi = {
  __proto__: null,
  ERROR_REVALIDATE_EVENT: gw,
  FOCUS_EVENT: hg,
  MUTATE_EVENT: gg,
  RECONNECT_EVENT: pg
};
async function mg(...t) {
  const [e, r, n, i] = t, o = mn3({
    populateCache: true,
    throwOnError: true
  }, typeof i == "boolean" ? {
    revalidate: i
  } : i || {});
  let s = o.populateCache;
  const a = o.rollbackOnError;
  let l = o.optimisticData;
  const c3 = o.revalidate !== false, u = (h) => typeof a == "function" ? a(h) : a !== false, f4 = o.throwOnError;
  if (Vr(r)) {
    const h = r, g3 = [], p = e.keys();
    for (const y4 of p)
      !/^\$(inf|sub)\$/.test(y4) && h(e.get(y4)._k) && g3.push(y4);
    return Promise.all(g3.map(d));
  }
  return d(r);
  async function d(h) {
    const [g3] = ef(h);
    if (!g3)
      return;
    const [p, y4] = dg(e, g3), [b, x, S, O] = Fr.get(e), _ = () => {
      const z = b[g3];
      return c3 && (delete S[g3], delete O[g3], z && z[0]) ? z[0](gg).then(() => p().data) : p().data;
    };
    if (t.length < 3)
      return _();
    let L = n, N4;
    const j = eu();
    x[g3] = [
      j,
      0
    ];
    const W = !ze(l), G = p(), ee = G.data, fe = G._c, P = ze(fe) ? ee : fe;
    if (W && (l = Vr(l) ? l(P, ee) : l, y4({
      data: l,
      _c: P
    })), Vr(L))
      try {
        L = L(P);
      } catch (z) {
        N4 = z;
      }
    if (L && iw(L))
      if (L = await L.catch((z) => {
        N4 = z;
      }), j !== x[g3][0]) {
        if (N4)
          throw N4;
        return L;
      } else
        N4 && W && u(N4) && (s = true, y4({
          data: P,
          _c: Ft3
        }));
    if (s && !N4)
      if (Vr(s)) {
        const z = s(L, P);
        y4({
          data: z,
          error: Ft3,
          _c: Ft3
        });
      } else
        y4({
          data: L,
          error: Ft3,
          _c: Ft3
        });
    if (x[g3][1] = eu(), Promise.resolve(_()).then(() => {
      y4({
        _c: Ft3
      });
    }), N4) {
      if (f4)
        throw N4;
      return;
    }
    return L;
  }
}
var Jh = (t, e) => {
  for (const r in t)
    t[r][0] && t[r][0](e);
};
var mw = (t, e) => {
  if (!Fr.has(t)) {
    const r = mn3(dw, e), n = {}, i = mg.bind(Ft3, t);
    let o = sn;
    const s = {}, a = (u, f4) => {
      const d = s[u] || [];
      return s[u] = d, d.push(f4), () => d.splice(d.indexOf(f4), 1);
    }, l = (u, f4, d) => {
      t.set(u, f4);
      const h = s[u];
      if (h)
        for (const g3 of h)
          g3(f4, d);
    }, c3 = () => {
      if (!Fr.has(t) && (Fr.set(t, [
        n,
        {},
        {},
        {},
        i,
        l,
        a
      ]), !Bo)) {
        const u = r.initFocus(setTimeout.bind(Ft3, Jh.bind(Ft3, n, hg))), f4 = r.initReconnect(setTimeout.bind(Ft3, Jh.bind(Ft3, n, pg)));
        o = () => {
          u && u(), f4 && f4(), Fr.delete(t);
        };
      }
    };
    return c3(), [
      t,
      i,
      c3,
      o
    ];
  }
  return [
    t,
    Fr.get(t)[4]
  ];
};
var yw = (t, e, r, n, i) => {
  const o = r.errorRetryCount, s = i.retryCount, a = ~~((Math.random() + 0.5) * (1 << (s < 8 ? s : 8))) * r.errorRetryInterval;
  !ze(o) && s > o || setTimeout(n, a, i);
};
var bw = (t, e) => Lo(t) == Lo(e);
var [yg, vw] = mw(/* @__PURE__ */ new Map);
var Aw = mn3({
  onLoadingSlow: sn,
  onSuccess: sn,
  onError: sn,
  onErrorRetry: yw,
  onDiscarded: sn,
  revalidateOnFocus: true,
  revalidateOnReconnect: true,
  revalidateIfStale: true,
  shouldRetryOnError: true,
  errorRetryInterval: Xh ? 1e4 : 5000,
  focusThrottleInterval: 5000,
  dedupingInterval: 2000,
  loadingTimeout: Xh ? 5000 : 3000,
  compare: bw,
  isPaused: () => false,
  cache: yg,
  mutate: vw,
  fallback: {}
}, fw);
var ww = (t, e) => {
  const r = mn3(t, e);
  if (e) {
    const { use: n, fallback: i } = t, { use: o, fallback: s } = e;
    n && o && (r.use = n.concat(o)), i && s && (r.fallback = mn3(i, s));
  }
  return r;
};
var xw = import_react.createContext({});
var _w = "$inf$";
var bg = Ga && window.__SWR_DEVTOOLS_USE__;
var Sw = bg ? window.__SWR_DEVTOOLS_USE__ : [];
var Ew = () => {
  bg && (window.__SWR_DEVTOOLS_REACT__ = import_react.default);
};
var kw = (t) => Vr(t[1]) ? [
  t[0],
  t[1],
  t[2] || {}
] : [
  t[0],
  null,
  (t[1] === null ? t[2] : t[1]) || {}
];
var Cw = () => mn3(Aw, import_react.useContext(xw));
var Tw = (t) => (e, r, n) => t(e, r && ((...o) => {
  const [s] = ef(e), [, , , a] = Fr.get(yg);
  if (s.startsWith(_w))
    return r(...o);
  const l = a[s];
  return ze(l) ? r(...o) : (delete a[s], l);
}), n);
var Ow = Sw.concat(Tw);
var Iw = (t) => function(...r) {
  const n = Cw(), [i, o, s] = kw(r), a = ww(n, s);
  let l = t;
  const { use: c3 } = a, u = (c3 || []).concat(Ow);
  for (let f4 = u.length;f4--; )
    l = u[f4](l);
  return l(i, o || a.fetcher || null, a);
};
var Pw = (t, e, r) => {
  const n = e[t] || (e[t] = []);
  return n.push(r), () => {
    const i = n.indexOf(r);
    i >= 0 && (n[i] = n[n.length - 1], n.pop());
  };
};
Ew();
var Qh = import_react.default.use || ((t) => {
  if (t.status === "pending")
    throw t;
  if (t.status === "fulfilled")
    return t.value;
  throw t.status === "rejected" ? t.reason : (t.status = "pending", t.then((e) => {
    t.status = "fulfilled", t.value = e;
  }, (e) => {
    t.status = "rejected", t.reason = e;
  }), t);
});
var lc = {
  dedupe: true
};
var Rw = (t, e, r) => {
  const { cache: n, compare: i, suspense: o, fallbackData: s, revalidateOnMount: a, revalidateIfStale: l, refreshInterval: c3, refreshWhenHidden: u, refreshWhenOffline: f4, keepPreviousData: d } = r, [h, g3, p, y4] = Fr.get(n), [b, x] = ef(t), S = import_react.useRef(false), O = import_react.useRef(false), _ = import_react.useRef(b), L = import_react.useRef(e), N4 = import_react.useRef(r), j = () => N4.current, W = () => j().isVisible() && j().isOnline(), [G, ee, fe, P] = dg(n, b), z = import_react.useRef({}).current, U = ze(s) ? r.fallback[b] : s, I = (k, re) => {
    for (const ne in z) {
      const Ae = ne;
      if (Ae === "data") {
        if (!i(k[Ae], re[Ae]) && (!ze(k[Ae]) || !i(me, re[Ae])))
          return false;
      } else if (re[Ae] !== k[Ae])
        return false;
    }
    return true;
  }, V = import_react.useMemo(() => {
    const k = (() => !b || !e ? false : ze(a) ? j().isPaused() || o ? false : ze(l) ? true : l : a)(), re = (D) => {
      const J4 = mn3(D);
      return delete J4._k, k ? {
        isValidating: true,
        isLoading: true,
        ...J4
      } : J4;
    }, ne = G(), Ae = P(), C = re(ne), v = ne === Ae ? C : re(Ae);
    let w4 = C;
    return [
      () => {
        const D = re(G());
        return I(D, w4) ? (w4.data = D.data, w4.isLoading = D.isLoading, w4.isValidating = D.isValidating, w4.error = D.error, w4) : (w4 = D, D);
      },
      () => v
    ];
  }, [
    n,
    b
  ]), te = Jc.useSyncExternalStore(import_react.useCallback((k) => fe(b, (re, ne) => {
    I(ne, re) || k();
  }), [
    n,
    b
  ]), V[0], V[1]), X4 = !S.current, H = h[b] && h[b].length > 0, $4 = te.data, se = ze($4) ? U : $4, he = te.error, pe = import_react.useRef(se), me = d ? ze($4) ? pe.current : $4 : se, B4 = (() => H && !ze(he) ? false : X4 && !ze(a) ? a : j().isPaused() ? false : o ? ze(se) ? false : l : ze(se) || l)(), q4 = !!(b && e && X4 && B4), Z = ze(te.isValidating) ? q4 : te.isValidating, oe = ze(te.isLoading) ? q4 : te.isLoading, de = import_react.useCallback(async (k) => {
    const re = L.current;
    if (!b || !re || O.current || j().isPaused())
      return false;
    let ne, Ae, C = true;
    const v = k || {}, w4 = !p[b] || !v.dedupe, D = () => Kh ? !O.current && b === _.current && S.current : b === _.current, J4 = {
      isValidating: false,
      isLoading: false
    }, ae = () => {
      ee(J4);
    }, ue = () => {
      const _e = p[b];
      _e && _e[1] === Ae && delete p[b];
    }, Se = {
      isValidating: true
    };
    ze(G().data) && (Se.isLoading = true);
    try {
      if (w4 && (ee(Se), r.loadingTimeout && ze(G().data) && setTimeout(() => {
        C && D() && j().onLoadingSlow(b, r);
      }, r.loadingTimeout), p[b] = [
        re(x),
        eu()
      ]), [ne, Ae] = p[b], ne = await ne, w4 && setTimeout(ue, r.dedupingInterval), !p[b] || p[b][1] !== Ae)
        return w4 && D() && j().onDiscarded(b), false;
      J4.error = Ft3;
      const _e = g3[b];
      if (!ze(_e) && (Ae <= _e[0] || Ae <= _e[1] || _e[1] === 0))
        return ae(), w4 && D() && j().onDiscarded(b), false;
      const we = G().data;
      J4.data = i(we, ne) ? we : ne, w4 && D() && j().onSuccess(ne, b, r);
    } catch (_e) {
      ue();
      const we = j(), { shouldRetryOnError: Ne } = we;
      we.isPaused() || (J4.error = _e, w4 && D() && (we.onError(_e, b, we), (Ne === true || Vr(Ne) && Ne(_e)) && W() && we.onErrorRetry(_e, b, we, (E4) => {
        const m4 = h[b];
        m4 && m4[0] && m4[0](Gi.ERROR_REVALIDATE_EVENT, E4);
      }, {
        retryCount: (v.retryCount || 0) + 1,
        dedupe: true
      })));
    }
    return C = false, ae(), true;
  }, [
    b,
    n
  ]), R4 = import_react.useCallback((...k) => mg(n, _.current, ...k), []);
  if (sc(() => {
    L.current = e, N4.current = r, ze($4) || (pe.current = $4);
  }), sc(() => {
    if (!b)
      return;
    const k = de.bind(Ft3, lc);
    let re = 0;
    const Ae = Pw(b, h, (C, v = {}) => {
      if (C == Gi.FOCUS_EVENT) {
        const w4 = Date.now();
        j().revalidateOnFocus && w4 > re && W() && (re = w4 + j().focusThrottleInterval, k());
      } else if (C == Gi.RECONNECT_EVENT)
        j().revalidateOnReconnect && W() && k();
      else {
        if (C == Gi.MUTATE_EVENT)
          return de();
        if (C == Gi.ERROR_REVALIDATE_EVENT)
          return de(v);
      }
    });
    return O.current = false, _.current = b, S.current = true, ee({
      _k: x
    }), B4 && (ze(se) || Bo ? k() : hw(k)), () => {
      O.current = true, Ae();
    };
  }, [
    b
  ]), sc(() => {
    let k;
    function re() {
      const Ae = Vr(c3) ? c3(G().data) : c3;
      Ae && k !== -1 && (k = setTimeout(ne, Ae));
    }
    function ne() {
      !G().error && (u || j().isVisible()) && (f4 || j().isOnline()) ? de(lc).then(re) : re();
    }
    return re(), () => {
      k && (clearTimeout(k), k = -1);
    };
  }, [
    c3,
    u,
    f4,
    b
  ]), import_react.useDebugValue(me), o && ze(se) && b) {
    if (!Kh && Bo)
      throw new Error("Fallback data is required when using suspense in SSR.");
    L.current = e, N4.current = r, O.current = false;
    const k = y4[b];
    if (!ze(k)) {
      const re = R4(k);
      Qh(re);
    }
    if (ze(he)) {
      const re = de(lc);
      ze(me) || (re.status = "fulfilled", re.value = true), Qh(re);
    } else
      throw he;
  }
  return {
    mutate: R4,
    get data() {
      return z.data = true, me;
    },
    get error() {
      return z.error = true, he;
    },
    get isValidating() {
      return z.isValidating = true, Z;
    },
    get isLoading() {
      return z.isLoading = true, oe;
    }
  };
};
var Dw = Iw(Rw);
var F4 = {};
var Gh = {
  get exports() {
    return F4;
  },
  set exports(t) {
    F4 = t;
  }
};
var _a = {};
var Mw = {
  get exports() {
    return _a;
  },
  set exports(t) {
    _a = t;
  }
};
var Ke = {};
var $h;
function Lw() {
  return $h || ($h = 1, function() {
    var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, r = t ? Symbol.for("react.portal") : 60106, n = t ? Symbol.for("react.fragment") : 60107, i = t ? Symbol.for("react.strict_mode") : 60108, o = t ? Symbol.for("react.profiler") : 60114, s = t ? Symbol.for("react.provider") : 60109, a = t ? Symbol.for("react.context") : 60110, l = t ? Symbol.for("react.async_mode") : 60111, c3 = t ? Symbol.for("react.concurrent_mode") : 60111, u = t ? Symbol.for("react.forward_ref") : 60112, f4 = t ? Symbol.for("react.suspense") : 60113, d = t ? Symbol.for("react.suspense_list") : 60120, h = t ? Symbol.for("react.memo") : 60115, g3 = t ? Symbol.for("react.lazy") : 60116, p = t ? Symbol.for("react.block") : 60121, y4 = t ? Symbol.for("react.fundamental") : 60117, b = t ? Symbol.for("react.responder") : 60118, x = t ? Symbol.for("react.scope") : 60119;
    function S(k) {
      return typeof k == "string" || typeof k == "function" || k === n || k === c3 || k === o || k === i || k === f4 || k === d || typeof k == "object" && k !== null && (k.$$typeof === g3 || k.$$typeof === h || k.$$typeof === s || k.$$typeof === a || k.$$typeof === u || k.$$typeof === y4 || k.$$typeof === b || k.$$typeof === x || k.$$typeof === p);
    }
    function O(k) {
      if (typeof k == "object" && k !== null) {
        var re = k.$$typeof;
        switch (re) {
          case e:
            var ne = k.type;
            switch (ne) {
              case l:
              case c3:
              case n:
              case o:
              case i:
              case f4:
                return ne;
              default:
                var Ae = ne && ne.$$typeof;
                switch (Ae) {
                  case a:
                  case u:
                  case g3:
                  case h:
                  case s:
                    return Ae;
                  default:
                    return re;
                }
            }
          case r:
            return re;
        }
      }
    }
    var _ = l, L = c3, N4 = a, j = s, W = e, G = u, ee = n, fe = g3, P = h, z = r, U = o, I = i, V = f4, te = false;
    function X4(k) {
      return te || (te = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), H(k) || O(k) === l;
    }
    function H(k) {
      return O(k) === c3;
    }
    function $4(k) {
      return O(k) === a;
    }
    function se(k) {
      return O(k) === s;
    }
    function he(k) {
      return typeof k == "object" && k !== null && k.$$typeof === e;
    }
    function pe(k) {
      return O(k) === u;
    }
    function me(k) {
      return O(k) === n;
    }
    function B4(k) {
      return O(k) === g3;
    }
    function q4(k) {
      return O(k) === h;
    }
    function Z(k) {
      return O(k) === r;
    }
    function oe(k) {
      return O(k) === o;
    }
    function de(k) {
      return O(k) === i;
    }
    function R4(k) {
      return O(k) === f4;
    }
    Ke.AsyncMode = _, Ke.ConcurrentMode = L, Ke.ContextConsumer = N4, Ke.ContextProvider = j, Ke.Element = W, Ke.ForwardRef = G, Ke.Fragment = ee, Ke.Lazy = fe, Ke.Memo = P, Ke.Portal = z, Ke.Profiler = U, Ke.StrictMode = I, Ke.Suspense = V, Ke.isAsyncMode = X4, Ke.isConcurrentMode = H, Ke.isContextConsumer = $4, Ke.isContextProvider = se, Ke.isElement = he, Ke.isForwardRef = pe, Ke.isFragment = me, Ke.isLazy = B4, Ke.isMemo = q4, Ke.isPortal = Z, Ke.isProfiler = oe, Ke.isStrictMode = de, Ke.isSuspense = R4, Ke.isValidElementType = S, Ke.typeOf = O;
  }()), Ke;
}
var ep;
function vg() {
  return ep || (ep = 1, function(t) {
    t.exports = Lw();
  }(Mw)), _a;
}
var cc;
var tp;
function tf() {
  if (tp)
    return cc;
  tp = 1;
  var t = Object.getOwnPropertySymbols, e = Object.prototype.hasOwnProperty, r = Object.prototype.propertyIsEnumerable;
  function n(o) {
    if (o == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(o);
  }
  function i() {
    try {
      if (!Object.assign)
        return false;
      var o = new String("abc");
      if (o[5] = "de", Object.getOwnPropertyNames(o)[0] === "5")
        return false;
      for (var s = {}, a = 0;a < 10; a++)
        s["_" + String.fromCharCode(a)] = a;
      var l = Object.getOwnPropertyNames(s).map(function(u) {
        return s[u];
      });
      if (l.join("") !== "0123456789")
        return false;
      var c3 = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(u) {
        c3[u] = u;
      }), Object.keys(Object.assign({}, c3)).join("") === "abcdefghijklmnopqrst";
    } catch {
      return false;
    }
  }
  return cc = i() ? Object.assign : function(o, s) {
    for (var a, l = n(o), c3, u = 1;u < arguments.length; u++) {
      a = Object(arguments[u]);
      for (var f4 in a)
        e.call(a, f4) && (l[f4] = a[f4]);
      if (t) {
        c3 = t(a);
        for (var d = 0;d < c3.length; d++)
          r.call(a, c3[d]) && (l[c3[d]] = a[c3[d]]);
      }
    }
    return l;
  }, cc;
}
var uc;
var rp;
function rf() {
  if (rp)
    return uc;
  rp = 1;
  var t = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  return uc = t, uc;
}
var fc;
var np;
function Ag() {
  return np || (np = 1, fc = Function.call.bind(Object.prototype.hasOwnProperty)), fc;
}
var dc;
var ip;
function Bw() {
  if (ip)
    return dc;
  ip = 1;
  var t = function() {
  };
  if (true) {
    var e = rf(), r = {}, n = Ag();
    t = function(o) {
      var s = "Warning: " + o;
      typeof console < "u" && console.error(s);
      try {
        throw new Error(s);
      } catch {
      }
    };
  }
  function i(o, s, a, l, c3) {
    if (true) {
      for (var u in o)
        if (n(o, u)) {
          var f4;
          try {
            if (typeof o[u] != "function") {
              var d = Error((l || "React class") + ": " + a + " type `" + u + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof o[u] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
              throw d.name = "Invariant Violation", d;
            }
            f4 = o[u](s, u, l, a, null, e);
          } catch (g3) {
            f4 = g3;
          }
          if (f4 && !(f4 instanceof Error) && t((l || "React class") + ": type specification of " + a + " `" + u + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof f4 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."), f4 instanceof Error && !(f4.message in r)) {
            r[f4.message] = true;
            var h = c3 ? c3() : "";
            t("Failed " + a + " type: " + f4.message + (h ?? ""));
          }
        }
    }
  }
  return i.resetWarningCache = function() {
    r = {};
  }, dc = i, dc;
}
var hc;
var op;
function Fw() {
  if (op)
    return hc;
  op = 1;
  var t = vg(), e = tf(), r = rf(), n = Ag(), i = Bw(), o = function() {
  };
  o = function(a) {
    var l = "Warning: " + a;
    typeof console < "u" && console.error(l);
    try {
      throw new Error(l);
    } catch {
    }
  };
  function s() {
    return null;
  }
  return hc = function(a, l) {
    var c3 = typeof Symbol == "function" && Symbol.iterator, u = "@@iterator";
    function f4(H) {
      var $4 = H && (c3 && H[c3] || H[u]);
      if (typeof $4 == "function")
        return $4;
    }
    var d = "<<anonymous>>", h = {
      array: b("array"),
      bigint: b("bigint"),
      bool: b("boolean"),
      func: b("function"),
      number: b("number"),
      object: b("object"),
      string: b("string"),
      symbol: b("symbol"),
      any: x(),
      arrayOf: S,
      element: O(),
      elementType: _(),
      instanceOf: L,
      node: G(),
      objectOf: j,
      oneOf: N4,
      oneOfType: W,
      shape: fe,
      exact: P
    };
    function g3(H, $4) {
      return H === $4 ? H !== 0 || 1 / H === 1 / $4 : H !== H && $4 !== $4;
    }
    function p(H, $4) {
      this.message = H, this.data = $4 && typeof $4 == "object" ? $4 : {}, this.stack = "";
    }
    p.prototype = Error.prototype;
    function y4(H) {
      if (true)
        var $4 = {}, se = 0;
      function he(me, B4, q4, Z, oe, de, R4) {
        if (Z = Z || d, de = de || q4, R4 !== r) {
          if (l) {
            var k = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
            throw k.name = "Invariant Violation", k;
          } else if (typeof console < "u") {
            var re = Z + ":" + q4;
            !$4[re] && se < 3 && (o("You are manually calling a React.PropTypes validation function for the `" + de + "` prop on `" + Z + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."), $4[re] = true, se++);
          }
        }
        return B4[q4] == null ? me ? B4[q4] === null ? new p("The " + oe + " `" + de + "` is marked as required " + ("in `" + Z + "`, but its value is `null`.")) : new p("The " + oe + " `" + de + "` is marked as required in " + ("`" + Z + "`, but its value is `undefined`.")) : null : H(B4, q4, Z, oe, de);
      }
      var pe = he.bind(null, false);
      return pe.isRequired = he.bind(null, true), pe;
    }
    function b(H) {
      function $4(se, he, pe, me, B4, q4) {
        var Z = se[he], oe = I(Z);
        if (oe !== H) {
          var de = V(Z);
          return new p("Invalid " + me + " `" + B4 + "` of type " + ("`" + de + "` supplied to `" + pe + "`, expected ") + ("`" + H + "`."), { expectedType: H });
        }
        return null;
      }
      return y4($4);
    }
    function x() {
      return y4(s);
    }
    function S(H) {
      function $4(se, he, pe, me, B4) {
        if (typeof H != "function")
          return new p("Property `" + B4 + "` of component `" + pe + "` has invalid PropType notation inside arrayOf.");
        var q4 = se[he];
        if (!Array.isArray(q4)) {
          var Z = I(q4);
          return new p("Invalid " + me + " `" + B4 + "` of type " + ("`" + Z + "` supplied to `" + pe + "`, expected an array."));
        }
        for (var oe = 0;oe < q4.length; oe++) {
          var de = H(q4, oe, pe, me, B4 + "[" + oe + "]", r);
          if (de instanceof Error)
            return de;
        }
        return null;
      }
      return y4($4);
    }
    function O() {
      function H($4, se, he, pe, me) {
        var B4 = $4[se];
        if (!a(B4)) {
          var q4 = I(B4);
          return new p("Invalid " + pe + " `" + me + "` of type " + ("`" + q4 + "` supplied to `" + he + "`, expected a single ReactElement."));
        }
        return null;
      }
      return y4(H);
    }
    function _() {
      function H($4, se, he, pe, me) {
        var B4 = $4[se];
        if (!t.isValidElementType(B4)) {
          var q4 = I(B4);
          return new p("Invalid " + pe + " `" + me + "` of type " + ("`" + q4 + "` supplied to `" + he + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return y4(H);
    }
    function L(H) {
      function $4(se, he, pe, me, B4) {
        if (!(se[he] instanceof H)) {
          var q4 = H.name || d, Z = X4(se[he]);
          return new p("Invalid " + me + " `" + B4 + "` of type " + ("`" + Z + "` supplied to `" + pe + "`, expected ") + ("instance of `" + q4 + "`."));
        }
        return null;
      }
      return y4($4);
    }
    function N4(H) {
      if (!Array.isArray(H))
        return arguments.length > 1 ? o("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).") : o("Invalid argument supplied to oneOf, expected an array."), s;
      function $4(se, he, pe, me, B4) {
        for (var q4 = se[he], Z = 0;Z < H.length; Z++)
          if (g3(q4, H[Z]))
            return null;
        var oe = JSON.stringify(H, function(R4, k) {
          var re = V(k);
          return re === "symbol" ? String(k) : k;
        });
        return new p("Invalid " + me + " `" + B4 + "` of value `" + String(q4) + "` " + ("supplied to `" + pe + "`, expected one of " + oe + "."));
      }
      return y4($4);
    }
    function j(H) {
      function $4(se, he, pe, me, B4) {
        if (typeof H != "function")
          return new p("Property `" + B4 + "` of component `" + pe + "` has invalid PropType notation inside objectOf.");
        var q4 = se[he], Z = I(q4);
        if (Z !== "object")
          return new p("Invalid " + me + " `" + B4 + "` of type " + ("`" + Z + "` supplied to `" + pe + "`, expected an object."));
        for (var oe in q4)
          if (n(q4, oe)) {
            var de = H(q4, oe, pe, me, B4 + "." + oe, r);
            if (de instanceof Error)
              return de;
          }
        return null;
      }
      return y4($4);
    }
    function W(H) {
      if (!Array.isArray(H))
        return o("Invalid argument supplied to oneOfType, expected an instance of array."), s;
      for (var $4 = 0;$4 < H.length; $4++) {
        var se = H[$4];
        if (typeof se != "function")
          return o("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + te(se) + " at index " + $4 + "."), s;
      }
      function he(pe, me, B4, q4, Z) {
        for (var oe = [], de = 0;de < H.length; de++) {
          var R4 = H[de], k = R4(pe, me, B4, q4, Z, r);
          if (k == null)
            return null;
          k.data && n(k.data, "expectedType") && oe.push(k.data.expectedType);
        }
        var re = oe.length > 0 ? ", expected one of type [" + oe.join(", ") + "]" : "";
        return new p("Invalid " + q4 + " `" + Z + "` supplied to " + ("`" + B4 + "`" + re + "."));
      }
      return y4(he);
    }
    function G() {
      function H($4, se, he, pe, me) {
        return z($4[se]) ? null : new p("Invalid " + pe + " `" + me + "` supplied to " + ("`" + he + "`, expected a ReactNode."));
      }
      return y4(H);
    }
    function ee(H, $4, se, he, pe) {
      return new p((H || "React class") + ": " + $4 + " type `" + se + "." + he + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + pe + "`.");
    }
    function fe(H) {
      function $4(se, he, pe, me, B4) {
        var q4 = se[he], Z = I(q4);
        if (Z !== "object")
          return new p("Invalid " + me + " `" + B4 + "` of type `" + Z + "` " + ("supplied to `" + pe + "`, expected `object`."));
        for (var oe in H) {
          var de = H[oe];
          if (typeof de != "function")
            return ee(pe, me, B4, oe, V(de));
          var R4 = de(q4, oe, pe, me, B4 + "." + oe, r);
          if (R4)
            return R4;
        }
        return null;
      }
      return y4($4);
    }
    function P(H) {
      function $4(se, he, pe, me, B4) {
        var q4 = se[he], Z = I(q4);
        if (Z !== "object")
          return new p("Invalid " + me + " `" + B4 + "` of type `" + Z + "` " + ("supplied to `" + pe + "`, expected `object`."));
        var oe = e({}, se[he], H);
        for (var de in oe) {
          var R4 = H[de];
          if (n(H, de) && typeof R4 != "function")
            return ee(pe, me, B4, de, V(R4));
          if (!R4)
            return new p("Invalid " + me + " `" + B4 + "` key `" + de + "` supplied to `" + pe + "`.\nBad object: " + JSON.stringify(se[he], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(H), null, "  "));
          var k = R4(q4, de, pe, me, B4 + "." + de, r);
          if (k)
            return k;
        }
        return null;
      }
      return y4($4);
    }
    function z(H) {
      switch (typeof H) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !H;
        case "object":
          if (Array.isArray(H))
            return H.every(z);
          if (H === null || a(H))
            return true;
          var $4 = f4(H);
          if ($4) {
            var se = $4.call(H), he;
            if ($4 !== H.entries) {
              for (;!(he = se.next()).done; )
                if (!z(he.value))
                  return false;
            } else
              for (;!(he = se.next()).done; ) {
                var pe = he.value;
                if (pe && !z(pe[1]))
                  return false;
              }
          } else
            return false;
          return true;
        default:
          return false;
      }
    }
    function U(H, $4) {
      return H === "symbol" ? true : $4 ? $4["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && $4 instanceof Symbol : false;
    }
    function I(H) {
      var $4 = typeof H;
      return Array.isArray(H) ? "array" : H instanceof RegExp ? "object" : U($4, H) ? "symbol" : $4;
    }
    function V(H) {
      if (typeof H > "u" || H === null)
        return "" + H;
      var $4 = I(H);
      if ($4 === "object") {
        if (H instanceof Date)
          return "date";
        if (H instanceof RegExp)
          return "regexp";
      }
      return $4;
    }
    function te(H) {
      var $4 = V(H);
      switch ($4) {
        case "array":
        case "object":
          return "an " + $4;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + $4;
        default:
          return $4;
      }
    }
    function X4(H) {
      return !H.constructor || !H.constructor.name ? d : H.constructor.name;
    }
    return h.checkPropTypes = i, h.resetWarningCache = i.resetWarningCache, h.PropTypes = h, h;
  }, hc;
}
if (true) {
  Ww = vg(), Uw = true;
  Gh.exports = Fw()(Ww.isElement, Uw);
} else
  ;
var Ww;
var Uw;
var zw = !!(typeof window < "u" && window.document && window.document.createElement);
var Vw = function() {
  function t(e, r) {
    for (var n = 0;n < r.length; n++) {
      var i = r[n];
      i.enumerable = i.enumerable || false, i.configurable = true, "value" in i && (i.writable = true), Object.defineProperty(e, i.key, i);
    }
  }
  return function(e, r, n) {
    return r && t(e.prototype, r), n && t(e, n), e;
  };
}();
function qw(t, e) {
  if (!(t instanceof e))
    throw new TypeError("Cannot call a class as a function");
}
function Hw(t, e) {
  if (!t)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e && (typeof e == "object" || typeof e == "function") ? e : t;
}
function Yw(t, e) {
  if (typeof e != "function" && e !== null)
    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
  t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: false, writable: true, configurable: true } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
}
var wg = function(t) {
  Yw(e, t);
  function e() {
    return qw(this, e), Hw(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
  }
  return Vw(e, [{
    key: "componentWillUnmount",
    value: function() {
      this.defaultNode && document.body.removeChild(this.defaultNode), this.defaultNode = null;
    }
  }, {
    key: "render",
    value: function() {
      return zw ? (!this.props.node && !this.defaultNode && (this.defaultNode = document.createElement("div"), document.body.appendChild(this.defaultNode)), import_react_dom.default.createPortal(this.props.children, this.props.node || this.defaultNode)) : null;
    }
  }]), e;
}(import_react.default.Component);
wg.propTypes = {
  children: F4.node.isRequired,
  node: F4.any
};
var Kw = wg;
var Xw = function() {
  function t(e, r) {
    for (var n = 0;n < r.length; n++) {
      var i = r[n];
      i.enumerable = i.enumerable || false, i.configurable = true, "value" in i && (i.writable = true), Object.defineProperty(e, i.key, i);
    }
  }
  return function(e, r, n) {
    return r && t(e.prototype, r), n && t(e, n), e;
  };
}();
function Jw(t, e) {
  if (!(t instanceof e))
    throw new TypeError("Cannot call a class as a function");
}
function Qw(t, e) {
  if (!t)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e && (typeof e == "object" || typeof e == "function") ? e : t;
}
function Gw(t, e) {
  if (typeof e != "function" && e !== null)
    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
  t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: false, writable: true, configurable: true } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
}
var xg = function(t) {
  Gw(e, t);
  function e() {
    return Jw(this, e), Qw(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
  }
  return Xw(e, [{
    key: "componentDidMount",
    value: function() {
      this.renderPortal();
    }
  }, {
    key: "componentDidUpdate",
    value: function(n) {
      this.renderPortal();
    }
  }, {
    key: "componentWillUnmount",
    value: function() {
      import_react_dom.default.unmountComponentAtNode(this.defaultNode || this.props.node), this.defaultNode && document.body.removeChild(this.defaultNode), this.defaultNode = null, this.portal = null;
    }
  }, {
    key: "renderPortal",
    value: function(n) {
      !this.props.node && !this.defaultNode && (this.defaultNode = document.createElement("div"), document.body.appendChild(this.defaultNode));
      var i = this.props.children;
      typeof this.props.children.type == "function" && (i = import_react.default.cloneElement(this.props.children)), this.portal = import_react_dom.default.unstable_renderSubtreeIntoContainer(this, i, this.props.node || this.defaultNode);
    }
  }, {
    key: "render",
    value: function() {
      return null;
    }
  }]), e;
}(import_react.default.Component);
var Zw = xg;
xg.propTypes = {
  children: F4.node.isRequired,
  node: F4.any
};
var tu = undefined;
import_react_dom.default.createPortal ? tu = Kw : tu = Zw;
function An3(t, e) {
  if (t == null)
    return {};
  var r = {}, n = Object.keys(t), i, o;
  for (o = 0;o < n.length; o++)
    i = n[o], !(e.indexOf(i) >= 0) && (r[i] = t[i]);
  return r;
}
function ke() {
  return ke = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1;e < arguments.length; e++) {
      var r = arguments[e];
      for (var n in r)
        Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
    }
    return t;
  }, ke.apply(this, arguments);
}
function Cg(t) {
  var e, r, n = "";
  if (typeof t == "string" || typeof t == "number")
    n += t;
  else if (typeof t == "object")
    if (Array.isArray(t))
      for (e = 0;e < t.length; e++)
        t[e] && (r = Cg(t[e])) && (n && (n += " "), n += r);
    else
      for (e in t)
        t[e] && (n && (n += " "), n += e);
  return n;
}
function uo() {
  for (var t, e, r = 0, n = "";r < arguments.length; )
    (t = arguments[r++]) && (e = Cg(t)) && (n && (n += " "), n += e);
  return n;
}
function nf(t, e) {
  return function(...n) {
    return t(...n) || e(...n);
  };
}
function fn3() {
  return fn3 = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1;e < arguments.length; e++) {
      var r = arguments[e];
      for (var n in r)
        Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
    }
    return t;
  }, fn3.apply(this, arguments);
}
function ui(t) {
  return t !== null && typeof t == "object" && t.constructor === Object;
}
function Tg(t) {
  if (!ui(t))
    return t;
  const e = {};
  return Object.keys(t).forEach((r) => {
    e[r] = Tg(t[r]);
  }), e;
}
function qr(t, e, r = {
  clone: true
}) {
  const n = r.clone ? fn3({}, t) : t;
  return ui(t) && ui(e) && Object.keys(e).forEach((i) => {
    i !== "__proto__" && (ui(e[i]) && i in t && ui(t[i]) ? n[i] = qr(t[i], e[i], r) : r.clone ? n[i] = ui(e[i]) ? Tg(e[i]) : e[i] : n[i] = e[i]);
  }), n;
}
function t4(t) {
  const {
    prototype: e = {}
  } = t;
  return !!e.isReactComponent;
}
function Og(t, e, r, n, i) {
  const o = t[e], s = i || e;
  if (o == null || typeof window > "u")
    return null;
  let a;
  const l = o.type;
  return typeof l == "function" && !t4(l) && (a = "Did you accidentally use a plain function component for an element instead?"), a !== undefined ? new Error(`Invalid ${n} \`${s}\` supplied to \`${r}\`. Expected an element that can hold a ref. ${a} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
var Ig = nf(F4.element, Og);
Ig.isRequired = nf(F4.element.isRequired, Og);
var Pg = Ig;
var r4 = "exact-prop: ​";
function n4(t) {
  return fn3({}, t, {
    [r4]: (e) => {
      const r = Object.keys(e).filter((n) => !t.hasOwnProperty(n));
      return r.length > 0 ? new Error(`The following props are not supported: ${r.map((n) => `\`${n}\``).join(", ")}. Please remove them.`) : null;
    }
  });
}
var Sa = {};
var i4 = {
  get exports() {
    return Sa;
  },
  set exports(t) {
    Sa = t;
  }
};
var Je = {};
var lp;
function s4() {
  return lp || (lp = 1, function() {
    var t = Symbol.for("react.element"), e = Symbol.for("react.portal"), r = Symbol.for("react.fragment"), n = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), o = Symbol.for("react.provider"), s = Symbol.for("react.context"), a = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), c3 = Symbol.for("react.suspense"), u = Symbol.for("react.suspense_list"), f4 = Symbol.for("react.memo"), d = Symbol.for("react.lazy"), h = Symbol.for("react.offscreen"), g3 = false, p = false, y4 = false, b = false, x = false, S;
    S = Symbol.for("react.module.reference");
    function O(ne) {
      return !!(typeof ne == "string" || typeof ne == "function" || ne === r || ne === i || x || ne === n || ne === c3 || ne === u || b || ne === h || g3 || p || y4 || typeof ne == "object" && ne !== null && (ne.$$typeof === d || ne.$$typeof === f4 || ne.$$typeof === o || ne.$$typeof === s || ne.$$typeof === l || ne.$$typeof === S || ne.getModuleId !== undefined));
    }
    function _(ne) {
      if (typeof ne == "object" && ne !== null) {
        var Ae = ne.$$typeof;
        switch (Ae) {
          case t:
            var C = ne.type;
            switch (C) {
              case r:
              case i:
              case n:
              case c3:
              case u:
                return C;
              default:
                var v = C && C.$$typeof;
                switch (v) {
                  case a:
                  case s:
                  case l:
                  case d:
                  case f4:
                  case o:
                    return v;
                  default:
                    return Ae;
                }
            }
          case e:
            return Ae;
        }
      }
    }
    var L = s, N4 = o, j = t, W = l, G = r, ee = d, fe = f4, P = e, z = i, U = n, I = c3, V = u, te = false, X4 = false;
    function H(ne) {
      return te || (te = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), false;
    }
    function $4(ne) {
      return X4 || (X4 = true, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), false;
    }
    function se(ne) {
      return _(ne) === s;
    }
    function he(ne) {
      return _(ne) === o;
    }
    function pe(ne) {
      return typeof ne == "object" && ne !== null && ne.$$typeof === t;
    }
    function me(ne) {
      return _(ne) === l;
    }
    function B4(ne) {
      return _(ne) === r;
    }
    function q4(ne) {
      return _(ne) === d;
    }
    function Z(ne) {
      return _(ne) === f4;
    }
    function oe(ne) {
      return _(ne) === e;
    }
    function de(ne) {
      return _(ne) === i;
    }
    function R4(ne) {
      return _(ne) === n;
    }
    function k(ne) {
      return _(ne) === c3;
    }
    function re(ne) {
      return _(ne) === u;
    }
    Je.ContextConsumer = L, Je.ContextProvider = N4, Je.Element = j, Je.ForwardRef = W, Je.Fragment = G, Je.Lazy = ee, Je.Memo = fe, Je.Portal = P, Je.Profiler = z, Je.StrictMode = U, Je.Suspense = I, Je.SuspenseList = V, Je.isAsyncMode = H, Je.isConcurrentMode = $4, Je.isContextConsumer = se, Je.isContextProvider = he, Je.isElement = pe, Je.isForwardRef = me, Je.isFragment = B4, Je.isLazy = q4, Je.isMemo = Z, Je.isPortal = oe, Je.isProfiler = de, Je.isStrictMode = R4, Je.isSuspense = k, Je.isSuspenseList = re, Je.isValidElementType = O, Je.typeOf = _;
  }()), Je;
}
(function(t) {
  t.exports = s4();
})(i4);
var a4 = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
function l4(t) {
  const e = `${t}`.match(a4);
  return e && e[1] || "";
}
function Rg(t, e = "") {
  return t.displayName || t.name || l4(t) || e;
}
function cp(t, e, r) {
  const n = Rg(e);
  return t.displayName || (n !== "" ? `${r}(${n})` : r);
}
function c4(t) {
  if (t != null) {
    if (typeof t == "string")
      return t;
    if (typeof t == "function")
      return Rg(t, "Component");
    if (typeof t == "object")
      switch (t.$$typeof) {
        case Sa.ForwardRef:
          return cp(t, t.render, "ForwardRef");
        case Sa.Memo:
          return cp(t, t.type, "memo");
        default:
          return;
      }
  }
}
function Fo(t, e, r, n, i) {
  if (false)
    ;
  const o = t[e], s = i || e;
  return o == null ? null : o && o.nodeType !== 1 ? new Error(`Invalid ${n} \`${s}\` supplied to \`${r}\`. Expected an HTMLElement.`) : null;
}
var u4 = F4.oneOfType([F4.func, F4.object]);
var Dg = u4;
function or(t) {
  if (typeof t != "string")
    throw new Error("MUI: `capitalize(string)` expects a string argument.");
  return t.charAt(0).toUpperCase() + t.slice(1);
}
function f4(...t) {
  return t.reduce((e, r) => r == null ? e : function(...i) {
    e.apply(this, i), r.apply(this, i);
  }, () => {
  });
}
function d4(t, e = 166) {
  let r;
  function n(...i) {
    const o = () => {
      t.apply(this, i);
    };
    clearTimeout(r), r = setTimeout(o, e);
  }
  return n.clear = () => {
    clearTimeout(r);
  }, n;
}
function h4(t, e) {
  return (r, n, i, o, s) => {
    const a = i || "<<anonymous>>", l = s || n;
    return typeof r[n] < "u" ? new Error(`The ${o} \`${l}\` of \`${a}\` is deprecated. ${e}`) : null;
  };
}
function p4(t, e) {
  return /* @__PURE__ */ ve.isValidElement(t) && e.indexOf(t.type.muiName) !== -1;
}
function Ea(t) {
  return t && t.ownerDocument || document;
}
function g4(t) {
  return Ea(t).defaultView || window;
}
function m4(t, e) {
  if (false)
    ;
  const r = e ? fn3({}, e.propTypes) : null;
  return (i) => (o, s, a, l, c3, ...u) => {
    const f7 = c3 || s, d = r == null ? undefined : r[f7];
    if (d) {
      const h = d(o, s, a, l, c3, ...u);
      if (h)
        return h;
    }
    return typeof o[s] < "u" && !o[i] ? new Error(`The prop \`${f7}\` of \`${t}\` can only be used together with the \`${i}\` prop.`) : null;
  };
}
function ka(t, e) {
  typeof t == "function" ? t(e) : t && (t.current = e);
}
var y4 = typeof window < "u" ? ve.useLayoutEffect : ve.useEffect;
var Oi = y4;
var up = 0;
function b4(t) {
  const [e, r] = ve.useState(t), n = t || e;
  return ve.useEffect(() => {
    e == null && (up += 1, r(`mui-${up}`));
  }, [e]), n;
}
var fp = ve.useId;
function Mg(t) {
  if (fp !== undefined) {
    const e = fp();
    return t ?? e;
  }
  return b4(t);
}
function v4(t, e, r, n, i) {
  if (false)
    ;
  const o = i || e;
  return typeof t[e] < "u" ? new Error(`The prop \`${o}\` is not supported. Please remove it.`) : null;
}
function Ng({
  controlled: t,
  default: e,
  name: r,
  state: n = "value"
}) {
  const {
    current: i
  } = ve.useRef(t !== undefined), [o, s] = ve.useState(e), a = i ? t : o;
  if (true) {
    ve.useEffect(() => {
      i !== (t !== undefined) && console.error([`MUI: A component is changing the ${i ? "" : "un"}controlled ${n} state of ${r} to be ${i ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${r} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
    }, [n, r, t]);
    const {
      current: c3
    } = ve.useRef(e);
    ve.useEffect(() => {
      !i && c3 !== e && console.error([`MUI: A component is changing the default ${n} state of an uncontrolled ${r} after being initialized. To suppress this warning opt to use a controlled ${r}.`].join(`
`));
    }, [JSON.stringify(e)]);
  }
  const l = ve.useCallback((c3) => {
    i || s(c3);
  }, []);
  return [a, l];
}
function Lg(t) {
  const e = ve.useRef(t);
  return Oi(() => {
    e.current = t;
  }), ve.useCallback((...r) => (0, e.current)(...r), []);
}
function Xn3(...t) {
  return ve.useMemo(() => t.every((e) => e == null) ? null : (e) => {
    t.forEach((r) => {
      ka(r, e);
    });
  }, t);
}
var Za = true;
var ru = false;
var dp;
var A4 = {
  text: true,
  search: true,
  url: true,
  tel: true,
  email: true,
  password: true,
  number: true,
  date: true,
  month: true,
  week: true,
  time: true,
  datetime: true,
  "datetime-local": true
};
function w4(t) {
  const {
    type: e,
    tagName: r
  } = t;
  return !!(r === "INPUT" && A4[e] && !t.readOnly || r === "TEXTAREA" && !t.readOnly || t.isContentEditable);
}
function x4(t) {
  t.metaKey || t.altKey || t.ctrlKey || (Za = true);
}
function gc() {
  Za = false;
}
function _4() {
  this.visibilityState === "hidden" && ru && (Za = true);
}
function S4(t) {
  t.addEventListener("keydown", x4, true), t.addEventListener("mousedown", gc, true), t.addEventListener("pointerdown", gc, true), t.addEventListener("touchstart", gc, true), t.addEventListener("visibilitychange", _4, true);
}
function E4(t) {
  const {
    target: e
  } = t;
  try {
    return e.matches(":focus-visible");
  } catch {
  }
  return Za || w4(e);
}
function Bg() {
  const t = ve.useCallback((i) => {
    i != null && S4(i.ownerDocument);
  }, []), e = ve.useRef(false);
  function r() {
    return e.current ? (ru = true, window.clearTimeout(dp), dp = window.setTimeout(() => {
      ru = false;
    }, 100), e.current = false, true) : false;
  }
  function n(i) {
    return E4(i) ? (e.current = true, true) : false;
  }
  return {
    isFocusVisibleRef: e,
    onFocus: n,
    onBlur: r,
    ref: t
  };
}
function Fg(t, e) {
  const r = fn3({}, e);
  return Object.keys(t).forEach((n) => {
    if (n.toString().match(/^(components|slots)$/))
      r[n] = fn3({}, t[n], r[n]);
    else if (n.toString().match(/^(componentsProps|slotProps)$/)) {
      const i = t[n] || {}, o = e[n];
      r[n] = {}, !o || !Object.keys(o) ? r[n] = i : !i || !Object.keys(i) ? r[n] = o : (r[n] = fn3({}, o), Object.keys(i).forEach((s) => {
        r[n][s] = Fg(i[s], o[s]);
      }));
    } else
      r[n] === undefined && (r[n] = t[n]);
  }), r;
}
function of(t, e, r = undefined) {
  const n = {};
  return Object.keys(t).forEach((i) => {
    n[i] = t[i].reduce((o, s) => {
      if (s) {
        const a = e(s);
        a !== "" && o.push(a), r && r[s] && o.push(r[s]);
      }
      return o;
    }, []).join(" ");
  }), n;
}
var hp = (t) => t;
var k4 = () => {
  let t = hp;
  return {
    configure(e) {
      t = e;
    },
    generate(e) {
      return t(e);
    },
    reset() {
      t = hp;
    }
  };
};
var C4 = k4();
var jg = C4;
var T4 = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  readOnly: "readOnly",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  required: "required",
  selected: "selected"
};
function Zo(t, e, r = "Mui") {
  const n = T4[e];
  return n ? `${r}-${n}` : `${jg.generate(t)}-${e}`;
}
function sf(t, e, r = "Mui") {
  const n = {};
  return e.forEach((i) => {
    n[i] = Zo(t, i, r);
  }), n;
}
function Nt3() {
  return Nt3 = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1;e < arguments.length; e++) {
      var r = arguments[e];
      for (var n in r)
        Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
    }
    return t;
  }, Nt3.apply(this, arguments);
}
function O4(t) {
  return typeof t == "string";
}
function fo(t, e, r) {
  return t === undefined || O4(t) ? e : Nt3({}, e, {
    ownerState: Nt3({}, e.ownerState, r)
  });
}
var Ca = {};
var I4 = {
  get exports() {
    return Ca;
  },
  set exports(t) {
    Ca = t;
  }
};
var mc = {};
var gp;
function R4() {
  return gp || (gp = 1, function(t) {
    (function() {
      var e = import_react.default, r = tf(), n = 60103, i = 60106;
      t.Fragment = 60107;
      var o = 60108, s = 60114, a = 60109, l = 60110, c3 = 60112, u = 60113, f7 = 60120, d = 60115, h = 60116, g3 = 60121, p = 60122, y7 = 60117, b = 60129, x = 60131;
      if (typeof Symbol == "function" && Symbol.for) {
        var S = Symbol.for;
        n = S("react.element"), i = S("react.portal"), t.Fragment = S("react.fragment"), o = S("react.strict_mode"), s = S("react.profiler"), a = S("react.provider"), l = S("react.context"), c3 = S("react.forward_ref"), u = S("react.suspense"), f7 = S("react.suspense_list"), d = S("react.memo"), h = S("react.lazy"), g3 = S("react.block"), p = S("react.server.block"), y7 = S("react.fundamental"), S("react.scope"), S("react.opaque.id"), b = S("react.debug_trace_mode"), S("react.offscreen"), x = S("react.legacy_hidden");
      }
      var O = typeof Symbol == "function" && Symbol.iterator, _ = "@@iterator";
      function L(Y) {
        if (Y === null || typeof Y != "object")
          return null;
        var ge = O && Y[O] || Y[_];
        return typeof ge == "function" ? ge : null;
      }
      var N4 = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function j(Y) {
        {
          for (var ge = arguments.length, be = new Array(ge > 1 ? ge - 1 : 0), xe = 1;xe < ge; xe++)
            be[xe - 1] = arguments[xe];
          W("error", Y, be);
        }
      }
      function W(Y, ge, be) {
        {
          var xe = N4.ReactDebugCurrentFrame, je = xe.getStackAddendum();
          je !== "" && (ge += "%s", be = be.concat([je]));
          var Ze = be.map(function(Pe) {
            return "" + Pe;
          });
          Ze.unshift("Warning: " + ge), Function.prototype.apply.call(console[Y], console, Ze);
        }
      }
      var G = false;
      function ee(Y) {
        return !!(typeof Y == "string" || typeof Y == "function" || Y === t.Fragment || Y === s || Y === b || Y === o || Y === u || Y === f7 || Y === x || G || typeof Y == "object" && Y !== null && (Y.$$typeof === h || Y.$$typeof === d || Y.$$typeof === a || Y.$$typeof === l || Y.$$typeof === c3 || Y.$$typeof === y7 || Y.$$typeof === g3 || Y[0] === p));
      }
      function fe(Y, ge, be) {
        var xe = ge.displayName || ge.name || "";
        return Y.displayName || (xe !== "" ? be + "(" + xe + ")" : be);
      }
      function P(Y) {
        return Y.displayName || "Context";
      }
      function z(Y) {
        if (Y == null)
          return null;
        if (typeof Y.tag == "number" && j("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."), typeof Y == "function")
          return Y.displayName || Y.name || null;
        if (typeof Y == "string")
          return Y;
        switch (Y) {
          case t.Fragment:
            return "Fragment";
          case i:
            return "Portal";
          case s:
            return "Profiler";
          case o:
            return "StrictMode";
          case u:
            return "Suspense";
          case f7:
            return "SuspenseList";
        }
        if (typeof Y == "object")
          switch (Y.$$typeof) {
            case l:
              var ge = Y;
              return P(ge) + ".Consumer";
            case a:
              var be = Y;
              return P(be._context) + ".Provider";
            case c3:
              return fe(Y, Y.render, "ForwardRef");
            case d:
              return z(Y.type);
            case g3:
              return z(Y._render);
            case h: {
              var xe = Y, je = xe._payload, Ze = xe._init;
              try {
                return z(Ze(je));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var U = 0, I, V, te, X4, H, $4, se;
      function he() {
      }
      he.__reactDisabledLog = true;
      function pe() {
        {
          if (U === 0) {
            I = console.log, V = console.info, te = console.warn, X4 = console.error, H = console.group, $4 = console.groupCollapsed, se = console.groupEnd;
            var Y = {
              configurable: true,
              enumerable: true,
              value: he,
              writable: true
            };
            Object.defineProperties(console, {
              info: Y,
              log: Y,
              warn: Y,
              error: Y,
              group: Y,
              groupCollapsed: Y,
              groupEnd: Y
            });
          }
          U++;
        }
      }
      function me() {
        {
          if (U--, U === 0) {
            var Y = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: r({}, Y, {
                value: I
              }),
              info: r({}, Y, {
                value: V
              }),
              warn: r({}, Y, {
                value: te
              }),
              error: r({}, Y, {
                value: X4
              }),
              group: r({}, Y, {
                value: H
              }),
              groupCollapsed: r({}, Y, {
                value: $4
              }),
              groupEnd: r({}, Y, {
                value: se
              })
            });
          }
          U < 0 && j("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var B4 = N4.ReactCurrentDispatcher, q4;
      function Z(Y, ge, be) {
        {
          if (q4 === undefined)
            try {
              throw Error();
            } catch (je) {
              var xe = je.stack.trim().match(/\n( *(at )?)/);
              q4 = xe && xe[1] || "";
            }
          return `
` + q4 + Y;
        }
      }
      var oe = false, de;
      {
        var R5 = typeof WeakMap == "function" ? WeakMap : Map;
        de = new R5;
      }
      function k(Y, ge) {
        if (!Y || oe)
          return "";
        {
          var be = de.get(Y);
          if (be !== undefined)
            return be;
        }
        var xe;
        oe = true;
        var je = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var Ze;
        Ze = B4.current, B4.current = null, pe();
        try {
          if (ge) {
            var Pe = function() {
              throw Error();
            };
            if (Object.defineProperty(Pe.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Pe, []);
              } catch (cr) {
                xe = cr;
              }
              Reflect.construct(Y, [], Pe);
            } else {
              try {
                Pe.call();
              } catch (cr) {
                xe = cr;
              }
              Y.call(Pe.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (cr) {
              xe = cr;
            }
            Y();
          }
        } catch (cr) {
          if (cr && xe && typeof cr.stack == "string") {
            for (var Re = cr.stack.split(`
`), At3 = xe.stack.split(`
`), lt3 = Re.length - 1, ut3 = At3.length - 1;lt3 >= 1 && ut3 >= 0 && Re[lt3] !== At3[ut3]; )
              ut3--;
            for (;lt3 >= 1 && ut3 >= 0; lt3--, ut3--)
              if (Re[lt3] !== At3[ut3]) {
                if (lt3 !== 1 || ut3 !== 1)
                  do
                    if (lt3--, ut3--, ut3 < 0 || Re[lt3] !== At3[ut3]) {
                      var Zt3 = `
` + Re[lt3].replace(" at new ", " at ");
                      return typeof Y == "function" && de.set(Y, Zt3), Zt3;
                    }
                  while (lt3 >= 1 && ut3 >= 0);
                break;
              }
          }
        } finally {
          oe = false, B4.current = Ze, me(), Error.prepareStackTrace = je;
        }
        var Gr = Y ? Y.displayName || Y.name : "", us = Gr ? Z(Gr) : "";
        return typeof Y == "function" && de.set(Y, us), us;
      }
      function re(Y, ge, be) {
        return k(Y, false);
      }
      function ne(Y) {
        var ge = Y.prototype;
        return !!(ge && ge.isReactComponent);
      }
      function Ae(Y, ge, be) {
        if (Y == null)
          return "";
        if (typeof Y == "function")
          return k(Y, ne(Y));
        if (typeof Y == "string")
          return Z(Y);
        switch (Y) {
          case u:
            return Z("Suspense");
          case f7:
            return Z("SuspenseList");
        }
        if (typeof Y == "object")
          switch (Y.$$typeof) {
            case c3:
              return re(Y.render);
            case d:
              return Ae(Y.type, ge, be);
            case g3:
              return re(Y._render);
            case h: {
              var xe = Y, je = xe._payload, Ze = xe._init;
              try {
                return Ae(Ze(je), ge, be);
              } catch {
              }
            }
          }
        return "";
      }
      var C = {}, v = N4.ReactDebugCurrentFrame;
      function w7(Y) {
        if (Y) {
          var ge = Y._owner, be = Ae(Y.type, Y._source, ge ? ge.type : null);
          v.setExtraStackFrame(be);
        } else
          v.setExtraStackFrame(null);
      }
      function D(Y, ge, be, xe, je) {
        {
          var Ze = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var Pe in Y)
            if (Ze(Y, Pe)) {
              var Re = undefined;
              try {
                if (typeof Y[Pe] != "function") {
                  var At3 = Error((xe || "React class") + ": " + be + " type `" + Pe + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof Y[Pe] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw At3.name = "Invariant Violation", At3;
                }
                Re = Y[Pe](ge, Pe, xe, be, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (lt3) {
                Re = lt3;
              }
              Re && !(Re instanceof Error) && (w7(je), j("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", xe || "React class", be, Pe, typeof Re), w7(null)), Re instanceof Error && !(Re.message in C) && (C[Re.message] = true, w7(je), j("Failed %s type: %s", be, Re.message), w7(null));
            }
        }
      }
      var J4 = N4.ReactCurrentOwner, ae = Object.prototype.hasOwnProperty, ue = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      }, Se, _e, we;
      we = {};
      function Ne(Y) {
        if (ae.call(Y, "ref")) {
          var ge = Object.getOwnPropertyDescriptor(Y, "ref").get;
          if (ge && ge.isReactWarning)
            return false;
        }
        return Y.ref !== undefined;
      }
      function E7(Y) {
        if (ae.call(Y, "key")) {
          var ge = Object.getOwnPropertyDescriptor(Y, "key").get;
          if (ge && ge.isReactWarning)
            return false;
        }
        return Y.key !== undefined;
      }
      function m7(Y, ge) {
        if (typeof Y.ref == "string" && J4.current && ge && J4.current.stateNode !== ge) {
          var be = z(J4.current.type);
          we[be] || (j('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', z(J4.current.type), Y.ref), we[be] = true);
        }
      }
      function A7(Y, ge) {
        {
          var be = function() {
            Se || (Se = true, j("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ge));
          };
          be.isReactWarning = true, Object.defineProperty(Y, "key", {
            get: be,
            configurable: true
          });
        }
      }
      function M4(Y, ge) {
        {
          var be = function() {
            _e || (_e = true, j("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ge));
          };
          be.isReactWarning = true, Object.defineProperty(Y, "ref", {
            get: be,
            configurable: true
          });
        }
      }
      var Q4 = function(Y, ge, be, xe, je, Ze, Pe) {
        var Re = {
          $$typeof: n,
          type: Y,
          key: ge,
          ref: be,
          props: Pe,
          _owner: Ze
        };
        return Re._store = {}, Object.defineProperty(Re._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }), Object.defineProperty(Re, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: xe
        }), Object.defineProperty(Re, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: je
        }), Object.freeze && (Object.freeze(Re.props), Object.freeze(Re)), Re;
      };
      function ie(Y, ge, be, xe, je) {
        {
          var Ze, Pe = {}, Re = null, At3 = null;
          be !== undefined && (Re = "" + be), E7(ge) && (Re = "" + ge.key), Ne(ge) && (At3 = ge.ref, m7(ge, je));
          for (Ze in ge)
            ae.call(ge, Ze) && !ue.hasOwnProperty(Ze) && (Pe[Ze] = ge[Ze]);
          if (Y && Y.defaultProps) {
            var lt3 = Y.defaultProps;
            for (Ze in lt3)
              Pe[Ze] === undefined && (Pe[Ze] = lt3[Ze]);
          }
          if (Re || At3) {
            var ut3 = typeof Y == "function" ? Y.displayName || Y.name || "Unknown" : Y;
            Re && A7(Pe, ut3), At3 && M4(Pe, ut3);
          }
          return Q4(Y, Re, At3, je, xe, J4.current, Pe);
        }
      }
      var { ReactCurrentOwner: le, ReactDebugCurrentFrame: Ee } = N4;
      function Fe(Y) {
        if (Y) {
          var ge = Y._owner, be = Ae(Y.type, Y._source, ge ? ge.type : null);
          Ee.setExtraStackFrame(be);
        } else
          Ee.setExtraStackFrame(null);
      }
      var Ve;
      Ve = false;
      function Ge(Y) {
        return typeof Y == "object" && Y !== null && Y.$$typeof === n;
      }
      function Ue() {
        {
          if (le.current) {
            var Y = z(le.current.type);
            if (Y)
              return `

Check the render method of \`` + Y + "`.";
          }
          return "";
        }
      }
      function bl(Y) {
        {
          if (Y !== undefined) {
            var ge = Y.fileName.replace(/^.*[\\\/]/, ""), be = Y.lineNumber;
            return `

Check your code at ` + ge + ":" + be + ".";
          }
          return "";
        }
      }
      var ss = {};
      function as(Y) {
        {
          var ge = Ue();
          if (!ge) {
            var be = typeof Y == "string" ? Y : Y.displayName || Y.name;
            be && (ge = `

Check the top-level render call using <` + be + ">.");
          }
          return ge;
        }
      }
      function Fi(Y, ge) {
        {
          if (!Y._store || Y._store.validated || Y.key != null)
            return;
          Y._store.validated = true;
          var be = as(ge);
          if (ss[be])
            return;
          ss[be] = true;
          var xe = "";
          Y && Y._owner && Y._owner !== le.current && (xe = " It was passed a child from " + z(Y._owner.type) + "."), Fe(Y), j('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', be, xe), Fe(null);
        }
      }
      function ji(Y, ge) {
        {
          if (typeof Y != "object")
            return;
          if (Array.isArray(Y))
            for (var be = 0;be < Y.length; be++) {
              var xe = Y[be];
              Ge(xe) && Fi(xe, ge);
            }
          else if (Ge(Y))
            Y._store && (Y._store.validated = true);
          else if (Y) {
            var je = L(Y);
            if (typeof je == "function" && je !== Y.entries)
              for (var Ze = je.call(Y), Pe;!(Pe = Ze.next()).done; )
                Ge(Pe.value) && Fi(Pe.value, ge);
          }
        }
      }
      function ls(Y) {
        {
          var ge = Y.type;
          if (ge == null || typeof ge == "string")
            return;
          var be;
          if (typeof ge == "function")
            be = ge.propTypes;
          else if (typeof ge == "object" && (ge.$$typeof === c3 || ge.$$typeof === d))
            be = ge.propTypes;
          else
            return;
          if (be) {
            var xe = z(ge);
            D(be, Y.props, "prop", xe, Y);
          } else if (ge.PropTypes !== undefined && !Ve) {
            Ve = true;
            var je = z(ge);
            j("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", je || "Unknown");
          }
          typeof ge.getDefaultProps == "function" && !ge.getDefaultProps.isReactClassApproved && j("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function cs(Y) {
        {
          for (var ge = Object.keys(Y.props), be = 0;be < ge.length; be++) {
            var xe = ge[be];
            if (xe !== "children" && xe !== "key") {
              Fe(Y), j("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", xe), Fe(null);
              break;
            }
          }
          Y.ref !== null && (Fe(Y), j("Invalid attribute `ref` supplied to `React.Fragment`."), Fe(null));
        }
      }
      function Wi(Y, ge, be, xe, je, Ze) {
        {
          var Pe = ee(Y);
          if (!Pe) {
            var Re = "";
            (Y === undefined || typeof Y == "object" && Y !== null && Object.keys(Y).length === 0) && (Re += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var At3 = bl(je);
            At3 ? Re += At3 : Re += Ue();
            var lt3;
            Y === null ? lt3 = "null" : Array.isArray(Y) ? lt3 = "array" : Y !== undefined && Y.$$typeof === n ? (lt3 = "<" + (z(Y.type) || "Unknown") + " />", Re = " Did you accidentally export a JSX literal instead of a component?") : lt3 = typeof Y, j("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", lt3, Re);
          }
          var ut3 = ie(Y, ge, be, je, Ze);
          if (ut3 == null)
            return ut3;
          if (Pe) {
            var Zt3 = ge.children;
            if (Zt3 !== undefined)
              if (xe)
                if (Array.isArray(Zt3)) {
                  for (var Gr = 0;Gr < Zt3.length; Gr++)
                    ji(Zt3[Gr], Y);
                  Object.freeze && Object.freeze(Zt3);
                } else
                  j("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                ji(Zt3, Y);
          }
          return Y === t.Fragment ? cs(ut3) : ls(ut3), ut3;
        }
      }
      function vl(Y, ge, be) {
        return Wi(Y, ge, be, true);
      }
      function Al(Y, ge, be) {
        return Wi(Y, ge, be, false);
      }
      var wl = Al, Ui = vl;
      t.jsx = wl, t.jsxs = Ui;
    })();
  }(mc)), mc;
}
var mp;
function Wg() {
  return mp || (mp = 1, function(t) {
    t.exports = R4();
  }(I4)), Ca;
}
var Lt3 = Wg();
var D4 = {
  disableDefaultClasses: false
};
var M4 = /* @__PURE__ */ ve.createContext(D4);
function N4(t) {
  const {
    disableDefaultClasses: e
  } = ve.useContext(M4);
  return (r) => e ? "" : t(r);
}
function L4(t, e = []) {
  if (t === undefined)
    return {};
  const r = {};
  return Object.keys(t).filter((n) => n.match(/^on[A-Z]/) && typeof t[n] == "function" && !e.includes(n)).forEach((n) => {
    r[n] = t[n];
  }), r;
}
function B4(t, e) {
  return typeof t == "function" ? t(e) : t;
}
function af(t, e) {
  if (t == null)
    return {};
  var r = {}, n = Object.keys(t), i, o;
  for (o = 0;o < n.length; o++)
    i = n[o], !(e.indexOf(i) >= 0) && (r[i] = t[i]);
  return r;
}
function Ug(t) {
  var e, r, n = "";
  if (typeof t == "string" || typeof t == "number")
    n += t;
  else if (typeof t == "object")
    if (Array.isArray(t))
      for (e = 0;e < t.length; e++)
        t[e] && (r = Ug(t[e])) && (n && (n += " "), n += r);
    else
      for (e in t)
        t[e] && (n && (n += " "), n += e);
  return n;
}
function yp() {
  for (var t, e, r = 0, n = "";r < arguments.length; )
    (t = arguments[r++]) && (e = Ug(t)) && (n && (n += " "), n += e);
  return n;
}
function bp(t) {
  if (t === undefined)
    return {};
  const e = {};
  return Object.keys(t).filter((r) => !(r.match(/^on[A-Z]/) && typeof t[r] == "function")).forEach((r) => {
    e[r] = t[r];
  }), e;
}
function F42(t) {
  const {
    getSlotProps: e,
    additionalProps: r,
    externalSlotProps: n,
    externalForwardedProps: i,
    className: o
  } = t;
  if (!e) {
    const h = yp(i == null ? undefined : i.className, n == null ? undefined : n.className, o, r == null ? undefined : r.className), g3 = Nt3({}, r == null ? undefined : r.style, i == null ? undefined : i.style, n == null ? undefined : n.style), p = Nt3({}, r, i, n);
    return h.length > 0 && (p.className = h), Object.keys(g3).length > 0 && (p.style = g3), {
      props: p,
      internalRef: undefined
    };
  }
  const s = L4(Nt3({}, i, n)), a = bp(n), l = bp(i), c3 = e(s), u = yp(c3 == null ? undefined : c3.className, r == null ? undefined : r.className, o, i == null ? undefined : i.className, n == null ? undefined : n.className), f7 = Nt3({}, c3 == null ? undefined : c3.style, r == null ? undefined : r.style, i == null ? undefined : i.style, n == null ? undefined : n.style), d = Nt3({}, c3, r, l, a);
  return u.length > 0 && (d.className = u), Object.keys(f7).length > 0 && (d.style = f7), {
    props: d,
    internalRef: c3.ref
  };
}
var j4 = ["elementType", "externalSlotProps", "ownerState"];
function W4(t) {
  var e;
  const {
    elementType: r,
    externalSlotProps: n,
    ownerState: i
  } = t, o = af(t, j4), s = B4(n, i), {
    props: a,
    internalRef: l
  } = F42(Nt3({}, o, {
    externalSlotProps: s
  })), c3 = Xn3(l, s == null ? undefined : s.ref, (e = t.additionalProps) == null ? undefined : e.ref);
  return fo(r, Nt3({}, a, {
    ref: c3
  }), i);
}
var Ut3 = "top";
var sr = "bottom";
var ar = "right";
var zt3 = "left";
var $a = "auto";
var $o = [Ut3, sr, ar, zt3];
var Ii = "start";
var jo = "end";
var U4 = "clippingParents";
var zg = "viewport";
var Zi = "popper";
var z4 = "reference";
var vp = /* @__PURE__ */ $o.reduce(function(t, e) {
  return t.concat([e + "-" + Ii, e + "-" + jo]);
}, []);
var Vg = /* @__PURE__ */ [].concat($o, [$a]).reduce(function(t, e) {
  return t.concat([e, e + "-" + Ii, e + "-" + jo]);
}, []);
var V4 = "beforeRead";
var q4 = "read";
var H4 = "afterRead";
var Y4 = "beforeMain";
var K4 = "main";
var X4 = "afterMain";
var J4 = "beforeWrite";
var Q4 = "write";
var G4 = "afterWrite";
var nu = [V4, q4, H4, Y4, K4, X4, J4, Q4, G4];
function Or(t) {
  return t ? (t.nodeName || "").toLowerCase() : null;
}
function Qt3(t) {
  if (t == null)
    return window;
  if (t.toString() !== "[object Window]") {
    var e = t.ownerDocument;
    return e && e.defaultView || window;
  }
  return t;
}
function Jn3(t) {
  var e = Qt3(t).Element;
  return t instanceof e || t instanceof Element;
}
function Xt3(t) {
  var e = Qt3(t).HTMLElement;
  return t instanceof e || t instanceof HTMLElement;
}
function lf(t) {
  if (typeof ShadowRoot > "u")
    return false;
  var e = Qt3(t).ShadowRoot;
  return t instanceof e || t instanceof ShadowRoot;
}
function Z4(t) {
  var e = t.state;
  Object.keys(e.elements).forEach(function(r) {
    var n = e.styles[r] || {}, i = e.attributes[r] || {}, o = e.elements[r];
    !Xt3(o) || !Or(o) || (Object.assign(o.style, n), Object.keys(i).forEach(function(s) {
      var a = i[s];
      a === false ? o.removeAttribute(s) : o.setAttribute(s, a === true ? "" : a);
    }));
  });
}
function $4(t) {
  var e = t.state, r = {
    popper: {
      position: e.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(e.elements.popper.style, r.popper), e.styles = r, e.elements.arrow && Object.assign(e.elements.arrow.style, r.arrow), function() {
    Object.keys(e.elements).forEach(function(n) {
      var i = e.elements[n], o = e.attributes[n] || {}, s = Object.keys(e.styles.hasOwnProperty(n) ? e.styles[n] : r[n]), a = s.reduce(function(l, c3) {
        return l[c3] = "", l;
      }, {});
      !Xt3(i) || !Or(i) || (Object.assign(i.style, a), Object.keys(o).forEach(function(l) {
        i.removeAttribute(l);
      }));
    });
  };
}
var ex = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: Z4,
  effect: $4,
  requires: ["computeStyles"]
};
function yr(t) {
  return t.split("-")[0];
}
var Wn3 = Math.max;
var Ta = Math.min;
var Pi = Math.round;
function iu() {
  var t = navigator.userAgentData;
  return t != null && t.brands && Array.isArray(t.brands) ? t.brands.map(function(e) {
    return e.brand + "/" + e.version;
  }).join(" ") : navigator.userAgent;
}
function qg() {
  return !/^((?!chrome|android).)*safari/i.test(iu());
}
function Ri(t, e, r) {
  e === undefined && (e = false), r === undefined && (r = false);
  var n = t.getBoundingClientRect(), i = 1, o = 1;
  e && Xt3(t) && (i = t.offsetWidth > 0 && Pi(n.width) / t.offsetWidth || 1, o = t.offsetHeight > 0 && Pi(n.height) / t.offsetHeight || 1);
  var s = Jn3(t) ? Qt3(t) : window, a = s.visualViewport, l = !qg() && r, c3 = (n.left + (l && a ? a.offsetLeft : 0)) / i, u = (n.top + (l && a ? a.offsetTop : 0)) / o, f7 = n.width / i, d = n.height / o;
  return {
    width: f7,
    height: d,
    top: u,
    right: c3 + f7,
    bottom: u + d,
    left: c3,
    x: c3,
    y: u
  };
}
function cf(t) {
  var e = Ri(t), r = t.offsetWidth, n = t.offsetHeight;
  return Math.abs(e.width - r) <= 1 && (r = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), {
    x: t.offsetLeft,
    y: t.offsetTop,
    width: r,
    height: n
  };
}
function Hg(t, e) {
  var r = e.getRootNode && e.getRootNode();
  if (t.contains(e))
    return true;
  if (r && lf(r)) {
    var n = e;
    do {
      if (n && t.isSameNode(n))
        return true;
      n = n.parentNode || n.host;
    } while (n);
  }
  return false;
}
function br(t) {
  return Qt3(t).getComputedStyle(t);
}
function tx(t) {
  return ["table", "td", "th"].indexOf(Or(t)) >= 0;
}
function wn3(t) {
  return ((Jn3(t) ? t.ownerDocument : t.document) || window.document).documentElement;
}
function el(t) {
  return Or(t) === "html" ? t : t.assignedSlot || t.parentNode || (lf(t) ? t.host : null) || wn3(t);
}
function Ap(t) {
  return !Xt3(t) || br(t).position === "fixed" ? null : t.offsetParent;
}
function rx(t) {
  var e = /firefox/i.test(iu()), r = /Trident/i.test(iu());
  if (r && Xt3(t)) {
    var n = br(t);
    if (n.position === "fixed")
      return null;
  }
  var i = el(t);
  for (lf(i) && (i = i.host);Xt3(i) && ["html", "body"].indexOf(Or(i)) < 0; ) {
    var o = br(i);
    if (o.transform !== "none" || o.perspective !== "none" || o.contain === "paint" || ["transform", "perspective"].indexOf(o.willChange) !== -1 || e && o.willChange === "filter" || e && o.filter && o.filter !== "none")
      return i;
    i = i.parentNode;
  }
  return null;
}
function es(t) {
  for (var e = Qt3(t), r = Ap(t);r && tx(r) && br(r).position === "static"; )
    r = Ap(r);
  return r && (Or(r) === "html" || Or(r) === "body" && br(r).position === "static") ? e : r || rx(t) || e;
}
function uf(t) {
  return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";
}
function wo(t, e, r) {
  return Wn3(t, Ta(e, r));
}
function nx(t, e, r) {
  var n = wo(t, e, r);
  return n > r ? r : n;
}
function Yg() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function Kg(t) {
  return Object.assign({}, Yg(), t);
}
function Xg(t, e) {
  return e.reduce(function(r, n) {
    return r[n] = t, r;
  }, {});
}
var ix = function(e, r) {
  return e = typeof e == "function" ? e(Object.assign({}, r.rects, {
    placement: r.placement
  })) : e, Kg(typeof e != "number" ? e : Xg(e, $o));
};
function ox(t) {
  var e, r = t.state, n = t.name, i = t.options, o = r.elements.arrow, s = r.modifiersData.popperOffsets, a = yr(r.placement), l = uf(a), c3 = [zt3, ar].indexOf(a) >= 0, u = c3 ? "height" : "width";
  if (!(!o || !s)) {
    var f7 = ix(i.padding, r), d = cf(o), h = l === "y" ? Ut3 : zt3, g3 = l === "y" ? sr : ar, p = r.rects.reference[u] + r.rects.reference[l] - s[l] - r.rects.popper[u], y7 = s[l] - r.rects.reference[l], b = es(o), x = b ? l === "y" ? b.clientHeight || 0 : b.clientWidth || 0 : 0, S = p / 2 - y7 / 2, O = f7[h], _ = x - d[u] - f7[g3], L = x / 2 - d[u] / 2 + S, N5 = wo(O, L, _), j = l;
    r.modifiersData[n] = (e = {}, e[j] = N5, e.centerOffset = N5 - L, e);
  }
}
function sx(t) {
  var { state: e, options: r } = t, n = r.element, i = n === undefined ? "[data-popper-arrow]" : n;
  if (i != null && !(typeof i == "string" && (i = e.elements.popper.querySelector(i), !i))) {
    if (Xt3(i) || console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" ")), !Hg(e.elements.popper, i)) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      return;
    }
    e.elements.arrow = i;
  }
}
var ax = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: ox,
  effect: sx,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function Di(t) {
  return t.split("-")[1];
}
var lx = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function cx(t, e) {
  var { x: r, y: n } = t, i = e.devicePixelRatio || 1;
  return {
    x: Pi(r * i) / i || 0,
    y: Pi(n * i) / i || 0
  };
}
function wp(t) {
  var e, r = t.popper, n = t.popperRect, i = t.placement, o = t.variation, s = t.offsets, a = t.position, l = t.gpuAcceleration, c3 = t.adaptive, u = t.roundOffsets, f7 = t.isFixed, d = s.x, h = d === undefined ? 0 : d, g3 = s.y, p = g3 === undefined ? 0 : g3, y7 = typeof u == "function" ? u({
    x: h,
    y: p
  }) : {
    x: h,
    y: p
  };
  h = y7.x, p = y7.y;
  var b = s.hasOwnProperty("x"), x = s.hasOwnProperty("y"), S = zt3, O = Ut3, _ = window;
  if (c3) {
    var L = es(r), N5 = "clientHeight", j = "clientWidth";
    if (L === Qt3(r) && (L = wn3(r), br(L).position !== "static" && a === "absolute" && (N5 = "scrollHeight", j = "scrollWidth")), L = L, i === Ut3 || (i === zt3 || i === ar) && o === jo) {
      O = sr;
      var W = f7 && L === _ && _.visualViewport ? _.visualViewport.height : L[N5];
      p -= W - n.height, p *= l ? 1 : -1;
    }
    if (i === zt3 || (i === Ut3 || i === sr) && o === jo) {
      S = ar;
      var G = f7 && L === _ && _.visualViewport ? _.visualViewport.width : L[j];
      h -= G - n.width, h *= l ? 1 : -1;
    }
  }
  var ee = Object.assign({
    position: a
  }, c3 && lx), fe = u === true ? cx({
    x: h,
    y: p
  }, Qt3(r)) : {
    x: h,
    y: p
  };
  if (h = fe.x, p = fe.y, l) {
    var P;
    return Object.assign({}, ee, (P = {}, P[O] = x ? "0" : "", P[S] = b ? "0" : "", P.transform = (_.devicePixelRatio || 1) <= 1 ? "translate(" + h + "px, " + p + "px)" : "translate3d(" + h + "px, " + p + "px, 0)", P));
  }
  return Object.assign({}, ee, (e = {}, e[O] = x ? p + "px" : "", e[S] = b ? h + "px" : "", e.transform = "", e));
}
function ux(t) {
  var { state: e, options: r } = t, n = r.gpuAcceleration, i = n === undefined ? true : n, o = r.adaptive, s = o === undefined ? true : o, a = r.roundOffsets, l = a === undefined ? true : a;
  if (true) {
    var c3 = br(e.elements.popper).transitionProperty || "";
    s && ["transform", "top", "right", "bottom", "left"].some(function(f7) {
      return c3.indexOf(f7) >= 0;
    }) && console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', `

`, 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", `

`, "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
  }
  var u = {
    placement: yr(e.placement),
    variation: Di(e.placement),
    popper: e.elements.popper,
    popperRect: e.rects.popper,
    gpuAcceleration: i,
    isFixed: e.options.strategy === "fixed"
  };
  e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, wp(Object.assign({}, u, {
    offsets: e.modifiersData.popperOffsets,
    position: e.options.strategy,
    adaptive: s,
    roundOffsets: l
  })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, wp(Object.assign({}, u, {
    offsets: e.modifiersData.arrow,
    position: "absolute",
    adaptive: false,
    roundOffsets: l
  })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {
    "data-popper-placement": e.placement
  });
}
var fx = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: ux,
  data: {}
};
var Rs = {
  passive: true
};
function dx(t) {
  var { state: e, instance: r, options: n } = t, i = n.scroll, o = i === undefined ? true : i, s = n.resize, a = s === undefined ? true : s, l = Qt3(e.elements.popper), c3 = [].concat(e.scrollParents.reference, e.scrollParents.popper);
  return o && c3.forEach(function(u) {
    u.addEventListener("scroll", r.update, Rs);
  }), a && l.addEventListener("resize", r.update, Rs), function() {
    o && c3.forEach(function(u) {
      u.removeEventListener("scroll", r.update, Rs);
    }), a && l.removeEventListener("resize", r.update, Rs);
  };
}
var hx = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function() {
  },
  effect: dx,
  data: {}
};
var px = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function Gs(t) {
  return t.replace(/left|right|bottom|top/g, function(e) {
    return px[e];
  });
}
var gx = {
  start: "end",
  end: "start"
};
function xp(t) {
  return t.replace(/start|end/g, function(e) {
    return gx[e];
  });
}
function ff(t) {
  var e = Qt3(t), r = e.pageXOffset, n = e.pageYOffset;
  return {
    scrollLeft: r,
    scrollTop: n
  };
}
function df(t) {
  return Ri(wn3(t)).left + ff(t).scrollLeft;
}
function mx(t, e) {
  var r = Qt3(t), n = wn3(t), i = r.visualViewport, o = n.clientWidth, s = n.clientHeight, a = 0, l = 0;
  if (i) {
    o = i.width, s = i.height;
    var c3 = qg();
    (c3 || !c3 && e === "fixed") && (a = i.offsetLeft, l = i.offsetTop);
  }
  return {
    width: o,
    height: s,
    x: a + df(t),
    y: l
  };
}
function yx(t) {
  var e, r = wn3(t), n = ff(t), i = (e = t.ownerDocument) == null ? undefined : e.body, o = Wn3(r.scrollWidth, r.clientWidth, i ? i.scrollWidth : 0, i ? i.clientWidth : 0), s = Wn3(r.scrollHeight, r.clientHeight, i ? i.scrollHeight : 0, i ? i.clientHeight : 0), a = -n.scrollLeft + df(t), l = -n.scrollTop;
  return br(i || r).direction === "rtl" && (a += Wn3(r.clientWidth, i ? i.clientWidth : 0) - o), {
    width: o,
    height: s,
    x: a,
    y: l
  };
}
function hf(t) {
  var e = br(t), r = e.overflow, n = e.overflowX, i = e.overflowY;
  return /auto|scroll|overlay|hidden/.test(r + i + n);
}
function Jg(t) {
  return ["html", "body", "#document"].indexOf(Or(t)) >= 0 ? t.ownerDocument.body : Xt3(t) && hf(t) ? t : Jg(el(t));
}
function xo(t, e) {
  var r;
  e === undefined && (e = []);
  var n = Jg(t), i = n === ((r = t.ownerDocument) == null ? undefined : r.body), o = Qt3(n), s = i ? [o].concat(o.visualViewport || [], hf(n) ? n : []) : n, a = e.concat(s);
  return i ? a : a.concat(xo(el(s)));
}
function ou(t) {
  return Object.assign({}, t, {
    left: t.x,
    top: t.y,
    right: t.x + t.width,
    bottom: t.y + t.height
  });
}
function bx(t, e) {
  var r = Ri(t, false, e === "fixed");
  return r.top = r.top + t.clientTop, r.left = r.left + t.clientLeft, r.bottom = r.top + t.clientHeight, r.right = r.left + t.clientWidth, r.width = t.clientWidth, r.height = t.clientHeight, r.x = r.left, r.y = r.top, r;
}
function _p(t, e, r) {
  return e === zg ? ou(mx(t, r)) : Jn3(e) ? bx(e, r) : ou(yx(wn3(t)));
}
function vx(t) {
  var e = xo(el(t)), r = ["absolute", "fixed"].indexOf(br(t).position) >= 0, n = r && Xt3(t) ? es(t) : t;
  return Jn3(n) ? e.filter(function(i) {
    return Jn3(i) && Hg(i, n) && Or(i) !== "body";
  }) : [];
}
function Ax(t, e, r, n) {
  var i = e === "clippingParents" ? vx(t) : [].concat(e), o = [].concat(i, [r]), s = o[0], a = o.reduce(function(l, c3) {
    var u = _p(t, c3, n);
    return l.top = Wn3(u.top, l.top), l.right = Ta(u.right, l.right), l.bottom = Ta(u.bottom, l.bottom), l.left = Wn3(u.left, l.left), l;
  }, _p(t, s, n));
  return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;
}
function Qg(t) {
  var { reference: e, element: r, placement: n } = t, i = n ? yr(n) : null, o = n ? Di(n) : null, s = e.x + e.width / 2 - r.width / 2, a = e.y + e.height / 2 - r.height / 2, l;
  switch (i) {
    case Ut3:
      l = {
        x: s,
        y: e.y - r.height
      };
      break;
    case sr:
      l = {
        x: s,
        y: e.y + e.height
      };
      break;
    case ar:
      l = {
        x: e.x + e.width,
        y: a
      };
      break;
    case zt3:
      l = {
        x: e.x - r.width,
        y: a
      };
      break;
    default:
      l = {
        x: e.x,
        y: e.y
      };
  }
  var c3 = i ? uf(i) : null;
  if (c3 != null) {
    var u = c3 === "y" ? "height" : "width";
    switch (o) {
      case Ii:
        l[c3] = l[c3] - (e[u] / 2 - r[u] / 2);
        break;
      case jo:
        l[c3] = l[c3] + (e[u] / 2 - r[u] / 2);
        break;
    }
  }
  return l;
}
function Wo(t, e) {
  e === undefined && (e = {});
  var r = e, n = r.placement, i = n === undefined ? t.placement : n, o = r.strategy, s = o === undefined ? t.strategy : o, a = r.boundary, l = a === undefined ? U4 : a, c3 = r.rootBoundary, u = c3 === undefined ? zg : c3, f7 = r.elementContext, d = f7 === undefined ? Zi : f7, h = r.altBoundary, g3 = h === undefined ? false : h, p = r.padding, y7 = p === undefined ? 0 : p, b = Kg(typeof y7 != "number" ? y7 : Xg(y7, $o)), x = d === Zi ? z4 : Zi, S = t.rects.popper, O = t.elements[g3 ? x : d], _ = Ax(Jn3(O) ? O : O.contextElement || wn3(t.elements.popper), l, u, s), L = Ri(t.elements.reference), N5 = Qg({
    reference: L,
    element: S,
    strategy: "absolute",
    placement: i
  }), j = ou(Object.assign({}, S, N5)), W = d === Zi ? j : L, G = {
    top: _.top - W.top + b.top,
    bottom: W.bottom - _.bottom + b.bottom,
    left: _.left - W.left + b.left,
    right: W.right - _.right + b.right
  }, ee = t.modifiersData.offset;
  if (d === Zi && ee) {
    var fe = ee[i];
    Object.keys(G).forEach(function(P) {
      var z = [ar, sr].indexOf(P) >= 0 ? 1 : -1, U = [Ut3, sr].indexOf(P) >= 0 ? "y" : "x";
      G[P] += fe[U] * z;
    });
  }
  return G;
}
function wx(t, e) {
  e === undefined && (e = {});
  var r = e, n = r.placement, i = r.boundary, o = r.rootBoundary, s = r.padding, a = r.flipVariations, l = r.allowedAutoPlacements, c3 = l === undefined ? Vg : l, u = Di(n), f7 = u ? a ? vp : vp.filter(function(g3) {
    return Di(g3) === u;
  }) : $o, d = f7.filter(function(g3) {
    return c3.indexOf(g3) >= 0;
  });
  d.length === 0 && (d = f7, console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" ")));
  var h = d.reduce(function(g3, p) {
    return g3[p] = Wo(t, {
      placement: p,
      boundary: i,
      rootBoundary: o,
      padding: s
    })[yr(p)], g3;
  }, {});
  return Object.keys(h).sort(function(g3, p) {
    return h[g3] - h[p];
  });
}
function xx(t) {
  if (yr(t) === $a)
    return [];
  var e = Gs(t);
  return [xp(t), e, xp(e)];
}
function _x(t) {
  var { state: e, options: r, name: n } = t;
  if (!e.modifiersData[n]._skip) {
    for (var i = r.mainAxis, o = i === undefined ? true : i, s = r.altAxis, a = s === undefined ? true : s, l = r.fallbackPlacements, c3 = r.padding, u = r.boundary, f7 = r.rootBoundary, d = r.altBoundary, h = r.flipVariations, g3 = h === undefined ? true : h, p = r.allowedAutoPlacements, y7 = e.options.placement, b = yr(y7), x = b === y7, S = l || (x || !g3 ? [Gs(y7)] : xx(y7)), O = [y7].concat(S).reduce(function(pe, me) {
      return pe.concat(yr(me) === $a ? wx(e, {
        placement: me,
        boundary: u,
        rootBoundary: f7,
        padding: c3,
        flipVariations: g3,
        allowedAutoPlacements: p
      }) : me);
    }, []), _ = e.rects.reference, L = e.rects.popper, N5 = /* @__PURE__ */ new Map, j = true, W = O[0], G = 0;G < O.length; G++) {
      var ee = O[G], fe = yr(ee), P = Di(ee) === Ii, z = [Ut3, sr].indexOf(fe) >= 0, U = z ? "width" : "height", I = Wo(e, {
        placement: ee,
        boundary: u,
        rootBoundary: f7,
        altBoundary: d,
        padding: c3
      }), V = z ? P ? ar : zt3 : P ? sr : Ut3;
      _[U] > L[U] && (V = Gs(V));
      var te = Gs(V), X7 = [];
      if (o && X7.push(I[fe] <= 0), a && X7.push(I[V] <= 0, I[te] <= 0), X7.every(function(pe) {
        return pe;
      })) {
        W = ee, j = false;
        break;
      }
      N5.set(ee, X7);
    }
    if (j)
      for (var H = g3 ? 3 : 1, $7 = function(me) {
        var B5 = O.find(function(q7) {
          var Z = N5.get(q7);
          if (Z)
            return Z.slice(0, me).every(function(oe) {
              return oe;
            });
        });
        if (B5)
          return W = B5, "break";
      }, se = H;se > 0; se--) {
        var he = $7(se);
        if (he === "break")
          break;
      }
    e.placement !== W && (e.modifiersData[n]._skip = true, e.placement = W, e.reset = true);
  }
}
var Sx = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: _x,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function Sp(t, e, r) {
  return r === undefined && (r = {
    x: 0,
    y: 0
  }), {
    top: t.top - e.height - r.y,
    right: t.right - e.width + r.x,
    bottom: t.bottom - e.height + r.y,
    left: t.left - e.width - r.x
  };
}
function Ep(t) {
  return [Ut3, ar, sr, zt3].some(function(e) {
    return t[e] >= 0;
  });
}
function Ex(t) {
  var { state: e, name: r } = t, n = e.rects.reference, i = e.rects.popper, o = e.modifiersData.preventOverflow, s = Wo(e, {
    elementContext: "reference"
  }), a = Wo(e, {
    altBoundary: true
  }), l = Sp(s, n), c3 = Sp(a, i, o), u = Ep(l), f7 = Ep(c3);
  e.modifiersData[r] = {
    referenceClippingOffsets: l,
    popperEscapeOffsets: c3,
    isReferenceHidden: u,
    hasPopperEscaped: f7
  }, e.attributes.popper = Object.assign({}, e.attributes.popper, {
    "data-popper-reference-hidden": u,
    "data-popper-escaped": f7
  });
}
var kx = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: Ex
};
function Cx(t, e, r) {
  var n = yr(t), i = [zt3, Ut3].indexOf(n) >= 0 ? -1 : 1, o = typeof r == "function" ? r(Object.assign({}, e, {
    placement: t
  })) : r, s = o[0], a = o[1];
  return s = s || 0, a = (a || 0) * i, [zt3, ar].indexOf(n) >= 0 ? {
    x: a,
    y: s
  } : {
    x: s,
    y: a
  };
}
function Tx(t) {
  var { state: e, options: r, name: n } = t, i = r.offset, o = i === undefined ? [0, 0] : i, s = Vg.reduce(function(u, f7) {
    return u[f7] = Cx(f7, e.rects, o), u;
  }, {}), a = s[e.placement], l = a.x, c3 = a.y;
  e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c3), e.modifiersData[n] = s;
}
var Ox = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: Tx
};
function Ix(t) {
  var { state: e, name: r } = t;
  e.modifiersData[r] = Qg({
    reference: e.rects.reference,
    element: e.rects.popper,
    strategy: "absolute",
    placement: e.placement
  });
}
var Px = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: Ix,
  data: {}
};
function Rx(t) {
  return t === "x" ? "y" : "x";
}
function Dx(t) {
  var { state: e, options: r, name: n } = t, i = r.mainAxis, o = i === undefined ? true : i, s = r.altAxis, a = s === undefined ? false : s, l = r.boundary, c3 = r.rootBoundary, u = r.altBoundary, f7 = r.padding, d = r.tether, h = d === undefined ? true : d, g3 = r.tetherOffset, p = g3 === undefined ? 0 : g3, y7 = Wo(e, {
    boundary: l,
    rootBoundary: c3,
    padding: f7,
    altBoundary: u
  }), b = yr(e.placement), x = Di(e.placement), S = !x, O = uf(b), _ = Rx(O), L = e.modifiersData.popperOffsets, N5 = e.rects.reference, j = e.rects.popper, W = typeof p == "function" ? p(Object.assign({}, e.rects, {
    placement: e.placement
  })) : p, G = typeof W == "number" ? {
    mainAxis: W,
    altAxis: W
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, W), ee = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, fe = {
    x: 0,
    y: 0
  };
  if (L) {
    if (o) {
      var P, z = O === "y" ? Ut3 : zt3, U = O === "y" ? sr : ar, I = O === "y" ? "height" : "width", V = L[O], te = V + y7[z], X7 = V - y7[U], H = h ? -j[I] / 2 : 0, $7 = x === Ii ? N5[I] : j[I], se = x === Ii ? -j[I] : -N5[I], he = e.elements.arrow, pe = h && he ? cf(he) : {
        width: 0,
        height: 0
      }, me = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : Yg(), B5 = me[z], q7 = me[U], Z = wo(0, N5[I], pe[I]), oe = S ? N5[I] / 2 - H - Z - B5 - G.mainAxis : $7 - Z - B5 - G.mainAxis, de = S ? -N5[I] / 2 + H + Z + q7 + G.mainAxis : se + Z + q7 + G.mainAxis, R5 = e.elements.arrow && es(e.elements.arrow), k = R5 ? O === "y" ? R5.clientTop || 0 : R5.clientLeft || 0 : 0, re = (P = ee == null ? undefined : ee[O]) != null ? P : 0, ne = V + oe - re - k, Ae = V + de - re, C = wo(h ? Ta(te, ne) : te, V, h ? Wn3(X7, Ae) : X7);
      L[O] = C, fe[O] = C - V;
    }
    if (a) {
      var v, w7 = O === "x" ? Ut3 : zt3, D = O === "x" ? sr : ar, J5 = L[_], ae = _ === "y" ? "height" : "width", ue = J5 + y7[w7], Se = J5 - y7[D], _e = [Ut3, zt3].indexOf(b) !== -1, we = (v = ee == null ? undefined : ee[_]) != null ? v : 0, Ne = _e ? ue : J5 - N5[ae] - j[ae] - we + G.altAxis, E7 = _e ? J5 + N5[ae] + j[ae] - we - G.altAxis : Se, m7 = h && _e ? nx(Ne, J5, E7) : wo(h ? Ne : ue, J5, h ? E7 : Se);
      L[_] = m7, fe[_] = m7 - J5;
    }
    e.modifiersData[n] = fe;
  }
}
var Mx = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: Dx,
  requiresIfExists: ["offset"]
};
function Nx(t) {
  return {
    scrollLeft: t.scrollLeft,
    scrollTop: t.scrollTop
  };
}
function Lx(t) {
  return t === Qt3(t) || !Xt3(t) ? ff(t) : Nx(t);
}
function Bx(t) {
  var e = t.getBoundingClientRect(), r = Pi(e.width) / t.offsetWidth || 1, n = Pi(e.height) / t.offsetHeight || 1;
  return r !== 1 || n !== 1;
}
function Fx(t, e, r) {
  r === undefined && (r = false);
  var n = Xt3(e), i = Xt3(e) && Bx(e), o = wn3(e), s = Ri(t, i, r), a = {
    scrollLeft: 0,
    scrollTop: 0
  }, l = {
    x: 0,
    y: 0
  };
  return (n || !n && !r) && ((Or(e) !== "body" || hf(o)) && (a = Lx(e)), Xt3(e) ? (l = Ri(e, true), l.x += e.clientLeft, l.y += e.clientTop) : o && (l.x = df(o))), {
    x: s.left + a.scrollLeft - l.x,
    y: s.top + a.scrollTop - l.y,
    width: s.width,
    height: s.height
  };
}
function jx(t) {
  var e = /* @__PURE__ */ new Map, r = /* @__PURE__ */ new Set, n = [];
  t.forEach(function(o) {
    e.set(o.name, o);
  });
  function i(o) {
    r.add(o.name);
    var s = [].concat(o.requires || [], o.requiresIfExists || []);
    s.forEach(function(a) {
      if (!r.has(a)) {
        var l = e.get(a);
        l && i(l);
      }
    }), n.push(o);
  }
  return t.forEach(function(o) {
    r.has(o.name) || i(o);
  }), n;
}
function Wx(t) {
  var e = jx(t);
  return nu.reduce(function(r, n) {
    return r.concat(e.filter(function(i) {
      return i.phase === n;
    }));
  }, []);
}
function Ux(t) {
  var e;
  return function() {
    return e || (e = new Promise(function(r) {
      Promise.resolve().then(function() {
        e = undefined, r(t());
      });
    })), e;
  };
}
function Zr(t) {
  for (var e = arguments.length, r = new Array(e > 1 ? e - 1 : 0), n = 1;n < e; n++)
    r[n - 1] = arguments[n];
  return [].concat(r).reduce(function(i, o) {
    return i.replace(/%s/, o);
  }, t);
}
var On3 = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var zx = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var kp = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function Vx(t) {
  t.forEach(function(e) {
    [].concat(Object.keys(e), kp).filter(function(r, n, i) {
      return i.indexOf(r) === n;
    }).forEach(function(r) {
      switch (r) {
        case "name":
          typeof e.name != "string" && console.error(Zr(On3, String(e.name), '"name"', '"string"', '"' + String(e.name) + '"'));
          break;
        case "enabled":
          typeof e.enabled != "boolean" && console.error(Zr(On3, e.name, '"enabled"', '"boolean"', '"' + String(e.enabled) + '"'));
          break;
        case "phase":
          nu.indexOf(e.phase) < 0 && console.error(Zr(On3, e.name, '"phase"', "either " + nu.join(", "), '"' + String(e.phase) + '"'));
          break;
        case "fn":
          typeof e.fn != "function" && console.error(Zr(On3, e.name, '"fn"', '"function"', '"' + String(e.fn) + '"'));
          break;
        case "effect":
          e.effect != null && typeof e.effect != "function" && console.error(Zr(On3, e.name, '"effect"', '"function"', '"' + String(e.fn) + '"'));
          break;
        case "requires":
          e.requires != null && !Array.isArray(e.requires) && console.error(Zr(On3, e.name, '"requires"', '"array"', '"' + String(e.requires) + '"'));
          break;
        case "requiresIfExists":
          Array.isArray(e.requiresIfExists) || console.error(Zr(On3, e.name, '"requiresIfExists"', '"array"', '"' + String(e.requiresIfExists) + '"'));
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + e.name + '" modifier, valid properties are ' + kp.map(function(n) {
            return '"' + n + '"';
          }).join(", ") + '; but "' + r + '" was provided.');
      }
      e.requires && e.requires.forEach(function(n) {
        t.find(function(i) {
          return i.name === n;
        }) == null && console.error(Zr(zx, String(e.name), n, n));
      });
    });
  });
}
function qx(t, e) {
  var r = /* @__PURE__ */ new Set;
  return t.filter(function(n) {
    var i = e(n);
    if (!r.has(i))
      return r.add(i), true;
  });
}
function Hx(t) {
  var e = t.reduce(function(r, n) {
    var i = r[n.name];
    return r[n.name] = i ? Object.assign({}, i, n, {
      options: Object.assign({}, i.options, n.options),
      data: Object.assign({}, i.data, n.data)
    }) : n, r;
  }, {});
  return Object.keys(e).map(function(r) {
    return e[r];
  });
}
var Cp = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var Yx = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var Tp = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function Op() {
  for (var t = arguments.length, e = new Array(t), r = 0;r < t; r++)
    e[r] = arguments[r];
  return !e.some(function(n) {
    return !(n && typeof n.getBoundingClientRect == "function");
  });
}
function Kx(t) {
  t === undefined && (t = {});
  var e = t, r = e.defaultModifiers, n = r === undefined ? [] : r, i = e.defaultOptions, o = i === undefined ? Tp : i;
  return function(a, l, c3) {
    c3 === undefined && (c3 = o);
    var u = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, Tp, o),
      modifiersData: {},
      elements: {
        reference: a,
        popper: l
      },
      attributes: {},
      styles: {}
    }, f7 = [], d = false, h = {
      state: u,
      setOptions: function(b) {
        var x = typeof b == "function" ? b(u.options) : b;
        p(), u.options = Object.assign({}, o, u.options, x), u.scrollParents = {
          reference: Jn3(a) ? xo(a) : a.contextElement ? xo(a.contextElement) : [],
          popper: xo(l)
        };
        var S = Wx(Hx([].concat(n, u.options.modifiers)));
        if (u.orderedModifiers = S.filter(function(ee) {
          return ee.enabled;
        }), true) {
          var O = qx([].concat(S, u.options.modifiers), function(ee) {
            var fe = ee.name;
            return fe;
          });
          if (Vx(O), yr(u.options.placement) === $a) {
            var _ = u.orderedModifiers.find(function(ee) {
              var fe = ee.name;
              return fe === "flip";
            });
            _ || console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
          }
          var L = br(l), N5 = L.marginTop, j = L.marginRight, W = L.marginBottom, G = L.marginLeft;
          [N5, j, W, G].some(function(ee) {
            return parseFloat(ee);
          }) && console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
        }
        return g3(), h.update();
      },
      forceUpdate: function() {
        if (!d) {
          var b = u.elements, x = b.reference, S = b.popper;
          if (!Op(x, S)) {
            console.error(Cp);
            return;
          }
          u.rects = {
            reference: Fx(x, es(S), u.options.strategy === "fixed"),
            popper: cf(S)
          }, u.reset = false, u.placement = u.options.placement, u.orderedModifiers.forEach(function(ee) {
            return u.modifiersData[ee.name] = Object.assign({}, ee.data);
          });
          for (var O = 0, _ = 0;_ < u.orderedModifiers.length; _++) {
            if (O += 1, O > 100) {
              console.error(Yx);
              break;
            }
            if (u.reset === true) {
              u.reset = false, _ = -1;
              continue;
            }
            var L = u.orderedModifiers[_], N5 = L.fn, j = L.options, W = j === undefined ? {} : j, G = L.name;
            typeof N5 == "function" && (u = N5({
              state: u,
              options: W,
              name: G,
              instance: h
            }) || u);
          }
        }
      },
      update: Ux(function() {
        return new Promise(function(y7) {
          h.forceUpdate(), y7(u);
        });
      }),
      destroy: function() {
        p(), d = true;
      }
    };
    if (!Op(a, l))
      return console.error(Cp), h;
    h.setOptions(c3).then(function(y7) {
      !d && c3.onFirstUpdate && c3.onFirstUpdate(y7);
    });
    function g3() {
      u.orderedModifiers.forEach(function(y7) {
        var { name: b, options: x } = y7, S = x === undefined ? {} : x, O = y7.effect;
        if (typeof O == "function") {
          var _ = O({
            state: u,
            name: b,
            instance: h,
            options: S
          }), L = function() {
          };
          f7.push(_ || L);
        }
      });
    }
    function p() {
      f7.forEach(function(y7) {
        return y7();
      }), f7 = [];
    }
    return h;
  };
}
var Xx = [hx, Px, fx, ex, Ox, Sx, Mx, ax, kx];
var Jx = /* @__PURE__ */ Kx({
  defaultModifiers: Xx
});
function Qx(t) {
  return typeof t == "function" ? t() : t;
}
var Oa = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  const {
    children: n,
    container: i,
    disablePortal: o = false
  } = e, [s, a] = ve.useState(null), l = Xn3(/* @__PURE__ */ ve.isValidElement(n) ? n.ref : null, r);
  if (Oi(() => {
    o || a(Qx(i) || document.body);
  }, [i, o]), Oi(() => {
    if (s && !o)
      return ka(r, s), () => {
        ka(r, null);
      };
  }, [r, s, o]), o) {
    if (/* @__PURE__ */ ve.isValidElement(n)) {
      const c3 = {
        ref: l
      };
      return /* @__PURE__ */ ve.cloneElement(n, c3);
    }
    return /* @__PURE__ */ Lt3.jsx(ve.Fragment, {
      children: n
    });
  }
  return /* @__PURE__ */ Lt3.jsx(ve.Fragment, {
    children: s && /* @__PURE__ */ Jm.createPortal(n, s)
  });
});
Oa.propTypes = {
  children: F4.node,
  container: F4.oneOfType([Fo, F4.func]),
  disablePortal: F4.bool
};
Oa["propTypes"] = n4(Oa.propTypes);
var Gx = Oa;
function Zx(t) {
  return Zo("MuiPopper", t);
}
sf("MuiPopper", ["root"]);
var $x = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
var e_ = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
function t_(t, e) {
  if (e === "ltr")
    return t;
  switch (t) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return t;
  }
}
function Ia(t) {
  return typeof t == "function" ? t() : t;
}
function tl(t) {
  return t.nodeType !== undefined;
}
function r_(t) {
  return !tl(t);
}
var n_ = () => of({
  root: ["root"]
}, N4(Zx));
var i_ = {};
var o_ = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  var n;
  const {
    anchorEl: i,
    children: o,
    direction: s,
    disablePortal: a,
    modifiers: l,
    open: c3,
    placement: u,
    popperOptions: f7,
    popperRef: d,
    slotProps: h = {},
    slots: g3 = {},
    TransitionProps: p
  } = e, y7 = af(e, $x), b = ve.useRef(null), x = Xn3(b, r), S = ve.useRef(null), O = Xn3(S, d), _ = ve.useRef(O);
  Oi(() => {
    _.current = O;
  }, [O]), ve.useImperativeHandle(d, () => S.current, []);
  const L = t_(u, s), [N5, j] = ve.useState(L), [W, G] = ve.useState(Ia(i));
  ve.useEffect(() => {
    S.current && S.current.forceUpdate();
  }), ve.useEffect(() => {
    i && G(Ia(i));
  }, [i]), Oi(() => {
    if (!W || !c3)
      return;
    const U = (te) => {
      j(te.placement);
    };
    if (W && tl(W) && W.nodeType === 1) {
      const te = W.getBoundingClientRect();
      te.top === 0 && te.left === 0 && te.right === 0 && te.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    let I = [{
      name: "preventOverflow",
      options: {
        altBoundary: a
      }
    }, {
      name: "flip",
      options: {
        altBoundary: a
      }
    }, {
      name: "onUpdate",
      enabled: true,
      phase: "afterWrite",
      fn: ({
        state: te
      }) => {
        U(te);
      }
    }];
    l != null && (I = I.concat(l)), f7 && f7.modifiers != null && (I = I.concat(f7.modifiers));
    const V = Jx(W, b.current, Nt3({
      placement: L
    }, f7, {
      modifiers: I
    }));
    return _.current(V), () => {
      V.destroy(), _.current(null);
    };
  }, [W, a, l, c3, f7, L]);
  const ee = {
    placement: N5
  };
  p !== null && (ee.TransitionProps = p);
  const fe = n_(), P = (n = g3.root) != null ? n : "div", z = W4({
    elementType: P,
    externalSlotProps: h.root,
    externalForwardedProps: y7,
    additionalProps: {
      role: "tooltip",
      ref: x
    },
    ownerState: e,
    className: fe.root
  });
  return /* @__PURE__ */ Lt3.jsx(P, Nt3({}, z, {
    children: typeof o == "function" ? o(ee) : o
  }));
});
var Gg = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  const {
    anchorEl: n,
    children: i,
    container: o,
    direction: s = "ltr",
    disablePortal: a = false,
    keepMounted: l = false,
    modifiers: c3,
    open: u,
    placement: f7 = "bottom",
    popperOptions: d = i_,
    popperRef: h,
    style: g3,
    transition: p = false,
    slotProps: y7 = {},
    slots: b = {}
  } = e, x = af(e, e_), [S, O] = ve.useState(true), _ = () => {
    O(false);
  }, L = () => {
    O(true);
  };
  if (!l && !u && (!p || S))
    return null;
  let N5;
  if (o)
    N5 = o;
  else if (n) {
    const G = Ia(n);
    N5 = G && tl(G) ? Ea(G).body : Ea(null).body;
  }
  const j = !u && l && (!p || S) ? "none" : undefined, W = p ? {
    in: u,
    onEnter: _,
    onExited: L
  } : undefined;
  return /* @__PURE__ */ Lt3.jsx(Gx, {
    disablePortal: a,
    container: N5,
    children: /* @__PURE__ */ Lt3.jsx(o_, Nt3({
      anchorEl: n,
      direction: s,
      disablePortal: a,
      modifiers: c3,
      ref: r,
      open: p ? !S : u,
      placement: f7,
      popperOptions: d,
      popperRef: h,
      slotProps: y7,
      slots: b
    }, x, {
      style: Nt3({
        position: "fixed",
        top: 0,
        left: 0,
        display: j
      }, g3),
      TransitionProps: W,
      children: i
    }))
  });
});
Gg.propTypes = {
  anchorEl: nf(F4.oneOfType([Fo, F4.object, F4.func]), (t) => {
    if (t.open) {
      const e = Ia(t.anchorEl);
      if (e && tl(e) && e.nodeType === 1) {
        const r = e.getBoundingClientRect();
        if (r.top === 0 && r.left === 0 && r.right === 0 && r.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!e || typeof e.getBoundingClientRect != "function" || r_(e) && e.contextElement != null && e.contextElement.nodeType !== 1)
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join(`
`));
    }
    return null;
  }),
  children: F4.oneOfType([F4.node, F4.func]),
  container: F4.oneOfType([Fo, F4.func]),
  direction: F4.oneOf(["ltr", "rtl"]),
  disablePortal: F4.bool,
  keepMounted: F4.bool,
  modifiers: F4.arrayOf(F4.shape({
    data: F4.object,
    effect: F4.func,
    enabled: F4.bool,
    fn: F4.func,
    name: F4.any,
    options: F4.object,
    phase: F4.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: F4.arrayOf(F4.string),
    requiresIfExists: F4.arrayOf(F4.string)
  })),
  open: F4.bool.isRequired,
  placement: F4.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  popperOptions: F4.shape({
    modifiers: F4.array,
    onFirstUpdate: F4.func,
    placement: F4.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: F4.oneOf(["absolute", "fixed"])
  }),
  popperRef: Dg,
  slotProps: F4.shape({
    root: F4.oneOfType([F4.func, F4.object])
  }),
  slots: F4.shape({
    root: F4.elementType
  }),
  transition: F4.bool
};
var s_ = Gg;
function su() {
  return su = Object.assign ? Object.assign.bind() : function(t) {
    for (var e = 1;e < arguments.length; e++) {
      var r = arguments[e];
      for (var n in r)
        Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
    }
    return t;
  }, su.apply(this, arguments);
}
function a_(t) {
  var e = /* @__PURE__ */ Object.create(null);
  return function(r) {
    return e[r] === undefined && (e[r] = t(r)), e[r];
  };
}
var l_ = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var c_ = /* @__PURE__ */ a_(function(t) {
  return l_.test(t) || t.charCodeAt(0) === 111 && t.charCodeAt(1) === 110 && t.charCodeAt(2) < 91;
});
function u_(t) {
  if (t.sheet)
    return t.sheet;
  for (var e = 0;e < document.styleSheets.length; e++)
    if (document.styleSheets[e].ownerNode === t)
      return document.styleSheets[e];
}
function f_(t) {
  var e = document.createElement("style");
  return e.setAttribute("data-emotion", t.key), t.nonce !== undefined && e.setAttribute("nonce", t.nonce), e.appendChild(document.createTextNode("")), e.setAttribute("data-s", ""), e;
}
var d_ = /* @__PURE__ */ function() {
  function t(r) {
    var n = this;
    this._insertTag = function(i) {
      var o;
      n.tags.length === 0 ? n.insertionPoint ? o = n.insertionPoint.nextSibling : n.prepend ? o = n.container.firstChild : o = n.before : o = n.tags[n.tags.length - 1].nextSibling, n.container.insertBefore(i, o), n.tags.push(i);
    }, this.isSpeedy = r.speedy === undefined ? false : r.speedy, this.tags = [], this.ctr = 0, this.nonce = r.nonce, this.key = r.key, this.container = r.container, this.prepend = r.prepend, this.insertionPoint = r.insertionPoint, this.before = null;
  }
  var e = t.prototype;
  return e.hydrate = function(n) {
    n.forEach(this._insertTag);
  }, e.insert = function(n) {
    this.ctr % (this.isSpeedy ? 65000 : 1) === 0 && this._insertTag(f_(this));
    var i = this.tags[this.tags.length - 1];
    if (true) {
      var o = n.charCodeAt(0) === 64 && n.charCodeAt(1) === 105;
      o && this._alreadyInsertedOrderInsensitiveRule && console.error(`You're attempting to insert the following rule:
` + n + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules."), this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !o;
    }
    if (this.isSpeedy) {
      var s = u_(i);
      try {
        s.insertRule(n, s.cssRules.length);
      } catch (a) {
        !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(n) && console.error('There was a problem inserting the following rule: "' + n + '"', a);
      }
    } else
      i.appendChild(document.createTextNode(n));
    this.ctr++;
  }, e.flush = function() {
    this.tags.forEach(function(n) {
      return n.parentNode && n.parentNode.removeChild(n);
    }), this.tags = [], this.ctr = 0, this._alreadyInsertedOrderInsensitiveRule = false;
  }, t;
}();
var Ot3 = "-ms-";
var Pa = "-moz-";
var qe = "-webkit-";
var pf = "comm";
var gf = "rule";
var mf = "decl";
var h_ = "@import";
var Zg = "@keyframes";
var p_ = "@layer";
var g_ = Math.abs;
var rl = String.fromCharCode;
var m_ = Object.assign;
function y_(t, e) {
  return Ct3(t, 0) ^ 45 ? (((e << 2 ^ Ct3(t, 0)) << 2 ^ Ct3(t, 1)) << 2 ^ Ct3(t, 2)) << 2 ^ Ct3(t, 3) : 0;
}
function $g(t) {
  return t.trim();
}
function b_(t, e) {
  return (t = e.exec(t)) ? t[0] : t;
}
function He(t, e, r) {
  return t.replace(e, r);
}
function au(t, e) {
  return t.indexOf(e);
}
function Ct3(t, e) {
  return t.charCodeAt(e) | 0;
}
function Uo(t, e, r) {
  return t.slice(e, r);
}
function xr(t) {
  return t.length;
}
function yf(t) {
  return t.length;
}
function Ds(t, e) {
  return e.push(t), t;
}
function v_(t, e) {
  return t.map(e).join("");
}
var nl = 1;
var Mi = 1;
var em = 0;
var Vt3 = 0;
var bt3 = 0;
var Bi = "";
function il(t, e, r, n, i, o, s) {
  return { value: t, root: e, parent: r, type: n, props: i, children: o, line: nl, column: Mi, length: s, return: "" };
}
function $i(t, e) {
  return m_(il("", null, null, "", null, null, 0), t, { length: -t.length }, e);
}
function A_() {
  return bt3;
}
function w_() {
  return bt3 = Vt3 > 0 ? Ct3(Bi, --Vt3) : 0, Mi--, bt3 === 10 && (Mi = 1, nl--), bt3;
}
function Jt3() {
  return bt3 = Vt3 < em ? Ct3(Bi, Vt3++) : 0, Mi++, bt3 === 10 && (Mi = 1, nl++), bt3;
}
function Tr() {
  return Ct3(Bi, Vt3);
}
function Zs() {
  return Vt3;
}
function ts(t, e) {
  return Uo(Bi, t, e);
}
function zo(t) {
  switch (t) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function tm(t) {
  return nl = Mi = 1, em = xr(Bi = t), Vt3 = 0, [];
}
function rm(t) {
  return Bi = "", t;
}
function $s(t) {
  return $g(ts(Vt3 - 1, lu(t === 91 ? t + 2 : t === 40 ? t + 1 : t)));
}
function x_(t) {
  for (;(bt3 = Tr()) && bt3 < 33; )
    Jt3();
  return zo(t) > 2 || zo(bt3) > 3 ? "" : " ";
}
function __(t, e) {
  for (;--e && Jt3() && !(bt3 < 48 || bt3 > 102 || bt3 > 57 && bt3 < 65 || bt3 > 70 && bt3 < 97); )
    ;
  return ts(t, Zs() + (e < 6 && Tr() == 32 && Jt3() == 32));
}
function lu(t) {
  for (;Jt3(); )
    switch (bt3) {
      case t:
        return Vt3;
      case 34:
      case 39:
        t !== 34 && t !== 39 && lu(bt3);
        break;
      case 40:
        t === 41 && lu(t);
        break;
      case 92:
        Jt3();
        break;
    }
  return Vt3;
}
function S_(t, e) {
  for (;Jt3() && t + bt3 !== 57; )
    if (t + bt3 === 84 && Tr() === 47)
      break;
  return "/*" + ts(e, Vt3 - 1) + "*" + rl(t === 47 ? t : Jt3());
}
function E_(t) {
  for (;!zo(Tr()); )
    Jt3();
  return ts(t, Vt3);
}
function k_(t) {
  return rm(ea("", null, null, null, [""], t = tm(t), 0, [0], t));
}
function ea(t, e, r, n, i, o, s, a, l) {
  for (var c3 = 0, u = 0, f7 = s, d = 0, h = 0, g3 = 0, p = 1, y7 = 1, b = 1, x = 0, S = "", O = i, _ = o, L = n, N5 = S;y7; )
    switch (g3 = x, x = Jt3()) {
      case 40:
        if (g3 != 108 && Ct3(N5, f7 - 1) == 58) {
          au(N5 += He($s(x), "&", "&\f"), "&\f") != -1 && (b = -1);
          break;
        }
      case 34:
      case 39:
      case 91:
        N5 += $s(x);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        N5 += x_(g3);
        break;
      case 92:
        N5 += __(Zs() - 1, 7);
        continue;
      case 47:
        switch (Tr()) {
          case 42:
          case 47:
            Ds(C_(S_(Jt3(), Zs()), e, r), l);
            break;
          default:
            N5 += "/";
        }
        break;
      case 123 * p:
        a[c3++] = xr(N5) * b;
      case 125 * p:
      case 59:
      case 0:
        switch (x) {
          case 0:
          case 125:
            y7 = 0;
          case 59 + u:
            b == -1 && (N5 = He(N5, /\f/g, "")), h > 0 && xr(N5) - f7 && Ds(h > 32 ? Pp(N5 + ";", n, r, f7 - 1) : Pp(He(N5, " ", "") + ";", n, r, f7 - 2), l);
            break;
          case 59:
            N5 += ";";
          default:
            if (Ds(L = Ip(N5, e, r, c3, u, i, a, S, O = [], _ = [], f7), o), x === 123)
              if (u === 0)
                ea(N5, e, L, L, O, o, f7, a, _);
              else
                switch (d === 99 && Ct3(N5, 3) === 110 ? 100 : d) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    ea(t, L, L, n && Ds(Ip(t, L, L, 0, 0, i, a, S, i, O = [], f7), _), i, _, f7, a, n ? O : _);
                    break;
                  default:
                    ea(N5, L, L, L, [""], _, 0, a, _);
                }
        }
        c3 = u = h = 0, p = b = 1, S = N5 = "", f7 = s;
        break;
      case 58:
        f7 = 1 + xr(N5), h = g3;
      default:
        if (p < 1) {
          if (x == 123)
            --p;
          else if (x == 125 && p++ == 0 && w_() == 125)
            continue;
        }
        switch (N5 += rl(x), x * p) {
          case 38:
            b = u > 0 ? 1 : (N5 += "\f", -1);
            break;
          case 44:
            a[c3++] = (xr(N5) - 1) * b, b = 1;
            break;
          case 64:
            Tr() === 45 && (N5 += $s(Jt3())), d = Tr(), u = f7 = xr(S = N5 += E_(Zs())), x++;
            break;
          case 45:
            g3 === 45 && xr(N5) == 2 && (p = 0);
        }
    }
  return o;
}
function Ip(t, e, r, n, i, o, s, a, l, c3, u) {
  for (var f7 = i - 1, d = i === 0 ? o : [""], h = yf(d), g3 = 0, p = 0, y7 = 0;g3 < n; ++g3)
    for (var b = 0, x = Uo(t, f7 + 1, f7 = g_(p = s[g3])), S = t;b < h; ++b)
      (S = $g(p > 0 ? d[b] + " " + x : He(x, /&\f/g, d[b]))) && (l[y7++] = S);
  return il(t, e, r, i === 0 ? gf : a, l, c3, u);
}
function C_(t, e, r) {
  return il(t, e, r, pf, rl(A_()), Uo(t, 2, -2), 0);
}
function Pp(t, e, r, n) {
  return il(t, e, r, mf, Uo(t, 0, n), Uo(t, n + 1, -1), n);
}
function vi(t, e) {
  for (var r = "", n = yf(t), i = 0;i < n; i++)
    r += e(t[i], i, t, e) || "";
  return r;
}
function T_(t, e, r, n) {
  switch (t.type) {
    case p_:
      if (t.children.length)
        break;
    case h_:
    case mf:
      return t.return = t.return || t.value;
    case pf:
      return "";
    case Zg:
      return t.return = t.value + "{" + vi(t.children, n) + "}";
    case gf:
      t.value = t.props.join(",");
  }
  return xr(r = vi(t.children, n)) ? t.return = t.value + "{" + r + "}" : "";
}
function O_(t) {
  var e = yf(t);
  return function(r, n, i, o) {
    for (var s = "", a = 0;a < e; a++)
      s += t[a](r, n, i, o) || "";
    return s;
  };
}
var P_ = function(e, r, n) {
  for (var i = 0, o = 0;i = o, o = Tr(), i === 38 && o === 12 && (r[n] = 1), !zo(o); )
    Jt3();
  return ts(e, Vt3);
};
var R_ = function(e, r) {
  var n = -1, i = 44;
  do
    switch (zo(i)) {
      case 0:
        i === 38 && Tr() === 12 && (r[n] = 1), e[n] += P_(Vt3 - 1, r, n);
        break;
      case 2:
        e[n] += $s(i);
        break;
      case 4:
        if (i === 44) {
          e[++n] = Tr() === 58 ? "&\f" : "", r[n] = e[n].length;
          break;
        }
      default:
        e[n] += rl(i);
    }
  while (i = Jt3());
  return e;
};
var D_ = function(e, r) {
  return rm(R_(tm(e), r));
};
var Rp = /* @__PURE__ */ new WeakMap;
var M_ = function(e) {
  if (!(e.type !== "rule" || !e.parent || e.length < 1)) {
    for (var { value: r, parent: n } = e, i = e.column === n.column && e.line === n.line;n.type !== "rule"; )
      if (n = n.parent, !n)
        return;
    if (!(e.props.length === 1 && r.charCodeAt(0) !== 58 && !Rp.get(n)) && !i) {
      Rp.set(e, true);
      for (var o = [], s = D_(r, o), a = n.props, l = 0, c3 = 0;l < s.length; l++)
        for (var u = 0;u < a.length; u++, c3++)
          e.props[c3] = o[l] ? s[l].replace(/&\f/g, a[u]) : a[u] + " " + s[l];
    }
  }
};
var N_ = function(e) {
  if (e.type === "decl") {
    var r = e.value;
    r.charCodeAt(0) === 108 && r.charCodeAt(2) === 98 && (e.return = "", e.value = "");
  }
};
var L_ = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var B_ = function(e) {
  return e.type === "comm" && e.children.indexOf(L_) > -1;
};
var F_ = function(e) {
  return function(r, n, i) {
    if (!(r.type !== "rule" || e.compat)) {
      var o = r.value.match(/(:first|:nth|:nth-last)-child/g);
      if (o) {
        for (var s = !!r.parent, a = s ? r.parent.children : i, l = a.length - 1;l >= 0; l--) {
          var c3 = a[l];
          if (c3.line < r.line)
            break;
          if (c3.column < r.column) {
            if (B_(c3))
              return;
            break;
          }
        }
        o.forEach(function(u) {
          console.error('The pseudo class "' + u + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + u.split("-child")[0] + '-of-type".');
        });
      }
    }
  };
};
var nm = function(e) {
  return e.type.charCodeAt(1) === 105 && e.type.charCodeAt(0) === 64;
};
var j_ = function(e, r) {
  for (var n = e - 1;n >= 0; n--)
    if (!nm(r[n]))
      return true;
  return false;
};
var Dp = function(e) {
  e.type = "", e.value = "", e.return = "", e.children = "", e.props = "";
};
var W_ = function(e, r, n) {
  nm(e) && (e.parent ? (console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within globalThis styles."), Dp(e)) : j_(r, n) && (console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules."), Dp(e)));
};
function im(t, e) {
  switch (y_(t, e)) {
    case 5103:
      return qe + "print-" + t + t;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return qe + t + t;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return qe + t + Pa + t + Ot3 + t + t;
    case 6828:
    case 4268:
      return qe + t + Ot3 + t + t;
    case 6165:
      return qe + t + Ot3 + "flex-" + t + t;
    case 5187:
      return qe + t + He(t, /(\w+).+(:[^]+)/, qe + "box-$1$2" + Ot3 + "flex-$1$2") + t;
    case 5443:
      return qe + t + Ot3 + "flex-item-" + He(t, /flex-|-self/, "") + t;
    case 4675:
      return qe + t + Ot3 + "flex-line-pack" + He(t, /align-content|flex-|-self/, "") + t;
    case 5548:
      return qe + t + Ot3 + He(t, "shrink", "negative") + t;
    case 5292:
      return qe + t + Ot3 + He(t, "basis", "preferred-size") + t;
    case 6060:
      return qe + "box-" + He(t, "-grow", "") + qe + t + Ot3 + He(t, "grow", "positive") + t;
    case 4554:
      return qe + He(t, /([^-])(transform)/g, "$1" + qe + "$2") + t;
    case 6187:
      return He(He(He(t, /(zoom-|grab)/, qe + "$1"), /(image-set)/, qe + "$1"), t, "") + t;
    case 5495:
    case 3959:
      return He(t, /(image-set\([^]*)/, qe + "$1$`$1");
    case 4968:
      return He(He(t, /(.+:)(flex-)?(.*)/, qe + "box-pack:$3" + Ot3 + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + qe + t + t;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return He(t, /(.+)-inline(.+)/, qe + "$1$2") + t;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (xr(t) - 1 - e > 6)
        switch (Ct3(t, e + 1)) {
          case 109:
            if (Ct3(t, e + 4) !== 45)
              break;
          case 102:
            return He(t, /(.+:)(.+)-([^]+)/, "$1" + qe + "$2-$3$1" + Pa + (Ct3(t, e + 3) == 108 ? "$3" : "$2-$3")) + t;
          case 115:
            return ~au(t, "stretch") ? im(He(t, "stretch", "fill-available"), e) + t : t;
        }
      break;
    case 4949:
      if (Ct3(t, e + 1) !== 115)
        break;
    case 6444:
      switch (Ct3(t, xr(t) - 3 - (~au(t, "!important") && 10))) {
        case 107:
          return He(t, ":", ":" + qe) + t;
        case 101:
          return He(t, /(.+:)([^;!]+)(;|!.+)?/, "$1" + qe + (Ct3(t, 14) === 45 ? "inline-" : "") + "box$3$1" + qe + "$2$3$1" + Ot3 + "$2box$3") + t;
      }
      break;
    case 5936:
      switch (Ct3(t, e + 11)) {
        case 114:
          return qe + t + Ot3 + He(t, /[svh]\w+-[tblr]{2}/, "tb") + t;
        case 108:
          return qe + t + Ot3 + He(t, /[svh]\w+-[tblr]{2}/, "tb-rl") + t;
        case 45:
          return qe + t + Ot3 + He(t, /[svh]\w+-[tblr]{2}/, "lr") + t;
      }
      return qe + t + Ot3 + t + t;
  }
  return t;
}
var U_ = function(e, r, n, i) {
  if (e.length > -1 && !e.return)
    switch (e.type) {
      case mf:
        e.return = im(e.value, e.length);
        break;
      case Zg:
        return vi([$i(e, {
          value: He(e.value, "@", "@" + qe)
        })], i);
      case gf:
        if (e.length)
          return v_(e.props, function(o) {
            switch (b_(o, /(::plac\w+|:read-\w+)/)) {
              case ":read-only":
              case ":read-write":
                return vi([$i(e, {
                  props: [He(o, /:(read-\w+)/, ":" + Pa + "$1")]
                })], i);
              case "::placeholder":
                return vi([$i(e, {
                  props: [He(o, /:(plac\w+)/, ":" + qe + "input-$1")]
                }), $i(e, {
                  props: [He(o, /:(plac\w+)/, ":" + Pa + "$1")]
                }), $i(e, {
                  props: [He(o, /:(plac\w+)/, Ot3 + "input-$1")]
                })], i);
            }
            return "";
          });
    }
};
var z_ = [U_];
var V_ = function(e) {
  var r = e.key;
  if (!r)
    throw new Error(`You have to configure \`key\` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.
If multiple caches share the same key they might "fight" for each other's style elements.`);
  if (r === "css") {
    var n = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(n, function(p) {
      var y7 = p.getAttribute("data-emotion");
      y7.indexOf(" ") !== -1 && (document.head.appendChild(p), p.setAttribute("data-s", ""));
    });
  }
  var i = e.stylisPlugins || z_;
  if (/[^a-z-]/.test(r))
    throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + r + '" was passed');
  var o = {}, s, a = [];
  s = e.container || document.head, Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + r + ' "]'), function(p) {
    for (var y7 = p.getAttribute("data-emotion").split(" "), b = 1;b < y7.length; b++)
      o[y7[b]] = true;
    a.push(p);
  });
  var l, c3 = [M_, N_];
  c3.push(F_({
    get compat() {
      return g3.compat;
    }
  }), W_);
  {
    var u, f7 = [T_, function(p) {
      p.root || (p.return ? u.insert(p.return) : p.value && p.type !== pf && u.insert(p.value + "{}"));
    }], d = O_(c3.concat(i, f7)), h = function(y7) {
      return vi(k_(y7), d);
    };
    l = function(y7, b, x, S) {
      u = x, b.map !== undefined && (u = {
        insert: function(_) {
          x.insert(_ + b.map);
        }
      }), h(y7 ? y7 + "{" + b.styles + "}" : b.styles), S && (g3.inserted[b.name] = true);
    };
  }
  var g3 = {
    key: r,
    sheet: new d_({
      key: r,
      container: s,
      nonce: e.nonce,
      speedy: e.speedy,
      prepend: e.prepend,
      insertionPoint: e.insertionPoint
    }),
    nonce: e.nonce,
    inserted: o,
    registered: {},
    insert: l
  };
  return g3.sheet.hydrate(a), g3;
};
var q_ = true;
function om(t, e, r) {
  var n = "";
  return r.split(" ").forEach(function(i) {
    t[i] !== undefined ? e.push(t[i] + ";") : n += i + " ";
  }), n;
}
var bf = function(e, r, n) {
  var i = e.key + "-" + r.name;
  (n === false || q_ === false) && e.registered[i] === undefined && (e.registered[i] = r.styles);
};
var sm = function(e, r, n) {
  bf(e, r, n);
  var i = e.key + "-" + r.name;
  if (e.inserted[r.name] === undefined) {
    var o = r;
    do
      e.insert(r === o ? "." + i : "", o, e.sheet, true), o = o.next;
    while (o !== undefined);
  }
};
function H_(t) {
  for (var e = 0, r, n = 0, i = t.length;i >= 4; ++n, i -= 4)
    r = t.charCodeAt(n) & 255 | (t.charCodeAt(++n) & 255) << 8 | (t.charCodeAt(++n) & 255) << 16 | (t.charCodeAt(++n) & 255) << 24, r = (r & 65535) * 1540483477 + ((r >>> 16) * 59797 << 16), r ^= r >>> 24, e = (r & 65535) * 1540483477 + ((r >>> 16) * 59797 << 16) ^ (e & 65535) * 1540483477 + ((e >>> 16) * 59797 << 16);
  switch (i) {
    case 3:
      e ^= (t.charCodeAt(n + 2) & 255) << 16;
    case 2:
      e ^= (t.charCodeAt(n + 1) & 255) << 8;
    case 1:
      e ^= t.charCodeAt(n) & 255, e = (e & 65535) * 1540483477 + ((e >>> 16) * 59797 << 16);
  }
  return e ^= e >>> 13, e = (e & 65535) * 1540483477 + ((e >>> 16) * 59797 << 16), ((e ^ e >>> 15) >>> 0).toString(36);
}
var Y_ = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
function K_(t) {
  var e = /* @__PURE__ */ Object.create(null);
  return function(r) {
    return e[r] === undefined && (e[r] = t(r)), e[r];
  };
}
var Mp = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var X_ = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var J_ = /[A-Z]|^ms/g;
var am = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var vf = function(e) {
  return e.charCodeAt(1) === 45;
};
var Np = function(e) {
  return e != null && typeof e != "boolean";
};
var yc = /* @__PURE__ */ K_(function(t) {
  return vf(t) ? t : t.replace(J_, "-$&").toLowerCase();
});
var Ra = function(e, r) {
  switch (e) {
    case "animation":
    case "animationName":
      if (typeof r == "string")
        return r.replace(am, function(n, i, o) {
          return dr = {
            name: i,
            styles: o,
            next: dr
          }, i;
        });
  }
  return Y_[e] !== 1 && !vf(e) && typeof r == "number" && r !== 0 ? r + "px" : r;
};
if (true) {
  Q_ = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/, G_ = ["normal", "none", "initial", "inherit", "unset"], Z_ = Ra, $_ = /^-ms-/, e9 = /-(.)/g, Lp = {};
  Ra = function(e, r) {
    if (e === "content" && (typeof r != "string" || G_.indexOf(r) === -1 && !Q_.test(r) && (r.charAt(0) !== r.charAt(r.length - 1) || r.charAt(0) !== '"' && r.charAt(0) !== "'")))
      throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + r + "\"'`");
    var n = Z_(e, r);
    return n !== "" && !vf(e) && e.indexOf("-") !== -1 && Lp[e] === undefined && (Lp[e] = true, console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + e.replace($_, "ms-").replace(e9, function(i, o) {
      return o.toUpperCase();
    }) + "?")), n;
  };
}
var Q_;
var G_;
var Z_;
var $_;
var e9;
var Lp;
var lm = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function Vo(t, e, r) {
  if (r == null)
    return "";
  if (r.__emotion_styles !== undefined) {
    if (r.toString() === "NO_COMPONENT_SELECTOR")
      throw new Error(lm);
    return r;
  }
  switch (typeof r) {
    case "boolean":
      return "";
    case "object": {
      if (r.anim === 1)
        return dr = {
          name: r.name,
          styles: r.styles,
          next: dr
        }, r.name;
      if (r.styles !== undefined) {
        var n = r.next;
        if (n !== undefined)
          for (;n !== undefined; )
            dr = {
              name: n.name,
              styles: n.styles,
              next: dr
            }, n = n.next;
        var i = r.styles + ";";
        return r.map !== undefined && (i += r.map), i;
      }
      return t9(t, e, r);
    }
    case "function": {
      if (t !== undefined) {
        var o = dr, s = r(t);
        return dr = o, Vo(t, e, s);
      } else
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      break;
    }
    case "string":
      if (true) {
        var a = [], l = r.replace(am, function(u, f7, d) {
          var h = "animation" + a.length;
          return a.push("const " + h + " = keyframes`" + d.replace(/^@keyframes animation-\w+/, "") + "`"), "${" + h + "}";
        });
        a.length && console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(a, ["`" + l + "`"]).join(`
`) + `

You should wrap it with \`css\` like this:

` + ("css`" + l + "`"));
      }
      break;
  }
  if (e == null)
    return r;
  var c3 = e[r];
  return c3 !== undefined ? c3 : r;
}
function t9(t, e, r) {
  var n = "";
  if (Array.isArray(r))
    for (var i = 0;i < r.length; i++)
      n += Vo(t, e, r[i]) + ";";
  else
    for (var o in r) {
      var s = r[o];
      if (typeof s != "object")
        e != null && e[s] !== undefined ? n += o + "{" + e[s] + "}" : Np(s) && (n += yc(o) + ":" + Ra(o, s) + ";");
      else {
        if (o === "NO_COMPONENT_SELECTOR" && true)
          throw new Error(lm);
        if (Array.isArray(s) && typeof s[0] == "string" && (e == null || e[s[0]] === undefined))
          for (var a = 0;a < s.length; a++)
            Np(s[a]) && (n += yc(o) + ":" + Ra(o, s[a]) + ";");
        else {
          var l = Vo(t, e, s);
          switch (o) {
            case "animation":
            case "animationName": {
              n += yc(o) + ":" + l + ";";
              break;
            }
            default:
              o === "undefined" && console.error(X_), n += o + "{" + l + "}";
          }
        }
      }
    }
  return n;
}
var Bp = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var cm;
cm = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
var dr;
var cu = function(e, r, n) {
  if (e.length === 1 && typeof e[0] == "object" && e[0] !== null && e[0].styles !== undefined)
    return e[0];
  var i = true, o = "";
  dr = undefined;
  var s = e[0];
  s == null || s.raw === undefined ? (i = false, o += Vo(n, r, s)) : (s[0] === undefined && console.error(Mp), o += s[0]);
  for (var a = 1;a < e.length; a++)
    o += Vo(n, r, e[a]), i && (s[a] === undefined && console.error(Mp), o += s[a]);
  var l;
  o = o.replace(cm, function(d) {
    return l = d, "";
  }), Bp.lastIndex = 0;
  for (var c3 = "", u;(u = Bp.exec(o)) !== null; )
    c3 += "-" + u[1];
  var f7 = H_(o) + c3;
  return {
    name: f7,
    styles: o,
    map: l,
    next: dr,
    toString: function() {
      return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
    }
  };
};
var r9 = function(e) {
  return e();
};
var n9 = ve.useInsertionEffect ? ve.useInsertionEffect : false;
var um = n9 || r9;
var i9 = {}.hasOwnProperty;
var Af = /* @__PURE__ */ import_react.createContext(typeof HTMLElement < "u" ? /* @__PURE__ */ V_({
  key: "css"
}) : null);
Af.displayName = "EmotionCacheContext";
Af.Provider;
var fm = function(e) {
  return /* @__PURE__ */ import_react.forwardRef(function(r, n) {
    var i = import_react.useContext(Af);
    return e(r, i, n);
  });
};
var ol = /* @__PURE__ */ import_react.createContext({});
ol.displayName = "EmotionThemeContext";
var Fp = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var jp = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var o9 = function(e) {
  var { cache: r, serialized: n, isStringTag: i } = e;
  return bf(r, n, i), um(function() {
    return sm(r, n, i);
  }), null;
};
var s9 = /* @__PURE__ */ fm(function(t, e, r) {
  var n = t.css;
  typeof n == "string" && e.registered[n] !== undefined && (n = e.registered[n]);
  var i = t[Fp], o = [n], s = "";
  typeof t.className == "string" ? s = om(e.registered, o, t.className) : t.className != null && (s = t.className + " ");
  var a = cu(o, undefined, import_react.useContext(ol));
  if (a.name.indexOf("-") === -1) {
    var l = t[jp];
    l && (a = cu([a, "label:" + l + ";"]));
  }
  s += e.key + "-" + a.name;
  var c3 = {};
  for (var u in t)
    i9.call(t, u) && u !== "css" && u !== Fp && u !== jp && (c3[u] = t[u]);
  return c3.ref = r, c3.className = s, /* @__PURE__ */ import_react.createElement(import_react.Fragment, null, /* @__PURE__ */ import_react.createElement(o9, {
    cache: e,
    serialized: a,
    isStringTag: typeof i == "string"
  }), /* @__PURE__ */ import_react.createElement(i, c3));
});
s9.displayName = "EmotionCssPropInternal";
var a9 = c_;
var l9 = function(e) {
  return e !== "theme";
};
var Wp = function(e) {
  return typeof e == "string" && e.charCodeAt(0) > 96 ? a9 : l9;
};
var Up = function(e, r, n) {
  var i;
  if (r) {
    var o = r.shouldForwardProp;
    i = e.__emotion_forwardProp && o ? function(s) {
      return e.__emotion_forwardProp(s) && o(s);
    } : o;
  }
  return typeof i != "function" && n && (i = e.__emotion_forwardProp), i;
};
var zp = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var c9 = function(e) {
  var { cache: r, serialized: n, isStringTag: i } = e;
  return bf(r, n, i), um(function() {
    return sm(r, n, i);
  }), null;
};
var u9 = function t(e, r) {
  if (e === undefined)
    throw new Error(`You are trying to create a styled element with an undefined component.
You may have forgotten to import it.`);
  var n = e.__emotion_real === e, i = n && e.__emotion_base || e, o, s;
  r !== undefined && (o = r.label, s = r.target);
  var a = Up(e, r, n), l = a || Wp(i), c3 = !l("as");
  return function() {
    var u = arguments, f7 = n && e.__emotion_styles !== undefined ? e.__emotion_styles.slice(0) : [];
    if (o !== undefined && f7.push("label:" + o + ";"), u[0] == null || u[0].raw === undefined)
      f7.push.apply(f7, u);
    else {
      u[0][0] === undefined && console.error(zp), f7.push(u[0][0]);
      for (var d = u.length, h = 1;h < d; h++)
        u[0][h] === undefined && console.error(zp), f7.push(u[h], u[0][h]);
    }
    var g3 = fm(function(p, y7, b) {
      var x = c3 && p.as || i, S = "", O = [], _ = p;
      if (p.theme == null) {
        _ = {};
        for (var L in p)
          _[L] = p[L];
        _.theme = import_react.useContext(ol);
      }
      typeof p.className == "string" ? S = om(y7.registered, O, p.className) : p.className != null && (S = p.className + " ");
      var N5 = cu(f7.concat(O), y7.registered, _);
      S += y7.key + "-" + N5.name, s !== undefined && (S += " " + s);
      var j = c3 && a === undefined ? Wp(x) : l, W = {};
      for (var G in p)
        c3 && G === "as" || j(G) && (W[G] = p[G]);
      return W.className = S, W.ref = b, /* @__PURE__ */ import_react.createElement(import_react.Fragment, null, /* @__PURE__ */ import_react.createElement(c9, {
        cache: y7,
        serialized: N5,
        isStringTag: typeof x == "string"
      }), /* @__PURE__ */ import_react.createElement(x, W));
    });
    return g3.displayName = o !== undefined ? o : "Styled(" + (typeof i == "string" ? i : i.displayName || i.name || "Component") + ")", g3.defaultProps = e.defaultProps, g3.__emotion_real = g3, g3.__emotion_base = i, g3.__emotion_styles = f7, g3.__emotion_forwardProp = a, Object.defineProperty(g3, "toString", {
      value: function() {
        return s === undefined ? "NO_COMPONENT_SELECTOR" : "." + s;
      }
    }), g3.withComponent = function(p, y7) {
      return t(p, su({}, r, y7, {
        shouldForwardProp: Up(g3, y7, true)
      })).apply(undefined, f7);
    }, g3;
  };
};
var f9 = u9;
var d9 = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var uu = f9.bind();
d9.forEach(function(t3) {
  uu[t3] = uu(t3);
});
var h9 = uu;
function p9(t3, e) {
  const r = h9(t3, e);
  return (...n) => {
    const i = typeof t3 == "string" ? `"${t3}"` : "component";
    return n.length === 0 ? console.error([`MUI: Seems like you called \`styled(${i})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join(`
`)) : n.some((o) => o === undefined) && console.error(`MUI: the styled(${i})(...args) API requires all its args to be defined.`), r(...n);
  };
}
var g9 = (t3, e) => {
  Array.isArray(t3.__emotion_styles) && (t3.__emotion_styles = e(t3.__emotion_styles));
};
function kt3() {
  return kt3 = Object.assign ? Object.assign.bind() : function(t3) {
    for (var e = 1;e < arguments.length; e++) {
      var r = arguments[e];
      for (var n in r)
        Object.prototype.hasOwnProperty.call(r, n) && (t3[n] = r[n]);
    }
    return t3;
  }, kt3.apply(this, arguments);
}
function sl(t3, e) {
  if (t3 == null)
    return {};
  var r = {}, n = Object.keys(t3), i, o;
  for (o = 0;o < n.length; o++)
    i = n[o], !(e.indexOf(i) >= 0) && (r[i] = t3[i]);
  return r;
}
var m9 = ["values", "unit", "step"];
var y9 = (t3) => {
  const e = Object.keys(t3).map((r) => ({
    key: r,
    val: t3[r]
  })) || [];
  return e.sort((r, n) => r.val - n.val), e.reduce((r, n) => kt3({}, r, {
    [n.key]: n.val
  }), {});
};
function b9(t3) {
  const {
    values: e = {
      xs: 0,
      sm: 600,
      md: 900,
      lg: 1200,
      xl: 1536
    },
    unit: r = "px",
    step: n = 5
  } = t3, i = sl(t3, m9), o = y9(e), s = Object.keys(o);
  function a(d) {
    return `@media (min-width:${typeof e[d] == "number" ? e[d] : d}${r})`;
  }
  function l(d) {
    return `@media (max-width:${(typeof e[d] == "number" ? e[d] : d) - n / 100}${r})`;
  }
  function c3(d, h) {
    const g3 = s.indexOf(h);
    return `@media (min-width:${typeof e[d] == "number" ? e[d] : d}${r}) and (max-width:${(g3 !== -1 && typeof e[s[g3]] == "number" ? e[s[g3]] : h) - n / 100}${r})`;
  }
  function u(d) {
    return s.indexOf(d) + 1 < s.length ? c3(d, s[s.indexOf(d) + 1]) : a(d);
  }
  function f7(d) {
    const h = s.indexOf(d);
    return h === 0 ? a(s[1]) : h === s.length - 1 ? l(s[h]) : c3(d, s[s.indexOf(d) + 1]).replace("@media", "@media not all and");
  }
  return kt3({
    keys: s,
    values: o,
    up: a,
    down: l,
    between: c3,
    only: u,
    not: f7,
    unit: r
  }, i);
}
var v9 = {
  borderRadius: 4
};
var A9 = v9;
var w9 = F4.oneOfType([F4.number, F4.string, F4.object, F4.array]);
var xn3 = w9;
function _o(t3, e) {
  return e ? qr(t3, e, {
    clone: false
  }) : t3;
}
var wf = {
  xs: 0,
  sm: 600,
  md: 900,
  lg: 1200,
  xl: 1536
};
var Vp = {
  keys: ["xs", "sm", "md", "lg", "xl"],
  up: (t3) => `@media (min-width:${wf[t3]}px)`
};
function Kr(t3, e, r) {
  const n = t3.theme || {};
  if (Array.isArray(e)) {
    const o = n.breakpoints || Vp;
    return e.reduce((s, a, l) => (s[o.up(o.keys[l])] = r(e[l]), s), {});
  }
  if (typeof e == "object") {
    const o = n.breakpoints || Vp;
    return Object.keys(e).reduce((s, a) => {
      if (Object.keys(o.values || wf).indexOf(a) !== -1) {
        const l = o.up(a);
        s[l] = r(e[a], a);
      } else {
        const l = a;
        s[l] = e[l];
      }
      return s;
    }, {});
  }
  return r(e);
}
function x9(t3 = {}) {
  var e;
  return ((e = t3.keys) == null ? undefined : e.reduce((n, i) => {
    const o = t3.up(i);
    return n[o] = {}, n;
  }, {})) || {};
}
function _9(t3, e) {
  return t3.reduce((r, n) => {
    const i = r[n];
    return (!i || Object.keys(i).length === 0) && delete r[n], r;
  }, e);
}
function al(t3, e, r = true) {
  if (!e || typeof e != "string")
    return null;
  if (t3 && t3.vars && r) {
    const n = `vars.${e}`.split(".").reduce((i, o) => i && i[o] ? i[o] : null, t3);
    if (n != null)
      return n;
  }
  return e.split(".").reduce((n, i) => n && n[i] != null ? n[i] : null, t3);
}
function Da(t3, e, r, n = r) {
  let i;
  return typeof t3 == "function" ? i = t3(r) : Array.isArray(t3) ? i = t3[r] || n : i = al(t3, r) || n, e && (i = e(i, n, t3)), i;
}
function Qe(t3) {
  const {
    prop: e,
    cssProperty: r = t3.prop,
    themeKey: n,
    transform: i
  } = t3, o = (s) => {
    if (s[e] == null)
      return null;
    const a = s[e], l = s.theme, c3 = al(l, n) || {};
    return Kr(s, a, (f7) => {
      let d = Da(c3, i, f7);
      return f7 === d && typeof f7 == "string" && (d = Da(c3, i, `${e}${f7 === "default" ? "" : or(f7)}`, f7)), r === false ? d : {
        [r]: d
      };
    });
  };
  return o.propTypes = {
    [e]: xn3
  }, o.filterProps = [e], o;
}
function S9(t3) {
  const e = {};
  return (r) => (e[r] === undefined && (e[r] = t3(r)), e[r]);
}
var E9 = {
  m: "margin",
  p: "padding"
};
var k9 = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
};
var qp = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
};
var C9 = S9((t3) => {
  if (t3.length > 2)
    if (qp[t3])
      t3 = qp[t3];
    else
      return [t3];
  const [e, r] = t3.split(""), n = E9[e], i = k9[r] || "";
  return Array.isArray(i) ? i.map((o) => n + o) : [n + i];
});
var ll = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
var cl = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
var T9 = [...ll, ...cl];
function rs(t3, e, r, n) {
  var i;
  const o = (i = al(t3, e, false)) != null ? i : r;
  return typeof o == "number" ? (s) => typeof s == "string" ? s : (typeof s != "number" && console.error(`MUI: Expected ${n} argument to be a number or a string, got ${s}.`), o * s) : Array.isArray(o) ? (s) => typeof s == "string" ? s : (Number.isInteger(s) ? s > o.length - 1 && console.error([`MUI: The value provided (${s}) overflows.`, `The supported values are: ${JSON.stringify(o)}.`, `${s} > ${o.length - 1}, you need to add the missing values.`].join(`
`)) : console.error([`MUI: The \`theme.${e}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${e}\` as a number.`].join(`
`)), o[s]) : typeof o == "function" ? o : (console.error([`MUI: The \`theme.${e}\` value (${o}) is invalid.`, "It should be a number, an array or a function."].join(`
`)), () => {
  });
}
function dm(t3) {
  return rs(t3, "spacing", 8, "spacing");
}
function ns(t3, e) {
  if (typeof e == "string" || e == null)
    return e;
  const r = Math.abs(e), n = t3(r);
  return e >= 0 ? n : typeof n == "number" ? -n : `-${n}`;
}
function O9(t3, e) {
  return (r) => t3.reduce((n, i) => (n[i] = ns(e, r), n), {});
}
function I9(t3, e, r, n) {
  if (e.indexOf(r) === -1)
    return null;
  const i = C9(r), o = O9(i, n), s = t3[r];
  return Kr(t3, s, o);
}
function hm(t3, e) {
  const r = dm(t3.theme);
  return Object.keys(t3).map((n) => I9(t3, e, n, r)).reduce(_o, {});
}
function ft3(t3) {
  return hm(t3, ll);
}
ft3.propTypes = ll.reduce((t3, e) => (t3[e] = xn3, t3), {});
ft3.filterProps = ll;
function dt3(t3) {
  return hm(t3, cl);
}
dt3.propTypes = cl.reduce((t3, e) => (t3[e] = xn3, t3), {});
dt3.filterProps = cl;
T9.reduce((t3, e) => (t3[e] = xn3, t3), {});
function P9(t3 = 8) {
  if (t3.mui)
    return t3;
  const e = dm({
    spacing: t3
  }), r = (...n) => (n.length <= 4 || console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${n.length}`), (n.length === 0 ? [1] : n).map((o) => {
    const s = e(o);
    return typeof s == "number" ? `${s}px` : s;
  }).join(" "));
  return r.mui = true, r;
}
function ul(...t3) {
  const e = t3.reduce((n, i) => (i.filterProps.forEach((o) => {
    n[o] = i;
  }), n), {}), r = (n) => Object.keys(n).reduce((i, o) => e[o] ? _o(i, e[o](n)) : i, {});
  return r.propTypes = t3.reduce((n, i) => Object.assign(n, i.propTypes), {}), r.filterProps = t3.reduce((n, i) => n.concat(i.filterProps), []), r;
}
function Sr(t3) {
  return typeof t3 != "number" ? t3 : `${t3}px solid`;
}
var R9 = Qe({
  prop: "border",
  themeKey: "borders",
  transform: Sr
});
var D9 = Qe({
  prop: "borderTop",
  themeKey: "borders",
  transform: Sr
});
var M9 = Qe({
  prop: "borderRight",
  themeKey: "borders",
  transform: Sr
});
var N9 = Qe({
  prop: "borderBottom",
  themeKey: "borders",
  transform: Sr
});
var L9 = Qe({
  prop: "borderLeft",
  themeKey: "borders",
  transform: Sr
});
var B9 = Qe({
  prop: "borderColor",
  themeKey: "palette"
});
var F9 = Qe({
  prop: "borderTopColor",
  themeKey: "palette"
});
var j9 = Qe({
  prop: "borderRightColor",
  themeKey: "palette"
});
var W9 = Qe({
  prop: "borderBottomColor",
  themeKey: "palette"
});
var U9 = Qe({
  prop: "borderLeftColor",
  themeKey: "palette"
});
var fl = (t3) => {
  if (t3.borderRadius !== undefined && t3.borderRadius !== null) {
    const e = rs(t3.theme, "shape.borderRadius", 4, "borderRadius"), r = (n) => ({
      borderRadius: ns(e, n)
    });
    return Kr(t3, t3.borderRadius, r);
  }
  return null;
};
fl.propTypes = {
  borderRadius: xn3
};
fl.filterProps = ["borderRadius"];
ul(R9, D9, M9, N9, L9, B9, F9, j9, W9, U9, fl);
var dl = (t3) => {
  if (t3.gap !== undefined && t3.gap !== null) {
    const e = rs(t3.theme, "spacing", 8, "gap"), r = (n) => ({
      gap: ns(e, n)
    });
    return Kr(t3, t3.gap, r);
  }
  return null;
};
dl.propTypes = {
  gap: xn3
};
dl.filterProps = ["gap"];
var hl = (t3) => {
  if (t3.columnGap !== undefined && t3.columnGap !== null) {
    const e = rs(t3.theme, "spacing", 8, "columnGap"), r = (n) => ({
      columnGap: ns(e, n)
    });
    return Kr(t3, t3.columnGap, r);
  }
  return null;
};
hl.propTypes = {
  columnGap: xn3
};
hl.filterProps = ["columnGap"];
var pl = (t3) => {
  if (t3.rowGap !== undefined && t3.rowGap !== null) {
    const e = rs(t3.theme, "spacing", 8, "rowGap"), r = (n) => ({
      rowGap: ns(e, n)
    });
    return Kr(t3, t3.rowGap, r);
  }
  return null;
};
pl.propTypes = {
  rowGap: xn3
};
pl.filterProps = ["rowGap"];
var z9 = Qe({
  prop: "gridColumn"
});
var V9 = Qe({
  prop: "gridRow"
});
var q9 = Qe({
  prop: "gridAutoFlow"
});
var H9 = Qe({
  prop: "gridAutoColumns"
});
var Y9 = Qe({
  prop: "gridAutoRows"
});
var K9 = Qe({
  prop: "gridTemplateColumns"
});
var X9 = Qe({
  prop: "gridTemplateRows"
});
var J9 = Qe({
  prop: "gridTemplateAreas"
});
var Q9 = Qe({
  prop: "gridArea"
});
ul(dl, hl, pl, z9, V9, q9, H9, Y9, K9, X9, J9, Q9);
function Ai(t3, e) {
  return e === "grey" ? e : t3;
}
var G9 = Qe({
  prop: "color",
  themeKey: "palette",
  transform: Ai
});
var Z9 = Qe({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  transform: Ai
});
var $9 = Qe({
  prop: "backgroundColor",
  themeKey: "palette",
  transform: Ai
});
ul(G9, Z9, $9);
function Kt3(t3) {
  return t3 <= 1 && t3 !== 0 ? `${t3 * 100}%` : t3;
}
var e8 = Qe({
  prop: "width",
  transform: Kt3
});
var xf = (t3) => {
  if (t3.maxWidth !== undefined && t3.maxWidth !== null) {
    const e = (r) => {
      var n, i, o;
      return {
        maxWidth: ((n = t3.theme) == null || (i = n.breakpoints) == null || (o = i.values) == null ? undefined : o[r]) || wf[r] || Kt3(r)
      };
    };
    return Kr(t3, t3.maxWidth, e);
  }
  return null;
};
xf.filterProps = ["maxWidth"];
var t83 = Qe({
  prop: "minWidth",
  transform: Kt3
});
var r8 = Qe({
  prop: "height",
  transform: Kt3
});
var n83 = Qe({
  prop: "maxHeight",
  transform: Kt3
});
var i8 = Qe({
  prop: "minHeight",
  transform: Kt3
});
Qe({
  prop: "size",
  cssProperty: "width",
  transform: Kt3
});
Qe({
  prop: "size",
  cssProperty: "height",
  transform: Kt3
});
var o8 = Qe({
  prop: "boxSizing"
});
ul(e8, xf, t83, r8, n83, i8, o8);
var s82 = {
  border: {
    themeKey: "borders",
    transform: Sr
  },
  borderTop: {
    themeKey: "borders",
    transform: Sr
  },
  borderRight: {
    themeKey: "borders",
    transform: Sr
  },
  borderBottom: {
    themeKey: "borders",
    transform: Sr
  },
  borderLeft: {
    themeKey: "borders",
    transform: Sr
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
    style: fl
  },
  color: {
    themeKey: "palette",
    transform: Ai
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
    transform: Ai
  },
  backgroundColor: {
    themeKey: "palette",
    transform: Ai
  },
  p: {
    style: dt3
  },
  pt: {
    style: dt3
  },
  pr: {
    style: dt3
  },
  pb: {
    style: dt3
  },
  pl: {
    style: dt3
  },
  px: {
    style: dt3
  },
  py: {
    style: dt3
  },
  padding: {
    style: dt3
  },
  paddingTop: {
    style: dt3
  },
  paddingRight: {
    style: dt3
  },
  paddingBottom: {
    style: dt3
  },
  paddingLeft: {
    style: dt3
  },
  paddingX: {
    style: dt3
  },
  paddingY: {
    style: dt3
  },
  paddingInline: {
    style: dt3
  },
  paddingInlineStart: {
    style: dt3
  },
  paddingInlineEnd: {
    style: dt3
  },
  paddingBlock: {
    style: dt3
  },
  paddingBlockStart: {
    style: dt3
  },
  paddingBlockEnd: {
    style: dt3
  },
  m: {
    style: ft3
  },
  mt: {
    style: ft3
  },
  mr: {
    style: ft3
  },
  mb: {
    style: ft3
  },
  ml: {
    style: ft3
  },
  mx: {
    style: ft3
  },
  my: {
    style: ft3
  },
  margin: {
    style: ft3
  },
  marginTop: {
    style: ft3
  },
  marginRight: {
    style: ft3
  },
  marginBottom: {
    style: ft3
  },
  marginLeft: {
    style: ft3
  },
  marginX: {
    style: ft3
  },
  marginY: {
    style: ft3
  },
  marginInline: {
    style: ft3
  },
  marginInlineStart: {
    style: ft3
  },
  marginInlineEnd: {
    style: ft3
  },
  marginBlock: {
    style: ft3
  },
  marginBlockStart: {
    style: ft3
  },
  marginBlockEnd: {
    style: ft3
  },
  displayPrint: {
    cssProperty: false,
    transform: (t3) => ({
      "@media print": {
        display: t3
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  gap: {
    style: dl
  },
  rowGap: {
    style: pl
  },
  columnGap: {
    style: hl
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  boxShadow: {
    themeKey: "shadows"
  },
  width: {
    transform: Kt3
  },
  maxWidth: {
    style: xf
  },
  minWidth: {
    transform: Kt3
  },
  height: {
    transform: Kt3
  },
  maxHeight: {
    transform: Kt3
  },
  minHeight: {
    transform: Kt3
  },
  boxSizing: {},
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: "typography"
  }
};
var _f = s82;
function a8(...t3) {
  const e = t3.reduce((n, i) => n.concat(Object.keys(i)), []), r = new Set(e);
  return t3.every((n) => r.size === Object.keys(n).length);
}
function l8(t3, e) {
  return typeof t3 == "function" ? t3(e) : t3;
}
function c8() {
  function t3(r, n, i, o) {
    const s = {
      [r]: n,
      theme: i
    }, a = o[r];
    if (!a)
      return {
        [r]: n
      };
    const {
      cssProperty: l = r,
      themeKey: c3,
      transform: u,
      style: f7
    } = a;
    if (n == null)
      return null;
    if (c3 === "typography" && n === "inherit")
      return {
        [r]: n
      };
    const d = al(i, c3) || {};
    return f7 ? f7(s) : Kr(s, n, (g3) => {
      let p = Da(d, u, g3);
      return g3 === p && typeof g3 == "string" && (p = Da(d, u, `${r}${g3 === "default" ? "" : or(g3)}`, g3)), l === false ? p : {
        [l]: p
      };
    });
  }
  function e(r) {
    var n;
    const {
      sx: i,
      theme: o = {}
    } = r || {};
    if (!i)
      return null;
    const s = (n = o.unstable_sxConfig) != null ? n : _f;
    function a(l) {
      let c3 = l;
      if (typeof l == "function")
        c3 = l(o);
      else if (typeof l != "object")
        return l;
      if (!c3)
        return null;
      const u = x9(o.breakpoints), f7 = Object.keys(u);
      let d = u;
      return Object.keys(c3).forEach((h) => {
        const g3 = l8(c3[h], o);
        if (g3 != null)
          if (typeof g3 == "object")
            if (s[h])
              d = _o(d, t3(h, g3, o, s));
            else {
              const p = Kr({
                theme: o
              }, g3, (y7) => ({
                [h]: y7
              }));
              a8(p, g3) ? d[h] = e({
                sx: g3,
                theme: o
              }) : d = _o(d, p);
            }
          else
            d = _o(d, t3(h, g3, o, s));
      }), _9(f7, d);
    }
    return Array.isArray(i) ? i.map(a) : a(i);
  }
  return e;
}
var pm = c8();
pm.filterProps = ["sx"];
var Sf = pm;
var u8 = ["breakpoints", "palette", "spacing", "shape"];
function Ef(t3 = {}, ...e) {
  const {
    breakpoints: r = {},
    palette: n = {},
    spacing: i,
    shape: o = {}
  } = t3, s = sl(t3, u8), a = b9(r), l = P9(i);
  let c3 = qr({
    breakpoints: a,
    direction: "ltr",
    components: {},
    palette: kt3({
      mode: "light"
    }, n),
    spacing: l,
    shape: kt3({}, A9, o)
  }, s);
  return c3 = e.reduce((u, f7) => qr(u, f7), c3), c3.unstable_sxConfig = kt3({}, _f, s == null ? undefined : s.unstable_sxConfig), c3.unstable_sx = function(f7) {
    return Sf({
      sx: f7,
      theme: this
    });
  }, c3;
}
function f8(t3) {
  return Object.keys(t3).length === 0;
}
function gm(t3 = null) {
  const e = ve.useContext(ol);
  return !e || f8(e) ? t3 : e;
}
var d8 = Ef();
function mm(t3 = d8) {
  return gm(t3);
}
var h8 = ["variant"];
function Hp(t3) {
  return t3.length === 0;
}
function ym(t3) {
  const {
    variant: e
  } = t3, r = sl(t3, h8);
  let n = e || "";
  return Object.keys(r).sort().forEach((i) => {
    i === "color" ? n += Hp(n) ? t3[i] : or(t3[i]) : n += `${Hp(n) ? i : or(i)}${or(t3[i].toString())}`;
  }), n;
}
var p8 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
function g8(t3) {
  return Object.keys(t3).length === 0;
}
function m8(t3) {
  return typeof t3 == "string" && t3.charCodeAt(0) > 96;
}
var y8 = (t3, e) => e.components && e.components[t3] && e.components[t3].styleOverrides ? e.components[t3].styleOverrides : null;
var b8 = (t3, e) => {
  let r = [];
  e && e.components && e.components[t3] && e.components[t3].variants && (r = e.components[t3].variants);
  const n = {};
  return r.forEach((i) => {
    const o = ym(i.props);
    n[o] = i.style;
  }), n;
};
var v8 = (t3, e, r, n) => {
  var i, o;
  const {
    ownerState: s = {}
  } = t3, a = [], l = r == null || (i = r.components) == null || (o = i[n]) == null ? undefined : o.variants;
  return l && l.forEach((c3) => {
    let u = true;
    Object.keys(c3.props).forEach((f7) => {
      s[f7] !== c3.props[f7] && t3[f7] !== c3.props[f7] && (u = false);
    }), u && a.push(e[ym(c3.props)]);
  }), a;
};
function ta(t3) {
  return t3 !== "ownerState" && t3 !== "theme" && t3 !== "sx" && t3 !== "as";
}
var A8 = Ef();
var w8 = (t3) => t3.charAt(0).toLowerCase() + t3.slice(1);
function eo({
  defaultTheme: t3,
  theme: e,
  themeId: r
}) {
  return g8(e) ? t3 : e[r] || e;
}
function x8(t3 = {}) {
  const {
    themeId: e,
    defaultTheme: r = A8,
    rootShouldForwardProp: n = ta,
    slotShouldForwardProp: i = ta
  } = t3, o = (s) => Sf(kt3({}, s, {
    theme: eo(kt3({}, s, {
      defaultTheme: r,
      themeId: e
    }))
  }));
  return o.__mui_systemSx = true, (s, a = {}) => {
    g9(s, (O) => O.filter((_) => !(_ != null && _.__mui_systemSx)));
    const {
      name: l,
      slot: c3,
      skipVariantsResolver: u,
      skipSx: f7,
      overridesResolver: d
    } = a, h = sl(a, p8), g3 = u !== undefined ? u : c3 && c3 !== "Root" || false, p = f7 || false;
    let y7;
    l && (y7 = `${l}-${w8(c3 || "Root")}`);
    let b = ta;
    c3 === "Root" ? b = n : c3 ? b = i : m8(s) && (b = undefined);
    const x = p9(s, kt3({
      shouldForwardProp: b,
      label: y7
    }, h)), S = (O, ..._) => {
      const L = _ ? _.map((G) => typeof G == "function" && G.__emotion_real !== G ? (ee) => G(kt3({}, ee, {
        theme: eo(kt3({}, ee, {
          defaultTheme: r,
          themeId: e
        }))
      })) : G) : [];
      let N5 = O;
      l && d && L.push((G) => {
        const ee = eo(kt3({}, G, {
          defaultTheme: r,
          themeId: e
        })), fe = y8(l, ee);
        if (fe) {
          const P = {};
          return Object.entries(fe).forEach(([z, U]) => {
            P[z] = typeof U == "function" ? U(kt3({}, G, {
              theme: ee
            })) : U;
          }), d(G, P);
        }
        return null;
      }), l && !g3 && L.push((G) => {
        const ee = eo(kt3({}, G, {
          defaultTheme: r,
          themeId: e
        }));
        return v8(G, b8(l, ee), ee, l);
      }), p || L.push(o);
      const j = L.length - _.length;
      if (Array.isArray(O) && j > 0) {
        const G = new Array(j).fill("");
        N5 = [...O, ...G], N5.raw = [...O.raw, ...G];
      } else
        typeof O == "function" && O.__emotion_real !== O && (N5 = (G) => O(kt3({}, G, {
          theme: eo(kt3({}, G, {
            defaultTheme: r,
            themeId: e
          }))
        })));
      const W = x(N5, ...L);
      if (true) {
        let G;
        l && (G = `${l}${c3 || ""}`), G === undefined && (G = `Styled(${c4(s)})`), W.displayName = G;
      }
      return s.muiName && (W.muiName = s.muiName), W;
    };
    return x.withConfig && (S.withConfig = x.withConfig), S;
  };
}
function _8(t3) {
  const {
    theme: e,
    name: r,
    props: n
  } = t3;
  return !e || !e.components || !e.components[r] || !e.components[r].defaultProps ? n : Fg(e.components[r].defaultProps, n);
}
function S8({
  props: t3,
  name: e,
  defaultTheme: r,
  themeId: n
}) {
  let i = mm(r);
  return n && (i = i[n] || i), _8({
    theme: i,
    name: e,
    props: t3
  });
}
function kf(t3, e = 0, r = 1) {
  return (t3 < e || t3 > r) && console.error(`MUI: The value provided ${t3} is out of range [${e}, ${r}].`), Math.min(Math.max(e, t3), r);
}
function E8(t3) {
  t3 = t3.slice(1);
  const e = new RegExp(`.{1,${t3.length >= 6 ? 2 : 1}}`, "g");
  let r = t3.match(e);
  return r && r[0].length === 1 && (r = r.map((n) => n + n)), r ? `rgb${r.length === 4 ? "a" : ""}(${r.map((n, i) => i < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000).join(", ")})` : "";
}
function Qn3(t3) {
  if (t3.type)
    return t3;
  if (t3.charAt(0) === "#")
    return Qn3(E8(t3));
  const e = t3.indexOf("("), r = t3.substring(0, e);
  if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(r) === -1)
    throw new Error(`MUI: Unsupported \`${t3}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().`);
  let n = t3.substring(e + 1, t3.length - 1), i;
  if (r === "color") {
    if (n = n.split(" "), i = n.shift(), n.length === 4 && n[3].charAt(0) === "/" && (n[3] = n[3].slice(1)), ["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(i) === -1)
      throw new Error(`MUI: unsupported \`${i}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);
  } else
    n = n.split(",");
  return n = n.map((o) => parseFloat(o)), {
    type: r,
    values: n,
    colorSpace: i
  };
}
function gl(t3) {
  const {
    type: e,
    colorSpace: r
  } = t3;
  let {
    values: n
  } = t3;
  return e.indexOf("rgb") !== -1 ? n = n.map((i, o) => o < 3 ? parseInt(i, 10) : i) : e.indexOf("hsl") !== -1 && (n[1] = `${n[1]}%`, n[2] = `${n[2]}%`), e.indexOf("color") !== -1 ? n = `${r} ${n.join(" ")}` : n = `${n.join(", ")}`, `${e}(${n})`;
}
function k8(t3) {
  t3 = Qn3(t3);
  const {
    values: e
  } = t3, r = e[0], n = e[1] / 100, i = e[2] / 100, o = n * Math.min(i, 1 - i), s = (c3, u = (c3 + r / 30) % 12) => i - o * Math.max(Math.min(u - 3, 9 - u, 1), -1);
  let a = "rgb";
  const l = [Math.round(s(0) * 255), Math.round(s(8) * 255), Math.round(s(4) * 255)];
  return t3.type === "hsla" && (a += "a", l.push(e[3])), gl({
    type: a,
    values: l
  });
}
function Yp(t3) {
  t3 = Qn3(t3);
  let e = t3.type === "hsl" || t3.type === "hsla" ? Qn3(k8(t3)).values : t3.values;
  return e = e.map((r) => (t3.type !== "color" && (r /= 255), r <= 0.03928 ? r / 12.92 : ((r + 0.055) / 1.055) ** 2.4)), Number((0.2126 * e[0] + 0.7152 * e[1] + 0.0722 * e[2]).toFixed(3));
}
function Kp(t3, e) {
  const r = Yp(t3), n = Yp(e);
  return (Math.max(r, n) + 0.05) / (Math.min(r, n) + 0.05);
}
function bm(t3, e) {
  return t3 = Qn3(t3), e = kf(e), (t3.type === "rgb" || t3.type === "hsl") && (t3.type += "a"), t3.type === "color" ? t3.values[3] = `/${e}` : t3.values[3] = e, gl(t3);
}
function C8(t3, e) {
  if (t3 = Qn3(t3), e = kf(e), t3.type.indexOf("hsl") !== -1)
    t3.values[2] *= 1 - e;
  else if (t3.type.indexOf("rgb") !== -1 || t3.type.indexOf("color") !== -1)
    for (let r = 0;r < 3; r += 1)
      t3.values[r] *= 1 - e;
  return gl(t3);
}
function T8(t3, e) {
  if (t3 = Qn3(t3), e = kf(e), t3.type.indexOf("hsl") !== -1)
    t3.values[2] += (100 - t3.values[2]) * e;
  else if (t3.type.indexOf("rgb") !== -1)
    for (let r = 0;r < 3; r += 1)
      t3.values[r] += (255 - t3.values[r]) * e;
  else if (t3.type.indexOf("color") !== -1)
    for (let r = 0;r < 3; r += 1)
      t3.values[r] += (1 - t3.values[r]) * e;
  return gl(t3);
}
function O8(t3, e) {
  return ke({
    toolbar: {
      minHeight: 56,
      [t3.up("xs")]: {
        "@media (orientation: landscape)": {
          minHeight: 48
        }
      },
      [t3.up("sm")]: {
        minHeight: 64
      }
    }
  }, e);
}
var I83 = {
  black: "#000",
  white: "#fff"
};
var qo = I83;
var P8 = {
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
};
var R8 = P8;
var D8 = {
  50: "#f3e5f5",
  100: "#e1bee7",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  600: "#8e24aa",
  700: "#7b1fa2",
  800: "#6a1b9a",
  900: "#4a148c",
  A100: "#ea80fc",
  A200: "#e040fb",
  A400: "#d500f9",
  A700: "#aa00ff"
};
var ni = D8;
var M8 = {
  50: "#ffebee",
  100: "#ffcdd2",
  200: "#ef9a9a",
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  600: "#e53935",
  700: "#d32f2f",
  800: "#c62828",
  900: "#b71c1c",
  A100: "#ff8a80",
  A200: "#ff5252",
  A400: "#ff1744",
  A700: "#d50000"
};
var ii = M8;
var N8 = {
  50: "#fff3e0",
  100: "#ffe0b2",
  200: "#ffcc80",
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  600: "#fb8c00",
  700: "#f57c00",
  800: "#ef6c00",
  900: "#e65100",
  A100: "#ffd180",
  A200: "#ffab40",
  A400: "#ff9100",
  A700: "#ff6d00"
};
var to = N8;
var L8 = {
  50: "#e3f2fd",
  100: "#bbdefb",
  200: "#90caf9",
  300: "#64b5f6",
  400: "#42a5f5",
  500: "#2196f3",
  600: "#1e88e5",
  700: "#1976d2",
  800: "#1565c0",
  900: "#0d47a1",
  A100: "#82b1ff",
  A200: "#448aff",
  A400: "#2979ff",
  A700: "#2962ff"
};
var oi = L8;
var B8 = {
  50: "#e1f5fe",
  100: "#b3e5fc",
  200: "#81d4fa",
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  600: "#039be5",
  700: "#0288d1",
  800: "#0277bd",
  900: "#01579b",
  A100: "#80d8ff",
  A200: "#40c4ff",
  A400: "#00b0ff",
  A700: "#0091ea"
};
var si = B8;
var F8 = {
  50: "#e8f5e9",
  100: "#c8e6c9",
  200: "#a5d6a7",
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  600: "#43a047",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20",
  A100: "#b9f6ca",
  A200: "#69f0ae",
  A400: "#00e676",
  A700: "#00c853"
};
var ai = F8;
var j8 = ["mode", "contrastThreshold", "tonalOffset"];
var Xp = {
  text: {
    primary: "rgba(0, 0, 0, 0.87)",
    secondary: "rgba(0, 0, 0, 0.6)",
    disabled: "rgba(0, 0, 0, 0.38)"
  },
  divider: "rgba(0, 0, 0, 0.12)",
  background: {
    paper: qo.white,
    default: qo.white
  },
  action: {
    active: "rgba(0, 0, 0, 0.54)",
    hover: "rgba(0, 0, 0, 0.04)",
    hoverOpacity: 0.04,
    selected: "rgba(0, 0, 0, 0.08)",
    selectedOpacity: 0.08,
    disabled: "rgba(0, 0, 0, 0.26)",
    disabledBackground: "rgba(0, 0, 0, 0.12)",
    disabledOpacity: 0.38,
    focus: "rgba(0, 0, 0, 0.12)",
    focusOpacity: 0.12,
    activatedOpacity: 0.12
  }
};
var bc = {
  text: {
    primary: qo.white,
    secondary: "rgba(255, 255, 255, 0.7)",
    disabled: "rgba(255, 255, 255, 0.5)",
    icon: "rgba(255, 255, 255, 0.5)"
  },
  divider: "rgba(255, 255, 255, 0.12)",
  background: {
    paper: "#121212",
    default: "#121212"
  },
  action: {
    active: qo.white,
    hover: "rgba(255, 255, 255, 0.08)",
    hoverOpacity: 0.08,
    selected: "rgba(255, 255, 255, 0.16)",
    selectedOpacity: 0.16,
    disabled: "rgba(255, 255, 255, 0.3)",
    disabledBackground: "rgba(255, 255, 255, 0.12)",
    disabledOpacity: 0.38,
    focus: "rgba(255, 255, 255, 0.12)",
    focusOpacity: 0.12,
    activatedOpacity: 0.24
  }
};
function Jp(t3, e, r, n) {
  const i = n.light || n, o = n.dark || n * 1.5;
  t3[e] || (t3.hasOwnProperty(r) ? t3[e] = t3[r] : e === "light" ? t3.light = T8(t3.main, i) : e === "dark" && (t3.dark = C8(t3.main, o)));
}
function W8(t3 = "light") {
  return t3 === "dark" ? {
    main: oi[200],
    light: oi[50],
    dark: oi[400]
  } : {
    main: oi[700],
    light: oi[400],
    dark: oi[800]
  };
}
function U8(t3 = "light") {
  return t3 === "dark" ? {
    main: ni[200],
    light: ni[50],
    dark: ni[400]
  } : {
    main: ni[500],
    light: ni[300],
    dark: ni[700]
  };
}
function z8(t3 = "light") {
  return t3 === "dark" ? {
    main: ii[500],
    light: ii[300],
    dark: ii[700]
  } : {
    main: ii[700],
    light: ii[400],
    dark: ii[800]
  };
}
function V8(t3 = "light") {
  return t3 === "dark" ? {
    main: si[400],
    light: si[300],
    dark: si[700]
  } : {
    main: si[700],
    light: si[500],
    dark: si[900]
  };
}
function q8(t3 = "light") {
  return t3 === "dark" ? {
    main: ai[400],
    light: ai[300],
    dark: ai[700]
  } : {
    main: ai[800],
    light: ai[500],
    dark: ai[900]
  };
}
function H8(t3 = "light") {
  return t3 === "dark" ? {
    main: to[400],
    light: to[300],
    dark: to[700]
  } : {
    main: "#ed6c02",
    light: to[500],
    dark: to[900]
  };
}
function Y8(t3) {
  const {
    mode: e = "light",
    contrastThreshold: r = 3,
    tonalOffset: n = 0.2
  } = t3, i = An3(t3, j8), o = t3.primary || W8(e), s = t3.secondary || U8(e), a = t3.error || z8(e), l = t3.info || V8(e), c3 = t3.success || q8(e), u = t3.warning || H8(e);
  function f7(p) {
    const y7 = Kp(p, bc.text.primary) >= r ? bc.text.primary : Xp.text.primary;
    if (true) {
      const b = Kp(p, y7);
      b < 3 && console.error([`MUI: The contrast ratio of ${b}:1 for ${y7} on ${p}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join(`
`));
    }
    return y7;
  }
  const d = ({
    color: p,
    name: y7,
    mainShade: b = 500,
    lightShade: x = 300,
    darkShade: S = 700
  }) => {
    if (p = ke({}, p), !p.main && p[b] && (p.main = p[b]), !p.hasOwnProperty("main"))
      throw new Error(`MUI: The color${y7 ? ` (${y7})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${b}\` property.`);
    if (typeof p.main != "string")
      throw new Error(`MUI: The color${y7 ? ` (${y7})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(p.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });`);
    return Jp(p, "light", x, n), Jp(p, "dark", S, n), p.contrastText || (p.contrastText = f7(p.main)), p;
  }, h = {
    dark: bc,
    light: Xp
  };
  return h[e] || console.error(`MUI: The palette mode \`${e}\` is not supported.`), qr(ke({
    common: ke({}, qo),
    mode: e,
    primary: d({
      color: o,
      name: "primary"
    }),
    secondary: d({
      color: s,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    error: d({
      color: a,
      name: "error"
    }),
    warning: d({
      color: u,
      name: "warning"
    }),
    info: d({
      color: l,
      name: "info"
    }),
    success: d({
      color: c3,
      name: "success"
    }),
    grey: R8,
    contrastThreshold: r,
    getContrastText: f7,
    augmentColor: d,
    tonalOffset: n
  }, h[e]), i);
}
var K8 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
function X8(t3) {
  return Math.round(t3 * 1e5) / 1e5;
}
var Qp = {
  textTransform: "uppercase"
};
var Gp = '"Roboto", "Helvetica", "Arial", sans-serif';
function J8(t3, e) {
  const r = typeof e == "function" ? e(t3) : e, {
    fontFamily: n = Gp,
    fontSize: i = 14,
    fontWeightLight: o = 300,
    fontWeightRegular: s = 400,
    fontWeightMedium: a = 500,
    fontWeightBold: l = 700,
    htmlFontSize: c3 = 16,
    allVariants: u,
    pxToRem: f7
  } = r, d = An3(r, K8);
  typeof i != "number" && console.error("MUI: `fontSize` is required to be a number."), typeof c3 != "number" && console.error("MUI: `htmlFontSize` is required to be a number.");
  const h = i / 14, g3 = f7 || ((b) => `${b / c3 * h}rem`), p = (b, x, S, O, _) => ke({
    fontFamily: n,
    fontWeight: b,
    fontSize: g3(x),
    lineHeight: S
  }, n === Gp ? {
    letterSpacing: `${X8(O / x)}em`
  } : {}, _, u), y7 = {
    h1: p(o, 96, 1.167, -1.5),
    h2: p(o, 60, 1.2, -0.5),
    h3: p(s, 48, 1.167, 0),
    h4: p(s, 34, 1.235, 0.25),
    h5: p(s, 24, 1.334, 0),
    h6: p(a, 20, 1.6, 0.15),
    subtitle1: p(s, 16, 1.75, 0.15),
    subtitle2: p(a, 14, 1.57, 0.1),
    body1: p(s, 16, 1.5, 0.15),
    body2: p(s, 14, 1.43, 0.15),
    button: p(a, 14, 1.75, 0.4, Qp),
    caption: p(s, 12, 1.66, 0.4),
    overline: p(s, 12, 2.66, 1, Qp),
    inherit: {
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  };
  return qr(ke({
    htmlFontSize: c3,
    pxToRem: g3,
    fontFamily: n,
    fontSize: i,
    fontWeightLight: o,
    fontWeightRegular: s,
    fontWeightMedium: a,
    fontWeightBold: l
  }, y7), d, {
    clone: false
  });
}
var Q8 = 0.2;
var G8 = 0.14;
var Z8 = 0.12;
function ct3(...t3) {
  return [`${t3[0]}px ${t3[1]}px ${t3[2]}px ${t3[3]}px rgba(0,0,0,${Q8})`, `${t3[4]}px ${t3[5]}px ${t3[6]}px ${t3[7]}px rgba(0,0,0,${G8})`, `${t3[8]}px ${t3[9]}px ${t3[10]}px ${t3[11]}px rgba(0,0,0,${Z8})`].join(",");
}
var $8 = ["none", ct3(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), ct3(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), ct3(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), ct3(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), ct3(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), ct3(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), ct3(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), ct3(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), ct3(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), ct3(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), ct3(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), ct3(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), ct3(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), ct3(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), ct3(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), ct3(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), ct3(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), ct3(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), ct3(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), ct3(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), ct3(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), ct3(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), ct3(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), ct3(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
var e7 = $8;
var t7 = ["duration", "easing", "delay"];
var r7 = {
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
};
var n7 = {
  shortest: 150,
  shorter: 200,
  short: 250,
  standard: 300,
  complex: 375,
  enteringScreen: 225,
  leavingScreen: 195
};
function Zp(t3) {
  return `${Math.round(t3)}ms`;
}
function i7(t3) {
  if (!t3)
    return 0;
  const e = t3 / 36;
  return Math.round((4 + 15 * e ** 0.25 + e / 5) * 10);
}
function o7(t3) {
  const e = ke({}, r7, t3.easing), r = ke({}, n7, t3.duration);
  return ke({
    getAutoHeightDuration: i7,
    create: (i = ["all"], o = {}) => {
      const {
        duration: s = r.standard,
        easing: a = e.easeInOut,
        delay: l = 0
      } = o, c3 = An3(o, t7);
      if (true) {
        const u = (d) => typeof d == "string", f7 = (d) => !isNaN(parseFloat(d));
        !u(i) && !Array.isArray(i) && console.error('MUI: Argument "props" must be a string or Array.'), !f7(s) && !u(s) && console.error(`MUI: Argument "duration" must be a number or a string but found ${s}.`), u(a) || console.error('MUI: Argument "easing" must be a string.'), !f7(l) && !u(l) && console.error('MUI: Argument "delay" must be a number or a string.'), Object.keys(c3).length !== 0 && console.error(`MUI: Unrecognized argument(s) [${Object.keys(c3).join(",")}].`);
      }
      return (Array.isArray(i) ? i : [i]).map((u) => `${u} ${typeof s == "string" ? s : Zp(s)} ${a} ${typeof l == "string" ? l : Zp(l)}`).join(",");
    }
  }, t3, {
    easing: e,
    duration: r
  });
}
var s7 = {
  mobileStepper: 1000,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
var a7 = s7;
var l7 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
function c7(t3 = {}, ...e) {
  const {
    mixins: r = {},
    palette: n = {},
    transitions: i = {},
    typography: o = {}
  } = t3, s = An3(t3, l7);
  if (t3.vars)
    throw new Error("MUI: `vars` is a private field used for CSS variables support.\nPlease use another name.");
  const a = Y8(n), l = Ef(t3);
  let c3 = qr(l, {
    mixins: O8(l.breakpoints, r),
    palette: a,
    shadows: e7.slice(),
    typography: J8(a, o),
    transitions: o7(i),
    zIndex: ke({}, a7)
  });
  if (c3 = qr(c3, s), c3 = e.reduce((u, f7) => qr(u, f7), c3), true) {
    const u = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"], f7 = (d, h) => {
      let g3;
      for (g3 in d) {
        const p = d[g3];
        if (u.indexOf(g3) !== -1 && Object.keys(p).length > 0) {
          if (true) {
            const y7 = Zo("", g3);
            console.error([`MUI: The \`${h}\` component increases the CSS specificity of the \`${g3}\` internal state.`, "You can not override it like this: ", JSON.stringify(d, null, 2), "", `Instead, you need to use the '&.${y7}' syntax:`, JSON.stringify({
              root: {
                [`&.${y7}`]: p
              }
            }, null, 2), "", "https://mui.com/r/state-classes-guide"].join(`
`));
          }
          d[g3] = {};
        }
      }
    };
    Object.keys(c3.components).forEach((d) => {
      const h = c3.components[d].styleOverrides;
      h && d.indexOf("Mui") === 0 && f7(h, d);
    });
  }
  return c3.unstable_sxConfig = ke({}, _f, s == null ? undefined : s.unstable_sxConfig), c3.unstable_sx = function(f7) {
    return Sf({
      sx: f7,
      theme: this
    });
  }, c3;
}
var u7 = c7();
var Cf = u7;
var Tf = "$$material";
var f7 = (t3) => ta(t3) && t3 !== "classes";
var d7 = x8({
  themeId: Tf,
  defaultTheme: Cf,
  rootShouldForwardProp: f7
});
var is = d7;
function Of({
  props: t3,
  name: e
}) {
  return S8({
    props: t3,
    name: e,
    defaultTheme: Cf,
    themeId: Tf
  });
}
function h7(t3, e) {
  if (t3 == null)
    return {};
  var r = {}, n = Object.keys(t3), i, o;
  for (o = 0;o < n.length; o++)
    i = n[o], !(e.indexOf(i) >= 0) && (r[i] = t3[i]);
  return r;
}
function p7(t3, e) {
  t3.prototype = Object.create(e.prototype), t3.prototype.constructor = t3, t3.__proto__ = e;
}
var $p = {
  disabled: false
};
var g7 = F4.oneOfType([F4.number, F4.shape({
  enter: F4.number,
  exit: F4.number,
  appear: F4.number
}).isRequired]);
F4.oneOfType([F4.string, F4.shape({
  enter: F4.string,
  exit: F4.string,
  active: F4.string
}), F4.shape({
  enter: F4.string,
  enterDone: F4.string,
  enterActive: F4.string,
  exit: F4.string,
  exitDone: F4.string,
  exitActive: F4.string
})]);
var vm = import_react.default.createContext(null);
var m7 = function(e) {
  return e.scrollTop;
};
var ho = "unmounted";
var Mn3 = "exited";
var Nn3 = "entering";
var fi = "entered";
var fu = "exiting";
var Qr = /* @__PURE__ */ function(t3) {
  p7(e, t3);
  function e(n, i) {
    var o;
    o = t3.call(this, n, i) || this;
    var s = i, a = s && !s.isMounting ? n.enter : n.appear, l;
    return o.appearStatus = null, n.in ? a ? (l = Mn3, o.appearStatus = Nn3) : l = fi : n.unmountOnExit || n.mountOnEnter ? l = ho : l = Mn3, o.state = {
      status: l
    }, o.nextCallback = null, o;
  }
  e.getDerivedStateFromProps = function(i, o) {
    var s = i.in;
    return s && o.status === ho ? {
      status: Mn3
    } : null;
  };
  var r = e.prototype;
  return r.componentDidMount = function() {
    this.updateStatus(true, this.appearStatus);
  }, r.componentDidUpdate = function(i) {
    var o = null;
    if (i !== this.props) {
      var s = this.state.status;
      this.props.in ? s !== Nn3 && s !== fi && (o = Nn3) : (s === Nn3 || s === fi) && (o = fu);
    }
    this.updateStatus(false, o);
  }, r.componentWillUnmount = function() {
    this.cancelNextCallback();
  }, r.getTimeouts = function() {
    var i = this.props.timeout, o, s, a;
    return o = s = a = i, i != null && typeof i != "number" && (o = i.exit, s = i.enter, a = i.appear !== undefined ? i.appear : s), {
      exit: o,
      enter: s,
      appear: a
    };
  }, r.updateStatus = function(i, o) {
    if (i === undefined && (i = false), o !== null)
      if (this.cancelNextCallback(), o === Nn3) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var s = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          s && m7(s);
        }
        this.performEnter(i);
      } else
        this.performExit();
    else
      this.props.unmountOnExit && this.state.status === Mn3 && this.setState({
        status: ho
      });
  }, r.performEnter = function(i) {
    var o = this, s = this.props.enter, a = this.context ? this.context.isMounting : i, l = this.props.nodeRef ? [a] : [import_react_dom.default.findDOMNode(this), a], c3 = l[0], u = l[1], f10 = this.getTimeouts(), d = a ? f10.appear : f10.enter;
    if (!i && !s || $p.disabled) {
      this.safeSetState({
        status: fi
      }, function() {
        o.props.onEntered(c3);
      });
      return;
    }
    this.props.onEnter(c3, u), this.safeSetState({
      status: Nn3
    }, function() {
      o.props.onEntering(c3, u), o.onTransitionEnd(d, function() {
        o.safeSetState({
          status: fi
        }, function() {
          o.props.onEntered(c3, u);
        });
      });
    });
  }, r.performExit = function() {
    var i = this, o = this.props.exit, s = this.getTimeouts(), a = this.props.nodeRef ? undefined : import_react_dom.default.findDOMNode(this);
    if (!o || $p.disabled) {
      this.safeSetState({
        status: Mn3
      }, function() {
        i.props.onExited(a);
      });
      return;
    }
    this.props.onExit(a), this.safeSetState({
      status: fu
    }, function() {
      i.props.onExiting(a), i.onTransitionEnd(s.exit, function() {
        i.safeSetState({
          status: Mn3
        }, function() {
          i.props.onExited(a);
        });
      });
    });
  }, r.cancelNextCallback = function() {
    this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
  }, r.safeSetState = function(i, o) {
    o = this.setNextCallback(o), this.setState(i, o);
  }, r.setNextCallback = function(i) {
    var o = this, s = true;
    return this.nextCallback = function(a) {
      s && (s = false, o.nextCallback = null, i(a));
    }, this.nextCallback.cancel = function() {
      s = false;
    }, this.nextCallback;
  }, r.onTransitionEnd = function(i, o) {
    this.setNextCallback(o);
    var s = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this), a = i == null && !this.props.addEndListener;
    if (!s || a) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var l = this.props.nodeRef ? [this.nextCallback] : [s, this.nextCallback], c3 = l[0], u = l[1];
      this.props.addEndListener(c3, u);
    }
    i != null && setTimeout(this.nextCallback, i);
  }, r.render = function() {
    var i = this.state.status;
    if (i === ho)
      return null;
    var o = this.props, s = o.children;
    o.in, o.mountOnEnter, o.unmountOnExit, o.appear, o.enter, o.exit, o.timeout, o.addEndListener, o.onEnter, o.onEntering, o.onEntered, o.onExit, o.onExiting, o.onExited, o.nodeRef;
    var a = h7(o, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return /* @__PURE__ */ import_react.default.createElement(vm.Provider, {
      value: null
    }, typeof s == "function" ? s(i, a) : import_react.default.cloneElement(import_react.default.Children.only(s), a));
  }, e;
}(import_react.default.Component);
Qr.contextType = vm;
Qr.propTypes = {
  nodeRef: F4.shape({
    current: typeof Element > "u" ? F4.any : function(t3, e, r, n, i, o) {
      var s = t3[e];
      return F4.instanceOf(s && "ownerDocument" in s ? s.ownerDocument.defaultView.Element : Element)(t3, e, r, n, i, o);
    }
  }),
  children: F4.oneOfType([F4.func.isRequired, F4.element.isRequired]).isRequired,
  in: F4.bool,
  mountOnEnter: F4.bool,
  unmountOnExit: F4.bool,
  appear: F4.bool,
  enter: F4.bool,
  exit: F4.bool,
  timeout: function(e) {
    var r = g7;
    e.addEndListener || (r = r.isRequired);
    for (var n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), o = 1;o < n; o++)
      i[o - 1] = arguments[o];
    return r.apply(undefined, [e].concat(i));
  },
  addEndListener: F4.func,
  onEnter: F4.func,
  onEntering: F4.func,
  onEntered: F4.func,
  onExit: F4.func,
  onExiting: F4.func,
  onExited: F4.func
};
function li() {
}
Qr.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: li,
  onEntering: li,
  onEntered: li,
  onExit: li,
  onExiting: li,
  onExited: li
};
Qr.UNMOUNTED = ho;
Qr.EXITED = Mn3;
Qr.ENTERING = Nn3;
Qr.ENTERED = fi;
Qr.EXITING = fu;
var y7 = Qr;
function Am() {
  const t3 = mm(Cf);
  return ve.useDebugValue(t3), t3[Tf] || t3;
}
var b7 = (t3) => t3.scrollTop;
function e0(t3, e) {
  var r, n;
  const {
    timeout: i,
    easing: o,
    style: s = {}
  } = t3;
  return {
    duration: (r = s.transitionDuration) != null ? r : typeof i == "number" ? i : i[e.mode] || 0,
    easing: (n = s.transitionTimingFunction) != null ? n : typeof o == "object" ? o[e.mode] : o,
    delay: s.transitionDelay
  };
}
var v7 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
function du(t3) {
  return `scale(${t3}, ${t3 ** 2})`;
}
var A7 = {
  entering: {
    opacity: 1,
    transform: du(1)
  },
  entered: {
    opacity: 1,
    transform: "none"
  }
};
var vc = typeof navigator < "u" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
var If = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  const {
    addEndListener: n,
    appear: i = true,
    children: o,
    easing: s,
    in: a,
    onEnter: l,
    onEntered: c3,
    onEntering: u,
    onExit: f10,
    onExited: d,
    onExiting: h,
    style: g3,
    timeout: p = "auto",
    TransitionComponent: y10 = y7
  } = e, b = An3(e, v7), x = ve.useRef(), S = ve.useRef(), O = Am(), _ = ve.useRef(null), L = Xn3(_, o.ref, r), N5 = (U) => (I) => {
    if (U) {
      const V = _.current;
      I === undefined ? U(V) : U(V, I);
    }
  }, j = N5(u), W = N5((U, I) => {
    b7(U);
    const {
      duration: V,
      delay: te,
      easing: X7
    } = e0({
      style: g3,
      timeout: p,
      easing: s
    }, {
      mode: "enter"
    });
    let H;
    p === "auto" ? (H = O.transitions.getAutoHeightDuration(U.clientHeight), S.current = H) : H = V, U.style.transition = [O.transitions.create("opacity", {
      duration: H,
      delay: te
    }), O.transitions.create("transform", {
      duration: vc ? H : H * 0.666,
      delay: te,
      easing: X7
    })].join(","), l && l(U, I);
  }), G = N5(c3), ee = N5(h), fe = N5((U) => {
    const {
      duration: I,
      delay: V,
      easing: te
    } = e0({
      style: g3,
      timeout: p,
      easing: s
    }, {
      mode: "exit"
    });
    let X7;
    p === "auto" ? (X7 = O.transitions.getAutoHeightDuration(U.clientHeight), S.current = X7) : X7 = I, U.style.transition = [O.transitions.create("opacity", {
      duration: X7,
      delay: V
    }), O.transitions.create("transform", {
      duration: vc ? X7 : X7 * 0.666,
      delay: vc ? V : V || X7 * 0.333,
      easing: te
    })].join(","), U.style.opacity = 0, U.style.transform = du(0.75), f10 && f10(U);
  }), P = N5(d), z = (U) => {
    p === "auto" && (x.current = setTimeout(U, S.current || 0)), n && n(_.current, U);
  };
  return ve.useEffect(() => () => {
    clearTimeout(x.current);
  }, []), /* @__PURE__ */ Lt3.jsx(y10, ke({
    appear: i,
    in: a,
    nodeRef: _,
    onEnter: W,
    onEntered: G,
    onEntering: j,
    onExit: fe,
    onExited: P,
    onExiting: ee,
    addEndListener: z,
    timeout: p === "auto" ? null : p
  }, b, {
    children: (U, I) => /* @__PURE__ */ ve.cloneElement(o, ke({
      style: ke({
        opacity: 0,
        transform: du(0.75),
        visibility: U === "exited" && !a ? "hidden" : undefined
      }, A7[U], g3, o.props.style),
      ref: L
    }, I))
  }));
});
If.propTypes = {
  addEndListener: F4.func,
  appear: F4.bool,
  children: Pg.isRequired,
  easing: F4.oneOfType([F4.shape({
    enter: F4.string,
    exit: F4.string
  }), F4.string]),
  in: F4.bool,
  onEnter: F4.func,
  onEntered: F4.func,
  onEntering: F4.func,
  onExit: F4.func,
  onExited: F4.func,
  onExiting: F4.func,
  style: F4.object,
  timeout: F4.oneOfType([F4.oneOf(["auto"]), F4.number, F4.shape({
    appear: F4.number,
    enter: F4.number,
    exit: F4.number
  })])
};
If.muiSupportAuto = true;
var t0 = If;
var w7 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
var x7 = is(s_, {
  name: "MuiPopper",
  slot: "Root",
  overridesResolver: (t3, e) => e.root
})({});
var wm = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  var n;
  const i = gm(), o = Of({
    props: e,
    name: "MuiPopper"
  }), {
    anchorEl: s,
    component: a,
    components: l,
    componentsProps: c3,
    container: u,
    disablePortal: f10,
    keepMounted: d,
    modifiers: h,
    open: g3,
    placement: p,
    popperOptions: y10,
    popperRef: b,
    transition: x,
    slots: S,
    slotProps: O
  } = o, _ = An3(o, w7), L = (n = S == null ? undefined : S.root) != null ? n : l == null ? undefined : l.Root, N5 = ke({
    anchorEl: s,
    container: u,
    disablePortal: f10,
    keepMounted: d,
    modifiers: h,
    open: g3,
    placement: p,
    popperOptions: y10,
    popperRef: b,
    transition: x
  }, _);
  return /* @__PURE__ */ Lt3.jsx(x7, ke({
    as: a,
    direction: i == null ? undefined : i.direction,
    slots: {
      root: L
    },
    slotProps: O ?? c3
  }, N5, {
    ref: r
  }));
});
wm.propTypes = {
  anchorEl: F4.oneOfType([Fo, F4.object, F4.func]),
  children: F4.oneOfType([F4.node, F4.func]),
  component: F4.elementType,
  components: F4.shape({
    Root: F4.elementType
  }),
  componentsProps: F4.shape({
    root: F4.oneOfType([F4.func, F4.object])
  }),
  container: F4.oneOfType([Fo, F4.func]),
  disablePortal: F4.bool,
  keepMounted: F4.bool,
  modifiers: F4.arrayOf(F4.shape({
    data: F4.object,
    effect: F4.func,
    enabled: F4.bool,
    fn: F4.func,
    name: F4.any,
    options: F4.object,
    phase: F4.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: F4.arrayOf(F4.string),
    requiresIfExists: F4.arrayOf(F4.string)
  })),
  open: F4.bool.isRequired,
  placement: F4.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  popperOptions: F4.shape({
    modifiers: F4.array,
    onFirstUpdate: F4.func,
    placement: F4.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: F4.oneOf(["absolute", "fixed"])
  }),
  popperRef: Dg,
  slotProps: F4.shape({
    root: F4.oneOfType([F4.func, F4.object])
  }),
  slots: F4.shape({
    root: F4.elementType
  }),
  sx: F4.oneOfType([F4.arrayOf(F4.oneOfType([F4.func, F4.object, F4.bool])), F4.func, F4.object]),
  transition: F4.bool
};
var xm = wm;
function _7(t3) {
  return Zo("MuiTooltip", t3);
}
var S7 = sf("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
var an3 = S7;
var E7 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
function k7(t3) {
  return Math.round(t3 * 1e5) / 1e5;
}
var C7 = (t3) => {
  const {
    classes: e,
    disableInteractive: r,
    arrow: n,
    touch: i,
    placement: o
  } = t3, s = {
    popper: ["popper", !r && "popperInteractive", n && "popperArrow"],
    tooltip: ["tooltip", n && "tooltipArrow", i && "touch", `tooltipPlacement${or(o.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return of(s, _7, e);
};
var T7 = is(xm, {
  name: "MuiTooltip",
  slot: "Popper",
  overridesResolver: (t3, e) => {
    const {
      ownerState: r
    } = t3;
    return [e.popper, !r.disableInteractive && e.popperInteractive, r.arrow && e.popperArrow, !r.open && e.popperClose];
  }
})(({
  theme: t3,
  ownerState: e,
  open: r
}) => ke({
  zIndex: (t3.vars || t3).zIndex.tooltip,
  pointerEvents: "none"
}, !e.disableInteractive && {
  pointerEvents: "auto"
}, !r && {
  pointerEvents: "none"
}, e.arrow && {
  [`&[data-popper-placement*="bottom"] .${an3.arrow}`]: {
    top: 0,
    marginTop: "-0.71em",
    "&::before": {
      transformOrigin: "0 100%"
    }
  },
  [`&[data-popper-placement*="top"] .${an3.arrow}`]: {
    bottom: 0,
    marginBottom: "-0.71em",
    "&::before": {
      transformOrigin: "100% 0"
    }
  },
  [`&[data-popper-placement*="right"] .${an3.arrow}`]: ke({}, e.isRtl ? {
    right: 0,
    marginRight: "-0.71em"
  } : {
    left: 0,
    marginLeft: "-0.71em"
  }, {
    height: "1em",
    width: "0.71em",
    "&::before": {
      transformOrigin: "100% 100%"
    }
  }),
  [`&[data-popper-placement*="left"] .${an3.arrow}`]: ke({}, e.isRtl ? {
    left: 0,
    marginLeft: "-0.71em"
  } : {
    right: 0,
    marginRight: "-0.71em"
  }, {
    height: "1em",
    width: "0.71em",
    "&::before": {
      transformOrigin: "0 0"
    }
  })
}));
var O7 = is("div", {
  name: "MuiTooltip",
  slot: "Tooltip",
  overridesResolver: (t3, e) => {
    const {
      ownerState: r
    } = t3;
    return [e.tooltip, r.touch && e.touch, r.arrow && e.tooltipArrow, e[`tooltipPlacement${or(r.placement.split("-")[0])}`]];
  }
})(({
  theme: t3,
  ownerState: e
}) => ke({
  backgroundColor: t3.vars ? t3.vars.palette.Tooltip.bg : bm(t3.palette.grey[700], 0.92),
  borderRadius: (t3.vars || t3).shape.borderRadius,
  color: (t3.vars || t3).palette.common.white,
  fontFamily: t3.typography.fontFamily,
  padding: "4px 8px",
  fontSize: t3.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: "break-word",
  fontWeight: t3.typography.fontWeightMedium
}, e.arrow && {
  position: "relative",
  margin: 0
}, e.touch && {
  padding: "8px 16px",
  fontSize: t3.typography.pxToRem(14),
  lineHeight: `${k7(1.1428571428571428)}em`,
  fontWeight: t3.typography.fontWeightRegular
}, {
  [`.${an3.popper}[data-popper-placement*="left"] &`]: ke({
    transformOrigin: "right center"
  }, e.isRtl ? ke({
    marginLeft: "14px"
  }, e.touch && {
    marginLeft: "24px"
  }) : ke({
    marginRight: "14px"
  }, e.touch && {
    marginRight: "24px"
  })),
  [`.${an3.popper}[data-popper-placement*="right"] &`]: ke({
    transformOrigin: "left center"
  }, e.isRtl ? ke({
    marginRight: "14px"
  }, e.touch && {
    marginRight: "24px"
  }) : ke({
    marginLeft: "14px"
  }, e.touch && {
    marginLeft: "24px"
  })),
  [`.${an3.popper}[data-popper-placement*="top"] &`]: ke({
    transformOrigin: "center bottom",
    marginBottom: "14px"
  }, e.touch && {
    marginBottom: "24px"
  }),
  [`.${an3.popper}[data-popper-placement*="bottom"] &`]: ke({
    transformOrigin: "center top",
    marginTop: "14px"
  }, e.touch && {
    marginTop: "24px"
  })
}));
var I7 = is("span", {
  name: "MuiTooltip",
  slot: "Arrow",
  overridesResolver: (t3, e) => e.arrow
})(({
  theme: t3
}) => ({
  overflow: "hidden",
  position: "absolute",
  width: "1em",
  height: "0.71em",
  boxSizing: "border-box",
  color: t3.vars ? t3.vars.palette.Tooltip.bg : bm(t3.palette.grey[700], 0.9),
  "&::before": {
    content: '""',
    margin: "auto",
    display: "block",
    width: "100%",
    height: "100%",
    backgroundColor: "currentColor",
    transform: "rotate(45deg)"
  }
}));
var Ms = false;
var Ac = null;
var ro = {
  x: 0,
  y: 0
};
function Ns(t3, e) {
  return (r) => {
    e && e(r), t3(r);
  };
}
var _m = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  var n, i, o, s, a, l, c3, u, f10, d, h, g3, p, y10, b, x, S, O, _;
  const L = Of({
    props: e,
    name: "MuiTooltip"
  }), {
    arrow: N5 = false,
    children: j,
    components: W = {},
    componentsProps: G = {},
    describeChild: ee = false,
    disableFocusListener: fe = false,
    disableHoverListener: P = false,
    disableInteractive: z = false,
    disableTouchListener: U = false,
    enterDelay: I = 100,
    enterNextDelay: V = 0,
    enterTouchDelay: te = 700,
    followCursor: X7 = false,
    id: H,
    leaveDelay: $7 = 0,
    leaveTouchDelay: se = 1500,
    onClose: he,
    onOpen: pe,
    open: me,
    placement: B5 = "bottom",
    PopperComponent: q7,
    PopperProps: Z = {},
    slotProps: oe = {},
    slots: de = {},
    title: R5,
    TransitionComponent: k = t0,
    TransitionProps: re
  } = L, ne = An3(L, E7), Ae = Am(), C = Ae.direction === "rtl", [v, w10] = ve.useState(), [D, J5] = ve.useState(null), ae = ve.useRef(false), ue = z || X7, Se = ve.useRef(), _e = ve.useRef(), we = ve.useRef(), Ne = ve.useRef(), [E10, m10] = Ng({
    controlled: me,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  let A10 = E10;
  if (true) {
    const {
      current: De
    } = ve.useRef(me !== undefined);
    ve.useEffect(() => {
      v && v.disabled && !De && R5 !== "" && v.tagName.toLowerCase() === "button" && console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join(`
`));
    }, [R5, v, De]);
  }
  const M5 = Mg(H), Q5 = ve.useRef(), ie = ve.useCallback(() => {
    Q5.current !== undefined && (document.body.style.WebkitUserSelect = Q5.current, Q5.current = undefined), clearTimeout(Ne.current);
  }, []);
  ve.useEffect(() => () => {
    clearTimeout(Se.current), clearTimeout(_e.current), clearTimeout(we.current), ie();
  }, [ie]);
  const le = (De) => {
    clearTimeout(Ac), Ms = true, m10(true), pe && !A10 && pe(De);
  }, Ee = Lg((De) => {
    clearTimeout(Ac), Ac = setTimeout(() => {
      Ms = false;
    }, 800 + $7), m10(false), he && A10 && he(De), clearTimeout(Se.current), Se.current = setTimeout(() => {
      ae.current = false;
    }, Ae.transitions.duration.shortest);
  }), Fe = (De) => {
    ae.current && De.type !== "touchstart" || (v && v.removeAttribute("title"), clearTimeout(_e.current), clearTimeout(we.current), I || Ms && V ? _e.current = setTimeout(() => {
      le(De);
    }, Ms ? V : I) : le(De));
  }, Ve = (De) => {
    clearTimeout(_e.current), clearTimeout(we.current), we.current = setTimeout(() => {
      Ee(De);
    }, $7);
  }, {
    isFocusVisibleRef: Ge,
    onBlur: Ue,
    onFocus: bl,
    ref: ss
  } = Bg(), [, as] = ve.useState(false), Fi = (De) => {
    Ue(De), Ge.current === false && (as(false), Ve(De));
  }, ji = (De) => {
    v || w10(De.currentTarget), bl(De), Ge.current === true && (as(true), Fe(De));
  }, ls = (De) => {
    ae.current = true;
    const qt3 = j.props;
    qt3.onTouchStart && qt3.onTouchStart(De);
  }, cs = Fe, Wi = Ve, vl = (De) => {
    ls(De), clearTimeout(we.current), clearTimeout(Se.current), ie(), Q5.current = document.body.style.WebkitUserSelect, document.body.style.WebkitUserSelect = "none", Ne.current = setTimeout(() => {
      document.body.style.WebkitUserSelect = Q5.current, Fe(De);
    }, te);
  }, Al = (De) => {
    j.props.onTouchEnd && j.props.onTouchEnd(De), ie(), clearTimeout(we.current), we.current = setTimeout(() => {
      Ee(De);
    }, se);
  };
  ve.useEffect(() => {
    if (!A10)
      return;
    function De(qt3) {
      (qt3.key === "Escape" || qt3.key === "Esc") && Ee(qt3);
    }
    return document.addEventListener("keydown", De), () => {
      document.removeEventListener("keydown", De);
    };
  }, [Ee, A10]);
  const wl = Xn3(j.ref, ss, w10, r);
  !R5 && R5 !== 0 && (A10 = false);
  const Ui = ve.useRef(), Y = (De) => {
    const qt3 = j.props;
    qt3.onMouseMove && qt3.onMouseMove(De), ro = {
      x: De.clientX,
      y: De.clientY
    }, Ui.current && Ui.current.update();
  }, ge = {}, be = typeof R5 == "string";
  ee ? (ge.title = !A10 && be && !P ? R5 : null, ge["aria-describedby"] = A10 ? M5 : null) : (ge["aria-label"] = be ? R5 : null, ge["aria-labelledby"] = A10 && !be ? M5 : null);
  const xe = ke({}, ge, ne, j.props, {
    className: uo(ne.className, j.props.className),
    onTouchStart: ls,
    ref: wl
  }, X7 ? {
    onMouseMove: Y
  } : {});
  xe["data-mui-internal-clone-element"] = true, ve.useEffect(() => {
    v && !v.getAttribute("data-mui-internal-clone-element") && console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join(`
`));
  }, [v]);
  const je = {};
  U || (xe.onTouchStart = vl, xe.onTouchEnd = Al), P || (xe.onMouseOver = Ns(cs, xe.onMouseOver), xe.onMouseLeave = Ns(Wi, xe.onMouseLeave), ue || (je.onMouseOver = cs, je.onMouseLeave = Wi)), fe || (xe.onFocus = Ns(ji, xe.onFocus), xe.onBlur = Ns(Fi, xe.onBlur), ue || (je.onFocus = ji, je.onBlur = Fi)), j.props.title && console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${j.props.title}\` or the Tooltip component.`].join(`
`));
  const Ze = ve.useMemo(() => {
    var De;
    let qt3 = [{
      name: "arrow",
      enabled: !!D,
      options: {
        element: D,
        padding: 4
      }
    }];
    return (De = Z.popperOptions) != null && De.modifiers && (qt3 = qt3.concat(Z.popperOptions.modifiers)), ke({}, Z.popperOptions, {
      modifiers: qt3
    });
  }, [D, Z]), Pe = ke({}, L, {
    isRtl: C,
    arrow: N5,
    disableInteractive: ue,
    placement: B5,
    PopperComponentProp: q7,
    touch: ae.current
  }), Re = C7(Pe), At3 = (n = (i = de.popper) != null ? i : W.Popper) != null ? n : T7, lt3 = (o = (s = (a = de.transition) != null ? a : W.Transition) != null ? s : k) != null ? o : t0, ut3 = (l = (c3 = de.tooltip) != null ? c3 : W.Tooltip) != null ? l : O7, Zt3 = (u = (f10 = de.arrow) != null ? f10 : W.Arrow) != null ? u : I7, Gr = fo(At3, ke({}, Z, (d = oe.popper) != null ? d : G.popper, {
    className: uo(Re.popper, Z == null ? undefined : Z.className, (h = (g3 = oe.popper) != null ? g3 : G.popper) == null ? undefined : h.className)
  }), Pe), us = fo(lt3, ke({}, re, (p = oe.transition) != null ? p : G.transition), Pe), cr = fo(ut3, ke({}, (y10 = oe.tooltip) != null ? y10 : G.tooltip, {
    className: uo(Re.tooltip, (b = (x = oe.tooltip) != null ? x : G.tooltip) == null ? undefined : b.className)
  }), Pe), zm = fo(Zt3, ke({}, (S = oe.arrow) != null ? S : G.arrow, {
    className: uo(Re.arrow, (O = (_ = oe.arrow) != null ? _ : G.arrow) == null ? undefined : O.className)
  }), Pe);
  return /* @__PURE__ */ Lt3.jsxs(ve.Fragment, {
    children: [/* @__PURE__ */ ve.cloneElement(j, xe), /* @__PURE__ */ Lt3.jsx(At3, ke({
      as: q7 ?? xm,
      placement: B5,
      anchorEl: X7 ? {
        getBoundingClientRect: () => ({
          top: ro.y,
          left: ro.x,
          right: ro.x,
          bottom: ro.y,
          width: 0,
          height: 0
        })
      } : v,
      popperRef: Ui,
      open: v ? A10 : false,
      id: M5,
      transition: true
    }, je, Gr, {
      popperOptions: Ze,
      children: ({
        TransitionProps: De
      }) => /* @__PURE__ */ Lt3.jsx(lt3, ke({
        timeout: Ae.transitions.duration.shorter
      }, De, us, {
        children: /* @__PURE__ */ Lt3.jsxs(ut3, ke({}, cr, {
          children: [R5, N5 ? /* @__PURE__ */ Lt3.jsx(Zt3, ke({}, zm, {
            ref: J5
          })) : null]
        }))
      }))
    }))]
  });
});
_m.propTypes = {
  arrow: F4.bool,
  children: Pg.isRequired,
  classes: F4.object,
  className: F4.string,
  components: F4.shape({
    Arrow: F4.elementType,
    Popper: F4.elementType,
    Tooltip: F4.elementType,
    Transition: F4.elementType
  }),
  componentsProps: F4.shape({
    arrow: F4.object,
    popper: F4.object,
    tooltip: F4.object,
    transition: F4.object
  }),
  describeChild: F4.bool,
  disableFocusListener: F4.bool,
  disableHoverListener: F4.bool,
  disableInteractive: F4.bool,
  disableTouchListener: F4.bool,
  enterDelay: F4.number,
  enterNextDelay: F4.number,
  enterTouchDelay: F4.number,
  followCursor: F4.bool,
  id: F4.string,
  leaveDelay: F4.number,
  leaveTouchDelay: F4.number,
  onClose: F4.func,
  onOpen: F4.func,
  open: F4.bool,
  placement: F4.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  PopperComponent: F4.elementType,
  PopperProps: F4.object,
  slotProps: F4.shape({
    arrow: F4.object,
    popper: F4.object,
    tooltip: F4.object,
    transition: F4.object
  }),
  slots: F4.shape({
    arrow: F4.elementType,
    popper: F4.elementType,
    tooltip: F4.elementType,
    transition: F4.elementType
  }),
  sx: F4.oneOfType([F4.arrayOf(F4.oneOfType([F4.func, F4.object, F4.bool])), F4.func, F4.object]),
  title: F4.node,
  TransitionComponent: F4.elementType,
  TransitionProps: F4.object
};
var hu = {};
var R7 = {
  get exports() {
    return hu;
  },
  set exports(t3) {
    hu = t3;
  }
};
(function(t3) {
  function e(r) {
    return r && r.__esModule ? r : {
      default: r
    };
  }
  t3.exports = e, t3.exports.__esModule = true, t3.exports.default = t3.exports;
})(R7);
var wc = {};
function D7(t3) {
  return Zo("MuiSvgIcon", t3);
}
sf("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
var M7 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
var N7 = (t3) => {
  const {
    color: e,
    fontSize: r,
    classes: n
  } = t3, i = {
    root: ["root", e !== "inherit" && `color${or(e)}`, `fontSize${or(r)}`]
  };
  return of(i, D7, n);
};
var L7 = is("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (t3, e) => {
    const {
      ownerState: r
    } = t3;
    return [e.root, r.color !== "inherit" && e[`color${or(r.color)}`], e[`fontSize${or(r.fontSize)}`]];
  }
})(({
  theme: t3,
  ownerState: e
}) => {
  var r, n, i, o, s, a, l, c3, u, f10, d, h, g3, p, y10, b, x;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    fill: "currentColor",
    flexShrink: 0,
    transition: (r = t3.transitions) == null || (n = r.create) == null ? undefined : n.call(r, "fill", {
      duration: (i = t3.transitions) == null || (o = i.duration) == null ? undefined : o.shorter
    }),
    fontSize: {
      inherit: "inherit",
      small: ((s = t3.typography) == null || (a = s.pxToRem) == null ? undefined : a.call(s, 20)) || "1.25rem",
      medium: ((l = t3.typography) == null || (c3 = l.pxToRem) == null ? undefined : c3.call(l, 24)) || "1.5rem",
      large: ((u = t3.typography) == null || (f10 = u.pxToRem) == null ? undefined : f10.call(u, 35)) || "2.1875rem"
    }[e.fontSize],
    color: (d = (h = (t3.vars || t3).palette) == null || (g3 = h[e.color]) == null ? undefined : g3.main) != null ? d : {
      action: (p = (t3.vars || t3).palette) == null || (y10 = p.action) == null ? undefined : y10.active,
      disabled: (b = (t3.vars || t3).palette) == null || (x = b.action) == null ? undefined : x.disabled,
      inherit: undefined
    }[e.color]
  };
});
var Pf = /* @__PURE__ */ ve.forwardRef(function(e, r) {
  const n = Of({
    props: e,
    name: "MuiSvgIcon"
  }), {
    children: i,
    className: o,
    color: s = "inherit",
    component: a = "svg",
    fontSize: l = "medium",
    htmlColor: c3,
    inheritViewBox: u = false,
    titleAccess: f10,
    viewBox: d = "0 0 24 24"
  } = n, h = An3(n, M7), g3 = ke({}, n, {
    color: s,
    component: a,
    fontSize: l,
    instanceFontSize: e.fontSize,
    inheritViewBox: u,
    viewBox: d
  }), p = {};
  u || (p.viewBox = d);
  const y10 = N7(g3);
  return /* @__PURE__ */ Lt3.jsxs(L7, ke({
    as: a,
    className: uo(y10.root, o),
    focusable: "false",
    color: c3,
    "aria-hidden": f10 ? undefined : true,
    role: f10 ? "img" : undefined,
    ref: r
  }, p, h, {
    ownerState: g3,
    children: [i, f10 ? /* @__PURE__ */ Lt3.jsx("title", {
      children: f10
    }) : null]
  }));
});
Pf.propTypes = {
  children: F4.node,
  classes: F4.object,
  className: F4.string,
  color: F4.oneOfType([F4.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), F4.string]),
  component: F4.elementType,
  fontSize: F4.oneOfType([F4.oneOf(["inherit", "large", "medium", "small"]), F4.string]),
  htmlColor: F4.string,
  inheritViewBox: F4.bool,
  shapeRendering: F4.string,
  sx: F4.oneOfType([F4.arrayOf(F4.oneOfType([F4.func, F4.object, F4.bool])), F4.func, F4.object]),
  titleAccess: F4.string,
  viewBox: F4.string
};
Pf.muiName = "SvgIcon";
var r0 = Pf;
function B7(t3, e) {
  function r(n, i) {
    return /* @__PURE__ */ Lt3.jsx(r0, ke({
      "data-testid": `${e}Icon`,
      ref: i
    }, n, {
      children: t3
    }));
  }
  return r.displayName = `${e}Icon`, r.muiName = r0.muiName, /* @__PURE__ */ ve.memo(/* @__PURE__ */ ve.forwardRef(r));
}
var F7 = {
  configure: (t3) => {
    console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join(`
`)), jg.configure(t3);
  }
};
var j7 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  capitalize: or,
  createChainedFunction: f4,
  createSvgIcon: B7,
  debounce: d4,
  deprecatedPropType: h4,
  isMuiElement: p4,
  ownerDocument: Ea,
  ownerWindow: g4,
  requirePropFactory: m4,
  setRef: ka,
  unstable_ClassNameGenerator: F7,
  unstable_useEnhancedEffect: Oi,
  unstable_useId: Mg,
  unsupportedProp: v4,
  useControlled: Ng,
  useEventCallback: Lg,
  useForkRef: Xn3,
  useIsFocusVisible: Bg
}, Symbol.toStringTag, { value: "Module" }));
var W7 = /* @__PURE__ */ g0(j7);
var n0;
function U7() {
  return n0 || (n0 = 1, function(t3) {
    Object.defineProperty(t3, "__esModule", {
      value: true
    }), Object.defineProperty(t3, "default", {
      enumerable: true,
      get: function() {
        return e.createSvgIcon;
      }
    });
    var e = W7;
  }(wc)), wc;
}
var Rf = {};
var V7 = hu;
Object.defineProperty(Rf, "__esModule", {
  value: true
});
var Sm = Rf.default = undefined;
var q7 = V7(U7());
var H7 = Wg();
var Y7 = (0, q7.default)(/* @__PURE__ */ (0, H7.jsx)("path", {
  d: "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
}), "Refresh");
Sm = Rf.default = Y7;
var km = {};
var Cm = {
  MODE_NUMBER: 1,
  MODE_ALPHA_NUM: 2,
  MODE_8BIT_BYTE: 4,
  MODE_KANJI: 8
};
var K7 = Cm;
function Tm(t3) {
  this.mode = K7.MODE_8BIT_BYTE, this.data = t3;
}
Tm.prototype = {
  getLength: function(t3) {
    return this.data.length;
  },
  write: function(t3) {
    for (var e = 0;e < this.data.length; e++)
      t3.put(this.data.charCodeAt(e), 8);
  }
};
var X7 = Tm;
var Om = {
  L: 1,
  M: 0,
  Q: 3,
  H: 2
};
var Ls = Om;
function Er(t3, e) {
  this.totalCount = t3, this.dataCount = e;
}
Er.RS_BLOCK_TABLE = [
  [1, 26, 19],
  [1, 26, 16],
  [1, 26, 13],
  [1, 26, 9],
  [1, 44, 34],
  [1, 44, 28],
  [1, 44, 22],
  [1, 44, 16],
  [1, 70, 55],
  [1, 70, 44],
  [2, 35, 17],
  [2, 35, 13],
  [1, 100, 80],
  [2, 50, 32],
  [2, 50, 24],
  [4, 25, 9],
  [1, 134, 108],
  [2, 67, 43],
  [2, 33, 15, 2, 34, 16],
  [2, 33, 11, 2, 34, 12],
  [2, 86, 68],
  [4, 43, 27],
  [4, 43, 19],
  [4, 43, 15],
  [2, 98, 78],
  [4, 49, 31],
  [2, 32, 14, 4, 33, 15],
  [4, 39, 13, 1, 40, 14],
  [2, 121, 97],
  [2, 60, 38, 2, 61, 39],
  [4, 40, 18, 2, 41, 19],
  [4, 40, 14, 2, 41, 15],
  [2, 146, 116],
  [3, 58, 36, 2, 59, 37],
  [4, 36, 16, 4, 37, 17],
  [4, 36, 12, 4, 37, 13],
  [2, 86, 68, 2, 87, 69],
  [4, 69, 43, 1, 70, 44],
  [6, 43, 19, 2, 44, 20],
  [6, 43, 15, 2, 44, 16],
  [4, 101, 81],
  [1, 80, 50, 4, 81, 51],
  [4, 50, 22, 4, 51, 23],
  [3, 36, 12, 8, 37, 13],
  [2, 116, 92, 2, 117, 93],
  [6, 58, 36, 2, 59, 37],
  [4, 46, 20, 6, 47, 21],
  [7, 42, 14, 4, 43, 15],
  [4, 133, 107],
  [8, 59, 37, 1, 60, 38],
  [8, 44, 20, 4, 45, 21],
  [12, 33, 11, 4, 34, 12],
  [3, 145, 115, 1, 146, 116],
  [4, 64, 40, 5, 65, 41],
  [11, 36, 16, 5, 37, 17],
  [11, 36, 12, 5, 37, 13],
  [5, 109, 87, 1, 110, 88],
  [5, 65, 41, 5, 66, 42],
  [5, 54, 24, 7, 55, 25],
  [11, 36, 12],
  [5, 122, 98, 1, 123, 99],
  [7, 73, 45, 3, 74, 46],
  [15, 43, 19, 2, 44, 20],
  [3, 45, 15, 13, 46, 16],
  [1, 135, 107, 5, 136, 108],
  [10, 74, 46, 1, 75, 47],
  [1, 50, 22, 15, 51, 23],
  [2, 42, 14, 17, 43, 15],
  [5, 150, 120, 1, 151, 121],
  [9, 69, 43, 4, 70, 44],
  [17, 50, 22, 1, 51, 23],
  [2, 42, 14, 19, 43, 15],
  [3, 141, 113, 4, 142, 114],
  [3, 70, 44, 11, 71, 45],
  [17, 47, 21, 4, 48, 22],
  [9, 39, 13, 16, 40, 14],
  [3, 135, 107, 5, 136, 108],
  [3, 67, 41, 13, 68, 42],
  [15, 54, 24, 5, 55, 25],
  [15, 43, 15, 10, 44, 16],
  [4, 144, 116, 4, 145, 117],
  [17, 68, 42],
  [17, 50, 22, 6, 51, 23],
  [19, 46, 16, 6, 47, 17],
  [2, 139, 111, 7, 140, 112],
  [17, 74, 46],
  [7, 54, 24, 16, 55, 25],
  [34, 37, 13],
  [4, 151, 121, 5, 152, 122],
  [4, 75, 47, 14, 76, 48],
  [11, 54, 24, 14, 55, 25],
  [16, 45, 15, 14, 46, 16],
  [6, 147, 117, 4, 148, 118],
  [6, 73, 45, 14, 74, 46],
  [11, 54, 24, 16, 55, 25],
  [30, 46, 16, 2, 47, 17],
  [8, 132, 106, 4, 133, 107],
  [8, 75, 47, 13, 76, 48],
  [7, 54, 24, 22, 55, 25],
  [22, 45, 15, 13, 46, 16],
  [10, 142, 114, 2, 143, 115],
  [19, 74, 46, 4, 75, 47],
  [28, 50, 22, 6, 51, 23],
  [33, 46, 16, 4, 47, 17],
  [8, 152, 122, 4, 153, 123],
  [22, 73, 45, 3, 74, 46],
  [8, 53, 23, 26, 54, 24],
  [12, 45, 15, 28, 46, 16],
  [3, 147, 117, 10, 148, 118],
  [3, 73, 45, 23, 74, 46],
  [4, 54, 24, 31, 55, 25],
  [11, 45, 15, 31, 46, 16],
  [7, 146, 116, 7, 147, 117],
  [21, 73, 45, 7, 74, 46],
  [1, 53, 23, 37, 54, 24],
  [19, 45, 15, 26, 46, 16],
  [5, 145, 115, 10, 146, 116],
  [19, 75, 47, 10, 76, 48],
  [15, 54, 24, 25, 55, 25],
  [23, 45, 15, 25, 46, 16],
  [13, 145, 115, 3, 146, 116],
  [2, 74, 46, 29, 75, 47],
  [42, 54, 24, 1, 55, 25],
  [23, 45, 15, 28, 46, 16],
  [17, 145, 115],
  [10, 74, 46, 23, 75, 47],
  [10, 54, 24, 35, 55, 25],
  [19, 45, 15, 35, 46, 16],
  [17, 145, 115, 1, 146, 116],
  [14, 74, 46, 21, 75, 47],
  [29, 54, 24, 19, 55, 25],
  [11, 45, 15, 46, 46, 16],
  [13, 145, 115, 6, 146, 116],
  [14, 74, 46, 23, 75, 47],
  [44, 54, 24, 7, 55, 25],
  [59, 46, 16, 1, 47, 17],
  [12, 151, 121, 7, 152, 122],
  [12, 75, 47, 26, 76, 48],
  [39, 54, 24, 14, 55, 25],
  [22, 45, 15, 41, 46, 16],
  [6, 151, 121, 14, 152, 122],
  [6, 75, 47, 34, 76, 48],
  [46, 54, 24, 10, 55, 25],
  [2, 45, 15, 64, 46, 16],
  [17, 152, 122, 4, 153, 123],
  [29, 74, 46, 14, 75, 47],
  [49, 54, 24, 10, 55, 25],
  [24, 45, 15, 46, 46, 16],
  [4, 152, 122, 18, 153, 123],
  [13, 74, 46, 32, 75, 47],
  [48, 54, 24, 14, 55, 25],
  [42, 45, 15, 32, 46, 16],
  [20, 147, 117, 4, 148, 118],
  [40, 75, 47, 7, 76, 48],
  [43, 54, 24, 22, 55, 25],
  [10, 45, 15, 67, 46, 16],
  [19, 148, 118, 6, 149, 119],
  [18, 75, 47, 31, 76, 48],
  [34, 54, 24, 34, 55, 25],
  [20, 45, 15, 61, 46, 16]
];
Er.getRSBlocks = function(t3, e) {
  var r = Er.getRsBlockTable(t3, e);
  if (r == null)
    throw new Error("bad rs block @ typeNumber:" + t3 + "/errorCorrectLevel:" + e);
  for (var n = r.length / 3, i = new Array, o = 0;o < n; o++)
    for (var s = r[o * 3 + 0], a = r[o * 3 + 1], l = r[o * 3 + 2], c3 = 0;c3 < s; c3++)
      i.push(new Er(a, l));
  return i;
};
Er.getRsBlockTable = function(t3, e) {
  switch (e) {
    case Ls.L:
      return Er.RS_BLOCK_TABLE[(t3 - 1) * 4 + 0];
    case Ls.M:
      return Er.RS_BLOCK_TABLE[(t3 - 1) * 4 + 1];
    case Ls.Q:
      return Er.RS_BLOCK_TABLE[(t3 - 1) * 4 + 2];
    case Ls.H:
      return Er.RS_BLOCK_TABLE[(t3 - 1) * 4 + 3];
    default:
      return;
  }
};
var J7 = Er;
function Im() {
  this.buffer = new Array, this.length = 0;
}
Im.prototype = {
  get: function(t3) {
    var e = Math.floor(t3 / 8);
    return (this.buffer[e] >>> 7 - t3 % 8 & 1) == 1;
  },
  put: function(t3, e) {
    for (var r = 0;r < e; r++)
      this.putBit((t3 >>> e - r - 1 & 1) == 1);
  },
  getLengthInBits: function() {
    return this.length;
  },
  putBit: function(t3) {
    var e = Math.floor(this.length / 8);
    this.buffer.length <= e && this.buffer.push(0), t3 && (this.buffer[e] |= 128 >>> this.length % 8), this.length++;
  }
};
var Q7 = Im;
var pr = {
  glog: function(t3) {
    if (t3 < 1)
      throw new Error("glog(" + t3 + ")");
    return pr.LOG_TABLE[t3];
  },
  gexp: function(t3) {
    for (;t3 < 0; )
      t3 += 255;
    for (;t3 >= 256; )
      t3 -= 255;
    return pr.EXP_TABLE[t3];
  },
  EXP_TABLE: new Array(256),
  LOG_TABLE: new Array(256)
};
for (Tt3 = 0;Tt3 < 8; Tt3++)
  pr.EXP_TABLE[Tt3] = 1 << Tt3;
var Tt3;
for (Tt3 = 8;Tt3 < 256; Tt3++)
  pr.EXP_TABLE[Tt3] = pr.EXP_TABLE[Tt3 - 4] ^ pr.EXP_TABLE[Tt3 - 5] ^ pr.EXP_TABLE[Tt3 - 6] ^ pr.EXP_TABLE[Tt3 - 8];
var Tt3;
for (Tt3 = 0;Tt3 < 255; Tt3++)
  pr.LOG_TABLE[pr.EXP_TABLE[Tt3]] = Tt3;
var Tt3;
var Pm = pr;
var In = Pm;
function ra(t3, e) {
  if (t3.length == null)
    throw new Error(t3.length + "/" + e);
  for (var r = 0;r < t3.length && t3[r] == 0; )
    r++;
  this.num = new Array(t3.length - r + e);
  for (var n = 0;n < t3.length - r; n++)
    this.num[n] = t3[n + r];
}
ra.prototype = {
  get: function(t3) {
    return this.num[t3];
  },
  getLength: function() {
    return this.num.length;
  },
  multiply: function(t3) {
    for (var e = new Array(this.getLength() + t3.getLength() - 1), r = 0;r < this.getLength(); r++)
      for (var n = 0;n < t3.getLength(); n++)
        e[r + n] ^= In.gexp(In.glog(this.get(r)) + In.glog(t3.get(n)));
    return new ra(e, 0);
  },
  mod: function(t3) {
    if (this.getLength() - t3.getLength() < 0)
      return this;
    for (var e = In.glog(this.get(0)) - In.glog(t3.get(0)), r = new Array(this.getLength()), n = 0;n < this.getLength(); n++)
      r[n] = this.get(n);
    for (var n = 0;n < t3.getLength(); n++)
      r[n] ^= In.gexp(In.glog(t3.get(n)) + e);
    return new ra(r, 0).mod(t3);
  }
};
var Rm = ra;
var er = Cm;
var i0 = Rm;
var G7 = Pm;
var $r = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
};
var Et3 = {
  PATTERN_POSITION_TABLE: [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
  ],
  G15: 1335,
  G18: 7973,
  G15_MASK: 21522,
  getBCHTypeInfo: function(t3) {
    for (var e = t3 << 10;Et3.getBCHDigit(e) - Et3.getBCHDigit(Et3.G15) >= 0; )
      e ^= Et3.G15 << Et3.getBCHDigit(e) - Et3.getBCHDigit(Et3.G15);
    return (t3 << 10 | e) ^ Et3.G15_MASK;
  },
  getBCHTypeNumber: function(t3) {
    for (var e = t3 << 12;Et3.getBCHDigit(e) - Et3.getBCHDigit(Et3.G18) >= 0; )
      e ^= Et3.G18 << Et3.getBCHDigit(e) - Et3.getBCHDigit(Et3.G18);
    return t3 << 12 | e;
  },
  getBCHDigit: function(t3) {
    for (var e = 0;t3 != 0; )
      e++, t3 >>>= 1;
    return e;
  },
  getPatternPosition: function(t3) {
    return Et3.PATTERN_POSITION_TABLE[t3 - 1];
  },
  getMask: function(t3, e, r) {
    switch (t3) {
      case $r.PATTERN000:
        return (e + r) % 2 == 0;
      case $r.PATTERN001:
        return e % 2 == 0;
      case $r.PATTERN010:
        return r % 3 == 0;
      case $r.PATTERN011:
        return (e + r) % 3 == 0;
      case $r.PATTERN100:
        return (Math.floor(e / 2) + Math.floor(r / 3)) % 2 == 0;
      case $r.PATTERN101:
        return e * r % 2 + e * r % 3 == 0;
      case $r.PATTERN110:
        return (e * r % 2 + e * r % 3) % 2 == 0;
      case $r.PATTERN111:
        return (e * r % 3 + (e + r) % 2) % 2 == 0;
      default:
        throw new Error("bad maskPattern:" + t3);
    }
  },
  getErrorCorrectPolynomial: function(t3) {
    for (var e = new i0([1], 0), r = 0;r < t3; r++)
      e = e.multiply(new i0([1, G7.gexp(r)], 0));
    return e;
  },
  getLengthInBits: function(t3, e) {
    if (1 <= e && e < 10)
      switch (t3) {
        case er.MODE_NUMBER:
          return 10;
        case er.MODE_ALPHA_NUM:
          return 9;
        case er.MODE_8BIT_BYTE:
          return 8;
        case er.MODE_KANJI:
          return 8;
        default:
          throw new Error("mode:" + t3);
      }
    else if (e < 27)
      switch (t3) {
        case er.MODE_NUMBER:
          return 12;
        case er.MODE_ALPHA_NUM:
          return 11;
        case er.MODE_8BIT_BYTE:
          return 16;
        case er.MODE_KANJI:
          return 10;
        default:
          throw new Error("mode:" + t3);
      }
    else if (e < 41)
      switch (t3) {
        case er.MODE_NUMBER:
          return 14;
        case er.MODE_ALPHA_NUM:
          return 13;
        case er.MODE_8BIT_BYTE:
          return 16;
        case er.MODE_KANJI:
          return 12;
        default:
          throw new Error("mode:" + t3);
      }
    else
      throw new Error("type:" + e);
  },
  getLostPoint: function(t3) {
    for (var e = t3.getModuleCount(), r = 0, n = 0;n < e; n++)
      for (var i = 0;i < e; i++) {
        for (var o = 0, s = t3.isDark(n, i), a = -1;a <= 1; a++)
          if (!(n + a < 0 || e <= n + a))
            for (var l = -1;l <= 1; l++)
              i + l < 0 || e <= i + l || a == 0 && l == 0 || s == t3.isDark(n + a, i + l) && o++;
        o > 5 && (r += 3 + o - 5);
      }
    for (var n = 0;n < e - 1; n++)
      for (var i = 0;i < e - 1; i++) {
        var c3 = 0;
        t3.isDark(n, i) && c3++, t3.isDark(n + 1, i) && c3++, t3.isDark(n, i + 1) && c3++, t3.isDark(n + 1, i + 1) && c3++, (c3 == 0 || c3 == 4) && (r += 3);
      }
    for (var n = 0;n < e; n++)
      for (var i = 0;i < e - 6; i++)
        t3.isDark(n, i) && !t3.isDark(n, i + 1) && t3.isDark(n, i + 2) && t3.isDark(n, i + 3) && t3.isDark(n, i + 4) && !t3.isDark(n, i + 5) && t3.isDark(n, i + 6) && (r += 40);
    for (var i = 0;i < e; i++)
      for (var n = 0;n < e - 6; n++)
        t3.isDark(n, i) && !t3.isDark(n + 1, i) && t3.isDark(n + 2, i) && t3.isDark(n + 3, i) && t3.isDark(n + 4, i) && !t3.isDark(n + 5, i) && t3.isDark(n + 6, i) && (r += 40);
    for (var u = 0, i = 0;i < e; i++)
      for (var n = 0;n < e; n++)
        t3.isDark(n, i) && u++;
    var f10 = Math.abs(100 * u / e / e - 50) / 5;
    return r += f10 * 10, r;
  }
};
var Z7 = Et3;
var $7 = X7;
var Dm = J7;
var Mm = Q7;
var _n3 = Z7;
var eS = Rm;
function kr(t3, e) {
  this.typeNumber = t3, this.errorCorrectLevel = e, this.modules = null, this.moduleCount = 0, this.dataCache = null, this.dataList = [];
}
var Gt3 = kr.prototype;
Gt3.addData = function(t3) {
  var e = new $7(t3);
  this.dataList.push(e), this.dataCache = null;
};
Gt3.isDark = function(t3, e) {
  if (t3 < 0 || this.moduleCount <= t3 || e < 0 || this.moduleCount <= e)
    throw new Error(t3 + "," + e);
  return this.modules[t3][e];
};
Gt3.getModuleCount = function() {
  return this.moduleCount;
};
Gt3.make = function() {
  if (this.typeNumber < 1) {
    var t3 = 1;
    for (t3 = 1;t3 < 40; t3++) {
      for (var e = Dm.getRSBlocks(t3, this.errorCorrectLevel), r = new Mm, n = 0, i = 0;i < e.length; i++)
        n += e[i].dataCount;
      for (var i = 0;i < this.dataList.length; i++) {
        var o = this.dataList[i];
        r.put(o.mode, 4), r.put(o.getLength(), _n3.getLengthInBits(o.mode, t3)), o.write(r);
      }
      if (r.getLengthInBits() <= n * 8)
        break;
    }
    this.typeNumber = t3;
  }
  this.makeImpl(false, this.getBestMaskPattern());
};
Gt3.makeImpl = function(t3, e) {
  this.moduleCount = this.typeNumber * 4 + 17, this.modules = new Array(this.moduleCount);
  for (var r = 0;r < this.moduleCount; r++) {
    this.modules[r] = new Array(this.moduleCount);
    for (var n = 0;n < this.moduleCount; n++)
      this.modules[r][n] = null;
  }
  this.setupPositionProbePattern(0, 0), this.setupPositionProbePattern(this.moduleCount - 7, 0), this.setupPositionProbePattern(0, this.moduleCount - 7), this.setupPositionAdjustPattern(), this.setupTimingPattern(), this.setupTypeInfo(t3, e), this.typeNumber >= 7 && this.setupTypeNumber(t3), this.dataCache == null && (this.dataCache = kr.createData(this.typeNumber, this.errorCorrectLevel, this.dataList)), this.mapData(this.dataCache, e);
};
Gt3.setupPositionProbePattern = function(t3, e) {
  for (var r = -1;r <= 7; r++)
    if (!(t3 + r <= -1 || this.moduleCount <= t3 + r))
      for (var n = -1;n <= 7; n++)
        e + n <= -1 || this.moduleCount <= e + n || (0 <= r && r <= 6 && (n == 0 || n == 6) || 0 <= n && n <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= n && n <= 4 ? this.modules[t3 + r][e + n] = true : this.modules[t3 + r][e + n] = false);
};
Gt3.getBestMaskPattern = function() {
  for (var t3 = 0, e = 0, r = 0;r < 8; r++) {
    this.makeImpl(true, r);
    var n = _n3.getLostPoint(this);
    (r == 0 || t3 > n) && (t3 = n, e = r);
  }
  return e;
};
Gt3.createMovieClip = function(t3, e, r) {
  var n = t3.createEmptyMovieClip(e, r), i = 1;
  this.make();
  for (var o = 0;o < this.modules.length; o++)
    for (var s = o * i, a = 0;a < this.modules[o].length; a++) {
      var l = a * i, c3 = this.modules[o][a];
      c3 && (n.beginFill(0, 100), n.moveTo(l, s), n.lineTo(l + i, s), n.lineTo(l + i, s + i), n.lineTo(l, s + i), n.endFill());
    }
  return n;
};
Gt3.setupTimingPattern = function() {
  for (var t3 = 8;t3 < this.moduleCount - 8; t3++)
    this.modules[t3][6] == null && (this.modules[t3][6] = t3 % 2 == 0);
  for (var e = 8;e < this.moduleCount - 8; e++)
    this.modules[6][e] == null && (this.modules[6][e] = e % 2 == 0);
};
Gt3.setupPositionAdjustPattern = function() {
  for (var t3 = _n3.getPatternPosition(this.typeNumber), e = 0;e < t3.length; e++)
    for (var r = 0;r < t3.length; r++) {
      var n = t3[e], i = t3[r];
      if (this.modules[n][i] == null)
        for (var o = -2;o <= 2; o++)
          for (var s = -2;s <= 2; s++)
            o == -2 || o == 2 || s == -2 || s == 2 || o == 0 && s == 0 ? this.modules[n + o][i + s] = true : this.modules[n + o][i + s] = false;
    }
};
Gt3.setupTypeNumber = function(t3) {
  for (var e = _n3.getBCHTypeNumber(this.typeNumber), r = 0;r < 18; r++) {
    var n = !t3 && (e >> r & 1) == 1;
    this.modules[Math.floor(r / 3)][r % 3 + this.moduleCount - 8 - 3] = n;
  }
  for (var r = 0;r < 18; r++) {
    var n = !t3 && (e >> r & 1) == 1;
    this.modules[r % 3 + this.moduleCount - 8 - 3][Math.floor(r / 3)] = n;
  }
};
Gt3.setupTypeInfo = function(t3, e) {
  for (var r = this.errorCorrectLevel << 3 | e, n = _n3.getBCHTypeInfo(r), i = 0;i < 15; i++) {
    var o = !t3 && (n >> i & 1) == 1;
    i < 6 ? this.modules[i][8] = o : i < 8 ? this.modules[i + 1][8] = o : this.modules[this.moduleCount - 15 + i][8] = o;
  }
  for (var i = 0;i < 15; i++) {
    var o = !t3 && (n >> i & 1) == 1;
    i < 8 ? this.modules[8][this.moduleCount - i - 1] = o : i < 9 ? this.modules[8][15 - i - 1 + 1] = o : this.modules[8][15 - i - 1] = o;
  }
  this.modules[this.moduleCount - 8][8] = !t3;
};
Gt3.mapData = function(t3, e) {
  for (var r = -1, n = this.moduleCount - 1, i = 7, o = 0, s = this.moduleCount - 1;s > 0; s -= 2)
    for (s == 6 && s--;; ) {
      for (var a = 0;a < 2; a++)
        if (this.modules[n][s - a] == null) {
          var l = false;
          o < t3.length && (l = (t3[o] >>> i & 1) == 1);
          var c3 = _n3.getMask(e, n, s - a);
          c3 && (l = !l), this.modules[n][s - a] = l, i--, i == -1 && (o++, i = 7);
        }
      if (n += r, n < 0 || this.moduleCount <= n) {
        n -= r, r = -r;
        break;
      }
    }
};
kr.PAD0 = 236;
kr.PAD1 = 17;
kr.createData = function(t3, e, r) {
  for (var n = Dm.getRSBlocks(t3, e), i = new Mm, o = 0;o < r.length; o++) {
    var s = r[o];
    i.put(s.mode, 4), i.put(s.getLength(), _n3.getLengthInBits(s.mode, t3)), s.write(i);
  }
  for (var a = 0, o = 0;o < n.length; o++)
    a += n[o].dataCount;
  if (i.getLengthInBits() > a * 8)
    throw new Error("code length overflow. (" + i.getLengthInBits() + ">" + a * 8 + ")");
  for (i.getLengthInBits() + 4 <= a * 8 && i.put(0, 4);i.getLengthInBits() % 8 != 0; )
    i.putBit(false);
  for (;!(i.getLengthInBits() >= a * 8 || (i.put(kr.PAD0, 8), i.getLengthInBits() >= a * 8)); )
    i.put(kr.PAD1, 8);
  return kr.createBytes(i, n);
};
kr.createBytes = function(t3, e) {
  for (var r = 0, n = 0, i = 0, o = new Array(e.length), s = new Array(e.length), a = 0;a < e.length; a++) {
    var l = e[a].dataCount, c3 = e[a].totalCount - l;
    n = Math.max(n, l), i = Math.max(i, c3), o[a] = new Array(l);
    for (var u = 0;u < o[a].length; u++)
      o[a][u] = 255 & t3.buffer[u + r];
    r += l;
    var f10 = _n3.getErrorCorrectPolynomial(c3), d = new eS(o[a], f10.getLength() - 1), h = d.mod(f10);
    s[a] = new Array(f10.getLength() - 1);
    for (var u = 0;u < s[a].length; u++) {
      var g3 = u + h.getLength() - s[a].length;
      s[a][u] = g3 >= 0 ? h.get(g3) : 0;
    }
  }
  for (var p = 0, u = 0;u < e.length; u++)
    p += e[u].totalCount;
  for (var y10 = new Array(p), b = 0, u = 0;u < n; u++)
    for (var a = 0;a < e.length; a++)
      u < o[a].length && (y10[b++] = o[a][u]);
  for (var u = 0;u < i; u++)
    for (var a = 0;a < e.length; a++)
      u < s[a].length && (y10[b++] = s[a][u]);
  return y10;
};
var tS = kr;
var Df = {};
Object.defineProperty(Df, "__esModule", {
  value: true
});
var rS = Object.assign || function(t3) {
  for (var e = 1;e < arguments.length; e++) {
    var r = arguments[e];
    for (var n in r)
      Object.prototype.hasOwnProperty.call(r, n) && (t3[n] = r[n]);
  }
  return t3;
};
var nS = F4;
var tr = Lm(nS);
var Nm = import_react.default;
var Bs = Lm(Nm);
function Lm(t3) {
  return t3 && t3.__esModule ? t3 : { default: t3 };
}
function iS(t3, e) {
  var r = {};
  for (var n in t3)
    e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(t3, n) && (r[n] = t3[n]);
  return r;
}
var oS = {
  bgColor: tr.default.oneOfType([tr.default.object, tr.default.string]).isRequired,
  bgD: tr.default.string.isRequired,
  fgColor: tr.default.oneOfType([tr.default.object, tr.default.string]).isRequired,
  fgD: tr.default.string.isRequired,
  size: tr.default.number.isRequired,
  title: tr.default.string,
  viewBoxSize: tr.default.number.isRequired,
  xmlns: tr.default.string
};
var sS = {
  title: undefined,
  xmlns: "http://www.w3.org/2000/svg"
};
var ml = (0, Nm.forwardRef)(function(t3, e) {
  var { bgColor: r, bgD: n, fgD: i, fgColor: o, size: s, title: a, viewBoxSize: l } = t3, c3 = iS(t3, ["bgColor", "bgD", "fgD", "fgColor", "size", "title", "viewBoxSize"]);
  return Bs.default.createElement("svg", rS({}, c3, { height: s, ref: e, viewBox: "0 0 " + l + " " + l, width: s }), a ? Bs.default.createElement("title", null, a) : null, Bs.default.createElement("path", { d: n, fill: r }), Bs.default.createElement("path", { d: i, fill: o }));
});
ml.displayName = "QRCodeSvg";
ml.propTypes = oS;
ml.defaultProps = sS;
Df.default = ml;
Object.defineProperty(km, "__esModule", {
  value: true
});
var aS = Object.assign || function(t3) {
  for (var e = 1;e < arguments.length; e++) {
    var r = arguments[e];
    for (var n in r)
      Object.prototype.hasOwnProperty.call(r, n) && (t3[n] = r[n]);
  }
  return t3;
};
var lS = tS;
var cS = os(lS);
var uS = Om;
var fS = os(uS);
var dS = F4;
var Rr = os(dS);
var Bm = import_react.default;
var hS = os(Bm);
var pS = Df;
var gS = os(pS);
function os(t3) {
  return t3 && t3.__esModule ? t3 : { default: t3 };
}
function mS(t3, e) {
  var r = {};
  for (var n in t3)
    e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(t3, n) && (r[n] = t3[n]);
  return r;
}
var yS = {
  bgColor: Rr.default.oneOfType([Rr.default.object, Rr.default.string]),
  fgColor: Rr.default.oneOfType([Rr.default.object, Rr.default.string]),
  level: Rr.default.string,
  size: Rr.default.number,
  value: Rr.default.string.isRequired
};
var bS = {
  bgColor: "#FFFFFF",
  fgColor: "#000000",
  level: "L",
  size: 256
};
var yl = (0, Bm.forwardRef)(function(t3, e) {
  var { bgColor: r, fgColor: n, level: i, size: o, value: s } = t3, a = mS(t3, ["bgColor", "fgColor", "level", "size", "value"]), l = new cS.default(-1, fS.default[i]);
  l.addData(s), l.make();
  var c3 = l.modules;
  return hS.default.createElement(gS.default, aS({}, a, {
    bgColor: r,
    bgD: c3.map(function(u, f10) {
      return u.map(function(d, h) {
        return d ? "" : "M " + h + " " + f10 + " l 1 0 0 1 -1 0 Z";
      }).join(" ");
    }).join(" "),
    fgColor: n,
    fgD: c3.map(function(u, f10) {
      return u.map(function(d, h) {
        return d ? "M " + h + " " + f10 + " l 1 0 0 1 -1 0 Z" : "";
      }).join(" ");
    }).join(" "),
    ref: e,
    size: o,
    viewBoxSize: c3.length
  }));
});
yl.displayName = "QRCode";
yl.propTypes = yS;
yl.defaultProps = bS;
var Fm = km.default = yl;
var xS = [
  /^(:{2}f{4}:)?10(?:\.\d{1,3}){3}$/,
  /^(:{2}f{4}:)?127(?:\.\d{1,3}){3}$/,
  /^(::f{4}:)?169\.254\.([1-9]|1?\d\d|2[0-4]\d|25[0-4])\.\d{1,3}$/,
  /^(:{2}f{4}:)?(172\.1[6-9]|172\.2\d|172\.3[01])(?:\.\d{1,3}){2}$/,
  /^(:{2}f{4}:)?192\.168(?:\.\d{1,3}){2}$/,
  /^f[cd][\da-f]{2}(::1$|:[\da-f]{1,4}){1,7}$/,
  /^fe[89ab][\da-f](::1$|:[\da-f]{1,4}){1,7}$/
];
var _S = new RegExp(`^(${xS.map((t3) => t3.source).join("|")})$`);
typeof window < "u" && (window._PLAYROOM_CONFIG = {
  ...window._PLAYROOM_CONFIG || {},
  sessionStorage: true,
  sdkMode: true,
  sdkVersion: Gu.version
}, mi.track("SDK: Loaded", {
  cdn: !!window.Playroom
}));
// node_modules/aseprite-sheet/dist/index.js
class f10 {
  spriteSheet;
  frames;
  spriteDefinitions;
  onFrameChange;
  constructor(e, i) {
    this.spriteSheet = e;
    this.frames = i;
    this.spriteDefinitions = e.spriteDefinitions;
  }
  getSpriteDefinition(e = 0) {
    return this.spriteDefinitions[this.frames[e % this.frames.length]];
  }
  draw(e, i, t3, r = 0, n = 1) {
    let a = this.getSpriteDefinition(r), { x: o, y: h, w: m10, h: p } = a.frame;
    e.drawImage(this.spriteSheet.getImage(), o, h, m10, p, i, t3, m10 * n, p * n);
  }
  makeCanvas(e = 0, i = 1) {
    let { w: t3, h: r } = this.getSpriteDefinition(e).frame, n = document.createElement("canvas"), a = n.getContext("2d");
    if (n.classList.add("sprite-canvas"), n.width = t3 * i, n.height = r * i, this.draw(a, 0, 0, e, i), this.onFrameChange?.(e), this.frames.length > 1) {
      let o = performance.now(), h = this.spriteDefinitions[this.frames[e]], m10 = () => {
        let g3 = performance.now() - o, c3 = Math.floor(g3 / h.duration) % this.frames.length;
        a.clearRect(0, 0, n.width, n.height), this.draw(a, 0, 0, c3, i), this.onFrameChange?.(c3), requestAnimationFrame(m10);
      };
      m10();
    }
    return n;
  }
  async makeBlob(e, i = 1) {
    return new Promise((t3) => {
      this.makeCanvas(e, i).toBlob((r) => t3(r));
    });
  }
  generateDiv(e = 0) {
    let i = this.getSpriteDefinition(e), t3 = document.createElement("div");
    if (t3.classList.add("sprite"), t3.style.backgroundImage = `url(${this.spriteSheet.definition.meta.image})`, t3.style.backgroundPosition = `-${i.frame.x}px -${i.frame.y}px`, t3.style.minWidth = `${i.frame.w}px`, t3.style.minHeight = `${i.frame.h}px`, t3.style.backgroundSize = `${this.spriteSheet.definition.meta.size.w}px ${this.spriteSheet.definition.meta.size.h}px`, this.frames.length > 1) {
      let r = 0, n = "@keyframes animateSprite {";
      for (let o = 0;o < this.frames.length; o++) {
        let h = this.frames[o], m10 = this.spriteDefinitions[h], p = o / this.frames.length * 100;
        n += `${p}% { background-position: -${m10.frame.x}px -${m10.frame.y}px; } `, r += m10.duration;
      }
      n += "}";
      let a = document.createElement("style");
      a.innerText = n, document.head.appendChild(a), t3.style.animation = `animateSprite ${r}ms steps(1) infinite`;
    }
    return t3;
  }
}

class u {
  definition;
  image = new Image;
  loadPromise;
  spriteDefinitions = [];
  sprites = [];
  taggedSprites = {};
  loaded = false;
  get count() {
    return this.spriteDefinitions.length;
  }
  constructor(e) {
    this.definition = e;
    Object.entries(e.frames).forEach(([i, t3]) => {
      let [, r] = i.match(l) ?? [];
      this.spriteDefinitions[parseInt(r)] = t3;
    });
  }
  getImage() {
    return this.image;
  }
  getSprite(e) {
    return this.sprites[e] ?? (this.sprites[e] = new f10(this, [e]));
  }
  getTaggedSprite(e) {
    if (this.taggedSprites[e])
      return this.taggedSprites[e];
    let i = this.definition.meta.frameTags.find((t3) => t3.name === e);
    if (i) {
      let { from: t3, to: r } = i, n = Math.sign(r - t3) || 1, a = [];
      for (let o = t3;o <= r; o += n)
        a.push(o);
      return this.taggedSprites[e] = new f10(this, this.calculateFrames(a, i.direction));
    }
    return;
  }
  calculateFrames(e, i) {
    let t3 = [...e];
    switch (i) {
      case "reverse":
        t3.reverse();
        break;
      case "pingpong":
        for (let r = e.length - 2;r >= 1; r--)
          t3.push(e[r]);
        break;
      case "pingpong_reverse":
        t3.reverse();
        for (let r = 1;r < e.length - 1; r++)
          t3.push(e[r]);
        break;
    }
    return t3;
  }
  getTags() {
    return this.definition.meta.frameTags;
  }
  async load() {
    if (!this.loadPromise && !this.loaded)
      this.loadPromise = new Promise(async (e, i) => {
        await new Promise((t3, r) => {
          this.image = new Image, this.image.onload = () => t3(), this.image.onerror = r, this.image.src = this.definition.meta.image;
        }), e(), this.loadPromise = undefined;
      });
    return await this.loadPromise, this;
  }
}
var l = /.*\s(\d+).aseprite/;
async function y10(e) {
  return await fetch(e).then((t3) => t3.json());
}
var d;
((s) => {
  s.NORMAL = "normal";
  s.MULTIPLY = "multiply";
  s.SCREEN = "screen";
  s.OVERLAY = "overlay";
  s.DARKEN = "darken";
  s.LIGHTEN = "lighten";
  s.COLOR_DODGE = "color-dodge";
  s.COLOR_BURN = "color-burn";
  s.HARD_LIGHT = "hard-light";
  s.SOFT_LIGHT = "soft-light";
  s.DIFFERENCE = "difference";
  s.EXCLUSION = "exclusion";
  s.HUE = "hue";
  s.SATURATION = "saturation";
  s.COLOR = "color";
  s.LUMINOSITY = "luminosity";
})(d ||= {});
var b;
((n) => {
  n.FORWARD = "forward";
  n.REVERSE = "reverse";
  n.PINGPONG = "pingpong";
  n.PINGPONG_REVERSE = "pingpong_reverse";
})(b ||= {});

// style-helper:__style_helper__
function injectStyle(text) {
  if (typeof document !== "undefined") {
    const styleTag = document.getElementById("bun_lightningcss");
    if (styleTag) {
      const node2 = document.createTextNode(text);
      styleTag.appendChild(node2);
      return;
    }
    var style = document.createElement("style");
    style.id = "bun_lightningcss";
    var node = document.createTextNode(text);
    style.appendChild(node);
    document.head.appendChild(style);
  }
}

// src/react/style.module.css
injectStyle(".NWlSQG_shared-text{width:100%;height:500px}");
var style_module_default = { "shared-text": "NWlSQG_shared-text" };

// src/react/sync-client.ts
var import_react2 = __toESM(require_react(), 1);
function useSyncClient(props) {
  const syncClient = import_react2.useMemo(() => {
    return props.syncClient ?? (props.host ? provideSocketClient({ host: props.host, room: props.room }) : undefined);
  }, [props.syncClient, props.host, props.room]);
  const useData = import_react2.useCallback((path) => {
    const [data, setData] = import_react2.useState(null);
    import_react2.useEffect(() => {
      const observer = syncClient.observe(path).onChange((value) => setData(value));
      return () => observer.close();
    }, [path]);
    return [
      data,
      import_react2.useCallback((value) => {
        syncClient.setData(path, value);
      }, [])
    ];
  }, [syncClient]);
  return { useData };
}

// src/react/component.tsx
var import_client = __toESM(require_client(), 1);
var jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
function SharedText({ syncClient }) {
  const { useData } = useSyncClient({ syncClient });
  const [data, setData] = useData("data");
  return /* @__PURE__ */ jsx_dev_runtime.jsxDEV("textarea", {
    className: style_module_default["shared-text"],
    title: "shared-text",
    value: data ?? "",
    onChange: (e) => setData(e.target.value)
  }, undefined, false, undefined, this);
}
function hookupDiv(div, client) {
  const root = import_client.default.createRoot(div);
  root.render(/* @__PURE__ */ jsx_dev_runtime.jsxDEV(SharedText, {
    syncClient: client
  }, undefined, false, undefined, this));
}

// src/iso-test/iso-utils.ts
var scaleX = 70;
var scaleY = 40;
function gridPositionToView(x, y11) {
  return [(x + y11) * scaleX / 2, (-x + y11) * scaleY / 2];
}
function viewPositionToGrid(x, y11) {
  return [Math.round(x / scaleX - y11 / scaleY), Math.round(x / scaleX + y11 / scaleY)];
}
async function displayIsoUI(path) {
  function getDraggedItem(clientId) {
    let div = document.getElementById(`drag-${clientId}`);
    if (!div) {
      div = document.body.appendChild(document.createElement("div"));
      div.id = `drag-${clientId}`;
      div.style.position = "absolute";
      div.style.pointerEvents = "none";
      div.style.top = "0";
      div.style.left = "0";
      div.style.opacity = "0.5";
      div.style.transform = "scale(0.15)";
      div.style.transformOrigin = "top left";
    }
    return div;
  }
  let selectedTime = 0;
  const spriteSheet = await getSpriteSheet(path);
  const ui2 = document.body.appendChild(document.createElement("div"));
  ui2.style.display = "flex";
  ui2.style.flexWrap = "wrap";
  ui2.style.zoom = "0.05";
  for (let i = 0;i < spriteSheet.count; i++) {
    const sprite = spriteSheet.getSprite(i);
    const div = sprite.generateDiv();
    div.id = `sprite-${i}`;
    div.style.border = "20px solid #00000000";
    div.addEventListener("mousedown", () => {
      socketClient.self.setData("selected", i);
      selectedTime = Date.now();
    });
    ui2.appendChild(div);
  }
  for (let tag of spriteSheet.getTags()) {
    const sprite = spriteSheet.getTaggedSprite(tag.name);
    const div = sprite.generateDiv();
    div.style.border = "20px solid #00000000";
    div.id = `sprite-${tag.name}`;
    div.addEventListener("mousedown", () => {
      socketClient.self.setData("selected", tag.name);
      selectedTime = Date.now();
    });
    ui2.appendChild(div);
  }
  document.addEventListener("mouseup", (event) => {
    const selected = socketClient.self.state.selected;
    if (selected !== undefined && socketClient.self.state.isoCursor && Date.now() - selectedTime > 300) {
      insertInIsoWorld(selected, socketClient.self.state.isoCursor[0], socketClient.self.state.isoCursor[1]);
      socketClient.self.setData("selected", undefined);
    }
  });
  handleUsersChanged((clientId, _isSelf, observers) => {
    observers.add(socketClient.observe(`clients/${clientId}/selected`).onChange((selected, previous) => {
      const previousSelected = document.getElementById(`sprite-${previous}`);
      if (previousSelected) {
        previousSelected.style.border = "20px solid #00000000";
      }
      const selectedDiv = document.getElementById(`sprite-${selected}`);
      if (selectedDiv) {
        const selectedBySelf = socketClient.self.state.selected === selected;
        const color = selectedBySelf ? "red" : "gray";
        const dashed = !selectedBySelf ? "dashed" : "solid";
        selectedDiv.style.border = `20px ${dashed} ${color}`;
        const sprite = isNaN(selected) ? spriteSheet.getTaggedSprite(selected) : spriteSheet.getSprite(parseInt(selected));
        getDraggedItem(clientId).replaceChildren(sprite.generateDiv());
      }
    })).add(trackCursorObserver(clientId, (cursor, selected) => {
      const draggedItem = getDraggedItem(clientId);
      if (!cursor || selected === undefined) {
        socketClient.self.setData("isoCursor", undefined);
        return;
      }
      const [x, y11] = cursor;
      socketClient.self.setData("isoCursor", viewPositionToGrid(x, y11));
      draggedItem.style.display = "";
    }, [`clients/${clientId}/selected`])).add(trackIsoCursorObserver(clientId, (cursor) => {
      const draggedItem = getDraggedItem(clientId);
      if (!cursor) {
        draggedItem.style.display = "none";
        return;
      }
      draggedItem.style.display = "";
      const [x, y11] = gridPositionToView(cursor[0], cursor[1]);
      draggedItem.style.left = `${x - 40}px`;
      draggedItem.style.top = `${y11 - 40}px`;
    }));
  }, (clientId) => {
    const client = document.querySelector(`#client-${clientId}`);
    if (client) {
      client.style.transition = "opacity 0.3s";
      client.style.opacity = "0";
      setTimeout(() => {
        client.remove();
      }, 300);
    }
  });
  function trackIsoWorldObserver() {
    socketClient.observe("iso/world/~{keys}").onElementsAdded((keys) => {
      keys?.forEach((uid) => {
        const { type, x, y: y11 } = socketClient.state.iso.world[uid];
        const sprite = spriteSheet.getTaggedSprite(type) ?? spriteSheet.getSprite(type);
        const div = sprite.generateDiv();
        const [viewX, viewY] = gridPositionToView(x, y11);
        div.id = `elem-${uid}`;
        div.style.position = "absolute";
        div.style.left = `${viewX - 40}px`;
        div.style.top = `${viewY - 40}px`;
        div.style.transform = "scale(0.15)";
        div.style.transformOrigin = "top left";
        div.addEventListener("mousedown", () => {
          socketClient.self.setData("selected", type);
          selectedTime = Date.now();
          socketClient.self.setData("cursor", [x, y11]);
          socketClient.setData(`iso/world/${uid}`, undefined);
        });
        document.body.appendChild(div);
      });
    }).onElementsDeleted((keys) => {
      keys?.forEach((uid) => {
        const div = document.getElementById(`elem-${uid}`);
        if (div) {
          div.remove();
        }
      });
    });
  }
  trackIsoWorldObserver();
}
function insertInIsoWorld(type, x, y11) {
  const uid = Math.random().toString(36).substring(3);
  socketClient.setData(`iso/world/${uid}`, { type, x, y: y11 });
}

// src/index.ts
var name;
function randomName() {
  return name ?? (name = "napl-" + Math.random().toString(36).substring(7));
}
var EMOJIS = [
  "\uD83D\uDC35",
  "\uD83D\uDC12",
  "\uD83E\uDD8D",
  "\uD83E\uDDA7",
  "\uD83D\uDC36",
  "\uD83D\uDC15",
  "\uD83E\uDDAE",
  "\uD83D\uDC15‍\uD83E\uDDBA",
  "\uD83D\uDC29",
  "\uD83D\uDC3A",
  "\uD83E\uDD8A",
  "\uD83E\uDD9D",
  "\uD83D\uDC31",
  "\uD83D\uDC08",
  "\uD83D\uDC08‍⬛",
  "\uD83E\uDD81",
  "\uD83D\uDC2F",
  "\uD83D\uDC05",
  "\uD83D\uDC06",
  "\uD83D\uDC34",
  "\uD83E\uDECE",
  "\uD83E\uDECF",
  "\uD83D\uDC0E",
  "\uD83E\uDD84",
  "\uD83E\uDD93",
  "\uD83E\uDD8C",
  "\uD83E\uDDAC",
  "\uD83D\uDC2E",
  "\uD83D\uDC02",
  "\uD83D\uDC03",
  "\uD83D\uDC04",
  "\uD83D\uDC37",
  "\uD83D\uDC16",
  "\uD83D\uDC17",
  "\uD83D\uDC3D",
  "\uD83D\uDC0F",
  "\uD83D\uDC11",
  "\uD83D\uDC10",
  "\uD83D\uDC2A",
  "\uD83D\uDC2B",
  "\uD83E\uDD99",
  "\uD83E\uDD92",
  "\uD83D\uDC18",
  "\uD83E\uDDA3",
  "\uD83E\uDD8F",
  "\uD83E\uDD9B",
  "\uD83D\uDC2D",
  "\uD83D\uDC01",
  "\uD83D\uDC00",
  "\uD83D\uDC39",
  "\uD83D\uDC30",
  "\uD83D\uDC07",
  "\uD83D\uDC3F️",
  "\uD83E\uDDAB",
  "\uD83E\uDD94",
  "\uD83E\uDD87",
  "\uD83D\uDC3B",
  "\uD83D\uDC3B‍❄️",
  "\uD83D\uDC28",
  "\uD83D\uDC3C",
  "\uD83E\uDDA5",
  "\uD83E\uDDA6",
  "\uD83E\uDDA8",
  "\uD83E\uDD98",
  "\uD83E\uDDA1",
  "\uD83D\uDC3E",
  "\uD83E\uDD83",
  "\uD83D\uDC14",
  "\uD83D\uDC13",
  "\uD83D\uDC23",
  "\uD83D\uDC24",
  "\uD83D\uDC25",
  "\uD83D\uDC26",
  "\uD83D\uDC27",
  "\uD83D\uDD4A️",
  "\uD83E\uDD85",
  "\uD83E\uDD86",
  "\uD83E\uDDA2",
  "\uD83E\uDD89",
  "\uD83E\uDDA4",
  "\uD83E\uDEB6",
  "\uD83E\uDDA9",
  "\uD83E\uDD9A",
  "\uD83E\uDD9C",
  "\uD83E\uDEBD",
  "\uD83D\uDC26‍⬛",
  "\uD83E\uDEBF",
  "\uD83D\uDC26‍\uD83D\uDD25",
  "\uD83E\uDEB9",
  "\uD83E\uDEBA",
  "\uD83D\uDC38",
  "\uD83D\uDC0A",
  "\uD83D\uDC22",
  "\uD83E\uDD8E",
  "\uD83D\uDC0D",
  "\uD83D\uDC32",
  "\uD83D\uDC09",
  "\uD83E\uDD95",
  "\uD83E\uDD96",
  "\uD83D\uDC33",
  "\uD83D\uDC0B",
  "\uD83D\uDC2C",
  "\uD83E\uDDAD",
  "\uD83D\uDC1F",
  "\uD83D\uDC20",
  "\uD83D\uDC21",
  "\uD83E\uDD88",
  "\uD83D\uDC19",
  "\uD83D\uDC1A",
  "\uD83E\uDEB8",
  "\uD83E\uDEBC",
  "\uD83E\uDD80",
  "\uD83E\uDD9E",
  "\uD83E\uDD90",
  "\uD83E\uDD91",
  "\uD83E\uDDAA",
  "\uD83D\uDC0C",
  "\uD83E\uDD8B",
  "\uD83D\uDC1B",
  "\uD83D\uDC1C",
  "\uD83D\uDC1D",
  "\uD83E\uDEB2",
  "\uD83D\uDC1E",
  "\uD83E\uDD97",
  "\uD83E\uDEB3",
  "\uD83D\uDD77️",
  "\uD83D\uDD78️",
  "\uD83E\uDD82",
  "\uD83E\uDD9F",
  "\uD83E\uDEB0",
  "\uD83E\uDEB1",
  "\uD83E\uDDA0",
  "\uD83D\uDC90",
  "\uD83C\uDF38",
  "\uD83D\uDCAE",
  "\uD83E\uDEB7",
  "\uD83C\uDFF5️",
  "\uD83C\uDF39",
  "\uD83E\uDD40",
  "\uD83C\uDF3A",
  "\uD83C\uDF3B",
  "\uD83C\uDF3C",
  "\uD83C\uDF37",
  "\uD83E\uDEBB",
  "\uD83C\uDF31",
  "\uD83E\uDEB4",
  "\uD83C\uDF32",
  "\uD83C\uDF33",
  "\uD83C\uDF34",
  "\uD83C\uDF35",
  "\uD83C\uDF3E",
  "\uD83C\uDF3F",
  "☘️",
  "\uD83C\uDF40",
  "\uD83C\uDF41",
  "\uD83C\uDF42",
  "\uD83C\uDF43",
  "\uD83C\uDF44",
  "\uD83E\uDEA8",
  "\uD83E\uDEB5"
];
var emoji;
function randomEmoji(forceRandom) {
  return (forceRandom ? null : emoji) ?? (emoji = EMOJIS[Math.floor(Math.random() * EMOJIS.length)]);
}
var config = await fetch("../config.json").then((response) => response.json());
function getSocketClient() {
  const urlVars = new URLSearchParams(location.search);
  const room = urlVars.get("room") ?? undefined;
  return provideSocketClient({ host: config.websocketHost ?? location.host, room });
}
var socketClient = getSocketClient();
window.socketClient = socketClient;
function stringify2(obj) {
  return stringify(obj, {
    maxLength: 80,
    replacer: (key, value) => {
      if (value instanceof Blob) {
        return `Blob(${value.size})`;
      }
      return value;
    }
  });
}
async function getSpriteSheet(path) {
  const spritesheetDefinition = await y10(path);
  return new u(spritesheetDefinition);
}
function introduceName() {
  socketClient.observe("clients/~{self}").onChange(() => {
    socketClient.self.setData("name", randomName());
    socketClient.self.setData("emoji", randomEmoji());
  });
}
function displayUsers(userDiv) {
  handleUsersChanged((clientId, isSelf, observers) => {
    observers.add(socketClient.observe([`clients/${clientId}/name`, `clients/${clientId}/emoji`]).onChange((values) => {
      const [name2, emoji2] = values;
      client.textContent = `${emoji2} ${name2}`;
    }));
    const client = document.createElement("div");
    client.id = `div-${clientId}`;
    client.textContent = clientId;
    if (isSelf) {
      client.style.fontWeight = "bold";
      client.style.backgroundColor = "yellow";
      userDiv.prepend(client);
    } else {
      userDiv.appendChild(client);
    }
  }, (clientId) => {
    const client = document.querySelector(`#div-${clientId}`);
    if (client) {
      client.style.transition = "opacity 0.3s";
      client.style.opacity = "0";
      setTimeout(() => {
        client.remove();
      }, 300);
    }
  });
}
function trackCursor({ exclude = [] } = {}) {
  document.addEventListener("mousemove", ({ pageX, pageY, target }) => {
    if (exclude.indexOf(target?.id ?? "") >= 0) {
      socketClient.self.setData("cursor", undefined);
      return;
    }
    socketClient.self.setData("cursor", [pageX, pageY]);
  });
  document.addEventListener("mouseout", ({ target }) => {
    socketClient.self.setData("cursor", undefined);
  });
}
function handleUsersChanged(onUserAdded, onUserRemoved) {
  return socketClient.observe("clients/~{keys}").onElementsAdded((clientIds) => {
    clientIds?.forEach((clientId) => {
      const isSelf = clientId === socketClient.clientId;
      const observers = new Set;
      onUserAdded(clientId, isSelf, observers);
      observers.add(socketClient.observe(`clients/${clientId}`).onChange((client) => {
        if (client === undefined) {
          observers.forEach((observer) => observer.close());
        }
      }));
    });
  }).onElementsDeleted((clientIds) => {
    clientIds?.forEach((clientId) => onUserRemoved?.(clientId));
  });
}
function trackCursorObserver(clientId, callback, extraObservations = []) {
  return socketClient.observe([`clients/${clientId}/cursor`, ...extraObservations]).onChange((values) => {
    const [cursor, ...extra] = values ?? [];
    if (!cursor) {
      callback();
      return;
    }
    callback(cursor, ...extra);
  });
}
function trackIsoCursorObserver(clientId, callback, extraObservations = []) {
  return socketClient.observe([`clients/${clientId}/isoCursor`, ...extraObservations]).onChange((values) => {
    const [cursor, ...extra] = values ?? [];
    if (!cursor) {
      callback();
      return;
    }
    callback(cursor, ...extra);
  });
}
function hookDiv(div) {
  hookupDiv(div, socketClient);
}
export {
  trackIsoCursorObserver,
  trackCursorObserver,
  trackCursor,
  stringify2 as stringify,
  socketClient,
  randomName,
  randomEmoji,
  introduceName,
  insertInIsoWorld,
  hookDiv,
  handleUsersChanged,
  getSpriteSheet,
  displayUsers,
  displayIsoUI
};

//# debugId=61A011F97464B2AD64756E2164756E21
